{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"CryptoService","text":"<p>\u4e00\u4e2a\u4e13\u4e1a\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u670d\u52a1\u5e93\uff0c\u4e13\u6ce8\u4e8eBinance\u6570\u636e\u7684\u83b7\u53d6\u3001\u5b58\u50a8\u548c\u5206\u6790\u3002</p>"},{"location":"#_1","title":"\u2728 \u4e3b\u8981\u7279\u6027","text":"<ul> <li>\ud83d\udcb9 \u5f02\u6b65\u9ad8\u6027\u80fd: \u5168\u9762\u652f\u6301async/await\uff0c\u9ad8\u6548\u5904\u7406\u5927\u91cf\u6570\u636e</li> <li>\ud83d\udcca \u5b8c\u6574\u6570\u636e: \u73b0\u8d27\u3001\u6c38\u7eed\u5408\u7ea6\u3001\u5386\u53f2K\u7ebf\u3001\u5b9e\u65f6WebSocket</li> <li>\ud83c\udfaf Universe\u7b56\u7565: \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u548c\u91cd\u5e73\u8861</li> <li>\ud83d\udcbe \u667a\u80fd\u5b58\u50a8: SQLite\u6570\u636e\u5e93 + \u6587\u4ef6\u5bfc\u51fa\uff0c\u652f\u6301\u589e\u91cf\u66f4\u65b0</li> <li>\ud83d\udd27 \u5f00\u7bb1\u5373\u7528: \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a\u3001\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236</li> </ul>"},{"location":"#5","title":"\ud83d\ude80 5\u5206\u949f\u4e0a\u624b","text":""},{"location":"#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install cryptoservice python-dotenv\n</code></pre>"},{"location":"#_3","title":"\u914d\u7f6e","text":"<pre><code># .env \u6587\u4ef6\nBINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre>"},{"location":"#_4","title":"\u83b7\u53d6\u5b9e\u65f6\u4ef7\u683c","text":"<pre><code>import asyncio\nimport os\nfrom cryptoservice import MarketDataService\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"BTC\u4ef7\u683c: ${ticker.last_price}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"#_5","title":"\ud83d\udcd6 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"#universe","title":"\ud83c\udfaf Universe\u7b56\u7565","text":"<p>\u52a8\u6001\u9009\u62e9\u4ea4\u6613\u5bf9\uff0c\u6839\u636e\u6210\u4ea4\u91cf\u7b49\u6307\u6807\u5b9a\u671f\u91cd\u5e73\u8861\u6295\u8d44\u7ec4\u5408\u3002</p>"},{"location":"#_6","title":"\ud83d\udce5 \u6570\u636e\u4e0b\u8f7d","text":"<p>\u6279\u91cf\u4e0b\u8f7d\u5386\u53f2K\u7ebf\u3001\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u7b49\u5e02\u573a\u6307\u6807\u6570\u636e\u3002</p>"},{"location":"#_7","title":"\ud83d\udce4 \u6570\u636e\u5bfc\u51fa","text":"<p>\u5c06\u6570\u636e\u5bfc\u51fa\u4e3aNumPy\u3001CSV\u3001Parquet\u683c\u5f0f\uff0c\u4fbf\u4e8e\u5206\u6790\u548c\u673a\u5668\u5b66\u4e60\u3002</p>"},{"location":"#_8","title":"\ud83c\udf10 \u5b9e\u65f6\u6570\u636e","text":"<p>WebSocket\u63a5\u6536Binance\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u6d41\u3002</p>"},{"location":"#_9","title":"\ud83d\udd17 \u5feb\u901f\u5bfc\u822a","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb - 5\u5206\u949f\u4e0a\u624b\u6307\u5357</li> <li>Universe\u7b56\u7565 - \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9</li> <li>\u6570\u636e\u5bfc\u51fa - \u5bfc\u51fa\u6570\u636e\u8fdb\u884c\u5206\u6790</li> <li>\u5b9e\u65f6\u6570\u636e - WebSocket\u5b9e\u65f6\u884c\u60c5</li> </ul>"},{"location":"#_10","title":"\ud83d\udee0\ufe0f \u5f00\u53d1\u73af\u5883","text":"<pre><code># \u514b\u9686\u9879\u76ee\ngit clone https://github.com/ppmina/Xdata.git\ncd Xdata\n\n# \u5b89\u88c5\u4f9d\u8d56\nuv pip install -e \".[dev-all]\"\n\n# \u8fd0\u884c\u6d4b\u8bd5\npytest\n\n# \u6784\u5efa\u6587\u6863\nmkdocs serve\n</code></pre>"},{"location":"#_11","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>MIT License</p>"},{"location":"export/","title":"\u6570\u636e\u5bfc\u51fa","text":"<p>\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5bfc\u51fa\u4e3a\u5206\u6790\u53cb\u597d\u7684\u683c\u5f0f\u3002</p>"},{"location":"export/#_2","title":"\ud83d\udce4 \u57fa\u672c\u5bfc\u51fa","text":"<p>\u57fa\u4e8e <code>demo/export_data.py</code>\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import Freq\n\nasync def export_data():\n    async with Database(\"./universe.db\") as db:\n        # \u5bfc\u51fa\u4e3aNumPy\u683c\u5f0f\uff08\u63a8\u8350\uff09\n        await db.export_to_numpy(\n            symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1,\n            output_path=\"./exports\"\n        )\n\n        # \u5bfc\u51fa\u4e3aCSV\u683c\u5f0f\n        await db.export_to_csv(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1,\n            output_path=\"./data.csv\"\n        )\n\n        print(\"\u2705 \u5bfc\u51fa\u5b8c\u6210\")\n\nasyncio.run(export_data())\n</code></pre>"},{"location":"export/#_3","title":"\ud83d\udcca \u5bfc\u51fa\u683c\u5f0f\u8bf4\u660e","text":""},{"location":"export/#numpy","title":"NumPy\u683c\u5f0f","text":"<ul> <li>\u9002\u5408\u673a\u5668\u5b66\u4e60\u548c\u6570\u503c\u8ba1\u7b97</li> <li>\u6587\u4ef6\u5c0f\uff0c\u52a0\u8f7d\u5feb</li> <li>\u4fdd\u6301\u6570\u636e\u7c7b\u578b\u7cbe\u5ea6</li> </ul>"},{"location":"export/#csv","title":"CSV\u683c\u5f0f","text":"<ul> <li>\u901a\u7528\u683c\u5f0f\uff0cExcel\u53ef\u6253\u5f00</li> <li>\u6613\u4e8e\u67e5\u770b\u548c\u8c03\u8bd5</li> <li>\u9002\u5408\u5c0f\u6570\u636e\u91cf</li> </ul>"},{"location":"export/#parquet","title":"Parquet\u683c\u5f0f","text":"<ul> <li>\u5217\u5f0f\u5b58\u50a8\uff0c\u538b\u7f29\u7387\u9ad8</li> <li>\u9002\u5408\u5927\u6570\u636e\u5206\u6790</li> <li>Pandas\u539f\u751f\u652f\u6301</li> </ul> <pre><code># \u5bfc\u51fa\u4e3aParquet\nawait db.export_to_parquet(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    output_path=\"./data.parquet\"\n)\n</code></pre>"},{"location":"export/#_4","title":"\ud83d\udd0d \u6570\u636e\u5b57\u6bb5","text":""},{"location":"export/#k","title":"K\u7ebf\u6570\u636e","text":"<ul> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>high_price</code>: \u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: \u6700\u4f4e\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>volume</code>: \u6210\u4ea4\u91cf</li> <li><code>quote_volume</code>: \u6210\u4ea4\u989d</li> </ul>"},{"location":"export/#_5","title":"\u5e02\u573a\u6307\u6807","text":"<ul> <li><code>funding_rate</code>: \u8d44\u91d1\u8d39\u7387</li> <li><code>open_interest</code>: \u6301\u4ed3\u91cf</li> <li><code>long_short_ratio</code>: \u591a\u7a7a\u6bd4\u4f8b</li> </ul>"},{"location":"export/#_6","title":"\ud83d\udcc1 \u5bfc\u51fa\u6587\u4ef6\u7ed3\u6784","text":"<pre><code>./exports/\n\u251c\u2500\u2500 BTCUSDT_klines.npy      # BTC K\u7ebf\u6570\u636e\n\u251c\u2500\u2500 BTCUSDT_funding.npy     # BTC \u8d44\u91d1\u8d39\u7387\n\u251c\u2500\u2500 ETHUSDT_klines.npy      # ETH K\u7ebf\u6570\u636e\n\u2514\u2500\u2500 metadata.json           # \u5143\u6570\u636e\u4fe1\u606f\n</code></pre>"},{"location":"export/#_7","title":"\ud83d\udcbb \u4f7f\u7528\u5bfc\u51fa\u6570\u636e","text":""},{"location":"export/#numpy_1","title":"\u52a0\u8f7dNumPy\u6570\u636e","text":"<pre><code>import numpy as np\nimport pandas as pd\n\n# \u52a0\u8f7dK\u7ebf\u6570\u636e\nklines = np.load(\"./exports/BTCUSDT_klines.npy\")\nprint(f\"\u6570\u636e\u5f62\u72b6: {klines.shape}\")\n\n# \u8f6c\u6362\u4e3aDataFrame\ndf = pd.DataFrame(klines, columns=[\n    'timestamp', 'open_price', 'high_price', 'low_price',\n    'close_price', 'volume', 'quote_volume'\n])\n\n# \u8f6c\u6362\u65f6\u95f4\u6233\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\nprint(df.head())\n</code></pre>"},{"location":"export/#csv_1","title":"\u52a0\u8f7dCSV\u6570\u636e","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"./data.csv\")\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\nprint(df.head())\n</code></pre>"},{"location":"export/#universe","title":"\ud83d\udd27 \u6309Universe\u5bfc\u51fa","text":"<p>\u6309Universe\u5feb\u7167\u5206\u522b\u5bfc\u51fa\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import UniverseDefinition, Freq\n\nasync def export_by_universe():\n    # \u52a0\u8f7dUniverse\n    universe_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n    async with Database(\"./universe.db\") as db:\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u5bfc\u51fa\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            print(f\"\u5bfc\u51fa\u5feb\u7167 {i+1}: {snapshot.effective_date}\")\n\n            await db.export_to_numpy(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                freq=Freq.h1,\n                output_path=f\"./exports/snapshot_{snapshot.effective_date}\"\n            )\n\n    print(\"\u2705 \u6309Universe\u5bfc\u51fa\u5b8c\u6210\")\n\nasyncio.run(export_by_universe())\n</code></pre>"},{"location":"export/#_8","title":"\ud83d\udcc8 \u7b80\u5355\u5206\u6790\u793a\u4f8b","text":"<pre><code>import pandas as pd\nimport numpy as np\n\n# \u52a0\u8f7d\u6570\u636e\ndf = pd.read_csv(\"./data.csv\")\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\n\n# \u57fa\u672c\u7edf\u8ba1\nprint(\"\ud83d\udcca \u57fa\u672c\u7edf\u8ba1:\")\nprint(f\"   \u6570\u636e\u884c\u6570: {len(df)}\")\nprint(f\"   \u4ef7\u683c\u8303\u56f4: ${df['low_price'].min():.2f} - ${df['high_price'].max():.2f}\")\nprint(f\"   \u5e73\u5747\u6210\u4ea4\u91cf: {df['volume'].mean():.2f}\")\n\n# \u8ba1\u7b97\u6536\u76ca\u7387\ndf['returns'] = df['close_price'].pct_change()\nprint(f\"   \u5e73\u5747\u6536\u76ca\u7387: {df['returns'].mean():.4f}\")\nprint(f\"   \u6536\u76ca\u7387\u6807\u51c6\u5dee: {df['returns'].std():.4f}\")\n\n# \u79fb\u52a8\u5e73\u5747\u7ebf\ndf['ma_20'] = df['close_price'].rolling(20).mean()\ndf['signal'] = np.where(df['close_price'] &gt; df['ma_20'], 1, -1)\n\nprint(\"\ud83d\udcc8 \u6280\u672f\u6307\u6807:\")\nprint(f\"   \u5f53\u524d\u4ef7\u683c: ${df['close_price'].iloc[-1]:.2f}\")\nprint(f\"   MA20: ${df['ma_20'].iloc[-1]:.2f}\")\nprint(f\"   \u4ea4\u6613\u4fe1\u53f7: {'\u4e70\u5165' if df['signal'].iloc[-1] == 1 else '\u5356\u51fa'}\")\n</code></pre>"},{"location":"quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"quickstart/#_2","title":"\ud83d\udce6 \u5b89\u88c5","text":"<pre><code>pip install cryptoservice python-dotenv\n</code></pre>"},{"location":"quickstart/#api","title":"\ud83d\udd11 \u914d\u7f6eAPI\u5bc6\u94a5","text":"<p>\u521b\u5efa <code>.env</code> \u6587\u4ef6\uff1a</p> <pre><code>BINANCE_API_KEY=your_binance_api_key\nBINANCE_API_SECRET=your_binance_api_secret\n</code></pre>"},{"location":"quickstart/#5","title":"\ud83d\ude80 5\u5206\u949f\u4e0a\u624b","text":""},{"location":"quickstart/#1","title":"1. \u83b7\u53d6\u5b9e\u65f6\u884c\u60c5","text":"<pre><code>import asyncio\nimport os\nfrom cryptoservice import MarketDataService\nfrom dotenv import load_dotenv\n\nasync def get_prices():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        # \u83b7\u53d6BTC\u4ef7\u683c\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"BTC: ${ticker.last_price}\")\n\nasyncio.run(get_prices())\n</code></pre>"},{"location":"quickstart/#2","title":"2. \u4e0b\u8f7d\u5386\u53f2\u6570\u636e","text":"<pre><code>import asyncio\nfrom cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nasync def download_data():\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        # \u4e0b\u8f7d1\u5929\u7684\u5c0f\u65f6\u6570\u636e\n        report = await service.get_perpetual_data(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            db_path=\"./market.db\",\n            interval=Freq.h1\n        )\n\n        print(f\"\u4e0b\u8f7d\u5b8c\u6210: {report.successful_downloads} \u4e2a\u6587\u4ef6\")\n\nasyncio.run(download_data())\n</code></pre>"},{"location":"quickstart/#3","title":"3. \u67e5\u8be2\u6570\u636e","text":"<pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import Freq\n\nasync def query_data():\n    async with Database(\"./market.db\") as db:\n        df = await db.select_klines(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1\n        )\n\n        print(f\"\u67e5\u8be2\u5230 {len(df)} \u6761\u6570\u636e\")\n        print(df.head())\n\nasyncio.run(query_data())\n</code></pre>"},{"location":"quickstart/#_3","title":"\u2705 \u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>import asyncio\nfrom cryptoservice import MarketDataService\n\nasync def test():\n    # \u6d4b\u8bd5API\u8fde\u63a5\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"\u2705 \u8fde\u63a5\u6210\u529f! BTC\u4ef7\u683c: ${ticker.last_price}\")\n\nasyncio.run(test())\n</code></pre>"},{"location":"quickstart/#_4","title":"\ud83d\udd17 \u4e0b\u4e00\u6b65","text":"<ul> <li>Universe\u7b56\u7565 - \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9</li> <li>\u6570\u636e\u5bfc\u51fa - \u5bfc\u51fa\u6570\u636e\u8fdb\u884c\u5206\u6790</li> <li>\u5b9e\u65f6\u6570\u636e - WebSocket\u5b9e\u65f6\u884c\u60c5</li> </ul>"},{"location":"universe/","title":"Universe\u7b56\u7565","text":"<p>Universe\u662f\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\uff0c\u6839\u636e\u6210\u4ea4\u91cf\u7b49\u6307\u6807\u5b9a\u671f\u91cd\u65b0\u9009\u62e9\u4ea4\u6613\u5bf9\u3002</p>"},{"location":"universe/#_1","title":"\ud83c\udfd7\ufe0f \u67b6\u6784\u8bbe\u8ba1","text":""},{"location":"universe/#_2","title":"\u6838\u5fc3\u7ec4\u4ef6","text":"<pre><code>graph TB\n    A[MarketDataService] --&gt; B[UniverseManager]\n    B --&gt; C[Binance API Client]\n    B --&gt; D[TimeRangeProcessor]\n    B --&gt; E[RateLimitManager]\n\n    F[UniverseDefinition] --&gt; G[UniverseSnapshot[]]\n    F --&gt; H[UniverseConfig]\n\n    B --&gt; F\n    G --&gt; I[JSON File]\n\n    subgraph \"\u6570\u636e\u6a21\u578b\"\n        F\n        G\n        H\n    end\n\n    subgraph \"\u5904\u7406\u5668\"\n        B\n        D\n        E\n    end\n</code></pre>"},{"location":"universe/#_3","title":"\u6570\u636e\u6d41\u67b6\u6784","text":"<ol> <li>\u914d\u7f6e\u9636\u6bb5: \u9a8c\u8bc1\u53c2\u6570\uff0c\u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f</li> <li>\u91cd\u5e73\u8861\u8ba1\u5212: \u6839\u636eT2\u53c2\u6570\u751f\u6210\u5b9a\u671f\u91cd\u9009\u7684\u65f6\u95f4\u5e8f\u5217</li> <li>\u4ea4\u6613\u5bf9\u7b5b\u9009: \u6bcf\u4e2a\u91cd\u5e73\u8861\u65e5\u671f\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</li> <li>\u83b7\u53d6\u53ef\u7528\u6c38\u7eed\u5408\u7ea6\uff08\u6309quote_asset\u8fc7\u6ee4\uff09</li> <li>\u5e94\u7528T3\u8fc7\u6ee4\uff08\u6392\u9664\u65b0\u4e0a\u5e02\u5408\u7ea6\uff09</li> <li>\u8ba1\u7b97T1\u7a97\u53e3\u5185\u7684mean daily amount</li> <li>\u6309\u6210\u4ea4\u91cf\u6392\u5e8f\uff0c\u5e94\u7528top_k/top_ratio\u9009\u62e9</li> <li>\u5feb\u7167\u751f\u6210: \u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u70b9\u521b\u5efaUniverseSnapshot</li> <li>\u6301\u4e45\u5316: \u5e8f\u5217\u5316\u5b8c\u6574\u7684UniverseDefinition\u5230JSON\u6587\u4ef6</li> </ol>"},{"location":"universe/#_4","title":"\u5173\u952e\u7b97\u6cd5","text":""},{"location":"universe/#_5","title":"\u65f6\u95f4\u7a97\u53e3\u8ba1\u7b97","text":"<ul> <li>\u57fa\u51c6\u65e5\u671f: \u91cd\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff08\u907f\u514d\u4f7f\u7528\u6700\u65b0\u6570\u636e\uff09</li> <li>T1\u8ba1\u7b97\u7a97\u53e3: [\u57fa\u51c6\u65e5\u671f-T1\u6708, \u57fa\u51c6\u65e5\u671f]</li> <li>T3\u8fc7\u6ee4\u65e5\u671f: \u57fa\u51c6\u65e5\u671f\u524dT3\u4e2a\u6708</li> </ul>"},{"location":"universe/#_6","title":"\u4ea4\u6613\u5bf9\u9009\u62e9","text":"<pre><code># 1. \u83b7\u53d6\u5386\u53f2\u6210\u4ea4\u91cf\u6570\u636e\nmean_amounts = await fetch_24hr_ticker_data(symbols, t1_window)\n\n# 2. \u6309\u6210\u4ea4\u91cf\u6392\u5e8f\nsorted_symbols = sorted(mean_amounts.items(), key=lambda x: x[1], reverse=True)\n\n# 3. \u5e94\u7528\u9009\u62e9\u7b56\u7565\nif top_ratio:\n    selected_count = int(len(sorted_symbols) * top_ratio)\nelse:\n    selected_count = top_k\n\nuniverse_symbols = [symbol for symbol, _ in sorted_symbols[:selected_count]]\n</code></pre>"},{"location":"universe/#_7","title":"\u5b9e\u73b0\u7ec6\u8282","text":""},{"location":"universe/#_8","title":"\u6838\u5fc3\u7c7b\u7ed3\u6784","text":"<ul> <li><code>UniverseManager</code>: \u6838\u5fc3\u5904\u7406\u5668\uff0c\u534f\u8c03\u6574\u4e2a\u5b9a\u4e49\u6d41\u7a0b</li> <li><code>UniverseDefinition</code>: \u5b8c\u6574universe\u5b9a\u4e49\u7684\u6570\u636e\u5bb9\u5668</li> <li><code>UniverseSnapshot</code>: \u5355\u4e2a\u91cd\u5e73\u8861\u65f6\u70b9\u7684\u5feb\u7167\u6570\u636e</li> <li><code>UniverseConfig</code>: \u53c2\u6570\u914d\u7f6e\u7684\u9a8c\u8bc1\u548c\u5b58\u50a8</li> </ul>"},{"location":"universe/#_9","title":"\u5173\u952e\u65b9\u6cd5\u8c03\u7528\u94fe","text":"<pre><code>MarketDataService.define_universe()\n    \u2514\u2500\u2500 UniverseManager.define_universe()\n        \u251c\u2500\u2500 _generate_rebalance_dates()      # \u751f\u6210\u91cd\u5e73\u8861\u65f6\u95f4\u5e8f\u5217\n        \u2514\u2500\u2500 _calculate_universe_for_date()   # \u4e3a\u6bcf\u4e2a\u65f6\u70b9\u8ba1\u7b97universe\n            \u251c\u2500\u2500 _get_available_symbols_for_period()  # \u83b7\u53d6\u53ef\u7528\u4ea4\u6613\u5bf9\n            \u251c\u2500\u2500 _symbol_exists_before_date()         # T3\u8fc7\u6ee4\n            \u251c\u2500\u2500 _fetch_and_calculate_mean_amounts()  # \u83b7\u53d6\u6210\u4ea4\u91cf\u6570\u636e\n            \u2514\u2500\u2500 _select_top_symbols()               # \u5e94\u7528\u9009\u62e9\u7b56\u7565\n</code></pre>"},{"location":"universe/#_10","title":"\u65f6\u95f4\u5904\u7406\u903b\u8f91","text":"<p>\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u7684\u65f6\u95f4\u8ba1\u7b97\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a - \u91cd\u5e73\u8861\u65e5\u671f: \u6839\u636estart_date\u548cT2\u95f4\u9694\u751f\u6210 - \u6570\u636e\u8ba1\u7b97\u57fa\u51c6: \u91cd\u5e73\u8861\u65e5\u671f - delay_days - T1\u6570\u636e\u7a97\u53e3: [\u57fa\u51c6\u65e5\u671f-T1\u6708, \u57fa\u51c6\u65e5\u671f] - T3\u8fc7\u6ee4\u622a\u6b62: \u57fa\u51c6\u65e5\u671f - T3\u6708</p>"},{"location":"universe/#_11","title":"\ud83c\udfaf \u53c2\u6570\u8be6\u89e3","text":"<ul> <li>t1_months: \u56de\u770b\u671f\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\u7684\u5386\u53f2\u6570\u636e\u7a97\u53e3</li> <li>t2_months: \u91cd\u5e73\u8861\u9891\u7387\uff0c\u63a7\u5236universe\u66f4\u65b0\u95f4\u9694</li> <li>t3_months: \u6700\u5c0f\u5b58\u5728\u65f6\u95f4\uff0c\u6392\u9664\u4e0a\u5e02\u65f6\u95f4\u77ed\u4e8eT3\u7684\u65b0\u5408\u7ea6</li> <li>top_ratio: \u9009\u62e9\u6bd4\u4f8b\uff08\u59820.1\u8868\u793a\u524d10%\uff09\uff0c\u4e0etop_k\u4e92\u65a5</li> <li>top_k: \u56fa\u5b9a\u9009\u62e9\u6570\u91cf\uff0c\u4e0etop_ratio\u4e92\u65a5</li> <li>delay_days: \u6570\u636e\u5ef6\u8fdf\u5929\u6570\uff0c\u907f\u514d\u4f7f\u7528\u6700\u65b0\u4e0d\u7a33\u5b9a\u6570\u636e</li> <li>quote_asset: \u8ba1\u4ef7\u5e01\u79cd\u7b5b\u9009\uff08\u5982\"USDT\"\uff09</li> </ul>"},{"location":"universe/#universe_1","title":"\ud83d\udcca \u5b9a\u4e49Universe","text":"<p>\u57fa\u4e8e <code>demo/define_universe.py</code> \u7684\u5b8c\u6574\u914d\u7f6e\uff1a</p> <pre><code>import asyncio\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nfrom cryptoservice import MarketDataService\n\nasync def create_universe():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    # \u521b\u5efa\u670d\u52a1\n    service = await MarketDataService.create(api_key=api_key, api_secret=api_secret)\n\n    try:\n        # \u5b9a\u4e49Universe\uff08\u5305\u542b\u6240\u6709\u67b6\u6784\u53c2\u6570\uff09\n        universe_def = await service.define_universe(\n            start_date=\"2024-10-01\",\n            end_date=\"2024-10-07\",\n            t1_months=1,                # T1: 1\u4e2a\u6708\u56de\u770b\u671f\u8ba1\u7b97mean daily amount\n            t2_months=1,                # T2: 1\u4e2a\u6708\u91cd\u5e73\u8861\u9891\u7387\n            t3_months=1,                # T3: 1\u4e2a\u6708\u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4\n            top_ratio=0.1,              # \u9009\u62e9\u524d10%\u4ea4\u6613\u5bf9\uff08\u4e0etop_k\u4e92\u65a5\uff09\n            output_path=\"./data/universe.json\",\n            description=f\"Universe demonstration\",\n            delay_days=7,               # \u6570\u636e\u5ef6\u8fdf7\u5929\u907f\u514d\u4e0d\u7a33\u5b9a\u6570\u636e\n            api_delay_seconds=1.0,      # API\u8bf7\u6c42\u95f4\u9694\n            batch_delay_seconds=3.0,    # \u6279\u6b21\u95f4\u5ef6\u8fdf\n            batch_size=10,              # \u6279\u5904\u7406\u5927\u5c0f\n            quote_asset=\"USDT\"          # \u53ea\u5904\u7406USDT\u6c38\u7eed\u5408\u7ea6\n        )\n\n        print(f\"\u2705 Universe\u521b\u5efa\u5b8c\u6210:\")\n        print(f\"   - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\n        print(f\"   - \u914d\u7f6e: T1={universe_def.config.t1_months}\u6708, \"\n              f\"T2={universe_def.config.t2_months}\u6708, T3={universe_def.config.t3_months}\u6708\")\n        print(f\"   - \u9009\u62e9\u7b56\u7565: Top {universe_def.config.top_ratio*100}%\")\n\n    except Exception as e:\n        print(f\"\u274c Universe\u5b9a\u4e49\u5931\u8d25: {e}\")\n\nasyncio.run(create_universe())\n</code></pre>"},{"location":"universe/#_12","title":"\u914d\u7f6e\u8bf4\u660e","text":"<p>\u4ee5\u4e0a\u793a\u4f8b\u5c55\u793a\u4e86\u5b8c\u6574\u7684\u67b6\u6784\u53c2\u6570\u914d\u7f6e\uff1a</p> <ul> <li>\u65f6\u95f4\u53c2\u6570: T1/T2/T3\u63a7\u5236\u6570\u636e\u7a97\u53e3\u548c\u91cd\u5e73\u8861\u9891\u7387</li> <li>\u9009\u62e9\u7b56\u7565: top_ratio=0.1\u9009\u62e9\u6210\u4ea4\u91cf\u524d10%\u7684\u4ea4\u6613\u5bf9</li> <li>API\u63a7\u5236: \u901a\u8fc7delay\u548cbatch\u53c2\u6570\u63a7\u5236\u8bf7\u6c42\u9891\u7387\uff0c\u907f\u514d\u9650\u6d41</li> <li>\u8f93\u51fa\u63a7\u5236: \u6307\u5b9aJSON\u6587\u4ef6\u8def\u5f84\u548c\u63cf\u8ff0\u4fe1\u606f</li> </ul>"},{"location":"universe/#universe_2","title":"\ud83d\udce5 \u4e0b\u8f7dUniverse\u6570\u636e","text":"<p>\u57fa\u4e8e <code>demo/download_data.py</code>\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nasync def download_universe_data():\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        await service.download_universe_data(\n            universe_file=\"./universe.json\",\n            db_path=\"./universe.db\",\n            interval=Freq.h1,\n            max_workers=2,\n            download_market_metrics=True,  # \u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u7b49\u6307\u6807\n            incremental=True               # \u589e\u91cf\u4e0b\u8f7d\n        )\n\n    print(\"\u2705 Universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\nasyncio.run(download_universe_data())\n</code></pre>"},{"location":"universe/#universe_3","title":"\ud83d\udd0d \u67e5\u770bUniverse\u5185\u5bb9","text":"<pre><code>import asyncio\nfrom cryptoservice.storage import AsyncMarketDB\nfrom cryptoservice.models import UniverseDefinition\n\nasync def explore_universe():\n    # \u52a0\u8f7dUniverse\u5b9a\u4e49\n    universe_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n    print(f\"\ud83d\udcca Universe\u6982\u51b5:\")\n    print(f\"   - \u65f6\u95f4\u8303\u56f4: {universe_def.config.start_date} ~ {universe_def.config.end_date}\")\n    print(f\"   - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\n\n    # \u663e\u793a\u5404\u5feb\u7167\u7684\u4ea4\u6613\u5bf9\n    for i, snapshot in enumerate(universe_def.snapshots[:3]):  # \u524d3\u4e2a\n        print(f\"   \ud83d\udcc5 \u5feb\u7167{i+1} ({snapshot.effective_date}): {snapshot.symbols}\")\n\n    # \u67e5\u770b\u6570\u636e\u5e93\u4e2d\u7684\u5b9e\u9645\u6570\u636e\n    async with AsyncMarketDB(\"./universe.db\") as db:\n        symbols = await db.get_symbols()\n        print(f\"   \ud83d\udcbe \u6570\u636e\u5e93\u4e2d\u6709 {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\nasyncio.run(explore_universe())\n</code></pre>"},{"location":"universe/#_13","title":"\ud83d\udca1 \u4f7f\u7528\u6280\u5de7","text":""},{"location":"universe/#1","title":"1. \u5c0f\u89c4\u6a21\u6d4b\u8bd5","text":"<pre><code># \u5c0f\u65f6\u95f4\u8303\u56f4\uff0c\u5c11\u91cf\u4ea4\u6613\u5bf9\nuniverse_def = await service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-03\",  # \u53ea\u6d4b\u8bd52\u5929\n    top_ratio=0.05,         # \u53ea\u9009\u524d5%\n    # ...\n)\n</code></pre>"},{"location":"universe/#2","title":"2. \u589e\u91cf\u4e0b\u8f7d","text":"<pre><code># \u91cd\u590d\u8fd0\u884c\u53ea\u4e0b\u8f7d\u7f3a\u5931\u6570\u636e\nawait service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./universe.db\",\n    incremental=True,  # \u5173\u952e\u53c2\u6570\n    # ...\n)\n</code></pre>"},{"location":"universe/#3","title":"3. \u6279\u91cf\u5904\u7406","text":"<pre><code># \u63a7\u5236\u5e76\u53d1\u548c\u5ef6\u8fdf\nawait service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./universe.db\",\n    max_workers=1,      # \u964d\u4f4e\u5e76\u53d1\n    request_delay=2.0,  # \u589e\u52a0\u5ef6\u8fdf\n    # ...\n)\n</code></pre>"},{"location":"universe/#_14","title":"\ud83d\udccb \u8fd0\u884c\u987a\u5e8f","text":"<pre><code># 1. \u5b9a\u4e49Universe\npython -c \"import asyncio; asyncio.run(create_universe())\"\n\n# 2. \u4e0b\u8f7d\u6570\u636e\npython -c \"import asyncio; asyncio.run(download_universe_data())\"\n\n# 3. \u67e5\u770b\u7ed3\u679c\npython -c \"import asyncio; asyncio.run(explore_universe())\"\n</code></pre>"},{"location":"websocket/","title":"\u5b9e\u65f6\u6570\u636e","text":"<p>\u4f7f\u7528WebSocket\u63a5\u6536Binance\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u3002</p>"},{"location":"websocket/#websocket","title":"\ud83c\udf10 \u57fa\u672cWebSocket\u8fde\u63a5","text":"<p>\u57fa\u4e8e <code>demo/websocket.py</code>\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\nfrom rich.console import Console\n\nconsole = Console()\n\nasync def simple_websocket():\n    \"\"\"\u7b80\u5355\u7684\u5b9e\u65f6\u4ef7\u683c\u76d1\u63a7\"\"\"\n\n    symbol = \"btcusdt\"\n    url = f\"wss://stream.binance.com:9443/ws/{symbol}@ticker\"\n\n    console.print(f\"\ud83c\udf10 \u8fde\u63a5\u5230 {symbol.upper()} \u5b9e\u65f6\u4ef7\u683c\u6d41...\")\n\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.ws_connect(url) as ws:\n                console.print(\"\u2705 \u8fde\u63a5\u6210\u529f!\")\n\n                message_count = 0\n                async for msg in ws:\n                    if msg.type == aiohttp.WSMsgType.TEXT:\n                        data = json.loads(msg.data)\n                        message_count += 1\n\n                        # \u89e3\u6790\u4ef7\u683c\u6570\u636e\n                        symbol = data.get('s', 'Unknown')\n                        price = float(data.get('c', 0))\n                        change = float(data.get('P', 0))\n\n                        trend = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n\n                        console.print(\n                            f\"{trend} {symbol}: ${price:,.2f} ({change:+.2f}%)\"\n                        )\n\n                        # \u6f14\u793a\u7528\uff0c10\u6761\u540e\u9000\u51fa\n                        if message_count &gt;= 10:\n                            break\n\n    except Exception as e:\n        console.print(f\"\u274c \u8fde\u63a5\u5931\u8d25: {e}\")\n\n# \u8fd0\u884c\nasyncio.run(simple_websocket())\n</code></pre>"},{"location":"websocket/#k","title":"\ud83d\udcca K\u7ebf\u6570\u636e\u6d41","text":"<p>\u63a5\u6536\u5b9e\u65f6K\u7ebf\u6570\u636e\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\n\nasync def kline_stream():\n    \"\"\"\u63a5\u6536\u5b9e\u65f6K\u7ebf\u6570\u636e\"\"\"\n\n    symbol = \"btcusdt\"\n    url = f\"wss://stream.binance.com:9443/ws/{symbol}@kline_1m\"\n\n    print(f\"\ud83d\udcca \u63a5\u6536 {symbol.upper()} 1\u5206\u949fK\u7ebf\u6570\u636e...\")\n\n    async with aiohttp.ClientSession() as session:\n        async with session.ws_connect(url) as ws:\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n\n                    # \u89e3\u6790K\u7ebf\u6570\u636e\n                    if 'k' in data:\n                        kline = data['k']\n                        symbol = kline['s']\n                        open_price = float(kline['o'])\n                        high_price = float(kline['h'])\n                        low_price = float(kline['l'])\n                        close_price = float(kline['c'])\n                        volume = float(kline['v'])\n                        is_closed = kline['x']  # K\u7ebf\u662f\u5426\u5b8c\u6210\n\n                        status = \"\u2705 \u5b8c\u6210\" if is_closed else \"\ud83d\udd04 \u8fdb\u884c\u4e2d\"\n\n                        print(f\"{symbol} K\u7ebf {status}\")\n                        print(f\"  OHLC: {open_price:.2f} {high_price:.2f} {low_price:.2f} {close_price:.2f}\")\n                        print(f\"  \u6210\u4ea4\u91cf: {volume:.2f}\")\n                        print(\"-\" * 40)\n\nasyncio.run(kline_stream())\n</code></pre>"},{"location":"websocket/#_2","title":"\ud83d\udce1 \u591a\u4ea4\u6613\u5bf9\u76d1\u63a7","text":"<p>\u540c\u65f6\u76d1\u63a7\u591a\u4e2a\u4ea4\u6613\u5bf9\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\n\nasync def multi_symbol_stream():\n    \"\"\"\u591a\u4ea4\u6613\u5bf9\u5b9e\u65f6\u76d1\u63a7\"\"\"\n\n    symbols = [\"btcusdt\", \"ethusdt\", \"bnbusdt\"]\n    streams = [f\"{symbol}@ticker\" for symbol in symbols]\n    stream_string = \"/\".join(streams)\n    url = f\"wss://stream.binance.com:9443/stream?streams={stream_string}\"\n\n    print(f\"\ud83d\udcca \u76d1\u63a7 {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9...\")\n\n    async with aiohttp.ClientSession() as session:\n        async with session.ws_connect(url) as ws:\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n\n                    if 'data' in data:\n                        ticker_data = data['data']\n                        symbol = ticker_data.get('s', '').upper()\n                        price = float(ticker_data.get('c', 0))\n                        change = float(ticker_data.get('P', 0))\n\n                        trend = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n                        print(f\"{trend} {symbol}: ${price:,.4f} ({change:+.2f}%)\")\n\nasyncio.run(multi_symbol_stream())\n</code></pre>"},{"location":"websocket/#_3","title":"\ud83d\udd27 \u8fde\u63a5\u914d\u7f6e","text":""},{"location":"websocket/#_4","title":"\u4f7f\u7528\u4ee3\u7406","text":"<p>\u5982\u679c\u9700\u8981\u4ee3\u7406\u8fde\u63a5\uff1a</p> <pre><code>async def websocket_with_proxy():\n    \"\"\"\u4f7f\u7528\u4ee3\u7406\u7684WebSocket\u8fde\u63a5\"\"\"\n\n    url = \"wss://stream.binance.com:9443/ws/btcusdt@ticker\"\n    proxy = \"http://127.0.0.1:6152\"  # \u66ff\u6362\u4e3a\u4f60\u7684\u4ee3\u7406\u5730\u5740\n\n    connector = aiohttp.TCPConnector(ssl=False)\n\n    async with aiohttp.ClientSession(connector=connector) as session:\n        async with session.ws_connect(\n            url,\n            proxy=proxy,\n            proxy_headers={\"User-Agent\": \"Mozilla/5.0\"}\n        ) as ws:\n            print(\"\u2705 \u901a\u8fc7\u4ee3\u7406\u8fde\u63a5\u6210\u529f\")\n\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n                    # \u5904\u7406\u6570\u636e...\n\nasyncio.run(websocket_with_proxy())\n</code></pre>"},{"location":"websocket/#_5","title":"\u81ea\u52a8\u91cd\u8fde","text":"<pre><code>async def auto_reconnect_websocket():\n    \"\"\"\u5e26\u81ea\u52a8\u91cd\u8fde\u7684WebSocket\"\"\"\n\n    url = \"wss://stream.binance.com:9443/ws/btcusdt@ticker\"\n\n    while True:\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.ws_connect(url) as ws:\n                    print(\"\u2705 WebSocket\u8fde\u63a5\u6210\u529f\")\n\n                    async for msg in ws:\n                        if msg.type == aiohttp.WSMsgType.TEXT:\n                            data = json.loads(msg.data)\n                            # \u5904\u7406\u6570\u636e...\n\n                        elif msg.type == aiohttp.WSMsgType.ERROR:\n                            print(\"\u274c WebSocket\u9519\u8bef\")\n                            break\n\n        except Exception as e:\n            print(f\"\u26a0\ufe0f \u8fde\u63a5\u65ad\u5f00: {e}\")\n            print(\"\ud83d\udd04 5\u79d2\u540e\u91cd\u8fde...\")\n            await asyncio.sleep(5)\n\n# \u8fd0\u884c\uff08Ctrl+C\u505c\u6b62\uff09\nasyncio.run(auto_reconnect_websocket())\n</code></pre>"},{"location":"websocket/#_6","title":"\ud83d\udcbe \u4fdd\u5b58\u5b9e\u65f6\u6570\u636e","text":"<p>\u5c06\u5b9e\u65f6\u6570\u636e\u4fdd\u5b58\u5230\u6587\u4ef6\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\nimport pandas as pd\nfrom datetime import datetime\n\nclass RealTimeDataCollector:\n    def __init__(self):\n        self.data = []\n\n    async def collect_tickers(self, symbols, duration_minutes=5):\n        \"\"\"\u6536\u96c6\u6307\u5b9a\u65f6\u95f4\u7684ticker\u6570\u636e\"\"\"\n\n        streams = [f\"{symbol.lower()}@ticker\" for symbol in symbols]\n        stream_string = \"/\".join(streams)\n        url = f\"wss://stream.binance.com:9443/stream?streams={stream_string}\"\n\n        start_time = datetime.now()\n\n        async with aiohttp.ClientSession() as session:\n            async with session.ws_connect(url) as ws:\n                print(f\"\ud83d\udcca \u5f00\u59cb\u6536\u96c6 {duration_minutes} \u5206\u949f\u6570\u636e...\")\n\n                async for msg in ws:\n                    if msg.type == aiohttp.WSMsgType.TEXT:\n                        data = json.loads(msg.data)\n\n                        if 'data' in data:\n                            ticker_data = data['data']\n\n                            # \u4fdd\u5b58\u6570\u636e\n                            self.data.append({\n                                'timestamp': datetime.now(),\n                                'symbol': ticker_data.get('s'),\n                                'price': float(ticker_data.get('c', 0)),\n                                'change': float(ticker_data.get('P', 0)),\n                                'volume': float(ticker_data.get('v', 0))\n                            })\n\n                            # \u68c0\u67e5\u65f6\u95f4\n                            elapsed = (datetime.now() - start_time).seconds / 60\n                            if elapsed &gt;= duration_minutes:\n                                break\n\n        # \u4fdd\u5b58\u4e3aCSV\n        df = pd.DataFrame(self.data)\n        filename = f\"realtime_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n        df.to_csv(filename, index=False)\n        print(f\"\ud83d\udcbe \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {filename}\")\n        print(f\"\ud83d\udcca \u6536\u96c6\u5230 {len(self.data)} \u6761\u6570\u636e\")\n\n# \u4f7f\u7528\u793a\u4f8b\nasync def collect_data():\n    collector = RealTimeDataCollector()\n    await collector.collect_tickers([\"BTCUSDT\", \"ETHUSDT\"], duration_minutes=2)\n\nasyncio.run(collect_data())\n</code></pre>"},{"location":"websocket/#_7","title":"\ud83d\udccb \u5e38\u7528\u6570\u636e\u6d41","text":"\u6570\u636e\u6d41 URL\u683c\u5f0f \u8bf4\u660e 24hr\u4ef7\u683c\u7edf\u8ba1 <code>{symbol}@ticker</code> \u6700\u5e38\u7528\u7684\u4ef7\u683c\u4fe1\u606f K\u7ebf\u6570\u636e <code>{symbol}@kline_{interval}</code> \u5b9e\u65f6K\u7ebf\uff0cinterval\u59821m,5m,1h \u6df1\u5ea6\u6570\u636e <code>{symbol}@depth{levels}</code> \u8ba2\u5355\u7c3f\u6df1\u5ea6 \u6210\u4ea4\u6570\u636e <code>{symbol}@trade</code> \u5b9e\u65f6\u6210\u4ea4\u8bb0\u5f55 \u805a\u5408\u6210\u4ea4 <code>{symbol}@aggTrade</code> \u805a\u5408\u7684\u6210\u4ea4\u6570\u636e"},{"location":"websocket/#_8","title":"\u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u8fde\u63a5\u9650\u5236: \u5355\u4e2a\u8fde\u63a5\u6700\u591a1024\u4e2a\u6570\u636e\u6d41</li> <li>\u901f\u7387\u9650\u5236: \u6bcf\u79d2\u6700\u591a5\u4e2a\u8fde\u63a5\u8bf7\u6c42</li> <li>\u5fc3\u8df3\u68c0\u6d4b: 24\u5c0f\u65f6\u65e0\u6570\u636e\u4f1a\u81ea\u52a8\u65ad\u5f00</li> <li>\u9519\u8bef\u5904\u7406: \u5fc5\u987b\u5904\u7406\u8fde\u63a5\u65ad\u5f00\u548c\u91cd\u8fde</li> <li>\u8d44\u6e90\u7ba1\u7406: \u53ca\u65f6\u5173\u95ed\u4e0d\u7528\u7684\u8fde\u63a5</li> </ol>"},{"location":"api/data/storage_db/","title":"\u6570\u636e\u5e93\u7ba1\u7406","text":""},{"location":"api/data/storage_db/#cryptoservice.storage.Database","title":"<code>cryptoservice.storage.Database(db_path: str | Path, **options)</code>","text":"<p>\u6570\u636e\u5e93\u4e3b\u5165\u53e3\u7c7b.</p> <p>\u7ec4\u5408\u5404\u4e2a\u4e13\u95e8\u7684\u5b58\u50a8\u5668\u548c\u67e5\u8be2\u5668\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u63a5\u53e3.</p> <p>\u521d\u59cb\u5316\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>str | Path</code> </p> <code>**options</code> <p>\u8fde\u63a5\u6c60\u9009\u9879</p> <p> DEFAULT: <code>{}</code> </p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>def __init__(self, db_path: str | Path, **options):\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        **options: \u8fde\u63a5\u6c60\u9009\u9879\n    \"\"\"\n    self.db_path = Path(db_path)\n\n    # \u57fa\u7840\u8bbe\u65bd\n    self.pool = ConnectionPool(db_path, **options)\n    self.schema = DatabaseSchema()\n\n    # \u5b58\u50a8\u5c42\n    self.kline_store = KlineStore(self.pool)\n    self.funding_store = FundingStore(self.pool)\n    self.interest_store = InterestStore(self.pool)\n    self.ratio_store = RatioStore(self.pool)\n\n    # \u67e5\u8be2\u5c42\n    self.kline_query = KlineQuery(self.pool)\n    self.metrics_query = MetricsQuery(self.pool)\n\n    # \u529f\u80fd\u7ec4\u4ef6\n    self.incremental = IncrementalManager(self.kline_query, self.metrics_query)\n    self.resampler = DataResampler()\n\n    # \u5bfc\u51fa\u5668\n    self.numpy_exporter = NumpyExporter(self.kline_query, self.resampler)\n    self.csv_exporter = CsvExporter(self.kline_query)\n    self.parquet_exporter = ParquetExporter(self.kline_query)\n\n    self._initialized = False\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database-functions","title":"Functions","text":""},{"location":"api/data/storage_db/#cryptoservice.storage.Database.insert_klines","title":"<code>insert_klines(klines: list[PerpetualMarketTicker], freq: Freq, batch_size: int = 1000) -&gt; int</code>  <code>async</code>","text":"<p>\u63d2\u5165K\u7ebf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>klines</code> <p>K\u7ebf\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>list[PerpetualMarketTicker]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>batch_size</code> <p>\u6279\u91cf\u5927\u5c0f</p> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> RETURNS DESCRIPTION <code>int</code> <p>\u63d2\u5165\u7684\u8bb0\u5f55\u6570</p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def insert_klines(self, klines: list[PerpetualMarketTicker], freq: Freq, batch_size: int = 1000) -&gt; int:\n    \"\"\"\u63d2\u5165K\u7ebf\u6570\u636e.\n\n    Args:\n        klines: K\u7ebf\u6570\u636e\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n        batch_size: \u6279\u91cf\u5927\u5c0f\n\n    Returns:\n        \u63d2\u5165\u7684\u8bb0\u5f55\u6570\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.kline_store.insert(klines, freq, batch_size)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.select_klines","title":"<code>select_klines(symbols: list[str], start_time: str, end_time: str, freq: Freq, columns: list[str] | None = None) -&gt; pd.DataFrame</code>  <code>async</code>","text":"<p>\u67e5\u8be2K\u7ebf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>columns</code> <p>\u9700\u8981\u67e5\u8be2\u7684\u5217</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>K\u7ebf\u6570\u636eDataFrame</p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def select_klines(\n    self, symbols: list[str], start_time: str, end_time: str, freq: Freq, columns: list[str] | None = None\n) -&gt; pd.DataFrame:\n    \"\"\"\u67e5\u8be2K\u7ebf\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        columns: \u9700\u8981\u67e5\u8be2\u7684\u5217\n\n    Returns:\n        K\u7ebf\u6570\u636eDataFrame\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.kline_query.select_by_time_range(symbols, start_time, end_time, freq, columns)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_numpy","title":"<code>export_to_numpy(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, target_freq: Freq, chunk_days: int = 30) -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aNumPy\u683c\u5f0f.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> TYPE: <code>Path</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>chunk_days</code> <p>\u5206\u5757\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_numpy(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    target_freq: Freq,\n    chunk_days: int = 30,\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aNumPy\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        target_freq: \u76ee\u6807\u9891\u7387\n        chunk_days: \u5206\u5757\u5929\u6570\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.numpy_exporter.export_klines(\n        symbols, start_time, end_time, freq, output_path, target_freq, chunk_days\n    )\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_csv","title":"<code>export_to_csv(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, chunk_size: int = 100000) -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aCSV\u683c\u5f0f.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> TYPE: <code>Path</code> </p> <code>chunk_size</code> <p>\u5206\u5757\u5927\u5c0f</p> <p> TYPE: <code>int</code> DEFAULT: <code>100000</code> </p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_csv(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    chunk_size: int = 100000,\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aCSV\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        chunk_size: \u5206\u5757\u5927\u5c0f\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.csv_exporter.export_klines(symbols, start_time, end_time, freq, output_path, chunk_size)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_parquet","title":"<code>export_to_parquet(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, compression: Literal['snappy', 'gzip', 'brotli', 'lz4', 'zstd'] = 'snappy') -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aParquet\u683c\u5f0f.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> TYPE: <code>Path</code> </p> <code>compression</code> <p>\u538b\u7f29\u65b9\u5f0f</p> <p> TYPE: <code>Literal['snappy', 'gzip', 'brotli', 'lz4', 'zstd']</code> DEFAULT: <code>'snappy'</code> </p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_parquet(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    compression: Literal[\"snappy\", \"gzip\", \"brotli\", \"lz4\", \"zstd\"] = \"snappy\",\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aParquet\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        compression: \u538b\u7f29\u65b9\u5f0f\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.parquet_exporter.export_klines(symbols, start_time, end_time, freq, output_path, compression)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.plan_kline_download","title":"<code>plan_kline_download(symbols: list[str], start_date: str, end_date: str, freq: Freq) -&gt; dict[str, list[int]]</code>  <code>async</code>","text":"<p>\u5236\u5b9aK\u7ebf\u6570\u636e\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>dict[str, list[int]]</code> <p>\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212</p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def plan_kline_download(\n    self, symbols: list[str], start_date: str, end_date: str, freq: Freq\n) -&gt; dict[str, list[int]]:\n    \"\"\"\u5236\u5b9aK\u7ebf\u6570\u636e\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f\n        end_date: \u7ed3\u675f\u65e5\u671f\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        \u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.incremental.plan_kline_download(symbols, start_date, end_date, freq)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93.</p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>async def close(self):\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93.\"\"\"\n    await self.pool.close()\n    self._initialized = False\n    logger.info(\"\u6570\u636e\u5e93\u5df2\u5173\u95ed\")\n</code></pre>"},{"location":"api/services/market_service/","title":"MarketDataService API \u53c2\u8003","text":"<p>MarketDataService \u662f CryptoService \u7684\u6838\u5fc3\u670d\u52a1\u7c7b\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u529f\u80fd\u3002</p>"},{"location":"api/services/market_service/#_1","title":"\ud83d\udccb \u7c7b\u521d\u59cb\u5316","text":""},{"location":"api/services/market_service/#marketdataserviceapi_key-api_secret","title":"<code>MarketDataService(api_key, api_secret)</code>","text":"<p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> <p>\u53c2\u6570: - <code>api_key</code> (str): Binance API \u5bc6\u94a5 - <code>api_secret</code> (str): Binance API \u5bc6\u94a5</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.services import MarketDataService\n\nservice = MarketDataService(\n    api_key=\"your_api_key\",\n    api_secret=\"your_api_secret\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#_2","title":"\ud83d\udcca \u5b9e\u65f6\u884c\u60c5\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_symbol_tickersymbolnone","title":"<code>get_symbol_ticker(symbol=None)</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str, optional): \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 \"BTCUSDT\"\u3002\u4e3a None \u65f6\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9</p> <p>\u8fd4\u56de\u503c: - <code>SymbolTicker</code> \u6216 <code>list[SymbolTicker]</code>: \u884c\u60c5\u6570\u636e</p> <p>\u793a\u4f8b: <pre><code># \u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"\u4ef7\u683c: {ticker.last_price}\")\n\n# \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\nall_tickers = service.get_symbol_ticker()\nprint(f\"\u603b\u8ba1: {len(all_tickers)} \u4e2a\u4ea4\u6613\u5bf9\")\n</code></pre></p>"},{"location":"api/services/market_service/#get_top_coinslimit50-sort_bysortbyquote_volume-quote_assetnone","title":"<code>get_top_coins(limit=50, sort_by=SortBy.QUOTE_VOLUME, quote_asset=None)</code>","text":"<p>\u83b7\u53d6\u70ed\u95e8\u4ea4\u6613\u5bf9\u6392\u884c\u699c\u3002</p> <p>\u53c2\u6570: - <code>limit</code> (int): \u8fd4\u56de\u6570\u91cf\uff0c\u9ed8\u8ba4 50 - <code>sort_by</code> (SortBy): \u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u6309\u6210\u4ea4\u91cf - <code>quote_asset</code> (str, optional): \u57fa\u51c6\u8d44\u4ea7\u8fc7\u6ee4\uff0c\u5982 \"USDT\"</p> <p>\u8fd4\u56de\u503c: - <code>list[DailyMarketTicker]</code>: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u524d10\u7684USDT\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_market_summaryintervalfreqd1","title":"<code>get_market_summary(interval=Freq.d1)</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u4fe1\u606f\u3002</p> <p>\u53c2\u6570: - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba4\u65e5\u7ebf</p> <p>\u8fd4\u56de\u503c: - <code>dict</code>: \u5305\u542b\u5feb\u7167\u65f6\u95f4\u548c\u5e02\u573a\u6570\u636e\u7684\u5b57\u5178</p> <p>\u793a\u4f8b: <pre><code>summary = service.get_market_summary()\nprint(f\"\u5feb\u7167\u65f6\u95f4: {summary['snapshot_time']}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_3","title":"\ud83d\udcc8 \u5386\u53f2\u6570\u636e\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_historical_klinessymbol-start_time-end_timenone-intervalfreqh1-klines_typehistoricalklinestypespot","title":"<code>get_historical_klines(symbol, start_time, end_time=None, interval=Freq.h1, klines_type=HistoricalKlinesType.SPOT)</code>","text":"<p>\u83b7\u53d6K\u7ebf\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str): \u4ea4\u6613\u5bf9\u540d\u79f0 - <code>start_time</code> (str | datetime): \u5f00\u59cb\u65f6\u95f4 - <code>end_time</code> (str | datetime, optional): \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4 - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>klines_type</code> (HistoricalKlinesType): K\u7ebf\u7c7b\u578b\uff0c\u73b0\u8d27\u6216\u671f\u8d27</p> <p>\u8fd4\u56de\u503c: - <code>list[KlineMarketTicker]</code>: K\u7ebf\u6570\u636e\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import Freq, HistoricalKlinesType\n\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_perpetual_datasymbols-start_time-db_path-end_timenone-intervalfreqm1-max_workers1-max_retries3-progressnone","title":"<code>get_perpetual_data(symbols, start_time, db_path, end_time=None, interval=Freq.m1, max_workers=1, max_retries=3, progress=None)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u3002</p> <p>\u53c2\u6570: - <code>symbols</code> (list[str]): \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>end_time</code> (str, optional): \u7ed3\u675f\u65e5\u671f - <code>interval</code> (Freq): \u6570\u636e\u95f4\u9694\uff0c\u9ed8\u8ba41\u5206\u949f - <code>max_workers</code> (int): \u6700\u5927\u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba41 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>progress</code> (Progress, optional): \u8fdb\u5ea6\u663e\u793a\u5668</p> <p>\u793a\u4f8b: <pre><code>service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    db_path=\"./data/market.db\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    max_workers=4\n)\n</code></pre></p>"},{"location":"api/services/market_service/#universe","title":"\ud83c\udfaf Universe \u65b9\u6cd5","text":""},{"location":"api/services/market_service/#define_universestart_date-end_date-t1_months-t2_months-t3_months-top_k-output_path-descriptionnone-strict_date_rangefalse","title":"<code>define_universe(start_date, end_date, t1_months, t2_months, t3_months, top_k, output_path, description=None, strict_date_range=False)</code>","text":"<p>\u5b9a\u4e49\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\u3002</p> <p>\u53c2\u6570: - <code>start_date</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>end_date</code> (str): \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) - <code>t1_months</code> (int): \u6570\u636e\u56de\u770b\u671f(\u6708) - <code>t2_months</code> (int): \u91cd\u5e73\u8861\u9891\u7387(\u6708) - <code>t3_months</code> (int): \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4(\u6708) - <code>top_k</code> (int): \u9009\u62e9\u4ea4\u6613\u5bf9\u6570\u91cf - <code>output_path</code> (Path | str): \u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>description</code> (str, optional): \u63cf\u8ff0\u4fe1\u606f - <code>strict_date_range</code> (bool): \u662f\u5426\u4e25\u683c\u9650\u5236\u65e5\u671f\u8303\u56f4\uff0c\u9ed8\u8ba4 False</p> <p>\u8fd4\u56de\u503c: - <code>UniverseDefinition</code>: Universe\u5b9a\u4e49\u5bf9\u8c61</p> <p>\u793a\u4f8b: <pre><code>universe_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,      # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\n    t2_months=1,      # \u6bcf\u6708\u91cd\u5e73\u8861\n    t3_months=3,      # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5e01\n    top_k=10,         # \u9009\u62e9\u524d10\u4e2a\n    output_path=\"./universe.json\",\n    description=\"Top 10 crypto universe\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_datauniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7-extend_to_presenttrue","title":"<code>download_universe_data(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7, extend_to_present=True)</code>","text":"<p>\u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>universe_file</code> (Path | str): Universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>data_path</code> (Path | str, optional): \u989d\u5916\u6570\u636e\u6587\u4ef6\u8def\u5f84 - <code>interval</code> (Freq): \u6570\u636e\u9891\u7387\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>max_workers</code> (int): \u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba44 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>include_buffer_days</code> (int): \u7f13\u51b2\u5929\u6570\uff0c\u9ed8\u8ba47 - <code>extend_to_present</code> (bool): \u662f\u5426\u5ef6\u4f38\u5230\u5f53\u524d\uff0c\u9ed8\u8ba4 True</p> <p>\u793a\u4f8b: <pre><code>service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,\n    extend_to_present=False\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_data_by_periodsuniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7","title":"<code>download_universe_data_by_periods(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7)</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7dUniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u65b9\u5f0f\uff09\u3002</p> <p>\u53c2\u6570\u4e0e <code>download_universe_data</code> \u7c7b\u4f3c\uff0c\u4f46\u6309\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5206\u522b\u4e0b\u8f7d\u3002</p>"},{"location":"api/services/market_service/#_4","title":"\ud83d\udd0d \u8f85\u52a9\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_perpetual_symbolsonly_tradingtrue","title":"<code>get_perpetual_symbols(only_trading=True)</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\u3002</p> <p>\u53c2\u6570: - <code>only_trading</code> (bool): \u662f\u5426\u53ea\u8fd4\u56de\u53ef\u4ea4\u6613\u7684\uff0c\u9ed8\u8ba4 True</p> <p>\u8fd4\u56de\u503c: - <code>list[str]</code>: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>symbols = service.get_perpetual_symbols(only_trading=True)\nprint(f\"\u5f53\u524d\u53ef\u4ea4\u6613\u6c38\u7eed\u5408\u7ea6: {len(symbols)} \u4e2a\")\n</code></pre></p>"},{"location":"api/services/market_service/#_5","title":"\u26a0\ufe0f \u5f02\u5e38\u5904\u7406","text":""},{"location":"api/services/market_service/#_6","title":"\u5e38\u89c1\u5f02\u5e38\u7c7b\u578b","text":"<ul> <li><code>MarketDataFetchError</code>: \u6570\u636e\u83b7\u53d6\u5931\u8d25</li> <li><code>InvalidSymbolError</code>: \u65e0\u6548\u7684\u4ea4\u6613\u5bf9</li> <li><code>RateLimitError</code>: \u8bf7\u6c42\u9891\u7387\u9650\u5236</li> </ul> <p>\u793a\u4f8b: <pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u5931\u8d25: {e}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_7","title":"\ud83d\udcdd \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"api/services/market_service/#1-api","title":"1. API \u9891\u7387\u9650\u5236","text":"<ul> <li>\u5efa\u8bae\u4f7f\u7528\u5408\u7406\u7684 <code>max_workers</code> \u53c2\u6570</li> <li>\u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u8bf7\u6c42</li> <li>\u9047\u5230\u9891\u7387\u9650\u5236\u65f6\u4f1a\u81ea\u52a8\u91cd\u8bd5</li> </ul>"},{"location":"api/services/market_service/#2","title":"2. \u8def\u5f84\u53c2\u6570","text":"<ul> <li><code>db_path</code> \u548c <code>output_path</code> \u5fc5\u987b\u660e\u786e\u6307\u5b9a</li> <li>\u8def\u5f84\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u521b\u5efa\u5fc5\u8981\u7684\u76ee\u5f55</li> </ul>"},{"location":"api/services/market_service/#3","title":"3. \u6570\u636e\u5b8c\u6574\u6027","text":"<ul> <li>\u65b0\u4e0a\u5e02\u7684\u4ea4\u6613\u5bf9\u53ef\u80fd\u7f3a\u5c11\u5386\u53f2\u6570\u636e</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u5904\u7406\u6570\u636e\u7f3a\u5931\u60c5\u51b5</li> <li>\u5efa\u8bae\u8bbe\u7f6e\u5408\u7406\u7684\u7f13\u51b2\u5929\u6570</li> </ul>"},{"location":"api/services/market_service/#4","title":"4. \u5185\u5b58\u4f7f\u7528","text":"<ul> <li>\u5927\u6279\u91cf\u6570\u636e\u4e0b\u8f7d\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58</li> <li>\u5efa\u8bae\u5206\u6279\u5904\u7406\u5927\u91cf\u4ea4\u6613\u5bf9</li> <li>\u53ca\u65f6\u91ca\u653e\u4e0d\u9700\u8981\u7684\u6570\u636e</li> </ul>"},{"location":"api/services/market_service/#_8","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u57fa\u7840\u7528\u6cd5\u6307\u5357</li> <li>Universe\u5b9a\u4e49\u6307\u5357</li> <li>\u5b8c\u6574\u793a\u4f8b</li> <li>\u6570\u636e\u6a21\u578b\u53c2\u8003</li> </ul>"}]}