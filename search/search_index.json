{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"CryptoService","text":"<p>\u4e00\u4e2a\u4e13\u4e1a\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u670d\u52a1\u5e93\uff0c\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u636e\u83b7\u53d6\u3001\u5904\u7406\u548c\u5b58\u50a8\u529f\u80fd\u3002</p>"},{"location":"#_1","title":"\u2728 \u4e3b\u8981\u7279\u6027","text":"<ul> <li>\ud83d\udcb9 \u5e02\u573a\u6570\u636e\u670d\u52a1: \u5b9e\u65f6\u884c\u60c5\u3001\u5386\u53f2K\u7ebf\u3001\u6c38\u7eed\u5408\u7ea6\u6570\u636e</li> <li>\ud83c\udfdb\ufe0f \u6570\u636e\u5b58\u50a8: SQLite\u6570\u636e\u5e93\u5b58\u50a8\u548c\u9ad8\u6548\u67e5\u8be2</li> <li>\ud83c\udfaf Universe\u5b9a\u4e49: \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u548c\u91cd\u5e73\u8861\u7b56\u7565</li> <li>\u26a1 \u9ad8\u6027\u80fd: \u591a\u7ebf\u7a0b\u4e0b\u8f7d\u548c\u6570\u636e\u5904\u7406</li> <li>\ud83d\udcca \u6570\u636e\u53ef\u89c6\u5316: \u7ec8\u7aef\u8868\u683c\u5c55\u793a\u548c\u6570\u636e\u5206\u6790</li> </ul>"},{"location":"#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install cryptoservice\n</code></pre>"},{"location":"#_4","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice.services import MarketDataService\nfrom cryptoservice.models import Freq\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=\"your_binance_api_key\",\n    api_secret=\"your_binance_api_secret\"\n)\n\n# \u83b7\u53d6\u5b9e\u65f6\u884c\u60c5\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"BTC\u4ef7\u683c: {ticker.last_price}\")\n\n# \u83b7\u53d6\u5386\u53f2\u6570\u636e\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1\n)\n</code></pre>"},{"location":"#_5","title":"\ud83d\udcd6 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"#1-universe","title":"1. Universe\u5b9a\u4e49\u548c\u7ba1\u7406","text":"<p>\u52a8\u6001\u9009\u62e9\u4ea4\u6613\u5bf9\u7ec4\u5408\uff0c\u652f\u6301\u5b9a\u671f\u91cd\u5e73\u8861\uff1a</p> <pre><code># \u5b9a\u4e49Universe\nuniverse_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,      # \u6570\u636e\u56de\u770b\u671f\n    t2_months=1,      # \u91cd\u5e73\u8861\u9891\u7387\n    t3_months=3,      # \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4\n    top_k=10,         # \u9009\u62e9\u524d10\u4e2a\u5408\u7ea6\n    output_path=\"./universe.json\"\n)\n\n# \u4e0b\u8f7dUniverse\u6570\u636e\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1\n)\n</code></pre>"},{"location":"#2","title":"2. \u6570\u636e\u5b58\u50a8\u548c\u67e5\u8be2","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u6570\u636e\u5e93\u64cd\u4f5c\ndb = MarketDB(\"./data/market.db\")\n\n# \u67e5\u8be2\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"]\n)\n\n# \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1\n)\n</code></pre>"},{"location":"#3","title":"3. \u6570\u636e\u5bfc\u51fa","text":"<pre><code># \u5bfc\u51fa\u4e3anumpy/csv/parquet\u683c\u5f0f\ndb.export_to_files_by_timestamp(\n    output_path=\"./exports\",\n    start_ts=\"1704067200000\",  # 2024-01-01 00:00:00\n    end_ts=\"1704153600000\",    # 2024-01-02 00:00:00\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"]\n)\n</code></pre>"},{"location":"#_6","title":"\ud83d\udcda \u6587\u6863\u5bfc\u822a","text":"\u6587\u6863\u7c7b\u578b \u94fe\u63a5 \u63cf\u8ff0 \ud83c\udfaf \u5feb\u901f\u5165\u95e8 \u5b89\u88c5\u6307\u5357 \u73af\u5883\u642d\u5efa\u548c\u57fa\u7840\u914d\u7f6e \ud83d\udcd6 \u57fa\u7840\u6559\u7a0b \u57fa\u7840\u7528\u6cd5 \u6838\u5fc3\u529f\u80fd\u4f7f\u7528\u6307\u5357 \ud83c\udfd7\ufe0f Universe\u6307\u5357 Universe\u5b9a\u4e49 \u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565 \ud83d\udcbe \u6570\u636e\u5904\u7406 \u6570\u636e\u5b58\u50a8 \u6570\u636e\u5e93\u64cd\u4f5c\u8be6\u89e3 \ud83d\udcca \u793a\u4f8b\u4ee3\u7801 \u5b8c\u6574\u793a\u4f8b \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b \ud83d\udd27 API\u53c2\u8003 API\u6587\u6863 \u5b8c\u6574API\u8bf4\u660e"},{"location":"#_7","title":"\ud83d\udee0\ufe0f \u5f00\u53d1\u6307\u5357","text":"<ul> <li>\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e</li> <li>\u8d21\u732e\u6307\u5357</li> </ul>"},{"location":"#_8","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\uff0c\u8be6\u89c1 LICENSE \u6587\u4ef6\u3002</p> <p>\ud83d\udca1 \u63d0\u793a: \u5efa\u8bae\u4ece\u57fa\u7840\u7528\u6cd5\u5f00\u59cb\uff0c\u7136\u540e\u67e5\u770b\u5b8c\u6574\u793a\u4f8b\u4e86\u89e3\u5b9e\u9645\u5e94\u7528\u573a\u666f\u3002</p>"},{"location":"binance_vision_data_format/","title":"Binance Vision \u6570\u636e\u683c\u5f0f\u89e3\u6790\u8bf4\u660e","text":""},{"location":"binance_vision_data_format/#_1","title":"\u6982\u8ff0","text":"<p>Binance Vision \u63d0\u4f9b\u7684 metrics \u6570\u636e\u5305\u542b\u591a\u4e2a\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6307\u6807\uff0c\u5305\u62ec\u6301\u4ed3\u91cf\uff08Open Interest\uff09\u548c\u591a\u7a7a\u6bd4\u4f8b\uff08Long-Short Ratio\uff09\u7b49\u3002\u672c\u6587\u6863\u63cf\u8ff0\u4e86\u7cfb\u7edf\u5982\u4f55\u89e3\u6790\u8fd9\u4e9b\u6570\u636e\u683c\u5f0f\u3002</p>"},{"location":"binance_vision_data_format/#_2","title":"\u6570\u636e\u683c\u5f0f","text":""},{"location":"binance_vision_data_format/#csv","title":"CSV \u6587\u4ef6\u7ed3\u6784","text":"<p>Binance Vision \u7684 metrics \u6570\u636e\u4ee5 CSV \u683c\u5f0f\u5b58\u50a8\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a</p> <pre><code>create_time,symbol,sum_open_interest,sum_open_interest_value,count_toptrader_long_short_ratio,sum_toptrader_long_short_ratio,count_long_short_ratio,sum_taker_long_short_vol_ratio\n2025-01-21 00:05:00,ACEUSDT,2310973.7900000000000000,3669133.0863830000000000,4.24734982,2.26803000,2.72141015,0.69236000\n</code></pre>"},{"location":"binance_vision_data_format/#_3","title":"\u5b57\u6bb5\u8bf4\u660e","text":"\u5b57\u6bb5\u540d \u63cf\u8ff0 \u7c7b\u578b <code>create_time</code> \u6570\u636e\u521b\u5efa\u65f6\u95f4 \u5b57\u7b26\u4e32 (YYYY-MM-DD HH:MM:SS) <code>symbol</code> \u4ea4\u6613\u5bf9\u7b26\u53f7 \u5b57\u7b26\u4e32 <code>sum_open_interest</code> \u6301\u4ed3\u91cf\u603b\u548c \u6570\u503c <code>sum_open_interest_value</code> \u6301\u4ed3\u91cf\u4ef7\u503c\u603b\u548c \u6570\u503c <code>count_toptrader_long_short_ratio</code> \u9876\u7ea7\u4ea4\u6613\u8005\u957f\u77ed\u6bd4\u4f8b\u8ba1\u6570 \u6570\u503c <code>sum_toptrader_long_short_ratio</code> \u9876\u7ea7\u4ea4\u6613\u8005\u957f\u77ed\u6bd4\u4f8b\u603b\u548c \u6570\u503c <code>count_long_short_ratio</code> \u666e\u901a\u957f\u77ed\u6bd4\u4f8b\u8ba1\u6570 \u6570\u503c <code>sum_taker_long_short_vol_ratio</code> \u4e3b\u52a8\u4ea4\u6613\u8005\u957f\u77ed\u6210\u4ea4\u91cf\u6bd4\u4f8b\u603b\u548c \u6570\u503c"},{"location":"binance_vision_data_format/#_4","title":"\u89e3\u6790\u903b\u8f91","text":""},{"location":"binance_vision_data_format/#_5","title":"\u6301\u4ed3\u91cf\u6570\u636e\u89e3\u6790","text":"<p>\u7cfb\u7edf\u4ece CSV \u6570\u636e\u4e2d\u63d0\u53d6\u6301\u4ed3\u91cf\u4fe1\u606f\uff0c\u521b\u5efa <code>OpenInterest</code> \u5bf9\u8c61\uff1a</p> <pre><code>class OpenInterest:\n    symbol: str                    # \u4ea4\u6613\u5bf9\u7b26\u53f7\n    open_interest: Decimal         # \u6301\u4ed3\u91cf (\u6765\u81ea sum_open_interest)\n    time: int                      # \u65f6\u95f4\u6233\uff0c\u6beb\u79d2 (\u6765\u81ea create_time)\n    open_interest_value: Decimal   # \u6301\u4ed3\u91cf\u4ef7\u503c (\u6765\u81ea sum_open_interest_value)\n</code></pre>"},{"location":"binance_vision_data_format/#_6","title":"\u65f6\u95f4\u5904\u7406","text":"<ul> <li>\u8f93\u5165\u65f6\u95f4\u683c\u5f0f\uff1a<code>YYYY-MM-DD HH:MM:SS</code></li> <li>\u8f93\u51fa\u65f6\u95f4\u683c\u5f0f\uff1a\u6beb\u79d2\u65f6\u95f4\u6233\uff08int\uff09</li> <li>\u8f6c\u6362\u793a\u4f8b\uff1a<code>2025-01-21 00:05:00</code> \u2192 <code>1737389100000</code></li> </ul>"},{"location":"binance_vision_data_format/#_7","title":"\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u89e3\u6790","text":"<p>\u7cfb\u7edf\u4ece CSV \u6570\u636e\u4e2d\u63d0\u53d6\u591a\u7a7a\u6bd4\u4f8b\u4fe1\u606f\uff0c\u521b\u5efa <code>LongShortRatio</code> \u5bf9\u8c61\uff1a</p> <pre><code>class LongShortRatio:\n    symbol: str                    # \u4ea4\u6613\u5bf9\u7b26\u53f7\n    long_short_ratio: Decimal      # \u591a\u7a7a\u6bd4\u4f8b\n    long_account: Decimal          # \u591a\u5934\u8d26\u6237\u6bd4\u4f8b\n    short_account: Decimal         # \u7a7a\u5934\u8d26\u6237\u6bd4\u4f8b\n    timestamp: int                 # \u65f6\u95f4\u6233\uff0c\u6beb\u79d2\n    ratio_type: str                # \u6bd4\u4f8b\u7c7b\u578b (\"account\" \u6216 \"taker\")\n</code></pre>"},{"location":"binance_vision_data_format/#_8","title":"\u6bd4\u4f8b\u7c7b\u578b\u5904\u7406","text":"<p>\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u6570\u636e\u70b9\u521b\u5efa\u4e24\u79cd\u7c7b\u578b\u7684\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\uff1a</p> <ol> <li>account \u7c7b\u578b\uff1a\u57fa\u4e8e <code>sum_toptrader_long_short_ratio</code> \u548c <code>count_toptrader_long_short_ratio</code></li> <li>\u8ba1\u7b97\u5e73\u5747\u6bd4\u4f8b\uff1a<code>sum_toptrader_long_short_ratio / count_toptrader_long_short_ratio</code></li> <li> <p>\u8ba1\u7b97\u591a\u7a7a\u5360\u6bd4\uff1a<code>ratio / (ratio + 1)</code> \u548c <code>1 / (ratio + 1)</code></p> </li> <li> <p>taker \u7c7b\u578b\uff1a\u57fa\u4e8e <code>sum_taker_long_short_vol_ratio</code></p> </li> <li>\u76f4\u63a5\u4f7f\u7528\u8be5\u6bd4\u4f8b\u503c</li> <li>\u8ba1\u7b97\u591a\u7a7a\u5360\u6bd4\uff1a<code>ratio / (ratio + 1)</code> \u548c <code>1 / (ratio + 1)</code></li> </ol>"},{"location":"binance_vision_data_format/#_9","title":"\u793a\u4f8b\u6570\u636e\u89e3\u6790\u7ed3\u679c","text":""},{"location":"binance_vision_data_format/#_10","title":"\u6301\u4ed3\u91cf\u6570\u636e","text":"<pre><code>\u7b26\u53f7: ACEUSDT\n\u6301\u4ed3\u91cf: 2,310,973.79\n\u6301\u4ed3\u91cf\u4ef7\u503c: 3,669,133.09\n\u65f6\u95f4: 2025-01-21 00:05:00\n</code></pre>"},{"location":"binance_vision_data_format/#_11","title":"\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e","text":"<pre><code>\u7b26\u53f7: ACEUSDT\n\u7c7b\u578b: account\n\u591a\u7a7a\u6bd4\u4f8b: 0.533987\n\u591a\u5934\u5360\u6bd4: 0.348104\n\u7a7a\u5934\u5360\u6bd4: 0.651896\n\u65f6\u95f4: 2025-01-21 00:05:00\n\n\u7b26\u53f7: ACEUSDT\n\u7c7b\u578b: taker\n\u591a\u7a7a\u6bd4\u4f8b: 0.692360\n\u591a\u5934\u5360\u6bd4: 0.409109\n\u7a7a\u5934\u5360\u6bd4: 0.590891\n\u65f6\u95f4: 2025-01-21 00:05:00\n</code></pre>"},{"location":"binance_vision_data_format/#_12","title":"\u6570\u636e\u5e93\u5b58\u50a8","text":""},{"location":"binance_vision_data_format/#_13","title":"\u6301\u4ed3\u91cf\u8868\u7ed3\u6784","text":"<pre><code>CREATE TABLE open_interest (\n    symbol TEXT,\n    timestamp INTEGER,\n    interval TEXT,            -- \u9ed8\u8ba4 \"5m\"\n    open_interest REAL,\n    open_interest_value REAL,\n    PRIMARY KEY (symbol, timestamp, interval)\n);\n</code></pre>"},{"location":"binance_vision_data_format/#_14","title":"\u591a\u7a7a\u6bd4\u4f8b\u8868\u7ed3\u6784","text":"<pre><code>CREATE TABLE long_short_ratio (\n    symbol TEXT,\n    timestamp INTEGER,\n    period TEXT,              -- \u9ed8\u8ba4 \"5m\"\n    ratio_type TEXT,          -- \"account\" \u6216 \"taker\"\n    long_short_ratio REAL,\n    long_account REAL,\n    short_account REAL,\n    PRIMARY KEY (symbol, timestamp, period, ratio_type)\n);\n</code></pre>"},{"location":"binance_vision_data_format/#_15","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"binance_vision_data_format/#binance-vision_1","title":"\u542f\u7528 Binance Vision \u4e0b\u8f7d","text":"<p>\u5728\u8c03\u7528 <code>download_universe_data()</code> \u65f6\uff0c\u8bbe\u7f6e <code>use_binance_vision=True</code>\uff1a</p> <pre><code>service.download_universe_data(\n    universe_file=\"universe.json\",\n    db_path=\"market.db\",\n    use_binance_vision=True,  # \u542f\u7528 Binance Vision \u6570\u636e\u4e0b\u8f7d\n    download_market_metrics=True\n)\n</code></pre>"},{"location":"binance_vision_data_format/#_16","title":"\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e","text":"<p>\u5728 <code>demo/download_data.py</code> \u4e2d\u8bbe\u7f6e\uff1a</p> <pre><code>USE_BINANCE_VISION = True  # \u4f7f\u7528 Binance Vision \u4e0b\u8f7d\u7279\u5f81\u6570\u636e\n</code></pre>"},{"location":"binance_vision_data_format/#_17","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u6570\u636e\u5ef6\u8fdf\uff1aBinance Vision \u6570\u636e\u901a\u5e38\u6709 1-2 \u5929\u7684\u5ef6\u8fdf</li> <li>\u6570\u636e\u5b8c\u6574\u6027\uff1a\u6bcf\u4e2a\u65f6\u95f4\u70b9\u4f1a\u4ea7\u751f\u591a\u4e2a\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\uff08account \u548c taker \u7c7b\u578b\uff09</li> <li>\u65f6\u95f4\u683c\u5f0f\uff1a\u786e\u4fdd\u65f6\u95f4\u5b57\u6bb5\u683c\u5f0f\u6b63\u786e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a\u6beb\u79d2\u65f6\u95f4\u6233</li> <li>\u9519\u8bef\u5904\u7406\uff1a\u89e3\u6790\u8fc7\u7a0b\u4e2d\u7684\u9519\u8bef\u4f1a\u88ab\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\uff0c\u4f46\u4e0d\u4f1a\u4e2d\u65ad\u6574\u4e2a\u4e0b\u8f7d\u8fc7\u7a0b</li> </ol>"},{"location":"binance_vision_data_format/#_18","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"binance_vision_data_format/#_19","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li>\u5b57\u6bb5\u7f3a\u5931\uff1a\u786e\u4fdd CSV \u6587\u4ef6\u5305\u542b\u6240\u6709\u5fc5\u8981\u5b57\u6bb5</li> <li>\u65f6\u95f4\u683c\u5f0f\u9519\u8bef\uff1a\u68c0\u67e5 <code>create_time</code> \u5b57\u6bb5\u683c\u5f0f\u662f\u5426\u4e3a <code>YYYY-MM-DD HH:MM:SS</code></li> <li>\u6570\u636e\u7c7b\u578b\u9519\u8bef\uff1a\u786e\u4fdd\u6570\u503c\u5b57\u6bb5\u53ef\u4ee5\u8f6c\u6362\u4e3a Decimal \u7c7b\u578b</li> </ol>"},{"location":"binance_vision_data_format/#_20","title":"\u8c03\u8bd5\u65b9\u6cd5","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u6765\u67e5\u770b\u8be6\u7ec6\u7684\u89e3\u6790\u8fc7\u7a0b\uff1a</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"binance_vision_data_format/#_21","title":"\u9a8c\u8bc1\u89e3\u6790\u7ed3\u679c","text":"<p>\u89e3\u6790\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u67e5\u8be2\u9a8c\u8bc1\u6570\u636e\uff1a</p> <pre><code># \u67e5\u8be2\u6301\u4ed3\u91cf\u6570\u636e\noi_data = db.read_open_interest(\"2025-01-21\", \"2025-01-21\", [\"ACEUSDT\"])\n\n# \u67e5\u8be2\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\nlsr_data = db.read_long_short_ratio(\"2025-01-21\", \"2025-01-21\", [\"ACEUSDT\"])\n</code></pre>"},{"location":"changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86 CryptoService \u9879\u76ee\u7684\u6240\u6709\u91cd\u8981\u66f4\u6539\u548c\u7248\u672c\u53d1\u5e03\u5386\u53f2\u3002</p>"},{"location":"changelog/#_2","title":"\ud83c\udfaf \u7248\u672c\u7ea6\u5b9a","text":"<p>\u672c\u9879\u76ee\u9075\u5faa \u8bed\u4e49\u5316\u7248\u672c\u63a7\u5236 \u89c4\u8303\uff1a</p> <ul> <li>\u4e3b\u7248\u672c\u53f7 (MAJOR): \u5f53\u505a\u4e86\u4e0d\u517c\u5bb9\u7684 API \u4fee\u6539</li> <li>\u6b21\u7248\u672c\u53f7 (MINOR): \u5f53\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u529f\u80fd\u6027\u65b0\u589e</li> <li>\u4fee\u8ba2\u53f7 (PATCH): \u5f53\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u95ee\u9898\u4fee\u6b63</li> </ul>"},{"location":"changelog/#_3","title":"\ud83d\udccb \u56fe\u4f8b","text":"<ul> <li>\ud83c\udf89 \u65b0\u529f\u80fd - \u65b0\u589e\u529f\u80fd\u7279\u6027</li> <li>\ud83d\udc1b \u95ee\u9898\u4fee\u590d - Bug \u4fee\u590d</li> <li>\ud83d\udcc8 \u6027\u80fd\u4f18\u5316 - \u6027\u80fd\u6539\u8fdb</li> <li>\ud83d\udd27 \u5f00\u53d1\u5de5\u5177 - \u5f00\u53d1\u73af\u5883\u548c\u5de5\u5177\u66f4\u65b0</li> <li>\ud83d\udcdd \u6587\u6863 - \u6587\u6863\u66f4\u65b0</li> <li>\u26a0\ufe0f \u91cd\u5927\u53d8\u66f4 - \u7834\u574f\u6027\u66f4\u6539</li> <li>\ud83d\udd12 \u5b89\u5168 - \u5b89\u5168\u4fee\u590d</li> <li>\ud83d\uddd1\ufe0f \u5e9f\u5f03 - \u529f\u80fd\u5e9f\u5f03</li> </ul>"},{"location":"changelog/#v120-2024-12-26","title":"v1.2.0 (2024-12-26)","text":""},{"location":"changelog/#_4","title":"\ud83c\udf89 \u65b0\u529f\u80fd","text":"<ul> <li>WebSocket \u5b9e\u65f6\u6570\u636e\u6d41: \u65b0\u589e WebSocketService \u652f\u6301\u5b9e\u65f6\u5e02\u573a\u6570\u636e\u8ba2\u9605</li> <li>\u652f\u6301\u5b9e\u65f6\u884c\u60c5\u3001K\u7ebf\u6570\u636e\u3001\u6df1\u5ea6\u6570\u636e\u8ba2\u9605</li> <li>\u81ea\u52a8\u91cd\u8fde\u548c\u9519\u8bef\u6062\u590d\u673a\u5236</li> <li> <p>\u4e8b\u4ef6\u9a71\u52a8\u7684\u6570\u636e\u5904\u7406\u67b6\u6784</p> </li> <li> <p>\u9ad8\u7ea7\u6570\u636e\u67e5\u8be2: MarketDB \u65b0\u589e\u9ad8\u7ea7\u67e5\u8be2\u529f\u80fd</p> </li> <li>\u6761\u4ef6\u7b5b\u9009\u67e5\u8be2 (<code>read_data_with_conditions</code>)</li> <li>\u767e\u5206\u4f4d\u6570\u67e5\u8be2 (<code>read_data_by_percentile</code>)</li> <li> <p>\u65f6\u95f4\u6233\u8303\u56f4\u5bfc\u51fa (<code>export_to_files_by_timestamp</code>)</p> </li> <li> <p>Universe \u5b9a\u4e49\u7cfb\u7edf: \u5b8c\u6574\u7684 Universe \u7ba1\u7406\u529f\u80fd</p> </li> <li>\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u548c\u91cd\u5e73\u8861</li> <li>\u65f6\u95f4\u5e8f\u5217\u5feb\u7167\u7ba1\u7406</li> <li>\u6279\u91cf\u6570\u636e\u4e0b\u8f7d\u548c\u5b58\u50a8</li> </ul>"},{"location":"changelog/#_5","title":"\ud83d\udcc8 \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u5e76\u53d1\u6570\u636e\u4e0b\u8f7d: \u591a\u7ebf\u7a0b\u4e0b\u8f7d\u5386\u53f2\u6570\u636e\uff0c\u63d0\u5347\u6548\u7387</li> <li>\u6570\u636e\u5e93\u7d22\u5f15\u4f18\u5316: \u4e3a\u65f6\u95f4\u6233\u548c\u4ea4\u6613\u5bf9\u5b57\u6bb5\u6dfb\u52a0\u7d22\u5f15</li> <li>\u5185\u5b58\u7ba1\u7406: \u4f18\u5316\u5927\u6570\u636e\u96c6\u7684\u5185\u5b58\u4f7f\u7528</li> </ul>"},{"location":"changelog/#_6","title":"\ud83d\udcdd \u6587\u6863","text":"<ul> <li>\u5b8c\u6574\u6587\u6863\u91cd\u5199: \u91cd\u65b0\u7ec4\u7ec7\u548c\u7f16\u5199\u6240\u6709\u6587\u6863</li> <li>\u65b0\u589e\u5e02\u573a\u6570\u636e\u793a\u4f8b\u6587\u6863</li> <li>\u65b0\u589e\u6570\u636e\u5904\u7406\u793a\u4f8b\u6587\u6863</li> <li>\u65b0\u589e WebSocket \u670d\u52a1\u6587\u6863</li> <li>\u5b8c\u5584 API \u53c2\u8003\u6587\u6863</li> </ul>"},{"location":"changelog/#_7","title":"\ud83d\udd27 \u5f00\u53d1\u5de5\u5177","text":"<ul> <li>MyPy \u7c7b\u578b\u68c0\u67e5: \u914d\u7f6e mypy \u5ffd\u7565\u7b2c\u4e09\u65b9\u5e93\u7c7b\u578b\u95ee\u9898</li> <li>Pre-commit \u94a9\u5b50: \u6dfb\u52a0\u4ee3\u7801\u683c\u5f0f\u5316\u548c\u68c0\u67e5</li> <li>MkDocs \u6587\u6863: \u914d\u7f6e\u6587\u6863\u751f\u6210\u548c\u9884\u89c8</li> </ul>"},{"location":"changelog/#v110-2024-12-15","title":"v1.1.0 (2024-12-15)","text":""},{"location":"changelog/#_8","title":"\ud83c\udf89 \u65b0\u529f\u80fd","text":"<ul> <li>\u6570\u636e\u5b58\u50a8\u7cfb\u7edf: \u57fa\u4e8e SQLite \u7684\u5e02\u573a\u6570\u636e\u5b58\u50a8</li> <li>\u652f\u6301\u591a\u79cd\u9891\u7387\u7684 K\u7ebf\u6570\u636e\u5b58\u50a8</li> <li>\u9ad8\u6548\u7684\u6570\u636e\u67e5\u8be2\u548c\u805a\u5408</li> <li> <p>\u81ea\u52a8\u6570\u636e\u53bb\u91cd\u548c\u9a8c\u8bc1</p> </li> <li> <p>\u6570\u636e\u5bfc\u51fa\u529f\u80fd: \u591a\u683c\u5f0f\u6570\u636e\u5bfc\u51fa</p> </li> <li>CSV \u683c\u5f0f\u5bfc\u51fa</li> <li>Parquet \u9ad8\u6548\u538b\u7f29\u683c\u5f0f</li> <li>NumPy \u6570\u7ec4\u683c\u5f0f</li> <li>Excel \u591a\u5de5\u4f5c\u8868\u5bfc\u51fa</li> </ul>"},{"location":"changelog/#_9","title":"\ud83d\udc1b \u95ee\u9898\u4fee\u590d","text":"<ul> <li>\u4fee\u590d Binance API \u9891\u7387\u9650\u5236\u5904\u7406</li> <li>\u4fee\u590d\u65f6\u95f4\u6233\u8f6c\u6362\u95ee\u9898</li> <li>\u4fee\u590d\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u9519\u8bef</li> </ul>"},{"location":"changelog/#_10","title":"\ud83d\udcc8 \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u4f18\u5316\u6570\u636e\u5e93\u67e5\u8be2\u6027\u80fd</li> <li>\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684 API \u8c03\u7528</li> <li>\u6539\u8fdb\u5185\u5b58\u4f7f\u7528\u6548\u7387</li> </ul>"},{"location":"changelog/#v100-2024-12-01","title":"v1.0.0 (2024-12-01)","text":""},{"location":"changelog/#_11","title":"\ud83c\udf89 \u9996\u6b21\u53d1\u5e03","text":"<ul> <li>\u6838\u5fc3\u5e02\u573a\u6570\u636e\u670d\u52a1: MarketDataService</li> <li>\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u83b7\u53d6</li> <li>\u5386\u53f2 K\u7ebf\u6570\u636e\u4e0b\u8f7d</li> <li>24\u5c0f\u65f6\u7edf\u8ba1\u6570\u636e</li> <li> <p>\u4ea4\u6613\u6240\u4fe1\u606f\u67e5\u8be2</p> </li> <li> <p>\u6570\u636e\u6a21\u578b: \u5b8c\u6574\u7684\u6570\u636e\u7c7b\u578b\u5b9a\u4e49</p> </li> <li>BaseMarketTicker \u884c\u60c5\u6570\u636e\u6a21\u578b</li> <li>HistoricalKlines K\u7ebf\u6570\u636e\u6a21\u578b</li> <li>Freq \u9891\u7387\u679a\u4e3e</li> <li> <p>SortBy \u6392\u5e8f\u679a\u4e3e</p> </li> <li> <p>\u57fa\u7840\u5de5\u5177:</p> </li> <li>\u6570\u636e\u8f6c\u6362\u5de5\u5177</li> <li>\u5f02\u5e38\u5904\u7406\u7cfb\u7edf</li> <li>\u914d\u7f6e\u7ba1\u7406</li> </ul>"},{"location":"changelog/#_12","title":"\ud83d\udd27 \u5f00\u53d1\u73af\u5883","text":"<ul> <li>Python 3.8+ \u652f\u6301</li> <li>uv \u5305\u7ba1\u7406\u5668\u96c6\u6210</li> <li>ruff \u4ee3\u7801\u683c\u5f0f\u5316\u548c\u68c0\u67e5</li> <li>pytest \u6d4b\u8bd5\u6846\u67b6</li> </ul>"},{"location":"changelog/#roadmap","title":"\ud83d\ude80 \u5373\u5c06\u63a8\u51fa (Roadmap)","text":""},{"location":"changelog/#v130","title":"v1.3.0 (\u8ba1\u5212\u4e2d)","text":"<ul> <li>\u667a\u80fd\u4ea4\u6613\u4fe1\u53f7: \u6280\u672f\u6307\u6807\u8ba1\u7b97\u548c\u4ea4\u6613\u4fe1\u53f7\u751f\u6210</li> <li>\u56de\u6d4b\u7cfb\u7edf: \u5386\u53f2\u6570\u636e\u56de\u6d4b\u6846\u67b6</li> <li>\u98ce\u9669\u7ba1\u7406: \u98ce\u9669\u6307\u6807\u8ba1\u7b97\u548c\u76d1\u63a7</li> <li>\u591a\u4ea4\u6613\u6240\u652f\u6301: \u6269\u5c55\u5230\u5176\u4ed6\u52a0\u5bc6\u8d27\u5e01\u4ea4\u6613\u6240</li> </ul>"},{"location":"changelog/#v140","title":"v1.4.0 (\u8ba1\u5212\u4e2d)","text":"<ul> <li>\u673a\u5668\u5b66\u4e60\u96c6\u6210: \u4ef7\u683c\u9884\u6d4b\u548c\u5f02\u5e38\u68c0\u6d4b</li> <li>\u56fe\u5f62\u5316\u754c\u9762: Web \u754c\u9762\u548c\u4eea\u8868\u677f</li> <li>API \u7f51\u5173: RESTful API \u670d\u52a1</li> <li>\u4e91\u90e8\u7f72: Docker \u548c Kubernetes \u652f\u6301</li> </ul>"},{"location":"changelog/#v200","title":"v2.0.0 (\u957f\u671f\u89c4\u5212)","text":"<ul> <li>\u5206\u5e03\u5f0f\u67b6\u6784: \u5fae\u670d\u52a1\u5316\u91cd\u6784</li> <li>\u5b9e\u65f6\u6d41\u5904\u7406: Apache Kafka \u96c6\u6210</li> <li>\u5927\u6570\u636e\u5b58\u50a8: ClickHouse/TimescaleDB \u652f\u6301</li> <li>\u4f01\u4e1a\u7ea7\u529f\u80fd: \u7528\u6237\u7ba1\u7406\u3001\u6743\u9650\u63a7\u5236\u3001\u5ba1\u8ba1\u65e5\u5fd7</li> </ul>"},{"location":"changelog/#_13","title":"\ud83d\udcca \u7248\u672c\u7edf\u8ba1","text":"\u7248\u672c \u53d1\u5e03\u65e5\u671f \u65b0\u529f\u80fd \u95ee\u9898\u4fee\u590d \u6587\u6863\u66f4\u65b0 v1.2.0 2024-12-26 5 2 4 v1.1.0 2024-12-15 3 3 1 v1.0.0 2024-12-01 8 0 3 \u603b\u8ba1 16 5 8"},{"location":"changelog/#_14","title":"\ud83d\udcde \u53cd\u9988\u548c\u8d21\u732e","text":"<p>\u5982\u679c\u60a8\u53d1\u73b0\u4efb\u4f55\u95ee\u9898\u6216\u6709\u529f\u80fd\u5efa\u8bae\uff0c\u8bf7\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8054\u7cfb\u6211\u4eec\uff1a</p> <ul> <li>GitHub Issues: \u63d0\u4ea4\u95ee\u9898</li> <li>\u529f\u80fd\u8bf7\u6c42: \u8bf7\u6c42\u65b0\u529f\u80fd</li> <li>\u8d21\u732e\u4ee3\u7801: \u67e5\u770b \u8d21\u732e\u6307\u5357</li> </ul>"},{"location":"changelog/#_15","title":"\ud83d\ude4f \u81f4\u8c22","text":"<p>\u611f\u8c22\u6240\u6709\u4e3a CryptoService \u9879\u76ee\u505a\u51fa\u8d21\u732e\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\uff01</p>"},{"location":"changelog/#_16","title":"\u4e3b\u8981\u8d21\u732e\u8005","text":"<ul> <li>@Mrzai - \u9879\u76ee\u521b\u59cb\u4eba\u548c\u4e3b\u8981\u7ef4\u62a4\u8005</li> <li>\u793e\u533a\u8d21\u732e\u8005 - \u611f\u8c22\u6240\u6709\u63d0\u4f9b\u53cd\u9988\u548c\u5efa\u8bae\u7684\u7528\u6237</li> </ul>"},{"location":"changelog/#_17","title":"\u4f9d\u8d56\u9879\u76ee","text":"<p>\u672c\u9879\u76ee\u57fa\u4e8e\u4ee5\u4e0b\u4f18\u79c0\u7684\u5f00\u6e90\u9879\u76ee\u6784\u5efa\uff1a</p> <ul> <li>python-binance - Binance API \u5ba2\u6237\u7aef</li> <li>pandas - \u6570\u636e\u5206\u6790\u5e93</li> <li>SQLite - \u8f7b\u91cf\u7ea7\u6570\u636e\u5e93</li> <li>pytest - \u6d4b\u8bd5\u6846\u67b6</li> <li>ruff - \u4ee3\u7801\u68c0\u67e5\u5de5\u5177</li> </ul> <p>\ud83d\udca1 \u63d0\u793a: \u8ba2\u9605\u6211\u4eec\u7684 \u53d1\u5e03\u901a\u77e5 \u4ee5\u83b7\u53d6\u6700\u65b0\u7248\u672c\u4fe1\u606f\u3002</p>"},{"location":"contributing/","title":"\u8d21\u732e\u6307\u5357","text":"<p>\u6b22\u8fce\u4e3a CryptoService \u9879\u76ee\u505a\u51fa\u8d21\u732e\uff01</p>"},{"location":"contributing/#_2","title":"\ud83d\ude80 \u5982\u4f55\u8d21\u732e","text":""},{"location":"contributing/#_3","title":"\u62a5\u544a\u95ee\u9898","text":"<p>\u5982\u679c\u60a8\u53d1\u73b0\u4e86 bug \u6216\u6709\u529f\u80fd\u5efa\u8bae\uff0c\u8bf7\uff1a</p> <ol> <li>\u5728 GitHub Issues \u4e2d\u641c\u7d22\u662f\u5426\u5df2\u6709\u76f8\u5173\u95ee\u9898</li> <li>\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u521b\u5efa\u65b0\u7684 issue\uff0c\u5305\u542b\uff1a</li> <li>\u6e05\u6670\u7684\u95ee\u9898\u63cf\u8ff0</li> <li>\u91cd\u73b0\u6b65\u9aa4</li> <li>\u9884\u671f\u884c\u4e3a vs \u5b9e\u9645\u884c\u4e3a</li> <li>\u73af\u5883\u4fe1\u606f\uff08Python \u7248\u672c\u3001\u64cd\u4f5c\u7cfb\u7edf\u7b49\uff09</li> </ol>"},{"location":"contributing/#_4","title":"\u63d0\u4ea4\u4ee3\u7801","text":"<ol> <li> <p>Fork \u9879\u76ee <pre><code>git clone https://github.com/your-username/Xdata.git\ncd Xdata\n</code></pre></p> </li> <li> <p>\u521b\u5efa\u5f00\u53d1\u5206\u652f <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>\u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56 <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>\u7f16\u5199\u4ee3\u7801\u548c\u6d4b\u8bd5</p> </li> <li>\u9075\u5faa\u73b0\u6709\u7684\u4ee3\u7801\u98ce\u683c</li> <li>\u6dfb\u52a0\u9002\u5f53\u7684\u6d4b\u8bd5</li> <li> <p>\u66f4\u65b0\u76f8\u5173\u6587\u6863</p> </li> <li> <p>\u63d0\u4ea4\u66f4\u6539 <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> <li> <p>\u63a8\u9001\u5e76\u521b\u5efa Pull Request <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"contributing/#_5","title":"\ud83d\udcdd \u5f00\u53d1\u89c4\u8303","text":""},{"location":"contributing/#_6","title":"\u4ee3\u7801\u98ce\u683c","text":"<ul> <li>\u4f7f\u7528 Python 3.8+ \u8bed\u6cd5\u7279\u6027</li> <li>\u9075\u5faa PEP 8 \u7f16\u7801\u89c4\u8303</li> <li>\u4f7f\u7528\u7c7b\u578b\u63d0\u793a</li> <li>\u7f16\u5199\u6e05\u6670\u7684\u6587\u6863\u5b57\u7b26\u4e32</li> </ul>"},{"location":"contributing/#_7","title":"\u63d0\u4ea4\u4fe1\u606f\u683c\u5f0f","text":"<p>\u4f7f\u7528 Conventional Commits \u683c\u5f0f\uff1a</p> <pre><code>type(scope): description\n\nfeat: \u65b0\u529f\u80fd\nfix: bug \u4fee\u590d\ndocs: \u6587\u6863\u66f4\u65b0\nstyle: \u4ee3\u7801\u683c\u5f0f\u8c03\u6574\nrefactor: \u4ee3\u7801\u91cd\u6784\ntest: \u6d4b\u8bd5\u76f8\u5173\nchore: \u6784\u5efa\u8fc7\u7a0b\u6216\u8f85\u52a9\u5de5\u5177\u7684\u53d8\u52a8\n</code></pre>"},{"location":"contributing/#_8","title":"\u6587\u6863","text":"<ul> <li>\u5bf9\u65b0\u529f\u80fd\u6dfb\u52a0\u76f8\u5e94\u7684\u4f7f\u7528\u793a\u4f8b</li> <li>\u66f4\u65b0 API \u6587\u6863</li> <li>\u5728 <code>CHANGELOG.md</code> \u4e2d\u8bb0\u5f55\u91cd\u8981\u66f4\u6539</li> </ul>"},{"location":"contributing/#_9","title":"\ud83d\udd0d \u6d4b\u8bd5","text":"<p>\u8fd0\u884c\u6d4b\u8bd5\u5957\u4ef6\uff1a</p> <pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\npython -m pytest\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\npython -m pytest tests/test_specific.py\n\n# \u8fd0\u884c\u6d4b\u8bd5\u5e76\u67e5\u770b\u8986\u76d6\u7387\npython -m pytest --cov=cryptoservice\n</code></pre>"},{"location":"contributing/#_10","title":"\ud83d\udcda \u6587\u6863\u5f00\u53d1","text":"<p>\u672c\u9879\u76ee\u4f7f\u7528 MkDocs \u6784\u5efa\u6587\u6863\uff1a</p> <pre><code># \u5b89\u88c5\u6587\u6863\u4f9d\u8d56\npip install -e \".[docs]\"\n\n# \u672c\u5730\u9884\u89c8\u6587\u6863\nmkdocs serve\n\n# \u6784\u5efa\u6587\u6863\nmkdocs build\n</code></pre>"},{"location":"contributing/#_11","title":"\ud83d\udca1 \u5f00\u53d1\u63d0\u793a","text":"<ul> <li>\u67e5\u770b \u5f00\u53d1\u6307\u5357 \u4e86\u89e3\u8be6\u7ec6\u7684\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e</li> <li>\u53c2\u8003\u73b0\u6709\u4ee3\u7801\u7684\u5b9e\u73b0\u6a21\u5f0f</li> <li>\u786e\u4fdd\u65b0\u529f\u80fd\u4e0e\u73b0\u6709 API \u8bbe\u8ba1\u4e00\u81f4</li> <li>\u7f16\u5199\u6e05\u6670\u7684\u9519\u8bef\u6d88\u606f\u548c\u65e5\u5fd7</li> </ul>"},{"location":"contributing/#_12","title":"\ud83d\udcde \u8054\u7cfb\u6211\u4eec","text":"<p>\u5982\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8054\u7cfb\uff1a</p> <ul> <li>GitHub Issues: \u9879\u76ee Issues</li> <li>\u90ae\u7bb1: [\u9879\u76ee\u7ef4\u62a4\u8005\u90ae\u7bb1]</li> </ul> <p>\u611f\u8c22\u60a8\u7684\u8d21\u732e\uff01 \ud83c\udf89</p>"},{"location":"development_guide/","title":"\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u8bbe\u7f6e CryptoService \u5f00\u53d1\u73af\u5883\uff0c\u4f7f\u7528\u73b0\u4ee3\u5de5\u5177\u8fdb\u884c\u9ad8\u6548\u5f00\u53d1\u3002</p>"},{"location":"development_guide/#_2","title":"\ud83d\udee0\ufe0f \u5de5\u5177\u94fe","text":"<p>\u672c\u9879\u76ee\u4f7f\u7528\u73b0\u4ee3 Python \u5f00\u53d1\u5de5\u5177\u94fe\uff1a</p> <ul> <li>uv: \u8d85\u5feb\u7684 Python \u5305\u7ba1\u7406\u5668</li> <li>ruff: \u6781\u901f\u7684\u4ee3\u7801\u68c0\u67e5\u548c\u683c\u5f0f\u5316\u5de5\u5177</li> <li>mypy: \u9759\u6001\u7c7b\u578b\u68c0\u67e5</li> <li>pytest: \u6d4b\u8bd5\u6846\u67b6</li> <li>pre-commit: Git \u9884\u63d0\u4ea4\u94a9\u5b50</li> </ul>"},{"location":"development_guide/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"development_guide/#1-uv","title":"1. \u5b89\u88c5 uv","text":"<p>uv \u662f\u6bd4 pip \u66f4\u5feb\u7684\u5305\u7ba1\u7406\u5668\uff0c\u63a8\u8350\u7528\u4e8e\u5f00\u53d1\u3002</p> <p>\u81ea\u52a8\u5b89\u88c5\u811a\u672c: <pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows (PowerShell)\nirm https://astral.sh/uv/install.ps1 | iex\n</code></pre></p> <p>\u624b\u52a8\u5b89\u88c5: <pre><code># macOS (Homebrew)\nbrew install uv\n\n# \u5176\u4ed6\u5e73\u53f0\u53c2\u8003: https://docs.astral.sh/uv/getting-started/installation/\n</code></pre></p>"},{"location":"development_guide/#2","title":"2. \u514b\u9686\u5e76\u8bbe\u7f6e\u9879\u76ee","text":"<pre><code># \u514b\u9686\u9879\u76ee\ngit clone https://github.com/username/cryptoservice.git\ncd cryptoservice\n\n# \u521b\u5efa\u865a\u62df\u73af\u5883\u5e76\u540c\u6b65\u4f9d\u8d56\nuv sync --all-extras --dev\n\n# \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate  # Linux/macOS\n# \u6216\n.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"development_guide/#3-pre-commit","title":"3. \u5b89\u88c5 pre-commit \u94a9\u5b50","text":"<pre><code>uv run pre-commit install\n</code></pre> <p>\u73b0\u5728\u6bcf\u6b21\u63d0\u4ea4\u4ee3\u7801\u65f6\u90fd\u4f1a\u81ea\u52a8\u8fd0\u884c\u4ee3\u7801\u68c0\u67e5\u3002</p>"},{"location":"development_guide/#_4","title":"\ud83d\udd0d \u4ee3\u7801\u8d28\u91cf\u5de5\u5177","text":""},{"location":"development_guide/#ruff-","title":"Ruff - \u4ee3\u7801\u68c0\u67e5\u548c\u683c\u5f0f\u5316","text":"<p>Ruff \u66ff\u4ee3\u4e86\u591a\u4e2a\u4f20\u7edf\u5de5\u5177\uff08black, isort, flake8 \u7b49\uff09\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u4ee3\u7801\u8d28\u91cf\u7ba1\u7406\u3002</p> <pre><code># \u68c0\u67e5\u4ee3\u7801\u95ee\u9898\nuv run ruff check src/\n\n# \u81ea\u52a8\u4fee\u590d\u53ef\u4fee\u590d\u7684\u95ee\u9898\nuv run ruff check --fix src/\n\n# \u683c\u5f0f\u5316\u4ee3\u7801\nuv run ruff format src/\n\n# \u68c0\u67e5\u683c\u5f0f\u662f\u5426\u6b63\u786e\uff08CI \u4e2d\u4f7f\u7528\uff09\nuv run ruff format --check src/\n</code></pre>"},{"location":"development_guide/#mypy-","title":"MyPy - \u7c7b\u578b\u68c0\u67e5","text":"<pre><code># \u8fd0\u884c\u7c7b\u578b\u68c0\u67e5\nuv run mypy src/\n\n# \u663e\u793a\u9519\u8bef\u4ee3\u7801\uff08\u8c03\u8bd5\u7528\uff09\nuv run mypy src/ --show-error-codes\n</code></pre>"},{"location":"development_guide/#_5","title":"\u7ec4\u5408\u547d\u4ee4","text":"<pre><code># \u5b8c\u6574\u7684\u4ee3\u7801\u8d28\u91cf\u68c0\u67e5\uff08\u7b49\u540c\u4e8e CI\uff09\nuv run ruff check src/ &amp;&amp; \\\nuv run ruff format --check src/ &amp;&amp; \\\nuv run mypy src/\n</code></pre>"},{"location":"development_guide/#_6","title":"\ud83e\uddea \u6d4b\u8bd5","text":""},{"location":"development_guide/#_7","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\nuv run pytest\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\u6587\u4ef6\nuv run pytest tests/test_basic.py\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\u51fd\u6570\nuv run pytest tests/test_basic.py::test_universe_config\n\n# \u5e26\u8986\u76d6\u7387\u62a5\u544a\nuv run pytest --cov=src/cryptoservice --cov-report=html\n</code></pre>"},{"location":"development_guide/#_8","title":"\u6dfb\u52a0\u65b0\u6d4b\u8bd5","text":"<p>\u5728 <code>tests/</code> \u76ee\u5f55\u4e0b\u521b\u5efa\u4ee5 <code>test_</code> \u5f00\u5934\u7684\u6587\u4ef6\uff1a</p> <pre><code># tests/test_new_feature.py\nimport pytest\nfrom cryptoservice.models import UniverseConfig\n\ndef test_new_feature():\n    \"\"\"\u6d4b\u8bd5\u65b0\u529f\u80fd\"\"\"\n    config = UniverseConfig(\n        start_date=\"2024-01-01\",\n        end_date=\"2024-01-31\",\n        t1_months=1,\n        t2_months=1,\n        t3_months=3,\n        top_k=10\n    )\n    assert config.start_date == \"2024-01-01\"\n</code></pre>"},{"location":"development_guide/#_9","title":"\ud83d\udce6 \u4f9d\u8d56\u7ba1\u7406","text":""},{"location":"development_guide/#_10","title":"\u6dfb\u52a0\u65b0\u4f9d\u8d56","text":"<pre><code># \u6dfb\u52a0\u8fd0\u884c\u65f6\u4f9d\u8d56\nuv add pandas&gt;=2.0.0\n\n# \u6dfb\u52a0\u5f00\u53d1\u4f9d\u8d56\nuv add --dev pytest&gt;=7.0.0\n\n# \u6dfb\u52a0\u53ef\u9009\u4f9d\u8d56\u7ec4\nuv add --optional ml scikit-learn\n</code></pre>"},{"location":"development_guide/#_11","title":"\u4f9d\u8d56\u7ec4\u8bf4\u660e","text":"<ul> <li>dev: \u5f00\u53d1\u5de5\u5177\uff08ruff, mypy, pre-commit\uff09</li> <li>test: \u6d4b\u8bd5\u76f8\u5173\uff08pytest, pytest-cov\uff09</li> <li>docs: \u6587\u6863\u751f\u6210\uff08mkdocs \u76f8\u5173\uff09</li> </ul>"},{"location":"development_guide/#_12","title":"\ud83d\udd27 \u914d\u7f6e\u6587\u4ef6","text":""},{"location":"development_guide/#pyprojecttoml","title":"pyproject.toml","text":"<p>\u9879\u76ee\u7684\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\uff1a</p> <ul> <li>\u5305\u5143\u6570\u636e\u548c\u4f9d\u8d56</li> <li>Ruff \u914d\u7f6e\uff08\u4ee3\u7801\u68c0\u67e5\u89c4\u5219\uff09</li> <li>MyPy \u914d\u7f6e\uff08\u7c7b\u578b\u68c0\u67e5\uff09</li> <li>Pytest \u914d\u7f6e</li> </ul>"},{"location":"development_guide/#pre-commit-configyaml","title":".pre-commit-config.yaml","text":"<p>Pre-commit \u94a9\u5b50\u914d\u7f6e\uff0c\u786e\u4fdd\u4ee3\u7801\u8d28\u91cf\uff1a</p> <ul> <li>Ruff \u68c0\u67e5\u548c\u683c\u5f0f\u5316</li> <li>MyPy \u7c7b\u578b\u68c0\u67e5</li> <li>YAML \u8bed\u6cd5\u68c0\u67e5</li> <li>\u5c3e\u968f\u7a7a\u767d\u5904\u7406</li> </ul>"},{"location":"development_guide/#cicd","title":"\ud83d\udea6 CI/CD","text":""},{"location":"development_guide/#github-actions","title":"GitHub Actions","text":"<p><code>.github/workflows/pr-check.yml</code> \u5b9a\u4e49\u4e86 CI \u6d41\u7a0b\uff1a</p> <ol> <li>\u73af\u5883\u8bbe\u7f6e: \u5b89\u88c5 Python \u548c uv</li> <li>\u4f9d\u8d56\u5b89\u88c5: <code>uv sync --all-extras --dev</code></li> <li>\u4ee3\u7801\u68c0\u67e5: Ruff + MyPy</li> <li>\u6d4b\u8bd5\u8fd0\u884c: pytest</li> <li>YAML \u9a8c\u8bc1: \u914d\u7f6e\u6587\u4ef6\u68c0\u67e5</li> </ol>"},{"location":"development_guide/#ci","title":"\u672c\u5730\u6a21\u62df CI","text":"<pre><code># \u6a21\u62df CI \u68c0\u67e5\u6d41\u7a0b\nuv sync --all-extras --dev\nuv run ruff check src/\nuv run ruff format src/ --check\nuv run mypy src/\nuv run pytest tests/\n</code></pre>"},{"location":"development_guide/#_13","title":"\ud83d\udca1 \u5f00\u53d1\u6280\u5de7","text":""},{"location":"development_guide/#1-uv_1","title":"1. \u4f7f\u7528 uv \u8fd0\u884c\u811a\u672c","text":"<pre><code># \u76f4\u63a5\u8fd0\u884c Python \u811a\u672c\nuv run python demo/universe_demo.py\n\n# \u8fd0\u884c\u5355\u4e2a\u547d\u4ee4\nuv run python -c \"import cryptoservice; print('OK')\"\n</code></pre>"},{"location":"development_guide/#2_1","title":"2. \u4ee3\u7801\u7ec4\u7ec7\u539f\u5219","text":"<ul> <li>\u6a21\u5757\u5316: \u5c06\u76f8\u5173\u529f\u80fd\u7ec4\u7ec7\u5728\u4e00\u8d77</li> <li>\u7c7b\u578b\u63d0\u793a: \u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027</li> <li>\u6587\u6863\u5b57\u7b26\u4e32: \u4e3a\u516c\u5171 API \u7f16\u5199\u6587\u6863</li> <li>\u9519\u8bef\u5904\u7406: \u4f7f\u7528\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b\u578b</li> </ul>"},{"location":"development_guide/#3","title":"3. \u8c03\u8bd5\u6280\u5de7","text":"<pre><code># \u542f\u7528\u8be6\u7ec6\u65e5\u5fd7\nexport PYTHONPATH=src:$PYTHONPATH\nexport LOG_LEVEL=DEBUG\n\n# \u8fd0\u884c\u5355\u4e2a\u6a21\u5757\nuv run python -m cryptoservice.services.market_service\n</code></pre>"},{"location":"development_guide/#_14","title":"\ud83d\udd04 \u5de5\u4f5c\u6d41\u7a0b","text":""},{"location":"development_guide/#_15","title":"\u5178\u578b\u5f00\u53d1\u6d41\u7a0b","text":"<ol> <li> <p>\u521b\u5efa\u529f\u80fd\u5206\u652f:    <pre><code>git checkout -b feature/new-feature\n</code></pre></p> </li> <li> <p>\u5f00\u53d1\u548c\u6d4b\u8bd5:    <pre><code># \u7f16\u5199\u4ee3\u7801\n# \u8fd0\u884c\u6d4b\u8bd5\nuv run pytest tests/\n</code></pre></p> </li> <li> <p>\u4ee3\u7801\u68c0\u67e5:    <pre><code># \u683c\u5f0f\u5316\u4ee3\u7801\nuv run ruff format src/\n\n# \u68c0\u67e5\u95ee\u9898\nuv run ruff check --fix src/\n\n# \u7c7b\u578b\u68c0\u67e5\nuv run mypy src/\n</code></pre></p> </li> <li> <p>\u63d0\u4ea4\u4ee3\u7801:    <pre><code>git add .\ngit commit -m \"feat: add new feature\"  # \u9075\u5faa\u7ea6\u5b9a\u5f0f\u63d0\u4ea4\n</code></pre></p> </li> <li> <p>\u63a8\u9001\u548c PR:    <pre><code>git push origin feature/new-feature\n# \u5728 GitHub \u521b\u5efa Pull Request\n</code></pre></p> </li> </ol>"},{"location":"development_guide/#_16","title":"\ud83c\udd98 \u5e38\u89c1\u95ee\u9898","text":""},{"location":"development_guide/#q-uv-sync","title":"Q: uv sync \u5931\u8d25\u600e\u4e48\u529e\uff1f","text":"<pre><code># \u6e05\u7406\u7f13\u5b58\u91cd\u8bd5\nuv cache clean\nuv sync --all-extras --dev\n</code></pre>"},{"location":"development_guide/#q-pre-commit","title":"Q: pre-commit \u94a9\u5b50\u5931\u8d25\uff1f","text":"<pre><code># \u624b\u52a8\u8fd0\u884c\u6240\u6709\u94a9\u5b50\nuv run pre-commit run --all-files\n\n# \u8df3\u8fc7\u94a9\u5b50\u63d0\u4ea4\uff08\u4e0d\u63a8\u8350\uff09\ngit commit --no-verify\n</code></pre>"},{"location":"development_guide/#q","title":"Q: \u7c7b\u578b\u68c0\u67e5\u9519\u8bef\uff1f","text":"<pre><code># \u67e5\u770b\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\nuv run mypy src/ --show-error-codes --verbose\n</code></pre>"},{"location":"development_guide/#_17","title":"\ud83d\udcda \u66f4\u591a\u8d44\u6e90","text":"<ul> <li>uv \u5b98\u65b9\u6587\u6863</li> <li>Ruff \u914d\u7f6e\u6307\u5357</li> <li>MyPy \u7c7b\u578b\u68c0\u67e5\u6307\u5357</li> <li>\u7ea6\u5b9a\u5f0f\u63d0\u4ea4\u89c4\u8303</li> </ul> <p>\ud83c\udf89 \u73b0\u5728\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u8fdb\u884c CryptoService \u7684\u5f00\u53d1\u4e86\uff01\u6709\u95ee\u9898\u6b22\u8fce\u63d0 Issue\u3002</p>"},{"location":"api/market_service/","title":"\u5e02\u573a\u6570\u636e\u670d\u52a1","text":""},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService","title":"<code>cryptoservice.services.market_service.MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: MarketDB | None = None\n    self.rate_limit_manager = RateLimitManager()\n    self.failed_downloads: dict[str, list[dict]] = {}  # \u8bb0\u5f55\u5931\u8d25\u7684\u4e0b\u8f7d\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService-functions","title":"Functions","text":""},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <p>SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True, quote_asset: str = 'USDT') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True, quote_asset: str = \"USDT\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u7b5b\u9009\u6761\u4ef6\uff1a{quote_asset}\u7ed3\u5c3e\uff09\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n            and symbol[\"symbol\"].endswith(quote_asset)\n        ]\n\n        logger.info(f\"\u627e\u5230 {len(perpetual_symbols)} \u4e2a{quote_asset}\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\")\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time, end_time = self._date_to_timestamp_range(date)\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol,\n            interval=\"1d\",\n            startTime=start_time,\n            endTime=end_time,\n            limit=1,\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; list[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[DailyMarketTicker]</code> <p>list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; list[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers_result = self.get_symbol_ticker()\n        if isinstance(tickers_result, list):\n            tickers = [ticker.to_dict() for ticker in tickers_result]\n        else:\n            tickers = [tickers_result.to_dict()]\n        summary[\"data\"] = tickers\n\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; list[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09\n\n    Returns:\n        list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        # \u5904\u7406\u65f6\u95f4\u683c\u5f0f\n        if isinstance(start_time, str):\n            start_time = datetime.fromisoformat(start_time)\n        if end_time is None:\n            end_time = datetime.now()\n        elif isinstance(end_time, str):\n            end_time = datetime.fromisoformat(end_time)\n\n        # \u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time.strftime(\"%Y-%m-%d\"))\n        end_ts = self._date_to_timestamp_end(end_time.strftime(\"%Y-%m-%d\"))\n\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u5386\u53f2\u6570\u636e ({interval.value})\")\n\n        # \u6839\u636eklines_type\u9009\u62e9API\n        if klines_type == HistoricalKlinesType.FUTURES:\n            klines = self.client.futures_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n        else:  # SPOT\n            klines = self.client.get_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n\n        data = list(klines)\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230\u4ea4\u6613\u5bf9 {symbol} \u5728\u6307\u5b9a\u65f6\u95f4\u6bb5\u5185\u7684\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aKlineMarketTicker\u5bf9\u8c61\n        return [\n            KlineMarketTicker(\n                symbol=symbol,\n                last_price=Decimal(str(kline[4])),  # \u6536\u76d8\u4ef7\u4f5c\u4e3a\u6700\u65b0\u4ef7\u683c\n                open_price=Decimal(str(kline[1])),\n                high_price=Decimal(str(kline[2])),\n                low_price=Decimal(str(kline[3])),\n                volume=Decimal(str(kline[5])),\n                close_time=kline[6],\n            )\n            for kline in data\n        ]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>retry_config</code> <p>\u91cd\u8bd5\u914d\u7f6e</p> <p> TYPE: <code>Optional[RetryConfig]</code> DEFAULT: <code>None</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>enable_integrity_check</code> <p>\u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> RETURNS DESCRIPTION <code>IntegrityReport</code> <p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p> <p> TYPE: <code>IntegrityReport</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    # \u989d\u5916\u53c2\u6570\uff0c\u4fdd\u6301\u5411\u540e\u517c\u5bb9\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        retry_config: \u91cd\u8bd5\u914d\u7f6e\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n        enable_integrity_check: \u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n\n    Returns:\n        IntegrityReport: \u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a\n    \"\"\"\n    if retry_config is None:\n        retry_config = RetryConfig(max_retries=max_retries)\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u7edf\u8ba1\n    successful_symbols = []\n    failed_symbols = []\n    missing_periods = []\n\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time)\n        end_ts = self._date_to_timestamp_end(end_time)\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n        if self.db is None:\n            self.db = MarketDB(str(db_file_path))\n\n        # \u91cd\u65b0\u521d\u59cb\u5316\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668\uff0c\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u7684\u57fa\u7840\u5ef6\u8fdf\n        self.rate_limit_manager = RateLimitManager(base_delay=request_delay)\n\n        logger.info(f\"\ud83d\ude80 \u5f00\u59cb\u4e0b\u8f7d {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\")\n        logger.info(f\"\ud83d\udcc5 \u65f6\u95f4\u8303\u56f4: {start_time} \u5230 {end_time}\")\n        logger.info(f\"\u2699\ufe0f \u91cd\u8bd5\u914d\u7f6e: \u6700\u5927{retry_config.max_retries}\u6b21, \u57fa\u7840\u5ef6\u8fdf{retry_config.base_delay}\u79d2\")\n        logger.info(f\"\u23f1\ufe0f \u667a\u80fd\u9891\u7387\u63a7\u5236: \u57fa\u7840\u5ef6\u8fdf{request_delay}\u79d2\uff0c\u52a8\u6001\u8c03\u6574\")\n\n        # \u521b\u5efa\u8fdb\u5ea6\u8ddf\u8e2a\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TimeElapsedColumn(),\n            )\n\n        def process_symbol(symbol: str) -&gt; Dict[str, Any]:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6 (\u589e\u5f3a\u7248)\"\"\"\n            result = {\n                \"symbol\": symbol,\n                \"success\": False,\n                \"records\": 0,\n                \"error\": None,\n            }\n\n            try:\n                data = self._fetch_symbol_data(\n                    symbol=symbol,\n                    start_ts=start_ts,\n                    end_ts=end_ts,\n                    interval=interval,\n                    retry_config=retry_config,\n                )\n\n                if data:\n                    if self.db is None:\n                        raise MarketDataFetchError(\"Database is not initialized\")\n\n                    self.db.store_data(data, interval)\n                    result.update(\n                        {\n                            \"success\": True,\n                            \"records\": len(data),\n                            \"time_range\": f\"{data[0].open_time} - {data[-1].open_time}\",\n                        }\n                    )\n                    logger.debug(f\"\u2705 {symbol}: {len(data)} \u6761\u8bb0\u5f55\")\n                    successful_symbols.append(symbol)\n                else:\n                    result[\"error\"] = \"\u65e0\u6570\u636e\"\n                    logger.debug(f\"\u26a0\ufe0f {symbol}: \u65e0\u6570\u636e\")\n                    missing_periods.append(\n                        {\n                            \"symbol\": symbol,\n                            \"period\": f\"{start_time} - {end_time}\",\n                            \"reason\": \"no_data\",\n                        }\n                    )\n\n            except InvalidSymbolError as e:\n                result[\"error\"] = f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\"\n                logger.warning(f\"\u26a0\ufe0f \u8df3\u8fc7\u65e0\u6548\u4ea4\u6613\u5bf9 {symbol}\")\n                failed_symbols.append(symbol)\n\n            except Exception as e:\n                result[\"error\"] = str(e)\n                logger.error(f\"\u274c {symbol} \u5931\u8d25: {e}\")\n                failed_symbols.append(symbol)\n                missing_periods.append(\n                    {\n                        \"symbol\": symbol,\n                        \"period\": f\"{start_time} - {end_time}\",\n                        \"reason\": str(e),\n                    }\n                )\n\n            return result\n\n        # \u6267\u884c\u5e76\u884c\u4e0b\u8f7d\n        results = []\n        with progress if progress is not None else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u4e0b\u8f7d\u4ea4\u6613\u5bf9\u6570\u636e\", total=len(symbols)) if progress else None\n\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                for future in as_completed(futures):\n                    try:\n                        result = future.result()\n                        results.append(result)\n\n                        if progress and overall_task is not None:\n                            progress.update(overall_task, advance=1)\n\n                    except Exception as e:\n                        logger.error(f\"\u274c \u5904\u7406\u5f02\u5e38: {e}\")\n\n        # \u751f\u6210\u7edf\u8ba1\u62a5\u544a\n        total_records = sum(r.get(\"records\", 0) for r in results)\n        success_rate = len(successful_symbols) / len(symbols) if symbols else 0\n\n        logger.info(\"\ud83d\udcca \u4e0b\u8f7d\u5b8c\u6210\u7edf\u8ba1:\")\n        logger.info(f\"   \u2705 \u6210\u529f: {len(successful_symbols)}/{len(symbols)} ({success_rate:.1%})\")\n        logger.info(f\"   \u274c \u5931\u8d25: {len(failed_symbols)} \u4e2a\")\n        logger.info(f\"   \ud83d\udcc8 \u603b\u8bb0\u5f55\u6570: {total_records:,} \u6761\")\n        logger.info(f\"   \ud83d\udcbe \u6570\u636e\u5e93: {db_file_path}\")\n\n        # \u6267\u884c\u5b8c\u6574\u6027\u68c0\u67e5\n        if enable_integrity_check and self.db:\n            integrity_report = self._create_integrity_report(\n                symbols=symbols,\n                successful_symbols=successful_symbols,\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                start_time=start_time,\n                end_time=end_time,\n                interval=interval,\n                db_file_path=db_file_path,\n            )\n        else:\n            # \u751f\u6210\u57fa\u7840\u62a5\u544a\n            data_quality_score = len(successful_symbols) / len(symbols) if symbols else 0\n            recommendations = []\n            if data_quality_score &lt; 0.8:\n                recommendations.append(\"\u6570\u636e\u6210\u529f\u7387\u8f83\u4f4e\uff0c\u5efa\u8bae\u68c0\u67e5\u7f51\u7edc\u548cAPI\u914d\u7f6e\")\n            if failed_symbols:\n                recommendations.append(f\"\u6709{len(failed_symbols)}\u4e2a\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5931\u8d25\uff0c\u5efa\u8bae\u5355\u72ec\u91cd\u8bd5\")\n\n            integrity_report = IntegrityReport(\n                total_symbols=len(symbols),\n                successful_symbols=len(successful_symbols),\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                data_quality_score=data_quality_score,\n                recommendations=recommendations,\n            )\n\n        return integrity_report\n\n    except Exception as e:\n        logger.error(f\"\u274c \u6570\u636e\u4e0b\u8f7d\u5931\u8d25: {e}\")\n        # \u5373\u4f7f\u5931\u8d25\u4e5f\u8981\u8fd4\u56de\u62a5\u544a\n        return IntegrityReport(\n            total_symbols=len(symbols),\n            successful_symbols=len(successful_symbols),\n            failed_symbols=failed_symbols,\n            missing_periods=missing_periods,\n            data_quality_score=0.0,\n            recommendations=[f\"\u4e0b\u8f7d\u5931\u8d25: {e}\", \"\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u548cAPI\u914d\u7f6e\"],\n        )\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u8f93\u51fa\u8def\u5f84\n        output_path_obj = self._validate_and_prepare_path(\n            output_path,\n            is_file=True,\n            file_name=(\n                f\"universe_{start_date}_{end_date}_{t1_months}_{t2_months}_{t3_months}_{top_k or top_ratio}.json\"\n            ),\n        )\n\n        # \u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f\n        start_date = self._standardize_date_format(start_date)\n        end_date = self._standardize_date_format(end_date)\n\n        # \u521b\u5efa\u914d\u7f6e\n        config = UniverseConfig(\n            start_date=start_date,\n            end_date=end_date,\n            t1_months=t1_months,\n            t2_months=t2_months,\n            t3_months=t3_months,\n            delay_days=delay_days,\n            quote_asset=quote_asset,\n            top_k=top_k,\n            top_ratio=top_ratio,\n        )\n\n        logger.info(f\"\u5f00\u59cb\u5b9a\u4e49universe: {start_date} \u5230 {end_date}\")\n        log_selection_criteria = f\"Top-K={top_k}\" if top_k else f\"Top-Ratio={top_ratio}\"\n        logger.info(f\"\u53c2\u6570: T1={t1_months}\u6708, T2={t2_months}\u6708, T3={t3_months}\u6708, {log_selection_criteria}\")\n\n        # \u751f\u6210\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u5e8f\u5217 (\u6bcfT2\u4e2a\u6708)\n        # \u4ece\u8d77\u59cb\u65e5\u671f\u5f00\u59cb\uff0c\u6bcf\u9694T2\u4e2a\u6708\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8868\u793auniverse\u91cd\u65b0\u9009\u62e9\u7684\u65f6\u95f4\u70b9\n        rebalance_dates = self._generate_rebalance_dates(start_date, end_date, t2_months)\n\n        logger.info(\"\u91cd\u5e73\u8861\u8ba1\u5212:\")\n        logger.info(f\"  - \u65f6\u95f4\u8303\u56f4: {start_date} \u5230 {end_date}\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u95f4\u9694: \u6bcf{t2_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u6570\u636e\u5ef6\u8fdf: {delay_days}\u5929\")\n        logger.info(f\"  - T1\u6570\u636e\u7a97\u53e3: {t1_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u65e5\u671f: {rebalance_dates}\")\n\n        if not rebalance_dates:\n            raise ValueError(\"\u65e0\u6cd5\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8bf7\u68c0\u67e5\u65f6\u95f4\u8303\u56f4\u548cT2\u53c2\u6570\")\n\n        # \u6536\u96c6\u6240\u6709\u5468\u671f\u7684snapshots\n        all_snapshots = []\n\n        # \u5728\u6bcf\u4e2a\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u8ba1\u7b97universe\n        for i, rebalance_date in enumerate(rebalance_dates):\n            logger.info(f\"\u5904\u7406\u65e5\u671f {i + 1}/{len(rebalance_dates)}: {rebalance_date}\")\n\n            # \u8ba1\u7b97\u57fa\u51c6\u65e5\u671f\uff08\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff09\n            base_date = pd.to_datetime(rebalance_date) - timedelta(days=delay_days)\n            calculated_t1_end = base_date.strftime(\"%Y-%m-%d\")\n\n            # \u8ba1\u7b97T1\u56de\u770b\u671f\u95f4\u7684\u5f00\u59cb\u65e5\u671f\uff08\u4ecebase_date\u5f80\u524d\u63a8T1\u4e2a\u6708\uff09\n            calculated_t1_start = self._subtract_months(calculated_t1_end, t1_months)\n\n            logger.info(\n                f\"\u5468\u671f {i + 1}: \u57fa\u51c6\u65e5\u671f={calculated_t1_end} (\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d{delay_days}\u5929), \"\n                f\"T1\u6570\u636e\u671f\u95f4={calculated_t1_start} \u5230 {calculated_t1_end}\"\n            )\n\n            # \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u548c\u5b83\u4eec\u7684mean daily amount\n            universe_symbols, mean_amounts = self._calculate_universe_for_date(\n                calculated_t1_start,\n                calculated_t1_end,\n                t3_months=t3_months,\n                top_k=top_k,\n                top_ratio=top_ratio,\n                api_delay_seconds=api_delay_seconds,\n                batch_delay_seconds=batch_delay_seconds,\n                batch_size=batch_size,\n                quote_asset=quote_asset,\n            )\n\n            # \u521b\u5efa\u8be5\u5468\u671f\u7684snapshot\n            snapshot = UniverseSnapshot.create_with_dates_and_timestamps(\n                usage_t1_start=rebalance_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n                usage_t1_end=min(\n                    end_date,\n                    (pd.to_datetime(rebalance_date) + pd.DateOffset(months=t1_months)).strftime(\"%Y-%m-%d\"),\n                ),  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n                calculated_t1_start=calculated_t1_start,  # \u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n                calculated_t1_end=calculated_t1_end,  # \u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u57fa\u51c6\u65e5\u671f\uff09\n                symbols=universe_symbols,\n                mean_daily_amounts=mean_amounts,\n                metadata={\n                    \"calculated_t1_start\": calculated_t1_start,\n                    \"calculated_t1_end\": calculated_t1_end,\n                    \"delay_days\": delay_days,\n                    \"quote_asset\": quote_asset,\n                    \"selected_symbols_count\": len(universe_symbols),\n                },\n            )\n\n            all_snapshots.append(snapshot)\n\n            logger.info(f\"\u2705 \u65e5\u671f {rebalance_date}: \u9009\u62e9\u4e86 {len(universe_symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\n        # \u521b\u5efa\u5b8c\u6574\u7684universe\u5b9a\u4e49\n        universe_def = UniverseDefinition(\n            config=config,\n            snapshots=all_snapshots,\n            creation_time=datetime.now(),\n            description=description,\n        )\n\n        # \u4fdd\u5b58\u6c47\u603b\u7684universe\u5b9a\u4e49\n        universe_def.save_to_file(output_path_obj)\n\n        logger.info(\"\ud83c\udf89 Universe\u5b9a\u4e49\u5b8c\u6210\uff01\")\n        logger.info(f\"\ud83d\udcc1 \u5305\u542b {len(all_snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\")\n        logger.info(f\"\ud83d\udccb \u6c47\u603b\u6587\u4ef6: {output_path_obj}\")\n\n        return universe_def\n\n    except Exception as e:\n        logger.error(f\"[red]\u5b9a\u4e49universe\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u5b9a\u4e49universe\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.m1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: RetryConfig | None = None, request_delay: float = 0.5, download_market_metrics: bool = True, metrics_interval: Freq = Freq.m5, long_short_ratio_period: Freq = Freq.m5, long_short_ratio_types: list[str] | None = None, use_binance_vision: bool = False) -&gt; None</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>download_funding_rate</code> <p>\u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> </p> <code>download_market_metrics</code> <p>\u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>metrics_interval</code> <p>\u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_types</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: RetryConfig | None = None,\n    request_delay: float = 0.5,  # \u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n    download_market_metrics: bool = True,  # \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n    metrics_interval: Freq = Freq.m5,  # \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n    long_short_ratio_period: Freq = Freq.m5,  # \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n    long_short_ratio_types: list[str] | None = None,  # \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n    use_binance_vision: bool = False,  # \u662f\u5426\u4f7f\u7528 Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\n) -&gt; None:\n    \"\"\"\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002\n\n    \u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)\n        interval: \u6570\u636e\u9891\u7387\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n        download_funding_rate: \u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        download_market_metrics: \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n        metrics_interval: \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n        long_short_ratio_period: \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n        long_short_ratio_types: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = self._validate_and_prepare_path(universe_file, is_file=True)\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n\n        # data_path\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u9a8c\u8bc1\n        data_path_obj = None\n        if data_path:\n            data_path_obj = self._validate_and_prepare_path(data_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        # \u8bbe\u7f6e\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u9ed8\u8ba4\u503c\n        if long_short_ratio_types is None:\n            long_short_ratio_types = [\"account\", \"position\"]\n\n        logger.info(\"\ud83d\udcca \u6309\u5468\u671f\u4e0b\u8f7d\u6570\u636e:\")\n        logger.info(f\"   - \u603b\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u6570\u636e\u9891\u7387: {interval.value}\")\n        logger.info(f\"   - \u5e76\u53d1\u7ebf\u7a0b: {max_workers}\")\n        logger.info(f\"   - \u8bf7\u6c42\u95f4\u9694: {request_delay}\u79d2\")\n        logger.info(f\"   - \u6570\u636e\u5e93\u8def\u5f84: {db_file_path}\")\n        logger.info(f\"   - \u4e0b\u8f7d\u5e02\u573a\u6307\u6807: {download_market_metrics}\")\n        if download_market_metrics:\n            logger.info(f\"   - \u6307\u6807\u6570\u636e\u95f4\u9694: {metrics_interval}\")\n            logger.info(f\"   - \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b: {long_short_ratio_types}\")\n        if data_path_obj:\n            logger.info(f\"   - \u6570\u636e\u6587\u4ef6\u8def\u5f84: {data_path_obj}\")\n\n        # \u4e3a\u6bcf\u4e2a\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"\ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            logger.info(f\"   - \u4ea4\u6613\u5bf9\u6570\u91cf: {len(snapshot.symbols)}\")\n            logger.info(\n                f\"   - \u8ba1\u7b97\u671f\u95f4: {snapshot.calculated_t1_start} \u5230 {snapshot.calculated_t1_end} (\u5b9a\u4e49universe)\"\n            )\n            logger.info(f\"   - \u4f7f\u7528\u671f\u95f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u5b9e\u9645\u4f7f\u7528)\")\n            logger.info(\n                f\"   - \u4e0b\u8f7d\u8303\u56f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u542b{include_buffer_days}\u5929\u7f13\u51b2)\"\n            )\n\n            # \u4e0b\u8f7dK\u7ebf\u6570\u636e\n            self.get_perpetual_data(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                db_path=db_file_path,\n                interval=interval,\n                max_workers=max_workers,\n                max_retries=max_retries,\n                retry_config=retry_config,\n                enable_integrity_check=True,\n                request_delay=request_delay,\n            )\n\n            # \u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\n            if download_market_metrics:\n                logger.info(\"   \ud83d\udcc8 \u5f00\u59cb\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e...\")\n                self._download_market_metrics_for_snapshot(\n                    snapshot=snapshot,\n                    db_path=db_file_path,\n                    interval=metrics_interval,\n                    period=long_short_ratio_period,\n                    long_short_ratio_types=long_short_ratio_types,\n                    request_delay=request_delay,\n                    use_binance_vision=use_binance_vision,\n                )\n\n            logger.info(f\"   \u2705 \u5feb\u7167 {snapshot.effective_date} \u4e0b\u8f7d\u5b8c\u6210\")\n\n        logger.info(\"\ud83c\udf89 \u6240\u6709universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210!\")\n        logger.info(f\"\ud83d\udcc1 \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {db_file_path}\")\n\n    except Exception as e:\n        logger.error(f\"[red]\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 100) -&gt; list[FundingRate]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> Note <ul> <li>\u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e</li> <li>\u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761</li> <li>\u6570\u636e\u6309\u5347\u5e8f\u6392\u5217</li> <li>\u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236</li> </ul> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 100,  # \u6539\u4e3aAPI\u9ed8\u8ba4\u503c\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Note:\n        - \u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e\n        - \u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761\n        - \u6570\u636e\u6309\u5347\u5e8f\u6392\u5217\n        - \u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n\n        # \u53c2\u6570\u9a8c\u8bc1\n        if limit &lt; 1 or limit &gt; 1000:\n            raise ValueError(f\"limit\u53c2\u6570\u5fc5\u987b\u57281-1000\u8303\u56f4\u5185\uff0c\u5f53\u524d\u503c: {limit}\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"limit\": limit,\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236 - Funding Rate API: 500\u8bf7\u6c42/5\u5206\u949f/IP (\u66f4\u4e25\u683c)\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API\n        data = self.client.futures_funding_rate(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aFundingRate\u5bf9\u8c61\n        funding_rates = [FundingRate.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(funding_rates)} \u6761\u8d44\u91d1\u8d39\u7387\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return funding_rates\n\n    except ValueError as e:\n        logger.error(f\"[red]\u53c2\u6570\u9a8c\u8bc1\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API - \u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u91cf\u6570\u636e\n        data = self.client.futures_open_interest_hist(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aOpenInterest\u5bf9\u8c61\n        open_interests = [OpenInterest.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(open_interests)} \u6761\u6301\u4ed3\u91cf\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return open_interests\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e (\u7c7b\u578b: {ratio_type})\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u6839\u636eratio_type\u9009\u62e9\u4e0d\u540c\u7684API\u7aef\u70b9\n        if ratio_type == \"account\":\n            data = self.client.futures_top_longshort_account_ratio(**params)\n        elif ratio_type == \"position\":\n            data = self.client.futures_top_longshort_position_ratio(**params)\n        elif ratio_type == \"global\":\n            data = self.client.futures_global_longshort_ratio(**params)\n        elif ratio_type == \"taker\":\n            data = self.client.futures_taker_longshort_ratio(**params)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684ratio_type: {ratio_type}\")\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aLongShortRatio\u5bf9\u8c61\n        long_short_ratios = [LongShortRatio.from_binance_response(item, ratio_type) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(long_short_ratios)} \u6761\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return long_short_ratios\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.download_binance_vision_metrics","title":"<code>download_binance_vision_metrics(symbols: list[str], start_date: str, end_date: str, data_types: list[str] | None = None, request_delay: float = 1.0) -&gt; None</code>","text":"<p>\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_types</code> <p>\u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_binance_vision_metrics(\n    self,\n    symbols: list[str],\n    start_date: str,\n    end_date: str,\n    data_types: list[str] | None = None,\n    request_delay: float = 1.0,\n) -&gt; None:\n    \"\"\"\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        data_types: \u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"\n        request_delay: \u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09\n    \"\"\"\n    if data_types is None:\n        data_types = [\"openInterest\", \"longShortRatio\"]\n\n    try:\n        logger.info(f\"\u5f00\u59cb\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e: {data_types}\")\n\n        if self.db is None:\n            raise ValueError(\"\u6570\u636e\u5e93\u672a\u521d\u59cb\u5316\")\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        for date in date_range:\n            date_str = date.strftime(\"%Y-%m-%d\")\n            logger.info(f\"\u5904\u7406\u65e5\u671f: {date_str}\")\n\n            # \u4e0b\u8f7d\u6307\u6807\u6570\u636e\uff08\u6240\u6709\u7c7b\u578b\u90fd\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff09\n            self._download_metrics_from_vision(symbols, date_str, request_delay)\n\n            # \u8bf7\u6c42\u5ef6\u8fdf\n            if request_delay &gt; 0:\n                time.sleep(request_delay)\n\n        logger.info(\"\u2705 Binance Vision \u6307\u6807\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_failed_downloads","title":"<code>get_failed_downloads() -&gt; dict[str, list[dict]]</code>","text":"<p>\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[dict]]</code> <p>\u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_failed_downloads(self) -&gt; dict[str, list[dict]]:\n    \"\"\"\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Returns:\n        \u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178\n    \"\"\"\n    return self.failed_downloads.copy()\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.clear_failed_downloads","title":"<code>clear_failed_downloads(symbol: str | None = None) -&gt; None</code>","text":"<p>\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def clear_failed_downloads(self, symbol: str | None = None) -&gt; None:\n    \"\"\"\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709\n    \"\"\"\n    if symbol:\n        self.failed_downloads.pop(symbol, None)\n    else:\n        self.failed_downloads.clear()\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.retry_failed_downloads","title":"<code>retry_failed_downloads(symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]</code>","text":"<p>\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>\u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def retry_failed_downloads(self, symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]:\n    \"\"\"\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n\n    Returns:\n        \u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1\n    \"\"\"\n    if not self.failed_downloads:\n        logger.info(\"\ud83d\udccb \u6ca1\u6709\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\")\n        return {\"total\": 0, \"success\": 0, \"failed\": 0}\n\n    symbols_to_retry = [symbol] if symbol else list(self.failed_downloads.keys())\n    total_attempts = 0\n    success_count = 0\n    failed_count = 0\n\n    for retry_symbol in symbols_to_retry:\n        if retry_symbol not in self.failed_downloads:\n            continue\n\n        failures = self.failed_downloads[retry_symbol].copy()\n\n        for failure in failures:\n            if failure[\"retry_count\"] &gt;= max_retries:\n                logger.debug(f\"\u23ed\ufe0f {retry_symbol}: \u8df3\u8fc7\uff0c\u5df2\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\")\n                continue\n\n            total_attempts += 1\n\n            try:\n                logger.info(f\"\ud83d\udd04 \u91cd\u8bd5\u4e0b\u8f7d {retry_symbol}: {failure['date']}\")\n\n                # \u5c1d\u8bd5\u91cd\u65b0\u4e0b\u8f7d\n                retry_config = RetryConfig(max_retries=2, base_delay=3.0)\n                metrics_data = self._download_and_parse_metrics_csv(failure[\"url\"], retry_symbol, retry_config)\n\n                if metrics_data and self.db:\n                    # \u5b58\u50a8\u6570\u636e\n                    if metrics_data.get(\"open_interest\"):\n                        self.db.store_open_interest(metrics_data[\"open_interest\"])\n                    if metrics_data.get(\"long_short_ratio\"):\n                        self.db.store_long_short_ratio(metrics_data[\"long_short_ratio\"])\n\n                    # \u4ece\u5931\u8d25\u5217\u8868\u4e2d\u79fb\u9664\n                    self.failed_downloads[retry_symbol].remove(failure)\n                    if not self.failed_downloads[retry_symbol]:\n                        del self.failed_downloads[retry_symbol]\n\n                    success_count += 1\n                    logger.info(f\"\u2705 {retry_symbol}: \u91cd\u8bd5\u6210\u529f\")\n\n                else:\n                    failure[\"retry_count\"] += 1\n                    failed_count += 1\n                    logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5931\u8d25\")\n\n            except Exception as e:\n                failure[\"retry_count\"] += 1\n                failed_count += 1\n                logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5f02\u5e38 - {e}\")\n\n            # \u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u91cd\u8bd5\n            time.sleep(1.0)\n\n    result: dict[str, Any] = {\n        \"total\": total_attempts,\n        \"success\": success_count,\n        \"failed\": failed_count,\n    }\n\n    logger.info(f\"\ud83d\udcca \u91cd\u8bd5\u7edf\u8ba1: \u603b\u8ba1 {total_attempts}, \u6210\u529f {success_count}, \u5931\u8d25 {failed_count}\")\n    return result\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_categories","title":"<code>get_symbol_categories() -&gt; dict[str, list[str]]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[str]]</code> <p>\u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_symbol_categories() -&gt; dict[str, list[str]]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Returns:\n        \u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(\"\u83b7\u53d6 Binance \u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f...\")\n\n        # \u8c03\u7528 Binance \u5206\u7c7b API\n        url = \"https://www.binance.com/bapi/composite/v1/public/marketing/symbol/list\"\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n\n        if data.get(\"code\") != \"000000\":\n            raise ValueError(f\"API \u8fd4\u56de\u9519\u8bef: {data.get('message', 'Unknown error')}\")\n\n        # \u63d0\u53d6 symbol \u548c tags \u7684\u6620\u5c04\u5173\u7cfb\n        symbol_categories = {}\n        for item in data.get(\"data\", []):\n            symbol = item.get(\"symbol\", \"\")\n            tags = item.get(\"tags\", [])\n\n            # \u53ea\u4fdd\u7559 USDT \u4ea4\u6613\u5bf9\n            if symbol.endswith(\"USDT\"):\n                symbol_categories[symbol] = sorted(tags)  # \u5bf9\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {len(symbol_categories)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n        return symbol_categories\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_all_categories","title":"<code>get_all_categories() -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002</p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_all_categories() -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002\n\n    Returns:\n        \u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u6536\u96c6\u6240\u6709\u6807\u7b7e\n        all_tags = set()\n        for tags in symbol_categories.values():\n            all_tags.update(tags)\n\n        # \u6309\u5b57\u6bcd\u6392\u5e8f\n        return sorted(list(all_tags))\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u5206\u7c7b\u6807\u7b7e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.create_category_matrix","title":"<code>create_category_matrix(symbols: list[str], categories: list[str] | None = None) -&gt; tuple[list[str], list[str], list[list[int]]]</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u5143\u7ec4 (symbols, categories, matrix)</p> <code>list[str]</code> <ul> <li>symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</li> </ul> <code>list[list[int]]</code> <ul> <li>categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868</li> </ul> <code>tuple[list[str], list[str], list[list[int]]]</code> <ul> <li>matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]</li> </ul> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef create_category_matrix(\n    symbols: list[str], categories: list[str] | None = None\n) -&gt; tuple[list[str], list[str], list[list[int]]]:\n    \"\"\"\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n\n    Returns:\n        \u5143\u7ec4 (symbols, categories, matrix)\n        - symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n        - categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868\n        - matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5206\u7c7b\uff0c\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n        if categories is None:\n            categories = MarketDataService.get_all_categories()\n        else:\n            categories = sorted(categories)\n\n        # \u8fc7\u6ee4\u5e76\u6392\u5e8fsymbols\uff08\u53ea\u4fdd\u7559\u6709\u5206\u7c7b\u4fe1\u606f\u7684\uff09\n        valid_symbols = [s for s in symbols if s in symbol_categories]\n        valid_symbols.sort()\n\n        # \u521b\u5efa\u77e9\u9635\n        matrix = []\n        for symbol in valid_symbols:\n            symbol_tags = symbol_categories.get(symbol, [])\n            row = [1 if category in symbol_tags else 0 for category in categories]\n            matrix.append(row)\n\n        logger.info(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635: {len(valid_symbols)} symbols \u00d7 {len(categories)} categories\")\n\n        return valid_symbols, categories, matrix\n\n    except Exception as e:\n        logger.error(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.save_category_matrix_csv","title":"<code>save_category_matrix_csv(output_path: Path | str, symbols: list[str], date_str: str | None = None, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>date_str</code> <p>\u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef save_category_matrix_csv(\n    output_path: Path | str,\n    symbols: list[str],\n    date_str: str | None = None,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\u8def\u5f84\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        date_str: \u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        import csv\n        from datetime import datetime\n\n        output_path = Path(output_path)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65e5\u671f\uff0c\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        if date_str is None:\n            date_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u521b\u5efa\u5206\u7c7b\u77e9\u9635\n        valid_symbols, sorted_categories, matrix = MarketDataService.create_category_matrix(symbols, categories)\n\n        # \u6587\u4ef6\u540d\u683c\u5f0f: categories_YYYY-MM-DD.csv\n        filename = f\"categories_{date_str}.csv\"\n        file_path = output_path / filename\n\n        # \u5199\u5165 CSV \u6587\u4ef6\n        with open(file_path, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n            writer = csv.writer(csvfile)\n\n            # \u5199\u5165\u8868\u5934 (symbol, category1, category2, ...)\n            header = [\"symbol\"] + sorted_categories\n            writer.writerow(header)\n\n            # \u5199\u5165\u6570\u636e\u884c\n            for i, symbol in enumerate(valid_symbols):\n                row = [symbol] + matrix[i]\n                writer.writerow(row)\n\n        logger.info(f\"\u6210\u529f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5230: {file_path}\")\n        logger.info(f\"\u77e9\u9635\u5927\u5c0f: {len(valid_symbols)} symbols \u00d7 {len(sorted_categories)} categories\")\n\n    except Exception as e:\n        logger.error(f\"\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.download_and_save_categories_for_universe","title":"<code>download_and_save_categories_for_universe(universe_file: Path | str, output_path: Path | str, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe \u5b9a\u4e49\u6587\u4ef6</p> <p> TYPE: <code>Path | str</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef download_and_save_categories_for_universe(\n    universe_file: Path | str,\n    output_path: Path | str,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Args:\n        universe_file: universe \u5b9a\u4e49\u6587\u4ef6\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        from datetime import datetime\n\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = MarketDataService._validate_and_prepare_path(universe_file, is_file=True)\n        output_path_obj = MarketDataService._validate_and_prepare_path(output_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        logger.info(\"\ud83c\udff7\ufe0f \u5f00\u59cb\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f:\")\n        logger.info(f\"   - Universe\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u8f93\u51fa\u76ee\u5f55: {output_path_obj}\")\n\n        # \u6536\u96c6\u6240\u6709\u4ea4\u6613\u5bf9\n        all_symbols = set()\n        for snapshot in universe_def.snapshots:\n            all_symbols.update(snapshot.symbols)\n\n        all_symbols_list = sorted(list(all_symbols))\n        logger.info(f\"   - \u603b\u4ea4\u6613\u5bf9\u6570: {len(all_symbols_list)}\")\n\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u6240\u6709\u5386\u53f2\u6570\u636e\uff09\n        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n        logger.info(f\"   \ud83d\udcc5 \u83b7\u53d6 {current_date} \u7684\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u586b\u5145\u5386\u53f2\u6570\u636e\uff09\")\n\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u65e5\u671f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"   \ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            # \u4f7f\u7528\u5feb\u7167\u7684\u6709\u6548\u65e5\u671f\n            snapshot_date = snapshot.effective_date\n\n            # \u4fdd\u5b58\u8be5\u5feb\u7167\u7684\u5206\u7c7b\u77e9\u9635\n            MarketDataService.save_category_matrix_csv(\n                output_path=output_path_obj,\n                symbols=snapshot.symbols,\n                date_str=snapshot_date,\n                categories=categories,\n            )\n\n            logger.info(f\"       \u2705 \u4fdd\u5b58\u4e86 {len(snapshot.symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n\n        # \u4e5f\u4fdd\u5b58\u4e00\u4e2a\u5f53\u524d\u65e5\u671f\u7684\u5b8c\u6574\u77e9\u9635\uff08\u5305\u542b\u6240\u6709\u4ea4\u6613\u5bf9\uff09\n        logger.info(f\"   \ud83d\udcc5 \u4fdd\u5b58\u5f53\u524d\u65e5\u671f ({current_date}) \u7684\u5b8c\u6574\u5206\u7c7b\u77e9\u9635\")\n        MarketDataService.save_category_matrix_csv(\n            output_path=output_path_obj,\n            symbols=all_symbols_list,\n            date_str=current_date,\n            categories=categories,\n        )\n\n        logger.info(\"\u2705 \u6240\u6709\u5206\u7c7b\u4fe1\u606f\u4e0b\u8f7d\u548c\u4fdd\u5b58\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"api/models/","title":"\u6570\u636e\u6a21\u578b\u603b\u89c8","text":"<p>CryptoService \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6570\u636e\u6a21\u578b\u6765\u8868\u793a\u5e02\u573a\u6570\u636e\u548c\u914d\u7f6e\u3002</p>"},{"location":"api/models/#_2","title":"\ud83d\udcca \u6a21\u578b\u5206\u7c7b","text":""},{"location":"api/models/#_3","title":"\u5e02\u573a\u6570\u636e\u6a21\u578b","text":"<ul> <li>\u5e02\u573a\u884c\u60c5\u6a21\u578b - \u5b9e\u65f6\u884c\u60c5\u3001K\u7ebf\u6570\u636e\u7b49</li> <li>\u4ea4\u6613\u5bf9\u4fe1\u606f - \u4ea4\u6613\u5bf9\u914d\u7f6e\u548c\u72b6\u6001</li> </ul>"},{"location":"api/models/#universe","title":"Universe\u6a21\u578b","text":"<ul> <li>Universe \u6a21\u578b - \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u548c\u91cd\u5e73\u8861\u7b56\u7565</li> <li><code>UniverseConfig</code> - Universe\u914d\u7f6e\u53c2\u6570</li> <li><code>UniverseSnapshot</code> - \u7279\u5b9a\u65f6\u95f4\u70b9\u7684\u4ea4\u6613\u5bf9\u5feb\u7167</li> <li><code>UniverseDefinition</code> - \u5b8c\u6574\u7684Universe\u5b9a\u4e49\u548c\u5386\u53f2</li> </ul>"},{"location":"api/models/#_4","title":"\u679a\u4e3e\u7c7b\u578b","text":"<ul> <li>\u679a\u4e3e\u7c7b\u578b - \u9891\u7387\u3001\u6392\u5e8f\u65b9\u5f0f\u3001K\u7ebf\u7c7b\u578b\u7b49\u5e38\u91cf\u5b9a\u4e49</li> </ul>"},{"location":"api/models/#_5","title":"\ud83d\udd27 \u4f7f\u7528\u793a\u4f8b","text":""},{"location":"api/models/#_6","title":"\u57fa\u7840\u6570\u636e\u6a21\u578b","text":"<pre><code>from cryptoservice.models import Freq, SortBy\nfrom cryptoservice.models.market_ticker import BaseMarketTicker\n\n# \u4f7f\u7528\u679a\u4e3e\nfreq = Freq.h1  # 1\u5c0f\u65f6\nsort_by = SortBy.QUOTE_VOLUME  # \u6309\u6210\u4ea4\u989d\u6392\u5e8f\n\n# \u5904\u7406\u5e02\u573a\u6570\u636e\nticker_data = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"\u4ef7\u683c: {ticker_data.last_price}\")\n</code></pre>"},{"location":"api/models/#universe_1","title":"Universe \u6a21\u578b\u4f7f\u7528","text":"<pre><code>from cryptoservice.models import UniverseConfig, UniverseDefinition\n\n# \u521b\u5efaUniverse\u914d\u7f6e\nconfig = UniverseConfig(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,    # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\u8ba1\u7b97\n    t2_months=1,    # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,    # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=10        # \u9009\u62e9\u524d10\u4e2a\u5408\u7ea6\n)\n\n# \u4ece\u6587\u4ef6\u52a0\u8f7dUniverse\u5b9a\u4e49\nuniverse_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n# \u83b7\u53d6\u7279\u5b9a\u65e5\u671f\u7684\u4ea4\u6613\u5bf9\nsymbols = universe_def.get_symbols_for_date(\"2024-02-15\")\nprint(f\"\u4ea4\u6613\u5bf9: {symbols}\")\n</code></pre>"},{"location":"api/models/#_7","title":"\ud83d\udcda \u8be6\u7ec6\u6587\u6863","text":"<p>\u6bcf\u4e2a\u6a21\u578b\u90fd\u6709\u8be6\u7ec6\u7684API\u6587\u6863\uff0c\u5305\u62ec\u5b57\u6bb5\u8bf4\u660e\u3001\u7c7b\u578b\u5b9a\u4e49\u548c\u4f7f\u7528\u793a\u4f8b\u3002</p>"},{"location":"api/models/#_8","title":"\u6838\u5fc3\u6a21\u578b\u6587\u6863","text":"\u6a21\u578b\u7c7b\u522b \u4e3b\u8981\u7c7b \u7528\u9014 \u5e02\u573a\u6570\u636e <code>SymbolTicker</code>, <code>PerpetualMarketTicker</code> \u5b9e\u65f6\u884c\u60c5\u6570\u636e\u5904\u7406 Universe <code>UniverseConfig</code>, <code>UniverseSnapshot</code>, <code>UniverseDefinition</code> \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565 \u679a\u4e3e\u7c7b\u578b <code>Freq</code>, <code>SortBy</code>, <code>HistoricalKlinesType</code> \u5e38\u91cf\u548c\u914d\u7f6e\u9009\u9879"},{"location":"api/models/#_9","title":"\ud83d\udd17 \u76f8\u5173\u94fe\u63a5","text":"<ul> <li>MarketDataService API - \u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</li> <li>Universe \u7ba1\u7406\u6307\u5357 - Universe\u529f\u80fd\u4f7f\u7528\u6307\u5357</li> <li>\u6570\u636e\u5b58\u50a8 - \u6570\u636e\u5b58\u50a8\u67b6\u6784</li> <li>\u57fa\u7840\u793a\u4f8b - \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b</li> </ul>"},{"location":"api/data/storage_db/","title":"\u6570\u636e\u5e93\u7ba1\u7406","text":""},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB","title":"<code>cryptoservice.data.storage_db.MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB-functions","title":"Functions","text":""},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB._init_db","title":"<code>_init_db() -&gt; None</code>","text":"<p>\u521d\u59cb\u5316\u6570\u636e\u5e93\u8868\u7ed3\u6784</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def _init_db(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\u8868\u7ed3\u6784\"\"\"\n    with sqlite3.connect(self.db_path) as conn:\n        # \u539f\u6709\u7684market_data\u8868\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS market_data (\n                symbol TEXT,\n                timestamp INTEGER,\n                freq TEXT,\n                open_price REAL,\n                high_price REAL,\n                low_price REAL,\n                close_price REAL,\n                volume REAL,\n                quote_volume REAL,\n                trades_count INTEGER,\n                taker_buy_volume REAL,\n                taker_buy_quote_volume REAL,\n                taker_sell_volume REAL,\n                taker_sell_quote_volume REAL,\n                PRIMARY KEY (symbol, timestamp, freq)\n            )\n        \"\"\"\n        )\n\n        # \u8d44\u91d1\u8d39\u7387\u8868\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS funding_rate (\n                symbol TEXT,\n                timestamp INTEGER,\n                funding_rate REAL,\n                funding_time INTEGER,\n                mark_price REAL,\n                index_price REAL,\n                PRIMARY KEY (symbol, timestamp)\n            )\n        \"\"\"\n        )\n\n        # \u6301\u4ed3\u91cf\u8868\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS open_interest (\n                symbol TEXT,\n                timestamp INTEGER,\n                interval TEXT,\n                open_interest REAL,\n                open_interest_value REAL,\n                PRIMARY KEY (symbol, timestamp, interval)\n            )\n        \"\"\"\n        )\n\n        # \u591a\u7a7a\u6bd4\u4f8b\u8868\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS long_short_ratio (\n                symbol TEXT,\n                timestamp INTEGER,\n                period TEXT,\n                ratio_type TEXT,\n                long_short_ratio REAL,\n                long_account REAL,\n                short_account REAL,\n                PRIMARY KEY (symbol, timestamp, period, ratio_type)\n            )\n        \"\"\"\n        )\n\n        # \u521b\u5efa\u7d22\u5f15\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_symbol ON market_data(symbol)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_timestamp ON market_data(timestamp)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_freq ON market_data(freq)\")\n        conn.execute(\n            \"\"\"\n            CREATE INDEX IF NOT EXISTS idx_symbol_freq_timestamp\n            ON market_data(symbol, freq, timestamp)\n            \"\"\"\n        )\n\n        # \u65b0\u7279\u5f81\u8868\u7684\u7d22\u5f15\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_funding_symbol ON funding_rate(symbol)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_funding_timestamp ON funding_rate(timestamp)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_oi_symbol ON open_interest(symbol)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_oi_timestamp ON open_interest(timestamp)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_lsr_symbol ON long_short_ratio(symbol)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_lsr_timestamp ON long_short_ratio(timestamp)\")\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_data","title":"<code>store_data(data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self,\n    data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]],\n    freq: Freq,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[list[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(\n            data_list: Any,\n        ) -&gt; TypeGuard[list[list[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(f\"Successfully stored {len(records)} records for {symbol} with frequency {freq.value}\")\n\n    except Exception:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: list[str], features: list[str] | None = None, raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: list[str],\n    features: list[str] | None = None,\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        return self._read_data_by_timestamp(start_ts, end_ts, freq, symbols, features, raise_on_empty)\n\n    except Exception:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: list[str], target_freq: Freq | None = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: list[str],\n    target_freq: Freq | None = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        total_days = len(date_range)\n\n        # \u5982\u679c\u603b\u5929\u6570\u5c11\u4e8e\u7b49\u4e8echunk_days\uff0c\u76f4\u63a5\u5904\u7406\u6574\u4e2a\u8303\u56f4\uff0c\u4e0d\u5206\u5757\n        if total_days &lt;= chunk_days:\n            logger.info(f\"Processing all data from {start_date} to {end_date} (total: {total_days} days)\")\n\n            # \u8bfb\u53d6\u6240\u6709\u6570\u636e\n            try:\n                df = self.read_data(\n                    start_date,\n                    end_date,\n                    freq,\n                    symbols,\n                    raise_on_empty=False,\n                )\n            except ValueError as e:\n                if \"No data found\" in str(e):\n                    logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                    return\n                else:\n                    raise\n\n            if df.empty:\n                logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                return\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5904\u7406\u6240\u6709\u6570\u636e\n            self._process_dataframe_for_export(df, output_path, freq, date_range)\n\n        else:\n            # \u6309chunk_days\u5206\u5757\u5904\u7406\uff08\u7528\u4e8e\u5927\u91cf\u6570\u636e\uff09\n            for chunk_start in range(0, len(date_range), chunk_days):\n                chunk_end = min(chunk_start + chunk_days, len(date_range))\n                chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n                chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n                logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n                # \u8bfb\u53d6\u6570\u636e\u5757\n                try:\n                    df = self.read_data(\n                        chunk_start_date,\n                        chunk_end_date,\n                        freq,\n                        symbols,\n                        raise_on_empty=False,\n                    )\n                except ValueError as e:\n                    if \"No data found\" in str(e):\n                        logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                        continue\n                    else:\n                        raise\n\n                if df.empty:\n                    logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                    continue\n\n                # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n                if target_freq is not None:\n                    df = self._resample_data(df, target_freq)\n                    freq = target_freq\n\n                # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\n                chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n                self._process_dataframe_for_export(df, output_path, freq, chunk_dates)\n\n                # \u6e05\u7406\u5185\u5b58\n                del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"api/data/storage_utils/","title":"\u6570\u636e\u5b58\u50a8\u5de5\u5177","text":""},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils","title":"<code>cryptoservice.data.storage_utils.StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils-functions","title":"Functions","text":""},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils._resolve_path","title":"<code>_resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path</code>  <code>staticmethod</code>","text":"<p>\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84.</p> PARAMETER DESCRIPTION <code>data_path</code> <p>\u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>base_dir</code> <p>\u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>\u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84</p> <p> TYPE: <code>Path</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef _resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path:\n    \"\"\"\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84.\n\n    Args:\n        data_path: \u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84\n        base_dir: \u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55\n\n    Returns:\n        Path: \u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84\n    \"\"\"\n    try:\n        path = Path(data_path)\n        if not path.is_absolute():\n            base = Path(base_dir) if base_dir else Path.cwd()\n            path = base / path\n        return path.resolve()\n    except Exception as e:\n        raise ValueError(f\"Failed to resolve path '{data_path}': {str(e)}\") from e\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] | None = None, data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] | None = None,\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    if features is None:\n        features = [\n            \"close_price\",\n            \"volume\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in date_range]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(start=pd.Timestamp(date), periods=array.shape[1], freq=freq)\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                stacked_series = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                stacked_series.name = feature\n                date_data.append(stacked_series)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for idx, row in df.iterrows():\n                if isinstance(idx, tuple) and len(idx) == 2:\n                    symbol, time = idx\n                    values = [(f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x)) for x in row]\n                    table.add_row(str(time), str(symbol), *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\")\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\")\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\"[yellow]Warning: Index length is less than data length[/]\")\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#_2","title":"\u8def\u5f84\u89e3\u6790","text":""},{"location":"api/data/storage_utils/#_resolve_path","title":"_resolve_path","text":"<p>\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002</p> <pre><code>@staticmethod\ndef _resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path\n</code></pre> <p>\u53c2\u6570: - <code>data_path</code>: \u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 - <code>base_dir</code>: \u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55</p> <p>\u8fd4\u56de: - <code>Path</code>: \u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.data import StorageUtils\n\n# \u89e3\u6790\u76f8\u5bf9\u8def\u5f84\npath = StorageUtils._resolve_path(\"./data\")\nprint(f\"\u7edd\u5bf9\u8def\u5f84: {path}\")\n</code></pre></p>"},{"location":"api/data/storage_utils/#_3","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"api/data/storage_utils/#store_kdtv_data","title":"store_kdtv_data","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>data</code>: \u5e02\u573a\u6570\u636e\u5217\u8868 - <code>date</code>: \u65e5\u671f (YYYYMMDD) - <code>freq</code>: \u9891\u7387 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u793a\u4f8b: <pre><code># \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#store_universe","title":"store_universe","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\u3002</p> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>symbols</code>: \u4ea4\u6613\u5bf9\u5217\u8868 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u793a\u4f8b: <pre><code># \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_4","title":"\u6570\u636e\u8bfb\u53d6","text":""},{"location":"api/data/storage_utils/#read_kdtv_data","title":"read_kdtv_data","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame\n</code></pre> <p>\u53c2\u6570: - <code>start_date</code>: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>end_date</code>: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) - <code>freq</code>: \u9891\u7387 - <code>features</code>: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u8fd4\u56de: - <code>pd.DataFrame</code>: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> <p>\u793a\u4f8b: <pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\ndata = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\"close_price\", \"volume\"],\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_5","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"api/data/storage_utils/#read_and_visualize_kdtv","title":"read_and_visualize_kdtv","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>date</code>: \u65e5\u671f (YYYY-MM-DD) - <code>freq</code>: \u9891\u7387 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55 - <code>max_rows</code>: \u6700\u5927\u663e\u793a\u884c\u6570 - <code>max_symbols</code>: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p>\u793a\u4f8b: <pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=3\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#visualize_npy_data","title":"visualize_npy_data","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>file_path</code>: npy \u6587\u4ef6\u8def\u5f84 - <code>max_rows</code>: \u6700\u5927\u663e\u793a\u884c\u6570 - <code>headers</code>: \u5217\u6807\u9898 - <code>index</code>: \u884c\u7d22\u5f15</p> <p>\u793a\u4f8b: <pre><code># \u53ef\u89c6\u5316NPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"09:00\", \"10:00\", \"11:00\"],\n    index=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_6","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u6240\u6709\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u4ee5\u4e0b\u5f02\u5e38\uff1a</p> <ul> <li><code>FileNotFoundError</code>: \u6587\u4ef6\u4e0d\u5b58\u5728</li> <li><code>ValueError</code>: \u6570\u636e\u683c\u5f0f\u9519\u8bef\u6216\u53c2\u6570\u65e0\u6548</li> <li><code>Exception</code>: \u5176\u4ed6\u9519\u8bef</li> </ul>"},{"location":"api/data/storage_utils/#_7","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li> <p>\u8def\u5f84\u7ba1\u7406 <pre><code># \u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\ndata_path = StorageUtils._resolve_path(\"./data\")\n\n# \u5b58\u50a8\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=data,\n    date=date,\n    freq=freq,\n    data_path=data_path\n)\n</code></pre></p> </li> <li> <p>\u9519\u8bef\u5904\u7406 <pre><code>try:\n    data = StorageUtils.read_kdtv_data(...)\nexcept FileNotFoundError as e:\n    logger.error(f\"\u6587\u4ef6\u4e0d\u5b58\u5728: {e}\")\nexcept ValueError as e:\n    logger.error(f\"\u6570\u636e\u683c\u5f0f\u9519\u8bef: {e}\")\n</code></pre></p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1 <pre><code># \u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\nif data.empty:\n    raise ValueError(\"No data available\")\n\n# \u68c0\u67e5\u6570\u636e\u7c7b\u578b\nif not isinstance(data, pd.DataFrame):\n    raise TypeError(\"Expected DataFrame\")\n</code></pre></p> </li> </ol>"},{"location":"api/data/storage_utils/#_8","title":"\u76f8\u5173\u94fe\u63a5","text":"<ul> <li>KDTV\u683c\u5f0f\u6307\u5357</li> <li>\u6570\u636e\u53ef\u89c6\u5316\u6307\u5357</li> <li>\u6570\u636e\u5b58\u50a8\u6307\u5357</li> </ul>"},{"location":"api/models/enums/","title":"\u679a\u4e3e\u7c7b\u578b","text":""},{"location":"api/models/enums/#_2","title":"\u9891\u7387\u679a\u4e3e","text":""},{"location":"api/models/enums/#cryptoservice.models.Freq","title":"<code>cryptoservice.models.Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"api/models/enums/#cryptoservice.models.Freq-functions","title":"Functions","text":""},{"location":"api/models/enums/#cryptoservice.models.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"api/models/enums/#cryptoservice.models.Freq.from_string","title":"<code>from_string(interval_str: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> PARAMETER DESCRIPTION <code>interval_str</code> <p>\u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Freq</code> <p>\u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c</p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_string(cls, interval_str: str) -&gt; \"Freq\":\n    \"\"\"\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\n\n    Args:\n        interval_str: \u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49\n\n    Returns:\n        \u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c\n\n    Raises:\n        ValueError: \u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548\n    \"\"\"\n    # \u4fdd\u5b58\u539f\u59cb\u5b57\u7b26\u4e32\u7528\u4e8e\u5927\u5c0f\u5199\u654f\u611f\u6bd4\u8f83\n    original_str = interval_str.strip()\n\n    # \u5904\u7406\u5927\u5c0f\u5199\u654f\u611f\u7684\u6708\u4efd\n    if original_str == \"1M\":\n        return cls.M1\n\n    # \u6807\u51c6\u5316\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a\u5c0f\u5199\n    interval_str = original_str.lower()\n\n    # \u6620\u5c04\u5b57\u5178\n    string_to_freq = {\n        \"1s\": cls.s1,\n        \"1m\": cls.m1,\n        \"3m\": cls.m3,\n        \"5m\": cls.m5,\n        \"15m\": cls.m15,\n        \"30m\": cls.m30,\n        \"1h\": cls.h1,\n        \"2h\": cls.h2,\n        \"4h\": cls.h4,\n        \"6h\": cls.h6,\n        \"8h\": cls.h8,\n        \"12h\": cls.h12,\n        \"1d\": cls.d1,\n        \"3d\": cls.d3,\n        \"1w\": cls.w1,\n    }\n\n    result = string_to_freq.get(interval_str)\n    if result is None:\n        raise ValueError(f\"Invalid interval string: {original_str}\")\n    return result\n</code></pre>"},{"location":"api/models/enums/#_3","title":"\u6392\u5e8f\u65b9\u5f0f","text":""},{"location":"api/models/enums/#cryptoservice.models.SortBy","title":"<code>cryptoservice.models.SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"api/models/enums/#k","title":"K\u7ebf\u7c7b\u578b","text":""},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType","title":"<code>cryptoservice.models.HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"api/models/market_ticker/","title":"\u5e02\u573a\u6570\u636e\u6a21\u578b","text":""},{"location":"api/models/market_ticker/#_2","title":"\u57fa\u7840\u6a21\u578b","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>cryptoservice.models.market_ticker.BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/market_ticker/#_3","title":"\u73b0\u8d27\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>cryptoservice.models.market_ticker.SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/market_ticker/#24","title":"24\u5c0f\u65f6\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>cryptoservice.models.market_ticker.DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/market_ticker/#k","title":"K\u7ebf\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>cryptoservice.models.market_ticker.KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/market_ticker/#k_1","title":"K\u7ebf\u6570\u636e\u7d22\u5f15","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.KlineIndex","title":"<code>cryptoservice.models.market_ticker.KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"api/models/market_ticker/#_4","title":"\u6c38\u7eed\u5408\u7ea6\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>cryptoservice.models.market_ticker.PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"api/models/universe/","title":"Universe \u6a21\u578b","text":"<p>Universe \u6a21\u578b\u63d0\u4f9b\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u529f\u80fd\uff0c\u652f\u6301\u57fa\u4e8e\u6210\u4ea4\u91cf\u7684\u5468\u671f\u6027\u91cd\u65b0\u5e73\u8861\u7b56\u7565\u3002</p>"},{"location":"api/models/universe/#universe_1","title":"Universe \u914d\u7f6e","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseConfig","title":"<code>cryptoservice.models.universe.UniverseConfig(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, delay_days: int, quote_asset: str, top_k: int | None = None, top_ratio: float | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u914d\u7f6e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>delay_days</code> <p>\u5ef6\u8fdf\u5929\u6570</p> <p> TYPE: <code>int</code> </p> <code>quote_asset</code> <p>\u8ba1\u4ef7\u5e01\u79cd</p> <p> TYPE: <code>str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf</p> <p> TYPE: <code>int | None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4f8b\u5982 0.8 \u8868\u793a top 80%)</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseConfig-functions","title":"Functions","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseConfig.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    data = {\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"t1_months\": self.t1_months,\n        \"t2_months\": self.t2_months,\n        \"t3_months\": self.t3_months,\n        \"delay_days\": self.delay_days,\n        \"quote_asset\": self.quote_asset,\n    }\n    if self.top_k is not None:\n        data[\"top_k\"] = self.top_k\n    if self.top_ratio is not None:\n        data[\"top_ratio\"] = self.top_ratio\n    return data\n</code></pre>"},{"location":"api/models/universe/#universe_2","title":"Universe \u5feb\u7167","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot","title":"<code>cryptoservice.models.universe.UniverseSnapshot(effective_date: str, start_date: str, end_date: str, start_date_ts: str, end_date_ts: str, calculated_t1_start: str, calculated_t1_end: str, calculated_t1_start_ts: str, calculated_t1_end_ts: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5feb\u7167\u7c7b\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684universe\u72b6\u6001.</p> ATTRIBUTE DESCRIPTION <code>effective_date</code> <p>\u751f\u6548\u65e5\u671f\uff08\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u901a\u5e38\u662f\u6708\u672b\uff09</p> <p> TYPE: <code>str</code> </p> <code>start_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>start_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>end_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\uff08T1\u56de\u770b\u7684\u5f00\u59cb\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u901a\u5e38\u7b49\u4e8e\u91cd\u5e73\u8861\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u8be5\u65f6\u95f4\u70b9\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u57fa\u4e8eperiod\u5185\u6570\u636e\u8ba1\u7b97\u5f97\u51fa\uff09</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5404\u4ea4\u6613\u5bf9\u5728period\u5185\u7684\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u989d\u5916\u7684\u5143\u6570\u636e\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any] | None</code> </p> Note <p>\u5728\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\u4e0b\uff1a - effective_date: \u91cd\u5e73\u8861\u51b3\u7b56\u7684\u65e5\u671f\uff08\u59822024-01-31\uff09 - period: \u7528\u4e8e\u8ba1\u7b97\u7684\u6570\u636e\u533a\u95f4\uff08\u59822023-12-31\u52302024-01-31\uff09 - \u542b\u4e49: \u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efd\u7684universe</p>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot-functions","title":"Functions","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.create_with_inferred_periods","title":"<code>create_with_inferred_periods(effective_date: str, t1_months: int, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None, next_effective_date: str | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> <p>\u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002</p> PARAMETER DESCRIPTION <code>effective_date</code> <p>\u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97</p> <p> TYPE: <code>int</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>next_effective_date</code> <p>\u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Example <p>\u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a effective_date=\"2024-01-31\", t1_months=1 -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe) -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4) \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_inferred_periods(\n    cls,\n    effective_date: str,\n    t1_months: int,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n    next_effective_date: str | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    \u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c\n    \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002\n\n    Args:\n        effective_date: \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09\n        metadata: \u5143\u6570\u636e\n        next_effective_date: \u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n\n    Returns:\n        UniverseSnapshot: \u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167\n\n    Example:\n        \u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a\n        effective_date=\"2024-01-31\", t1_months=1\n        -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe)\n        -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4)\n        \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse\n    \"\"\"\n    effective_dt = pd.to_datetime(effective_date)\n    calculated_t1_start = effective_dt - pd.DateOffset(months=t1_months)\n\n    # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f\n    usage_start_dt = effective_dt + pd.Timedelta(days=1)\n    if next_effective_date:\n        usage_end_dt = pd.to_datetime(next_effective_date)\n    else:\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u4f30\u7b97\u5230\u4e0b\u4e2a\u6708\u672b\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_str = calculated_t1_start.strftime(\"%Y-%m-%d\")\n    usage_start_str = usage_start_dt.strftime(\"%Y-%m-%d\")\n    usage_end_str = usage_end_dt.strftime(\"%Y-%m-%d\")\n\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start_str, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(effective_date, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_start_str, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_end_str, \"23:59:59\")\n\n    return cls(\n        effective_date=effective_date,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\n        start_date=usage_start_str,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_end_str,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start_str,\n        calculated_t1_end=effective_date,  # \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f = \u91cd\u5e73\u8861\u65e5\u671f\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.create_with_dates_and_timestamps","title":"<code>create_with_dates_and_timestamps(usage_t1_start: str, usage_t1_end: str, calculated_t1_start: str, calculated_t1_end: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> PARAMETER DESCRIPTION <code>usage_t1_start</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>usage_t1_end</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5feb\u7167\u5b9e\u4f8b</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_dates_and_timestamps(\n    cls,\n    usage_t1_start: str,\n    usage_t1_end: str,\n    calculated_t1_start: str,\n    calculated_t1_end: str,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    Args:\n        usage_t1_start: \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        usage_t1_end: \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n        calculated_t1_end: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\n        metadata: \u5143\u6570\u636e\n\n    Returns:\n        UniverseSnapshot: \u5feb\u7167\u5b9e\u4f8b\n    \"\"\"\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(calculated_t1_end, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_t1_start, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_t1_end, \"23:59:59\")\n\n    return cls(\n        effective_date=calculated_t1_end,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n        start_date=usage_t1_start,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_t1_end,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start,\n        calculated_t1_end=calculated_t1_end,\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.validate_period_consistency","title":"<code>validate_period_consistency(expected_t1_months: int) -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027</p> <p>\u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002 \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002</p> PARAMETER DESCRIPTION <code>expected_t1_months</code> <p>\u671f\u671b\u7684T1\u6708\u6570</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_period_consistency(self, expected_t1_months: int) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027\n\n    \u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002\n    \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002\n\n    Args:\n        expected_t1_months: \u671f\u671b\u7684T1\u6708\u6570\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    effective_dt = pd.to_datetime(self.effective_date)\n    calculated_t1_start_dt = pd.to_datetime(self.calculated_t1_start)\n    calculated_t1_end_dt = pd.to_datetime(self.calculated_t1_end)\n\n    # \u8ba1\u7b97\u5b9e\u9645\u7684\u6708\u6570\u5dee\n    actual_months_diff = (effective_dt.year - calculated_t1_start_dt.year) * 12 + (\n        effective_dt.month - calculated_t1_start_dt.month\n    )\n\n    # \u8ba1\u7b97\u5b9e\u9645\u5929\u6570\n    actual_days = (calculated_t1_end_dt - calculated_t1_start_dt).days\n\n    # \u9a8c\u8bc1\u671f\u672b\u65e5\u671f\u662f\u5426\u7b49\u4e8e\u751f\u6548\u65e5\u671f\n    period_end_matches_effective = self.calculated_t1_end == self.effective_date\n\n    return {\n        \"is_consistent\": (\n            abs(actual_months_diff - expected_t1_months) &lt;= 1  # \u5141\u8bb81\u4e2a\u6708\u7684\u8bef\u5dee\n            and period_end_matches_effective\n        ),\n        \"expected_t1_months\": expected_t1_months,\n        \"actual_months_diff\": actual_months_diff,\n        \"actual_days\": actual_days,\n        \"period_end_matches_effective\": period_end_matches_effective,\n        \"details\": {\n            \"effective_date\": self.effective_date,\n            \"calculated_t1_start\": self.calculated_t1_start,\n            \"calculated_t1_end\": self.calculated_t1_end,\n        },\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"effective_date\": self.effective_date,\n        \"start_date\": self.start_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        \"end_date\": self.end_date,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"symbols\": self.symbols,\n        \"mean_daily_amounts\": self.mean_daily_amounts,\n        \"metadata\": self.metadata or {},\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.get_period_info","title":"<code>get_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6\u5468\u671f\u4fe1\u606f</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6\u5468\u671f\u4fe1\u606f\n\n    Returns:\n        Dict: \u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    return {\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"effective_date\": self.effective_date,\n        \"period_duration_days\": str(\n            (pd.to_datetime(self.calculated_t1_end) - pd.to_datetime(self.calculated_t1_start)).days\n        ),\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseSnapshot.get_usage_period_info","title":"<code>get_usage_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f</p> <p>\u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_usage_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f\n\n    \u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002\n\n    Returns:\n        Dict: \u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f\n    \"\"\"\n    return {\n        # \u8ba1\u7b97\u671f\u95f4 - \u7528\u4e8e\u5b9a\u4e49universe\n        \"calculation_period_start\": self.calculated_t1_start,\n        \"calculation_period_end\": self.calculated_t1_end,\n        \"rebalance_decision_date\": self.effective_date,\n        # \u4f7f\u7528\u671f\u95f4 - \u5b9e\u9645\u9700\u8981\u4e0b\u8f7d\u7684\u6570\u636e\n        \"usage_period_start\": self.start_date,\n        \"usage_period_end\": self.end_date,\n        \"usage_period_duration_days\": str((pd.to_datetime(self.end_date) - pd.to_datetime(self.start_date)).days),\n        # \u5176\u4ed6\u4fe1\u606f\n        \"universe_symbols_count\": str(len(self.symbols)),\n        \"note\": \"calculation_period\u7528\u4e8e\u5b9a\u4e49universe\uff0cusage_period\u7528\u4e8e\u4e0b\u8f7d\u8bad\u7ec3\u6570\u636e\",\n    }\n</code></pre>"},{"location":"api/models/universe/#universe_3","title":"Universe \u5b9a\u4e49","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition","title":"<code>cryptoservice.models.universe.UniverseDefinition(config: UniverseConfig, snapshots: list[UniverseSnapshot], creation_time: datetime, description: str | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5b9a\u4e49\u7c7b\uff0c\u5305\u542b\u5b8c\u6574\u7684universe\u5386\u53f2.</p> ATTRIBUTE DESCRIPTION <code>config</code> <p>Universe\u914d\u7f6e</p> <p> TYPE: <code>UniverseConfig</code> </p> <code>snapshots</code> <p>\u65f6\u95f4\u5e8f\u5217\u7684universe\u5feb\u7167\u5217\u8868</p> <p> TYPE: <code>list[UniverseSnapshot]</code> </p> <code>creation_time</code> <p>\u521b\u5efa\u65f6\u95f4</p> <p> TYPE: <code>datetime</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition-functions","title":"Functions","text":""},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"config\": self.config.to_dict(),\n        \"snapshots\": [snapshot.to_dict() for snapshot in self.snapshots],\n        \"creation_time\": self.creation_time.isoformat(),\n        \"description\": self.description,\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.from_dict","title":"<code>from_dict(data: dict[str, Any]) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49\"\"\"\n    config = UniverseConfig(**data[\"config\"])\n    snapshots = []\n\n    for snap in data[\"snapshots\"]:\n        # \u8ba1\u7b97\u6570\u636e\u5468\u671f\n        calculated_t1_start = snap[\"calculated_t1_start\"]\n        calculated_t1_end = snap[\"calculated_t1_end\"]\n        calculated_t1_start_ts = snap[\"calculated_t1_start_ts\"]\n        calculated_t1_end_ts = snap[\"calculated_t1_end_ts\"]\n\n        # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f - \u4ece\u5386\u53f2\u6570\u636e\u63a8\u65ad\u6216\u9ed8\u8ba4\u8ba1\u7b97\n        effective_dt = pd.to_datetime(snap[\"effective_date\"])\n        usage_start_dt = effective_dt + pd.Timedelta(days=1)\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n        # \u4ece\u5feb\u7167\u6570\u636e\u4e2d\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u8ba1\u7b97\u7684\u503c\n        start_date = snap.get(\"start_date\", usage_start_dt.strftime(\"%Y-%m-%d\"))\n        end_date = snap.get(\"end_date\", usage_end_dt.strftime(\"%Y-%m-%d\"))\n\n        # \u8ba1\u7b97\u6216\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\u7684\u65f6\u95f4\u6233\n        start_date_ts = snap.get(\"start_date_ts\")\n        end_date_ts = snap.get(\"end_date_ts\")\n\n        if start_date_ts is None:\n            start_date_ts = UniverseSnapshot._calculate_timestamp(start_date, \"00:00:00\")\n        if end_date_ts is None:\n            end_date_ts = UniverseSnapshot._calculate_timestamp(end_date, \"23:59:59\")\n\n        snapshot = UniverseSnapshot(\n            effective_date=snap[\"effective_date\"],\n            start_date=start_date,\n            end_date=end_date,\n            start_date_ts=start_date_ts,\n            end_date_ts=end_date_ts,\n            calculated_t1_start=calculated_t1_start,\n            calculated_t1_end=calculated_t1_end,\n            calculated_t1_start_ts=calculated_t1_start_ts,\n            calculated_t1_end_ts=calculated_t1_end_ts,\n            symbols=snap[\"symbols\"],\n            mean_daily_amounts=snap[\"mean_daily_amounts\"],\n            metadata=snap.get(\"metadata\"),\n        )\n        snapshots.append(snapshot)\n\n    creation_time = datetime.fromisoformat(data[\"creation_time\"])\n\n    return cls(\n        config=config,\n        snapshots=snapshots,\n        creation_time=creation_time,\n        description=data.get(\"description\"),\n    )\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.save_to_file","title":"<code>save_to_file(file_path: Path | str) -&gt; None</code>","text":"<p>\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def save_to_file(self, file_path: Path | str) -&gt; None:\n    \"\"\"\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6\"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(self.to_dict(), f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.load_from_file","title":"<code>load_from_file(file_path: Path | str) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef load_from_file(cls, file_path: Path | str) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49\"\"\"\n    import json\n\n    with open(file_path, encoding=\"utf-8\") as f:\n        data = json.load(f)\n\n    return cls.from_dict(data)\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_symbols_for_date","title":"<code>get_symbols_for_date(target_date: str, date_type: str = 'usage') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".        - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167        - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_symbols_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n                   - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167\n                   - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167\n\n    Returns:\n        List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot.symbols\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot.symbols\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return []\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_snapshot_for_date","title":"<code>get_snapshot_for_date(target_date: str, date_type: str = 'usage') -&gt; UniverseSnapshot | None</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot | None</code> <p>UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_snapshot_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; UniverseSnapshot | None:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n\n    Returns:\n        UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return None\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_schema","title":"<code>get_schema() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>JSON Schema\u5b9a\u4e49</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema\n\n    Returns:\n        Dict: JSON Schema\u5b9a\u4e49\n    \"\"\"\n    config_properties = {\n        \"start_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"Start date in YYYY-MM-DD format\",\n        },\n        \"end_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"End date in YYYY-MM-DD format\",\n        },\n        \"t1_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T1 lookback window in months for calculating mean daily amount\",\n        },\n        \"t2_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T2 rebalancing frequency in months\",\n        },\n        \"t3_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"T3 minimum contract existence time in months\",\n        },\n        \"top_k\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Number of top contracts to select\",\n        },\n        \"top_ratio\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"exclusiveMaximum\": 1,\n            \"description\": \"Ratio of top contracts to select (e.g., 0.8 for top 80%)\",\n        },\n        \"delay_days\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"Delay days for universe rebalancing\",\n        },\n        \"quote_asset\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^[A-Z0-9]+$\",\n            \"description\": \"Quote asset for trading pairs\",\n        },\n    }\n\n    return {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"title\": \"Universe Definition Schema\",\n        \"description\": \"Cryptocurrency universe definition with configuration and snapshots\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"config\": {\n                \"type\": \"object\",\n                \"description\": \"Universe configuration parameters\",\n                \"properties\": config_properties,\n                \"required\": [\n                    \"start_date\",\n                    \"end_date\",\n                    \"t1_months\",\n                    \"t2_months\",\n                    \"t3_months\",\n                ],\n                \"oneOf\": [{\"required\": [\"top_k\"]}, {\"required\": [\"top_ratio\"]}],\n                \"additionalProperties\": False,\n            },\n            \"snapshots\": {\n                \"type\": \"array\",\n                \"description\": \"Time series of universe snapshots\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"effective_date\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Rebalancing effective date\",\n                        },\n                        \"calculated_t1_start\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": (\"Data calculation period start date (T1 lookback start)\"),\n                        },\n                        \"calculated_t1_end\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Data calculation period end date (T1 lookback end)\",\n                        },\n                        \"calculated_t1_start_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period start timestamp in milliseconds\"),\n                        },\n                        \"calculated_t1_end_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period end timestamp in milliseconds\"),\n                        },\n                        \"symbols\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"pattern\": \"^[A-Z0-9]+USDT$\",\n                                \"description\": \"Trading pair symbol (e.g., BTCUSDT)\",\n                            },\n                            \"description\": \"List of selected trading pairs for this period\",\n                        },\n                        \"mean_daily_amounts\": {\n                            \"type\": \"object\",\n                            \"patternProperties\": {\n                                \"^[A-Z0-9]+USDT$\": {\n                                    \"type\": \"number\",\n                                    \"minimum\": 0,\n                                    \"description\": \"Mean daily trading volume in USDT\",\n                                }\n                            },\n                            \"description\": \"Mean daily trading amounts for each symbol\",\n                        },\n                        \"metadata\": {\n                            \"type\": \"object\",\n                            \"description\": \"Additional metadata for this snapshot\",\n                            \"properties\": {\n                                \"t1_start_date\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"calculated_t1_start\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"period_adjusted\": {\"type\": \"boolean\"},\n                                \"strict_date_range\": {\"type\": \"boolean\"},\n                                \"selected_symbols_count\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                                \"total_candidates\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                            },\n                            \"additionalProperties\": True,\n                        },\n                    },\n                    \"required\": [\n                        \"effective_date\",\n                        \"calculated_t1_start\",\n                        \"calculated_t1_end\",\n                        \"calculated_t1_start_ts\",\n                        \"calculated_t1_end_ts\",\n                        \"symbols\",\n                        \"mean_daily_amounts\",\n                    ],\n                    \"additionalProperties\": False,\n                },\n            },\n            \"creation_time\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp when this universe definition was created\",\n            },\n            \"description\": {\n                \"type\": [\"string\", \"null\"],\n                \"description\": \"Optional description of this universe definition\",\n            },\n        },\n        \"required\": [\"config\", \"snapshots\", \"creation_time\"],\n        \"additionalProperties\": False,\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_schema_example","title":"<code>get_schema_example() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema_example(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e\n\n    Returns:\n        Dict: \u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    return {\n        \"config\": {\n            \"start_date\": \"2024-01-01\",\n            \"end_date\": \"2024-12-31\",\n            \"t1_months\": 1,\n            \"t2_months\": 1,\n            \"t3_months\": 3,\n            \"top_k\": 10,\n            \"delay_days\": 7,\n            \"quote_asset\": \"USDT\",\n        },\n        \"snapshots\": [\n            {\n                \"effective_date\": \"2024-01-31\",\n                \"start_date\": \"2024-02-01\",\n                \"end_date\": \"2024-02-29\",\n                \"calculated_t1_start\": \"2023-12-31\",\n                \"calculated_t1_end\": \"2024-01-31\",\n                \"calculated_t1_start_ts\": \"1703980800000\",\n                \"calculated_t1_end_ts\": \"1706745599000\",\n                \"symbols\": [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n                \"mean_daily_amounts\": {\n                    \"BTCUSDT\": 1234567890.0,\n                    \"ETHUSDT\": 987654321.0,\n                    \"BNBUSDT\": 456789123.0,\n                },\n                \"metadata\": {\n                    \"calculated_t1_start\": \"2023-12-31\",\n                    \"calculated_t1_end\": \"2024-01-31\",\n                    \"delay_days\": 7,\n                    \"quote_asset\": \"USDT\",\n                    \"selected_symbols_count\": 3,\n                },\n            }\n        ],\n        \"creation_time\": \"2024-01-01T00:00:00\",\n        \"description\": \"Example universe definition for top cryptocurrency pairs\",\n    }\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.export_schema_to_file","title":"<code>export_schema_to_file(file_path: Path | str, include_example: bool = True) -&gt; None</code>","text":"<p>\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6</p> PARAMETER DESCRIPTION <code>file_path</code> <p>\u8f93\u51fa\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>include_example</code> <p>\u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def export_schema_to_file(self, file_path: Path | str, include_example: bool = True) -&gt; None:\n    \"\"\"\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6\n\n    Args:\n        file_path: \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n        include_example: \u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    schema_data = {\n        \"schema\": self.get_schema(),\n        \"version\": \"1.0.0\",\n        \"generated_at\": datetime.now().isoformat(),\n    }\n\n    if include_example:\n        schema_data[\"example\"] = self.get_schema_example()\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(schema_data, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"api/models/universe/#cryptoservice.models.universe.UniverseDefinition.validate_against_schema","title":"<code>validate_against_schema() -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_against_schema(self) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\n    \"\"\"\n    try:\n        # \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528jsonschema\u5e93\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4f9d\u8d56\uff0c\u6211\u4eec\u8fdb\u884c\u57fa\u672c\u9a8c\u8bc1\n        data = self.to_dict()\n\n        errors: list[str] = []\n        warnings: list[str] = []\n\n        # \u57fa\u672c\u7ed3\u6784\u9a8c\u8bc1\n        required_fields = [\"config\", \"snapshots\", \"creation_time\"]\n        for field in required_fields:\n            if field not in data:\n                errors.append(f\"Missing required field: {field}\")\n\n        # \u914d\u7f6e\u9a8c\u8bc1\n        if \"config\" in data:\n            config = data[\"config\"]\n            config_required = [\n                \"start_date\",\n                \"end_date\",\n                \"t1_months\",\n                \"t2_months\",\n                \"t3_months\",\n            ]\n            if \"top_k\" not in config and \"top_ratio\" not in config:\n                errors.append(\"Config must contain either 'top_k' or 'top_ratio'\")\n\n            for field in config_required:\n                if field not in config:\n                    errors.append(f\"Missing required config field: {field}\")\n\n            # \u65e5\u671f\u683c\u5f0f\u9a8c\u8bc1\n            import re\n\n            date_pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n            for date_field in [\"start_date\", \"end_date\"]:\n                if date_field in config and not re.match(date_pattern, config[date_field]):\n                    errors.append(f\"Invalid date format for {date_field}: {config[date_field]}\")\n\n        # \u5feb\u7167\u9a8c\u8bc1\n        if \"snapshots\" in data:\n            for i, snapshot in enumerate(data[\"snapshots\"]):\n                snapshot_required = [\n                    \"effective_date\",\n                    \"calculated_t1_start\",\n                    \"calculated_t1_end\",\n                    \"calculated_t1_start_ts\",\n                    \"calculated_t1_end_ts\",\n                    \"symbols\",\n                    \"mean_daily_amounts\",\n                ]\n                for field in snapshot_required:\n                    if field not in snapshot:\n                        errors.append(f\"Missing required field in snapshot {i}: {field}\")\n\n        return {\n            \"valid\": len(errors) == 0,\n            \"errors\": errors,\n            \"warnings\": warnings,\n            \"validation_time\": datetime.now().isoformat(),\n        }\n\n    except Exception as e:\n        return {\n            \"valid\": False,\n            \"errors\": [f\"Validation failed with exception: {str(e)}\"],\n            \"warnings\": [],\n            \"validation_time\": datetime.now().isoformat(),\n        }\n</code></pre>"},{"location":"api/models/universe/#_1","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"api/models/universe/#universe_4","title":"\u521b\u5efa Universe \u914d\u7f6e","text":"<pre><code>from cryptoservice.models import UniverseConfig\n\nconfig = UniverseConfig(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,    # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\u8ba1\u7b97\n    t2_months=1,    # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,    # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=10        # \u9009\u62e9\u524d10\u4e2a\u5408\u7ea6\n)\n</code></pre>"},{"location":"api/models/universe/#universe_5","title":"\u521b\u5efa Universe \u5feb\u7167","text":"<pre><code>from cryptoservice.models import UniverseSnapshot\n\n# \u65b9\u6cd51\uff1a\u81ea\u52a8\u63a8\u65ad\u5468\u671f\nsnapshot = UniverseSnapshot.create_with_inferred_periods(\n    effective_date=\"2024-01-31\",\n    t1_months=1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    mean_daily_amounts={\n        \"BTCUSDT\": 1234567890.0,\n        \"ETHUSDT\": 987654321.0,\n        \"BNBUSDT\": 456789123.0\n    }\n)\n\n# \u65b9\u6cd52\uff1a\u660e\u786e\u6307\u5b9a\u6240\u6709\u53c2\u6570\nsnapshot = UniverseSnapshot.create_with_dates_and_timestamps(\n    effective_date=\"2024-01-31\",\n    period_start_date=\"2023-12-31\",\n    period_end_date=\"2024-01-31\",\n    period_start_ts=\"1703980800000\",\n    period_end_ts=\"1706745599000\",\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    mean_daily_amounts={\n        \"BTCUSDT\": 1234567890.0,\n        \"ETHUSDT\": 987654321.0,\n        \"BNBUSDT\": 456789123.0\n    }\n)\n</code></pre>"},{"location":"api/models/universe/#universe_6","title":"\u521b\u5efa\u5b8c\u6574\u7684 Universe \u5b9a\u4e49","text":"<pre><code>from cryptoservice.models import UniverseDefinition\nfrom datetime import datetime\n\nuniverse_def = UniverseDefinition(\n    config=config,\n    snapshots=[snapshot],\n    creation_time=datetime.now(),\n    description=\"Top crypto universe for 2024\"\n)\n\n# \u4fdd\u5b58\u5230\u6587\u4ef6\nuniverse_def.save_to_file(\"./universe.json\")\n\n# \u4ece\u6587\u4ef6\u52a0\u8f7d\nloaded_universe = UniverseDefinition.load_from_file(\"./universe.json\")\n</code></pre>"},{"location":"api/models/universe/#_2","title":"\u6570\u636e\u5206\u6790","text":"<pre><code># \u83b7\u53d6\u6982\u8981\u4fe1\u606f\nsummary = universe_def.get_universe_summary()\nprint(f\"\u603b\u5feb\u7167\u6570: {summary['total_snapshots']}\")\nprint(f\"\u552f\u4e00\u4ea4\u6613\u5bf9\u6570: {summary['unique_symbols_count']}\")\n\n# \u5bfc\u51fa\u4e3aDataFrame\u8fdb\u884c\u5206\u6790\ndf = universe_def.export_to_dataframe()\nprint(df.head())\n\n# \u83b7\u53d6\u7279\u5b9a\u65e5\u671f\u7684\u4ea4\u6613\u5bf9\nsymbols = universe_def.get_symbols_for_date(\"2024-02-15\")\nprint(f\"2024-02-15 \u7684\u4ea4\u6613\u5bf9: {symbols}\")\n</code></pre>"},{"location":"api/models/universe/#schema","title":"Schema \u9a8c\u8bc1","text":"<pre><code># \u83b7\u53d6JSON Schema\nschema = UniverseDefinition.get_schema()\n\n# \u9a8c\u8bc1\u6570\u636e\nvalidation_result = universe_def.validate_against_schema()\nif validation_result['valid']:\n    print(\"\u2705 Universe\u5b9a\u4e49\u9a8c\u8bc1\u901a\u8fc7\")\nelse:\n    print(\"\u274c \u9a8c\u8bc1\u5931\u8d25:\")\n    for error in validation_result['errors']:\n        print(f\"  - {error}\")\n\n# \u5bfc\u51faSchema\u5230\u6587\u4ef6\nuniverse_def.export_schema_to_file(\n    \"./universe_schema.json\",\n    include_example=True\n)\n</code></pre>"},{"location":"api/models/universe/#_3","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"api/models/universe/#1","title":"1. \u65f6\u95f4\u7a97\u53e3\u8bbe\u8ba1","text":"<pre><code># \u6708\u5ea6\u91cd\u5e73\u8861\uff08\u63a8\u8350\uff09\nmonthly_config = UniverseConfig(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,    # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\n    t2_months=1,    # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,    # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=10\n)\n\n# \u5b63\u5ea6\u91cd\u5e73\u8861\uff08\u9002\u5408\u957f\u671f\u7b56\u7565\uff09\nquarterly_config = UniverseConfig(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=3,    # \u57fa\u4e8e3\u4e2a\u6708\u6570\u636e\n    t2_months=3,    # \u6bcf\u5b63\u5ea6\u91cd\u65b0\u9009\u62e9\n    t3_months=6,    # \u6392\u96646\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=20\n)\n</code></pre>"},{"location":"api/models/universe/#2","title":"2. \u6570\u636e\u5b8c\u6574\u6027\u9a8c\u8bc1","text":"<pre><code># \u9a8c\u8bc1\u5feb\u7167\u5468\u671f\u4e00\u81f4\u6027\nfor snapshot in universe_def.snapshots:\n    validation = snapshot.validate_period_consistency(\n        expected_t1_months=config.t1_months\n    )\n\n    if not validation['is_consistent']:\n        print(f\"\u26a0\ufe0f \u5feb\u7167 {snapshot.effective_date} \u5468\u671f\u4e0d\u4e00\u81f4\")\n        print(f\"   \u671f\u671b: {validation['expected_t1_months']} \u6708\")\n        print(f\"   \u5b9e\u9645: {validation['actual_months_diff']} \u6708\")\n</code></pre>"},{"location":"api/models/universe/#3","title":"3. \u6295\u8d44\u5468\u671f\u5206\u6790","text":"<pre><code># \u5206\u6790\u6295\u8d44\u5468\u671f\u4fe1\u606f\nfor snapshot in universe_def.snapshots:\n    investment_info = snapshot.get_investment_period_info()\n    print(f\"\u91cd\u5e73\u8861\u65e5\u671f: {investment_info['rebalance_decision_date']}\")\n    print(f\"\u6295\u8d44\u5f00\u59cb: {investment_info['investment_start_date']}\")\n    print(f\"\u9884\u8ba1\u7ed3\u675f: {investment_info['investment_end_estimate']}\")\n    print(f\"\u4ea4\u6613\u5bf9\u6570\u91cf: {investment_info['universe_symbols_count']}\")\n    print()\n</code></pre>"},{"location":"api/models/universe/#_4","title":"\u76f8\u5173\u94fe\u63a5","text":"<ul> <li>Universe \u7ba1\u7406\u6307\u5357</li> <li>MarketDataService API</li> <li>\u5b8c\u6574\u793a\u4f8b</li> </ul>"},{"location":"api/services/market_service/","title":"MarketDataService API \u53c2\u8003","text":"<p>MarketDataService \u662f CryptoService \u7684\u6838\u5fc3\u670d\u52a1\u7c7b\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u529f\u80fd\u3002</p>"},{"location":"api/services/market_service/#_1","title":"\ud83d\udccb \u7c7b\u521d\u59cb\u5316","text":""},{"location":"api/services/market_service/#marketdataserviceapi_key-api_secret","title":"<code>MarketDataService(api_key, api_secret)</code>","text":"<p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> <p>\u53c2\u6570: - <code>api_key</code> (str): Binance API \u5bc6\u94a5 - <code>api_secret</code> (str): Binance API \u5bc6\u94a5</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.services import MarketDataService\n\nservice = MarketDataService(\n    api_key=\"your_api_key\",\n    api_secret=\"your_api_secret\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#_2","title":"\ud83d\udcca \u5b9e\u65f6\u884c\u60c5\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_symbol_tickersymbolnone","title":"<code>get_symbol_ticker(symbol=None)</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str, optional): \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 \"BTCUSDT\"\u3002\u4e3a None \u65f6\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9</p> <p>\u8fd4\u56de\u503c: - <code>SymbolTicker</code> \u6216 <code>list[SymbolTicker]</code>: \u884c\u60c5\u6570\u636e</p> <p>\u793a\u4f8b: <pre><code># \u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"\u4ef7\u683c: {ticker.last_price}\")\n\n# \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\nall_tickers = service.get_symbol_ticker()\nprint(f\"\u603b\u8ba1: {len(all_tickers)} \u4e2a\u4ea4\u6613\u5bf9\")\n</code></pre></p>"},{"location":"api/services/market_service/#get_top_coinslimit50-sort_bysortbyquote_volume-quote_assetnone","title":"<code>get_top_coins(limit=50, sort_by=SortBy.QUOTE_VOLUME, quote_asset=None)</code>","text":"<p>\u83b7\u53d6\u70ed\u95e8\u4ea4\u6613\u5bf9\u6392\u884c\u699c\u3002</p> <p>\u53c2\u6570: - <code>limit</code> (int): \u8fd4\u56de\u6570\u91cf\uff0c\u9ed8\u8ba4 50 - <code>sort_by</code> (SortBy): \u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u6309\u6210\u4ea4\u91cf - <code>quote_asset</code> (str, optional): \u57fa\u51c6\u8d44\u4ea7\u8fc7\u6ee4\uff0c\u5982 \"USDT\"</p> <p>\u8fd4\u56de\u503c: - <code>list[DailyMarketTicker]</code>: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u524d10\u7684USDT\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_market_summaryintervalfreqd1","title":"<code>get_market_summary(interval=Freq.d1)</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u4fe1\u606f\u3002</p> <p>\u53c2\u6570: - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba4\u65e5\u7ebf</p> <p>\u8fd4\u56de\u503c: - <code>dict</code>: \u5305\u542b\u5feb\u7167\u65f6\u95f4\u548c\u5e02\u573a\u6570\u636e\u7684\u5b57\u5178</p> <p>\u793a\u4f8b: <pre><code>summary = service.get_market_summary()\nprint(f\"\u5feb\u7167\u65f6\u95f4: {summary['snapshot_time']}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_3","title":"\ud83d\udcc8 \u5386\u53f2\u6570\u636e\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_historical_klinessymbol-start_time-end_timenone-intervalfreqh1-klines_typehistoricalklinestypespot","title":"<code>get_historical_klines(symbol, start_time, end_time=None, interval=Freq.h1, klines_type=HistoricalKlinesType.SPOT)</code>","text":"<p>\u83b7\u53d6K\u7ebf\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str): \u4ea4\u6613\u5bf9\u540d\u79f0 - <code>start_time</code> (str | datetime): \u5f00\u59cb\u65f6\u95f4 - <code>end_time</code> (str | datetime, optional): \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4 - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>klines_type</code> (HistoricalKlinesType): K\u7ebf\u7c7b\u578b\uff0c\u73b0\u8d27\u6216\u671f\u8d27</p> <p>\u8fd4\u56de\u503c: - <code>list[KlineMarketTicker]</code>: K\u7ebf\u6570\u636e\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import Freq, HistoricalKlinesType\n\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_perpetual_datasymbols-start_time-db_path-end_timenone-intervalfreqm1-max_workers1-max_retries3-progressnone","title":"<code>get_perpetual_data(symbols, start_time, db_path, end_time=None, interval=Freq.m1, max_workers=1, max_retries=3, progress=None)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u3002</p> <p>\u53c2\u6570: - <code>symbols</code> (list[str]): \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>end_time</code> (str, optional): \u7ed3\u675f\u65e5\u671f - <code>interval</code> (Freq): \u6570\u636e\u95f4\u9694\uff0c\u9ed8\u8ba41\u5206\u949f - <code>max_workers</code> (int): \u6700\u5927\u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba41 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>progress</code> (Progress, optional): \u8fdb\u5ea6\u663e\u793a\u5668</p> <p>\u793a\u4f8b: <pre><code>service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    db_path=\"./data/market.db\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    max_workers=4\n)\n</code></pre></p>"},{"location":"api/services/market_service/#universe","title":"\ud83c\udfaf Universe \u65b9\u6cd5","text":""},{"location":"api/services/market_service/#define_universestart_date-end_date-t1_months-t2_months-t3_months-top_k-output_path-descriptionnone-strict_date_rangefalse","title":"<code>define_universe(start_date, end_date, t1_months, t2_months, t3_months, top_k, output_path, description=None, strict_date_range=False)</code>","text":"<p>\u5b9a\u4e49\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\u3002</p> <p>\u53c2\u6570: - <code>start_date</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>end_date</code> (str): \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) - <code>t1_months</code> (int): \u6570\u636e\u56de\u770b\u671f(\u6708) - <code>t2_months</code> (int): \u91cd\u5e73\u8861\u9891\u7387(\u6708) - <code>t3_months</code> (int): \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4(\u6708) - <code>top_k</code> (int): \u9009\u62e9\u4ea4\u6613\u5bf9\u6570\u91cf - <code>output_path</code> (Path | str): \u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>description</code> (str, optional): \u63cf\u8ff0\u4fe1\u606f - <code>strict_date_range</code> (bool): \u662f\u5426\u4e25\u683c\u9650\u5236\u65e5\u671f\u8303\u56f4\uff0c\u9ed8\u8ba4 False</p> <p>\u8fd4\u56de\u503c: - <code>UniverseDefinition</code>: Universe\u5b9a\u4e49\u5bf9\u8c61</p> <p>\u793a\u4f8b: <pre><code>universe_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,      # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\n    t2_months=1,      # \u6bcf\u6708\u91cd\u5e73\u8861\n    t3_months=3,      # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5e01\n    top_k=10,         # \u9009\u62e9\u524d10\u4e2a\n    output_path=\"./universe.json\",\n    description=\"Top 10 crypto universe\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_datauniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7-extend_to_presenttrue","title":"<code>download_universe_data(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7, extend_to_present=True)</code>","text":"<p>\u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>universe_file</code> (Path | str): Universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>data_path</code> (Path | str, optional): \u989d\u5916\u6570\u636e\u6587\u4ef6\u8def\u5f84 - <code>interval</code> (Freq): \u6570\u636e\u9891\u7387\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>max_workers</code> (int): \u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba44 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>include_buffer_days</code> (int): \u7f13\u51b2\u5929\u6570\uff0c\u9ed8\u8ba47 - <code>extend_to_present</code> (bool): \u662f\u5426\u5ef6\u4f38\u5230\u5f53\u524d\uff0c\u9ed8\u8ba4 True</p> <p>\u793a\u4f8b: <pre><code>service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,\n    extend_to_present=False\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_data_by_periodsuniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7","title":"<code>download_universe_data_by_periods(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7)</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7dUniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u65b9\u5f0f\uff09\u3002</p> <p>\u53c2\u6570\u4e0e <code>download_universe_data</code> \u7c7b\u4f3c\uff0c\u4f46\u6309\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5206\u522b\u4e0b\u8f7d\u3002</p>"},{"location":"api/services/market_service/#_4","title":"\ud83d\udd0d \u8f85\u52a9\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_perpetual_symbolsonly_tradingtrue","title":"<code>get_perpetual_symbols(only_trading=True)</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\u3002</p> <p>\u53c2\u6570: - <code>only_trading</code> (bool): \u662f\u5426\u53ea\u8fd4\u56de\u53ef\u4ea4\u6613\u7684\uff0c\u9ed8\u8ba4 True</p> <p>\u8fd4\u56de\u503c: - <code>list[str]</code>: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>symbols = service.get_perpetual_symbols(only_trading=True)\nprint(f\"\u5f53\u524d\u53ef\u4ea4\u6613\u6c38\u7eed\u5408\u7ea6: {len(symbols)} \u4e2a\")\n</code></pre></p>"},{"location":"api/services/market_service/#_5","title":"\u26a0\ufe0f \u5f02\u5e38\u5904\u7406","text":""},{"location":"api/services/market_service/#_6","title":"\u5e38\u89c1\u5f02\u5e38\u7c7b\u578b","text":"<ul> <li><code>MarketDataFetchError</code>: \u6570\u636e\u83b7\u53d6\u5931\u8d25</li> <li><code>InvalidSymbolError</code>: \u65e0\u6548\u7684\u4ea4\u6613\u5bf9</li> <li><code>RateLimitError</code>: \u8bf7\u6c42\u9891\u7387\u9650\u5236</li> </ul> <p>\u793a\u4f8b: <pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u5931\u8d25: {e}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_7","title":"\ud83d\udcdd \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"api/services/market_service/#1-api","title":"1. API \u9891\u7387\u9650\u5236","text":"<ul> <li>\u5efa\u8bae\u4f7f\u7528\u5408\u7406\u7684 <code>max_workers</code> \u53c2\u6570</li> <li>\u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u8bf7\u6c42</li> <li>\u9047\u5230\u9891\u7387\u9650\u5236\u65f6\u4f1a\u81ea\u52a8\u91cd\u8bd5</li> </ul>"},{"location":"api/services/market_service/#2","title":"2. \u8def\u5f84\u53c2\u6570","text":"<ul> <li><code>db_path</code> \u548c <code>output_path</code> \u5fc5\u987b\u660e\u786e\u6307\u5b9a</li> <li>\u8def\u5f84\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u521b\u5efa\u5fc5\u8981\u7684\u76ee\u5f55</li> </ul>"},{"location":"api/services/market_service/#3","title":"3. \u6570\u636e\u5b8c\u6574\u6027","text":"<ul> <li>\u65b0\u4e0a\u5e02\u7684\u4ea4\u6613\u5bf9\u53ef\u80fd\u7f3a\u5c11\u5386\u53f2\u6570\u636e</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u5904\u7406\u6570\u636e\u7f3a\u5931\u60c5\u51b5</li> <li>\u5efa\u8bae\u8bbe\u7f6e\u5408\u7406\u7684\u7f13\u51b2\u5929\u6570</li> </ul>"},{"location":"api/services/market_service/#4","title":"4. \u5185\u5b58\u4f7f\u7528","text":"<ul> <li>\u5927\u6279\u91cf\u6570\u636e\u4e0b\u8f7d\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58</li> <li>\u5efa\u8bae\u5206\u6279\u5904\u7406\u5927\u91cf\u4ea4\u6613\u5bf9</li> <li>\u53ca\u65f6\u91ca\u653e\u4e0d\u9700\u8981\u7684\u6570\u636e</li> </ul>"},{"location":"api/services/market_service/#_8","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u57fa\u7840\u7528\u6cd5\u6307\u5357</li> <li>Universe\u5b9a\u4e49\u6307\u5357</li> <li>\u5b8c\u6574\u793a\u4f8b</li> <li>\u6570\u636e\u6a21\u578b\u53c2\u8003</li> </ul>"},{"location":"api/services/websocket/","title":"WebSocket \u670d\u52a1","text":"<p>\u5b9e\u65f6\u6570\u636e\u6d41 WebSocket \u670d\u52a1\uff0c\u63d0\u4f9b\u4f4e\u5ef6\u8fdf\u7684\u5e02\u573a\u6570\u636e\u8ba2\u9605\u529f\u80fd\u3002</p>"},{"location":"api/services/websocket/#_1","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":"<pre><code>from cryptoservice.services import WebSocketService\nimport asyncio\n\nasync def main():\n    # \u521d\u59cb\u5316WebSocket\u670d\u52a1\n    ws_service = WebSocketService()\n\n    # \u8ba2\u9605\u5b9e\u65f6\u884c\u60c5\n    await ws_service.subscribe_ticker(\"BTCUSDT\")\n\n    # \u76d1\u542c\u6570\u636e\n    async for data in ws_service.listen():\n        print(f\"\u5b9e\u65f6\u4ef7\u683c: {data}\")\n\n# \u8fd0\u884c\nasyncio.run(main())\n</code></pre>"},{"location":"api/services/websocket/#_2","title":"\ud83d\udce1 \u8fde\u63a5\u7ba1\u7406","text":""},{"location":"api/services/websocket/#_3","title":"\u5efa\u7acb\u8fde\u63a5","text":"<pre><code>import asyncio\nfrom cryptoservice.services import WebSocketService\n\nasync def connect_example():\n    ws_service = WebSocketService(\n        base_url=\"wss://stream.binance.com:9443/ws/\",\n        auto_reconnect=True,\n        heartbeat_interval=30\n    )\n\n    try:\n        await ws_service.connect()\n        print(\"\u2705 WebSocket\u8fde\u63a5\u6210\u529f\")\n    except Exception as e:\n        print(f\"\u274c \u8fde\u63a5\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"api/services/websocket/#_4","title":"\u8fde\u63a5\u914d\u7f6e","text":"\u53c2\u6570 \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e <code>base_url</code> str Binance WSS WebSocket\u670d\u52a1\u5668\u5730\u5740 <code>auto_reconnect</code> bool <code>True</code> \u81ea\u52a8\u91cd\u8fde <code>heartbeat_interval</code> int 30 \u5fc3\u8df3\u95f4\u9694(\u79d2) <code>max_reconnect_attempts</code> int 5 \u6700\u5927\u91cd\u8fde\u6b21\u6570"},{"location":"api/services/websocket/#_5","title":"\ud83d\udcca \u6570\u636e\u8ba2\u9605","text":""},{"location":"api/services/websocket/#_6","title":"\u5b9e\u65f6\u884c\u60c5\u8ba2\u9605","text":"<pre><code># \u5355\u4e2a\u4ea4\u6613\u5bf9\nawait ws_service.subscribe_ticker(\"BTCUSDT\")\n\n# \u591a\u4e2a\u4ea4\u6613\u5bf9\nsymbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\nawait ws_service.subscribe_tickers(symbols)\n\n# \u8ba2\u9605\u56de\u8c03\u5904\u7406\n@ws_service.on_ticker\nasync def handle_ticker(data):\n    print(f\"\u7b26\u53f7: {data.symbol}, \u4ef7\u683c: {data.price}\")\n</code></pre>"},{"location":"api/services/websocket/#k","title":"K\u7ebf\u6570\u636e\u8ba2\u9605","text":"<pre><code>from cryptoservice.models import Freq\n\n# \u8ba2\u96051\u5206\u949fK\u7ebf\nawait ws_service.subscribe_kline(\"BTCUSDT\", Freq.m1)\n\n# \u8ba2\u9605\u591a\u4e2a\u65f6\u95f4\u5468\u671f\nintervals = [Freq.m1, Freq.m5, Freq.h1]\nfor interval in intervals:\n    await ws_service.subscribe_kline(\"BTCUSDT\", interval)\n\n# K\u7ebf\u6570\u636e\u5904\u7406\n@ws_service.on_kline\nasync def handle_kline(data):\n    print(f\"K\u7ebf\u6570\u636e: {data.symbol} - {data.close_price}\")\n</code></pre>"},{"location":"api/services/websocket/#_7","title":"\u6df1\u5ea6\u6570\u636e\u8ba2\u9605","text":"<pre><code># \u8ba2\u9605\u6df1\u5ea6\u6570\u636e\nawait ws_service.subscribe_depth(\"BTCUSDT\", limit=20)\n\n# \u90e8\u5206\u6df1\u5ea6\u66f4\u65b0\nawait ws_service.subscribe_depth_diff(\"BTCUSDT\")\n\n# \u6df1\u5ea6\u6570\u636e\u5904\u7406\n@ws_service.on_depth\nasync def handle_depth(data):\n    print(f\"\u4e70\u76d8: {data.bids[:5]}\")\n    print(f\"\u5356\u76d8: {data.asks[:5]}\")\n</code></pre>"},{"location":"api/services/websocket/#_8","title":"\ud83d\udd04 \u4e8b\u4ef6\u5904\u7406","text":""},{"location":"api/services/websocket/#_9","title":"\u4e8b\u4ef6\u8ba2\u9605\u88c5\u9970\u5668","text":"<pre><code># \u8fde\u63a5\u4e8b\u4ef6\n@ws_service.on_connect\nasync def on_connect():\n    print(\"WebSocket\u5df2\u8fde\u63a5\")\n\n# \u65ad\u5f00\u4e8b\u4ef6\n@ws_service.on_disconnect\nasync def on_disconnect():\n    print(\"WebSocket\u5df2\u65ad\u5f00\")\n\n# \u9519\u8bef\u4e8b\u4ef6\n@ws_service.on_error\nasync def on_error(error):\n    print(f\"WebSocket\u9519\u8bef: {error}\")\n\n# \u91cd\u8fde\u4e8b\u4ef6\n@ws_service.on_reconnect\nasync def on_reconnect(attempt):\n    print(f\"\u91cd\u8fde\u5c1d\u8bd5: {attempt}\")\n</code></pre>"},{"location":"api/services/websocket/#_10","title":"\u6570\u636e\u8fc7\u6ee4","text":"<pre><code># \u4ef7\u683c\u53d8\u5316\u8fc7\u6ee4\n@ws_service.on_ticker\nasync def price_filter(data):\n    if abs(data.price_change_percent) &gt; 5:  # \u6da8\u8dcc\u5e45\u8d85\u8fc75%\n        print(f\"\u26a0\ufe0f \u5927\u5e45\u6ce2\u52a8: {data.symbol} {data.price_change_percent}%\")\n\n# \u6210\u4ea4\u91cf\u8fc7\u6ee4\n@ws_service.on_ticker\nasync def volume_filter(data):\n    if data.volume &gt; 1000000:  # \u6210\u4ea4\u91cf\u8d85\u8fc7100\u4e07\n        print(f\"\ud83d\udcc8 \u9ad8\u6210\u4ea4\u91cf: {data.symbol} {data.volume}\")\n</code></pre>"},{"location":"api/services/websocket/#_11","title":"\ud83d\udcc8 \u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"api/services/websocket/#_12","title":"\u6570\u636e\u805a\u5408","text":"<pre><code>from collections import defaultdict\nimport time\n\nclass DataAggregator:\n    def __init__(self, window_size=60):  # 60\u79d2\u7a97\u53e3\n        self.window_size = window_size\n        self.data_buffer = defaultdict(list)\n\n    @ws_service.on_ticker\n    async def aggregate_data(self, data):\n        current_time = time.time()\n        self.data_buffer[data.symbol].append({\n            'price': data.price,\n            'timestamp': current_time\n        })\n\n        # \u6e05\u7406\u8fc7\u671f\u6570\u636e\n        cutoff_time = current_time - self.window_size\n        self.data_buffer[data.symbol] = [\n            item for item in self.data_buffer[data.symbol]\n            if item['timestamp'] &gt; cutoff_time\n        ]\n\n        # \u8ba1\u7b97\u5e73\u5747\u4ef7\u683c\n        if len(self.data_buffer[data.symbol]) &gt; 0:\n            avg_price = sum(item['price'] for item in self.data_buffer[data.symbol]) / len(self.data_buffer[data.symbol])\n            print(f\"{data.symbol} 1\u5206\u949f\u5e73\u5747\u4ef7\u683c: {avg_price}\")\n\n# \u4f7f\u7528\u805a\u5408\u5668\naggregator = DataAggregator()\n</code></pre>"},{"location":"api/services/websocket/#_13","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code>import asyncio\nfrom typing import List\n\nclass BatchProcessor:\n    def __init__(self, batch_size=10, batch_timeout=5):\n        self.batch_size = batch_size\n        self.batch_timeout = batch_timeout\n        self.batch = []\n        self.last_batch_time = time.time()\n\n    @ws_service.on_ticker\n    async def process_batch(self, data):\n        self.batch.append(data)\n\n        # \u68c0\u67e5\u662f\u5426\u9700\u8981\u5904\u7406\u6279\u6b21\n        current_time = time.time()\n        if (len(self.batch) &gt;= self.batch_size or\n            current_time - self.last_batch_time &gt;= self.batch_timeout):\n\n            await self.handle_batch(self.batch.copy())\n            self.batch.clear()\n            self.last_batch_time = current_time\n\n    async def handle_batch(self, batch: List):\n        \"\"\"\u5904\u7406\u4e00\u6279\u6570\u636e\"\"\"\n        print(f\"\u5904\u7406\u6279\u6b21: {len(batch)} \u6761\u6570\u636e\")\n        for item in batch:\n            # \u6267\u884c\u6279\u91cf\u64cd\u4f5c\n            pass\n\n# \u4f7f\u7528\u6279\u91cf\u5904\u7406\u5668\nprocessor = BatchProcessor()\n</code></pre>"},{"location":"api/services/websocket/#_14","title":"\ud83d\udee1\ufe0f \u9519\u8bef\u5904\u7406\u548c\u91cd\u8fde","text":""},{"location":"api/services/websocket/#_15","title":"\u81ea\u52a8\u91cd\u8fde\u7b56\u7565","text":"<pre><code># \u914d\u7f6e\u91cd\u8fde\u7b56\u7565\nws_service = WebSocketService(\n    auto_reconnect=True,\n    max_reconnect_attempts=10,\n    reconnect_delay=1,  # \u521d\u59cb\u91cd\u8fde\u5ef6\u8fdf\n    max_reconnect_delay=60,  # \u6700\u5927\u91cd\u8fde\u5ef6\u8fdf\n    backoff_factor=2.0  # \u6307\u6570\u9000\u907f\u56e0\u5b50\n)\n\n# \u81ea\u5b9a\u4e49\u91cd\u8fde\u903b\u8f91\n@ws_service.on_reconnect_failed\nasync def on_reconnect_failed(attempts):\n    print(f\"\u91cd\u8fde\u5931\u8d25\uff0c\u5df2\u5c1d\u8bd5 {attempts} \u6b21\")\n    # \u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u6545\u969c\u8f6c\u79fb\u903b\u8f91\n</code></pre>"},{"location":"api/services/websocket/#_16","title":"\u5f02\u5e38\u5904\u7406","text":"<pre><code>try:\n    await ws_service.subscribe_ticker(\"BTCUSDT\")\n    async for data in ws_service.listen():\n        # \u5904\u7406\u6570\u636e\n        pass\nexcept ConnectionError:\n    print(\"\u8fde\u63a5\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\u7f51\u7edc\")\nexcept ValueError as e:\n    print(f\"\u6570\u636e\u683c\u5f0f\u9519\u8bef: {e}\")\nexcept Exception as e:\n    print(f\"\u672a\u77e5\u9519\u8bef: {e}\")\nfinally:\n    await ws_service.close()\n</code></pre>"},{"location":"api/services/websocket/#_17","title":"\ud83d\udd27 \u6027\u80fd\u4f18\u5316","text":""},{"location":"api/services/websocket/#_18","title":"\u8fde\u63a5\u6c60\u7ba1\u7406","text":"<pre><code># \u4f7f\u7528\u8fde\u63a5\u6c60\nws_pool = WebSocketPool(\n    max_connections=5,\n    connection_timeout=30\n)\n\n# \u5206\u53d1\u8ba2\u9605\u5230\u4e0d\u540c\u8fde\u63a5\nawait ws_pool.subscribe_ticker(\"BTCUSDT\", connection_id=0)\nawait ws_pool.subscribe_ticker(\"ETHUSDT\", connection_id=1)\n</code></pre>"},{"location":"api/services/websocket/#_19","title":"\u6570\u636e\u538b\u7f29","text":"<pre><code># \u542f\u7528\u6570\u636e\u538b\u7f29\nws_service = WebSocketService(\n    enable_compression=True,\n    compression_level=6\n)\n</code></pre>"},{"location":"api/services/websocket/#_20","title":"\ud83d\udcda \u5b8c\u6574\u793a\u4f8b","text":""},{"location":"api/services/websocket/#_21","title":"\u591a\u5e01\u79cd\u76d1\u63a7\u7cfb\u7edf","text":"<pre><code>import asyncio\nfrom cryptoservice.services import WebSocketService\nfrom cryptoservice.models import Freq\n\nclass CryptoMonitor:\n    def __init__(self):\n        self.ws_service = WebSocketService(auto_reconnect=True)\n        self.symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\", \"ADAUSDT\"]\n\n    async def start_monitoring(self):\n        \"\"\"\u542f\u52a8\u76d1\u63a7\"\"\"\n        # \u5efa\u7acb\u8fde\u63a5\n        await self.ws_service.connect()\n\n        # \u8ba2\u9605\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\n        for symbol in self.symbols:\n            await self.ws_service.subscribe_ticker(symbol)\n            await self.ws_service.subscribe_kline(symbol, Freq.m1)\n\n        print(\"\u2705 \u5f00\u59cb\u76d1\u63a7\u52a0\u5bc6\u8d27\u5e01\u4ef7\u683c...\")\n\n        # \u76d1\u542c\u6570\u636e\n        async for data in self.ws_service.listen():\n            await self.process_data(data)\n\n    async def process_data(self, data):\n        \"\"\"\u5904\u7406\u5b9e\u65f6\u6570\u636e\"\"\"\n        if data.type == \"ticker\":\n            await self.handle_price_change(data)\n        elif data.type == \"kline\":\n            await self.handle_kline_update(data)\n\n    async def handle_price_change(self, ticker_data):\n        \"\"\"\u5904\u7406\u4ef7\u683c\u53d8\u5316\"\"\"\n        change_percent = float(ticker_data.price_change_percent)\n\n        if abs(change_percent) &gt; 3:  # \u6da8\u8dcc\u5e45\u8d85\u8fc73%\n            direction = \"\ud83d\udcc8\" if change_percent &gt; 0 else \"\ud83d\udcc9\"\n            print(f\"{direction} {ticker_data.symbol}: {change_percent:.2f}%\")\n\n    async def handle_kline_update(self, kline_data):\n        \"\"\"\u5904\u7406K\u7ebf\u66f4\u65b0\"\"\"\n        if kline_data.is_closed:  # K\u7ebf\u7ed3\u675f\n            print(f\"\ud83d\udcca {kline_data.symbol} K\u7ebf: \"\n                  f\"\u5f00\u76d8 {kline_data.open_price}, \"\n                  f\"\u6536\u76d8 {kline_data.close_price}\")\n\n# \u8fd0\u884c\u76d1\u63a7\u7cfb\u7edf\nasync def main():\n    monitor = CryptoMonitor()\n    try:\n        await monitor.start_monitoring()\n    except KeyboardInterrupt:\n        print(\"\u505c\u6b62\u76d1\u63a7...\")\n    finally:\n        await monitor.ws_service.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"api/services/websocket/#_22","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>MarketDataService - \u5e02\u573a\u6570\u636e\u670d\u52a1</li> <li>\u6570\u636e\u6a21\u578b - \u6570\u636e\u7ed3\u6784\u8bf4\u660e</li> <li>\u5b9e\u65f6\u6570\u636e\u793a\u4f8b - \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b</li> <li>\u9519\u8bef\u5904\u7406\u6307\u5357 - \u5f02\u5e38\u5904\u7406\u8bf4\u660e</li> </ul> <p>\ud83d\udca1 \u63d0\u793a: WebSocket\u8fde\u63a5\u9700\u8981\u7a33\u5b9a\u7684\u7f51\u7edc\u73af\u5883\uff0c\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u73b0\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406\u548c\u91cd\u8fde\u673a\u5236\u3002</p>"},{"location":"examples/basic/","title":"\u5b8c\u6574\u793a\u4f8b","text":"<p>\u672c\u9875\u9762\u63d0\u4f9b\u5b8c\u6574\u7684\u4f7f\u7528\u793a\u4f8b\uff0c\u5c55\u793a\u4ece\u6570\u636e\u83b7\u53d6\u5230\u5206\u6790\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"examples/basic/#_2","title":"\ud83d\udccb \u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u793a\u4f8b","text":""},{"location":"examples/basic/#_3","title":"\u73af\u5883\u51c6\u5907","text":"<pre><code># \u5b89\u88c5\u4f9d\u8d56\npip install cryptoservice python-dotenv\n\n# \u521b\u5efa.env\u6587\u4ef6\necho \"BINANCE_API_KEY=your_api_key_here\" &gt; .env\necho \"BINANCE_API_SECRET=your_api_secret_here\" &gt;&gt; .env\n</code></pre>"},{"location":"examples/basic/#1","title":"1. \u521d\u59cb\u5316\u548c\u57fa\u7840\u6570\u636e\u83b7\u53d6","text":"<pre><code>import os\nfrom pathlib import Path\nfrom cryptoservice.services import MarketDataService\nfrom cryptoservice.models import Freq, UniverseDefinition\nfrom cryptoservice.data import MarketDB\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=os.getenv(\"BINANCE_API_KEY\"),\n    api_secret=os.getenv(\"BINANCE_API_SECRET\")\n)\n\n# \u521b\u5efa\u5de5\u4f5c\u76ee\u5f55\nwork_dir = Path(\"./crypto_data\")\nwork_dir.mkdir(exist_ok=True)\n\nprint(\"\u2705 \u670d\u52a1\u521d\u59cb\u5316\u5b8c\u6210\")\n</code></pre>"},{"location":"examples/basic/#2","title":"2. \u83b7\u53d6\u5b9e\u65f6\u5e02\u573a\u6982\u89c8","text":"<pre><code># \u83b7\u53d6\u70ed\u95e8\u4ea4\u6613\u5bf9\nfrom cryptoservice.models import SortBy\n\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n\nprint(\"\ud83d\udcca \u5f53\u524d\u70ed\u95e8\u4ea4\u6613\u5bf9 (\u6309\u6210\u4ea4\u91cf\u6392\u5e8f):\")\nfor i, coin in enumerate(top_coins, 1):\n    volume_m = coin.quote_volume / 1_000_000  # \u8f6c\u6362\u4e3a\u767e\u4e07USDT\n    print(f\"{i:2d}. {coin.symbol:10s} - {volume_m:8.1f}M USDT - {coin.price_change_percent:+6.2f}%\")\n</code></pre>"},{"location":"examples/basic/#3-universe","title":"3. \u5b9a\u4e49\u52a8\u6001Universe","text":"<pre><code># \u5b9a\u4e49\u57fa\u4e8e\u6210\u4ea4\u91cf\u7684\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\nuniverse_file = work_dir / \"universe.json\"\n\nuniverse_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-03-31\",\n    t1_months=1,          # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\u8ba1\u7b97\n    t2_months=1,          # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,          # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u4e0a\u5e02\u5408\u7ea6\n    top_k=5,              # \u9009\u62e9\u524d5\u4e2a\u5408\u7ea6\n    output_path=universe_file,\n    description=\"Top 5 crypto universe - Q1 2024\"\n)\n\nprint(f\"\\n\ud83c\udfaf Universe\u5b9a\u4e49\u5b8c\u6210:\")\nprint(f\"   - \u914d\u7f6e\u5468\u671f: {universe_def.config.start_date} \u5230 {universe_def.config.end_date}\")\nprint(f\"   - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\nprint(f\"   - \u6587\u4ef6\u4fdd\u5b58: {universe_file}\")\n\n# \u663e\u793a\u6bcf\u4e2a\u5feb\u7167\u7684\u8be6\u60c5\nprint(\"\\n\ud83d\udccb Universe\u5feb\u7167\u8be6\u60c5:\")\nfor i, snapshot in enumerate(universe_def.snapshots, 1):\n    period_info = snapshot.get_period_info()\n    print(f\"  {i}. {snapshot.effective_date}\")\n    print(f\"     \u6570\u636e\u671f\u95f4: {period_info['period_start']} ~ {period_info['period_end']}\")\n    print(f\"     \u9009\u4e2d\u4ea4\u6613\u5bf9: {snapshot.symbols}\")\n    print()\n</code></pre>"},{"location":"examples/basic/#4","title":"4. \u4e0b\u8f7d\u5386\u53f2\u6570\u636e","text":"<pre><code># \u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u6240\u6709\u76f8\u5173\u6570\u636e\ndb_path = work_dir / \"market.db\"\n\nprint(\"\ud83d\udce5 \u5f00\u59cb\u4e0b\u8f7dUniverse\u5386\u53f2\u6570\u636e...\")\nservice.download_universe_data(\n    universe_file=universe_file,\n    db_path=db_path,\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,\n    extend_to_present=False\n)\n\nprint(f\"\u2705 \u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\uff0c\u4fdd\u5b58\u81f3: {db_path}\")\n\n# \u68c0\u67e5\u6570\u636e\u5e93\u6587\u4ef6\u5927\u5c0f\ndb_size = db_path.stat().st_size / 1024 / 1024  # MB\nprint(f\"\ud83d\udcc1 \u6570\u636e\u5e93\u6587\u4ef6\u5927\u5c0f: {db_size:.1f} MB\")\n</code></pre>"},{"location":"examples/basic/#5","title":"5. \u6570\u636e\u67e5\u8be2\u548c\u5206\u6790","text":"<pre><code># \u8fde\u63a5\u6570\u636e\u5e93\ndb = MarketDB(db_path)\n\n# \u67e5\u8be2\u7279\u5b9a\u65f6\u95f4\u6bb5\u7684\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-15\",\n    end_time=\"2024-01-20\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"]\n)\n\nprint(f\"\\n\ud83d\udcca \u6570\u636e\u67e5\u8be2\u7ed3\u679c:\")\nprint(f\"   - \u6570\u636e\u5f62\u72b6: {data.shape}\")\nprint(f\"   - \u65f6\u95f4\u8303\u56f4: {data.index.get_level_values('time').min()} ~ {data.index.get_level_values('time').max()}\")\nprint(f\"   - \u4ea4\u6613\u5bf9: {list(data.index.get_level_values('symbol').unique())}\")\n\n# \u663e\u793a\u6570\u636e\u6982\u89c8\nprint(f\"\\n\ud83d\udcc8 \u6570\u636e\u6982\u89c8:\")\nprint(data.describe()[['close_price', 'volume']].round(2))\n</code></pre>"},{"location":"examples/basic/#6","title":"6. \u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u6570\u636e\nprint(\"\\n\ud83d\udcca BTCUSDT \u6570\u636e\u53ef\u89c6\u5316 (\u6700\u8fd110\u6761):\")\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-19\",\n    end_time=\"2024-01-20\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"examples/basic/#7-universe","title":"7. \u6309Universe\u5feb\u7167\u5bfc\u51fa\u6570\u636e","text":"<pre><code># \u4e3a\u6bcf\u4e2aUniverse\u5feb\u7167\u5355\u72ec\u5bfc\u51fa\u6570\u636e\nexport_base = work_dir / \"exports\"\nexport_base.mkdir(exist_ok=True)\n\nprint(f\"\\n\ud83d\udce4 \u6309\u5feb\u7167\u5bfc\u51fa\u6570\u636e\u5230: {export_base}\")\n\nfor i, snapshot in enumerate(universe_def.snapshots, 1):\n    snapshot_dir = export_base / f\"snapshot_{snapshot.effective_date}\"\n\n    print(f\"  {i}. \u5bfc\u51fa\u5feb\u7167 {snapshot.effective_date}...\")\n    print(f\"     \u4ea4\u6613\u5bf9: {snapshot.symbols}\")\n    print(f\"     \u65f6\u95f4\u6233: {snapshot.period_start_ts} ~ {snapshot.period_end_ts}\")\n\n    db.export_to_files_by_timestamp(\n        output_path=snapshot_dir,\n        start_ts=snapshot.period_start_ts,\n        end_ts=snapshot.period_end_ts,\n        freq=Freq.h1,\n        symbols=snapshot.symbols\n    )\n\n    # \u68c0\u67e5\u5bfc\u51fa\u6587\u4ef6 (KDTV\u683c\u5f0f)\n    freq_dir = snapshot_dir / \"h1\"\n    if freq_dir.exists():\n        # \u7edf\u8ba1\u6240\u6709\u65e5\u671f\u76ee\u5f55\u4e0b\u7684.npy\u6587\u4ef6\n        total_npy_files = 0\n        date_dirs = [d for d in freq_dir.iterdir() if d.is_dir()]\n\n        for date_dir in date_dirs:\n            # \u7edf\u8ba1\u8be5\u65e5\u671f\u4e0b\u6240\u6709\u7279\u5f81\u76ee\u5f55\u4e2d\u7684.npy\u6587\u4ef6\n            for feature_dir in date_dir.iterdir():\n                if feature_dir.is_dir() and feature_dir.name != \"universe_token.pkl\":\n                    npy_files = list(feature_dir.glob(\"*.npy\"))\n                    total_npy_files += len(npy_files)\n\n        print(f\"     \u5bfc\u51fa\u6587\u4ef6: {len(date_dirs)} \u4e2a\u65e5\u671f\u76ee\u5f55\uff0c\u5171 {total_npy_files} \u4e2a .npy \u6587\u4ef6\")\n\n        # \u663e\u793a\u7279\u5f81\u7c7b\u578b\n        if date_dirs:\n            first_date_dir = date_dirs[0]\n            features = [d.name for d in first_date_dir.iterdir() if d.is_dir()]\n            print(f\"     \u5305\u542b\u7279\u5f81: {features}\")\n    else:\n        print(f\"     \u5bfc\u51fa\u6587\u4ef6: 0 \u4e2a\u6587\u4ef6 (\u53ef\u80fd\u6ca1\u6709\u6570\u636e)\")\n    print()\n\nprint(\"\u2705 \u6570\u636e\u5bfc\u51fa\u5b8c\u6210\")\n</code></pre>"},{"location":"examples/basic/#8-universe","title":"8. Universe\u5206\u6790","text":"<pre><code># \u5c06Universe\u6570\u636e\u8f6c\u6362\u4e3aDataFrame\u8fdb\u884c\u5206\u6790\ndf = universe_def.export_to_dataframe()\n\nprint(\"\ud83d\udcca Universe\u5206\u6790:\")\nprint(f\"\\n1. \u5404\u65f6\u671f\u4ea4\u6613\u5bf9\u6570\u91cf:\")\nperiod_counts = df.groupby('effective_date')['symbol'].count()\nfor date, count in period_counts.items():\n    print(f\"   {date}: {count} \u4e2a\u4ea4\u6613\u5bf9\")\n\nprint(f\"\\n2. \u4ea4\u6613\u5bf9\u51fa\u73b0\u9891\u7387:\")\nsymbol_counts = df['symbol'].value_counts()\nprint(\"   \u6700\u7a33\u5b9a\u7684\u4ea4\u6613\u5bf9 (\u51fa\u73b0\u6b21\u6570\u6700\u591a):\")\nfor symbol, count in symbol_counts.head().items():\n    print(f\"   {symbol}: {count} \u6b21\")\n\nprint(f\"\\n3. \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\u5206\u6790:\")\navg_volume = df.groupby('symbol')['mean_daily_amount'].mean().sort_values(ascending=False)\nprint(\"   \u5e73\u5747\u6210\u4ea4\u91cf\u524d5:\")\nfor symbol, volume in avg_volume.head().items():\n    volume_m = volume / 1_000_000  # \u8f6c\u6362\u4e3a\u767e\u4e07USDT\n    print(f\"   {symbol}: {volume_m:.1f}M USDT\")\n</code></pre>"},{"location":"examples/basic/#9","title":"9. \u83b7\u53d6\u6700\u65b0\u6570\u636e\u5bf9\u6bd4","text":"<pre><code># \u83b7\u53d6\u5f53\u524d\u5b9e\u65f6\u6570\u636e\u4e0e\u5386\u53f2\u6570\u636e\u5bf9\u6bd4\nprint(\"\\n\ud83d\udd04 \u5f53\u524d\u4ef7\u683c vs \u5386\u53f2\u6570\u636e\u5bf9\u6bd4:\")\n\ncurrent_symbols = universe_def.snapshots[-1].symbols  # \u6700\u65b0\u5feb\u7167\u7684\u4ea4\u6613\u5bf9\nfor symbol in current_symbols[:3]:  # \u663e\u793a\u524d3\u4e2a\n    try:\n        # \u83b7\u53d6\u5f53\u524d\u4ef7\u683c\n        current_ticker = service.get_symbol_ticker(symbol)\n        current_price = float(current_ticker.last_price)\n\n        # \u4ece\u5386\u53f2\u6570\u636e\u83b7\u53d6\u4e00\u4e2a\u6708\u524d\u7684\u4ef7\u683c\n        month_ago_data = db.read_data(\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1,\n            symbols=[symbol]\n        )\n\n        if not month_ago_data.empty:\n            month_ago_price = float(month_ago_data['close_price'].iloc[0])\n            change_pct = (current_price - month_ago_price) / month_ago_price * 100\n\n            print(f\"  {symbol}:\")\n            print(f\"    \u5f53\u524d\u4ef7\u683c: ${current_price:,.2f}\")\n            print(f\"    \u6708\u521d\u4ef7\u683c: ${month_ago_price:,.2f}\")\n            print(f\"    \u6da8\u8dcc\u5e45: {change_pct:+.2f}%\")\n        else:\n            print(f\"  {symbol}: \u65e0\u5386\u53f2\u6570\u636e\")\n\n    except Exception as e:\n        print(f\"  {symbol}: \u83b7\u53d6\u6570\u636e\u5931\u8d25 - {e}\")\n\nprint(\"\\n\ud83c\udf89 \u5b8c\u6574\u793a\u4f8b\u6267\u884c\u5b8c\u6210!\")\n</code></pre>"},{"location":"examples/basic/#_4","title":"\ud83c\udfc3\u200d\u2642\ufe0f \u5feb\u901f\u8fd0\u884c\u811a\u672c","text":"<p>\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4fdd\u5b58\u4e3a <code>crypto_workflow.py</code> \u5e76\u8fd0\u884c\uff1a</p> <pre><code>python crypto_workflow.py\n</code></pre>"},{"location":"examples/basic/#_5","title":"\ud83d\udcc1 \u8f93\u51fa\u6587\u4ef6\u7ed3\u6784","text":"<p>\u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u5c06\u751f\u6210\u4ee5\u4e0b\u6587\u4ef6\u7ed3\u6784\uff1a</p> <pre><code>crypto_data/\n\u251c\u2500\u2500 universe.json              # Universe\u5b9a\u4e49\u6587\u4ef6\n\u251c\u2500\u2500 market.db                  # SQLite\u6570\u636e\u5e93\u6587\u4ef6\n\u2514\u2500\u2500 exports/                   # \u5bfc\u51fa\u6570\u636e\u76ee\u5f55\n    \u251c\u2500\u2500 snapshot_2024-01-31/   # \u7b2c\u4e00\u4e2a\u5feb\u7167\u6570\u636e\n    \u2502   \u2514\u2500\u2500 h1/                # \u9891\u7387\u76ee\u5f55\n    \u2502       \u251c\u2500\u2500 20240101/      # \u65e5\u671f\u76ee\u5f55 (YYYYMMDD\u683c\u5f0f)\n    \u2502       \u2502   \u251c\u2500\u2500 universe_token.pkl  # \u4ea4\u6613\u5bf9\u5217\u8868\n    \u2502       \u2502   \u251c\u2500\u2500 close_price/        # \u7279\u5f81\u76ee\u5f55\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy    # K\u00d7T\u77e9\u9635\u6570\u636e\n    \u2502       \u2502   \u251c\u2500\u2500 volume/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 high_price/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 low_price/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 open_price/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 quote_volume/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 trades_count/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 taker_buy_volume/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 taker_buy_quote_volume/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u251c\u2500\u2500 taker_sell_volume/\n    \u2502       \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n    \u2502       \u2502   \u2514\u2500\u2500 taker_sell_quote_volume/\n    \u2502       \u2502       \u2514\u2500\u2500 20240101.npy\n    \u2502       \u251c\u2500\u2500 20240102/      # \u4e0b\u4e00\u5929\u7684\u6570\u636e\n    \u2502       \u2514\u2500\u2500 ...\n    \u251c\u2500\u2500 snapshot_2024-02-29/   # \u7b2c\u4e8c\u4e2a\u5feb\u7167\u6570\u636e\n    \u2514\u2500\u2500 snapshot_2024-03-31/   # \u7b2c\u4e09\u4e2a\u5feb\u7167\u6570\u636e\n</code></pre> <p>KDTV\u683c\u5f0f\u8bf4\u660e\uff1a - K (Key): \u4ea4\u6613\u5bf9\u7ef4\u5ea6\uff0c\u5b58\u50a8\u5728universe_token.pkl\u4e2d - D (Date): \u65e5\u671f\u7ef4\u5ea6\uff0c\u6309YYYYMMDD\u683c\u5f0f\u7ec4\u7ec7\u76ee\u5f55 - T (Time): \u65f6\u95f4\u7ef4\u5ea6\uff0c\u6bcf\u4e2anpy\u6587\u4ef6\u4e3aK\u00d7T\u77e9\u9635 - V (Value): \u6570\u636e\u503c\uff0c\u6309\u7279\u5f81\u5206\u522b\u5b58\u50a8</p>"},{"location":"examples/basic/#_6","title":"\ud83d\udca1 \u8fdb\u9636\u5e94\u7528","text":""},{"location":"examples/basic/#1_1","title":"1. \u81ea\u5b9a\u4e49\u6570\u636e\u5206\u6790","text":"<pre><code># \u8ba1\u7b97\u5404\u4ea4\u6613\u5bf9\u7684\u6ce2\u52a8\u7387\nimport numpy as np\n\ndef calculate_volatility(db, symbol, days=30):\n    \"\"\"\u8ba1\u7b97\u4ea4\u6613\u5bf9\u768430\u5929\u6ce2\u52a8\u7387\"\"\"\n    end_date = \"2024-01-31\"\n    start_date = \"2024-01-01\"\n\n    data = db.read_data(\n        start_time=start_date,\n        end_time=end_date,\n        freq=Freq.d1,\n        symbols=[symbol]\n    )\n\n    if data.empty:\n        return None\n\n    prices = data['close_price'].values\n    returns = np.diff(np.log(prices))\n    volatility = np.std(returns) * np.sqrt(365)  # \u5e74\u5316\u6ce2\u52a8\u7387\n\n    return volatility\n\n# \u8ba1\u7b97Universe\u4e2d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u6ce2\u52a8\u7387\nvolatilities = {}\nfor symbol in universe_def.snapshots[-1].symbols:\n    vol = calculate_volatility(db, symbol)\n    if vol:\n        volatilities[symbol] = vol\n\nprint(\"\\n\ud83d\udcca \u4ea4\u6613\u5bf9\u6ce2\u52a8\u7387\u6392\u5e8f:\")\nfor symbol, vol in sorted(volatilities.items(), key=lambda x: x[1]):\n    print(f\"  {symbol}: {vol:.2%}\")\n</code></pre>"},{"location":"examples/basic/#2_1","title":"2. \u5b9a\u5236\u5316\u6570\u636e\u5bfc\u51fa","text":"<pre><code># \u5bfc\u51fa\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u7528\u4e8e\u673a\u5668\u5b66\u4e60\ndef export_ml_data(db, symbols, start_time, end_time):\n    \"\"\"\u5bfc\u51fa\u673a\u5668\u5b66\u4e60\u53cb\u597d\u7684\u6570\u636e\u683c\u5f0f\"\"\"\n    data = db.read_data(\n        start_time=start_time,\n        end_time=end_time,\n        freq=Freq.h1,\n        symbols=symbols\n    )\n\n    # \u6dfb\u52a0\u6280\u672f\u6307\u6807\n    for symbol in symbols:\n        symbol_data = data.xs(symbol, level='symbol')\n\n        # \u7b80\u5355\u79fb\u52a8\u5e73\u5747\n        data.loc[(symbol, slice(None)), 'sma_20'] = symbol_data['close_price'].rolling(20).mean()\n\n        # \u4ef7\u683c\u53d8\u5316\u7387\n        data.loc[(symbol, slice(None)), 'price_change'] = symbol_data['close_price'].pct_change()\n\n    return data\n\n# \u5bfc\u51fa\u589e\u5f3a\u6570\u636e\nml_data = export_ml_data(\n    db,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-15\",\n    end_time=\"2024-01-20\"\n)\n\n# \u4fdd\u5b58\u4e3aCSV\nml_data.to_csv(work_dir / \"ml_data.csv\")\nprint(f\"\u2705 \u673a\u5668\u5b66\u4e60\u6570\u636e\u5df2\u4fdd\u5b58\u5230: {work_dir / 'ml_data.csv'}\")\n</code></pre> <p>\u8fd9\u4e2a\u5b8c\u6574\u793a\u4f8b\u5c55\u793a\u4e86\u4ece\u521d\u59cb\u5316\u670d\u52a1\u5230\u6700\u7ec8\u6570\u636e\u5206\u6790\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u9002\u5408\u4f5c\u4e3a\u5b9e\u9645\u9879\u76ee\u7684\u8d77\u70b9\u3002</p>"},{"location":"examples/data_processing/","title":"\u6570\u636e\u5904\u7406\u793a\u4f8b","text":"<p>\u672c\u6587\u6863\u5c55\u793a\u4e86 CryptoService \u7684\u6570\u636e\u5904\u7406\u529f\u80fd\uff0c\u5305\u62ec\u6570\u636e\u5b58\u50a8\u3001\u67e5\u8be2\u3001\u5206\u6790\u548c\u53ef\u89c6\u5316\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u3002</p>"},{"location":"examples/data_processing/#_2","title":"\ud83d\uddc4\ufe0f \u6570\u636e\u5e93\u5b58\u50a8\u548c\u7ba1\u7406","text":""},{"location":"examples/data_processing/#_3","title":"\u57fa\u7840\u6570\u636e\u5e93\u64cd\u4f5c","text":"<pre><code>import os\nfrom pathlib import Path\nfrom cryptoservice.data import MarketDB\nfrom cryptoservice.services import MarketDataService\nfrom cryptoservice.models import Freq\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\ndb_path = \"./data/market.db\"\ndb = MarketDB(db_path)\n\n# \u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\nservice = MarketDataService(\n    api_key=os.getenv(\"BINANCE_API_KEY\"),\n    api_secret=os.getenv(\"BINANCE_API_SECRET\")\n)\n\ndef setup_database():\n    \"\"\"\u8bbe\u7f6e\u548c\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\"\n\n    # \u521b\u5efa\u6570\u636e\u76ee\u5f55\n    Path(\"./data\").mkdir(exist_ok=True)\n\n    # \u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u521b\u5efa\u8868\u7ed3\u6784\n    print(\"\u2705 \u6570\u636e\u5e93\u521d\u59cb\u5316\u5b8c\u6210\")\n    print(f\"\ud83d\udcc1 \u6570\u636e\u5e93\u6587\u4ef6: {db_path}\")\n\n    # \u68c0\u67e5\u6570\u636e\u5e93\u72b6\u6001\n    stats = db.get_database_stats()\n    print(f\"\ud83d\udcca \u6570\u636e\u5e93\u7edf\u8ba1: {stats}\")\n\nsetup_database()\n</code></pre>"},{"location":"examples/data_processing/#universe","title":"Universe \u6570\u636e\u4e0b\u8f7d\u548c\u5b58\u50a8","text":"<pre><code>from cryptoservice.models.universe import UniverseDefinition\n\ndef download_and_store_universe_data():\n    \"\"\"\u4e0b\u8f7d\u5e76\u5b58\u50a8Universe\u6570\u636e\"\"\"\n\n    # \u5b9a\u4e49Universe\n    universe_def = service.define_universe(\n        start_date=\"2024-01-01\",\n        end_date=\"2024-03-31\",\n        t1_months=1,\n        t2_months=1,\n        t3_months=3,\n        top_k=10,\n        output_path=\"./data/test_universe.json\",\n        description=\"\u6d4b\u8bd5Universe\u6570\u636e\u5904\u7406\"\n    )\n\n    print(f\"\u2705 Universe\u5b9a\u4e49\u5b8c\u6210: {len(universe_def.snapshots)} \u4e2a\u5feb\u7167\")\n\n    # \u4e0b\u8f7d\u6570\u636e\u5230\u6570\u636e\u5e93\n    service.download_universe_data(\n        universe_file=\"./data/test_universe.json\",\n        db_path=db_path,\n        interval=Freq.h1,\n        max_workers=2,\n        max_retries=3\n    )\n\n    print(\"\u2705 Universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\n    return universe_def\n\n# universe = download_and_store_universe_data()\n</code></pre>"},{"location":"examples/data_processing/#_4","title":"\ud83d\udcca \u6570\u636e\u67e5\u8be2\u548c\u5206\u6790","text":""},{"location":"examples/data_processing/#_5","title":"\u57fa\u7840\u6570\u636e\u67e5\u8be2","text":"<pre><code>import pandas as pd\nfrom datetime import datetime, timedelta\n\ndef query_market_data():\n    \"\"\"\u67e5\u8be2\u5e02\u573a\u6570\u636e\u793a\u4f8b\"\"\"\n\n    # \u67e5\u8be2\u7279\u5b9a\u65f6\u95f4\u6bb5\u7684\u6570\u636e\n    start_time = \"2024-01-01\"\n    end_time = \"2024-01-31\"\n    symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n\n    # \u8bfb\u53d6\u5c0f\u65f6\u7ea7\u6570\u636e\n    df = db.read_data(\n        start_time=start_time,\n        end_time=end_time,\n        freq=Freq.h1,\n        symbols=symbols\n    )\n\n    print(f\"\ud83d\udcca \u67e5\u8be2\u7ed3\u679c: {df.shape} (\u884c, \u5217)\")\n    print(f\"\ud83d\udcc8 \u65f6\u95f4\u8303\u56f4: {df.index.min()} \u5230 {df.index.max()}\")\n    print(f\"\ud83d\udcb0 \u4ea4\u6613\u5bf9: {df.columns.get_level_values('symbol').unique().tolist()}\")\n\n    # \u663e\u793a\u6570\u636e\u6982\u89c8\n    print(\"\\n\u6570\u636e\u6982\u89c8:\")\n    print(df.head())\n\n    return df\n\n# \u6267\u884c\u67e5\u8be2\nmarket_df = query_market_data()\n</code></pre>"},{"location":"examples/data_processing/#_6","title":"\u9ad8\u7ea7\u6570\u636e\u7b5b\u9009","text":"<pre><code>def advanced_data_filtering():\n    \"\"\"\u9ad8\u7ea7\u6570\u636e\u7b5b\u9009\u793a\u4f8b\"\"\"\n\n    # \u6309\u6761\u4ef6\u7b5b\u9009\u6570\u636e\n    filtered_data = db.read_data_with_conditions(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        freq=Freq.d1,\n        symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n        conditions={\n            'volume': ('&gt;', 1000),  # \u6210\u4ea4\u91cf\u5927\u4e8e1000\n            'close_price': ('between', 30000, 50000)  # \u4ef7\u683c\u572830k-50k\u4e4b\u95f4\n        }\n    )\n\n    print(\"\ud83d\udd0d \u7b5b\u9009\u540e\u7684\u6570\u636e:\")\n    print(filtered_data.describe())\n\n    # \u6309\u767e\u5206\u4f4d\u6570\u7b5b\u9009\n    high_volume_data = db.read_data_by_percentile(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        symbols=[\"BTCUSDT\"],\n        column=\"volume\",\n        percentile=90  # \u6210\u4ea4\u91cf\u524d10%\u7684\u6570\u636e\n    )\n\n    print(f\"\\n\ud83d\udcc8 \u9ad8\u6210\u4ea4\u91cf\u6570\u636e (\u524d10%): {len(high_volume_data)} \u6761\u8bb0\u5f55\")\n\n    return filtered_data, high_volume_data\n\n# advanced_data = advanced_data_filtering()\n</code></pre>"},{"location":"examples/data_processing/#_7","title":"\ud83d\udcc8 \u6280\u672f\u6307\u6807\u8ba1\u7b97","text":""},{"location":"examples/data_processing/#_8","title":"\u57fa\u7840\u6280\u672f\u6307\u6807","text":"<pre><code>import numpy as np\nimport pandas as pd\n\nclass TechnicalIndicators:\n    \"\"\"\u6280\u672f\u6307\u6807\u8ba1\u7b97\u7c7b\"\"\"\n\n    @staticmethod\n    def sma(data, window):\n        \"\"\"\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\"\"\"\n        return data.rolling(window=window).mean()\n\n    @staticmethod\n    def ema(data, window):\n        \"\"\"\u6307\u6570\u79fb\u52a8\u5e73\u5747\u7ebf\"\"\"\n        return data.ewm(span=window).mean()\n\n    @staticmethod\n    def rsi(data, window=14):\n        \"\"\"\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\"\"\"\n        delta = data.diff()\n        gain = (delta.where(delta &gt; 0, 0)).rolling(window=window).mean()\n        loss = (-delta.where(delta &lt; 0, 0)).rolling(window=window).mean()\n        rs = gain / loss\n        rsi = 100 - (100 / (1 + rs))\n        return rsi\n\n    @staticmethod\n    def bollinger_bands(data, window=20, std_dev=2):\n        \"\"\"\u5e03\u6797\u5e26\"\"\"\n        sma = data.rolling(window=window).mean()\n        std = data.rolling(window=window).std()\n        upper_band = sma + (std * std_dev)\n        lower_band = sma - (std * std_dev)\n        return sma, upper_band, lower_band\n\n    @staticmethod\n    def macd(data, fast=12, slow=26, signal=9):\n        \"\"\"MACD\u6307\u6807\"\"\"\n        ema_fast = data.ewm(span=fast).mean()\n        ema_slow = data.ewm(span=slow).mean()\n        macd_line = ema_fast - ema_slow\n        signal_line = macd_line.ewm(span=signal).mean()\n        histogram = macd_line - signal_line\n        return macd_line, signal_line, histogram\n\ndef calculate_technical_indicators():\n    \"\"\"\u8ba1\u7b97\u6280\u672f\u6307\u6807\u793a\u4f8b\"\"\"\n\n    # \u83b7\u53d6BTC\u6570\u636e\n    btc_data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        freq=Freq.d1,\n        symbols=[\"BTCUSDT\"]\n    )\n\n    # \u63d0\u53d6\u6536\u76d8\u4ef7\n    close_prices = btc_data[('close_price', 'BTCUSDT')]\n\n    # \u8ba1\u7b97\u5404\u79cd\u6280\u672f\u6307\u6807\n    indicators = TechnicalIndicators()\n\n    # \u79fb\u52a8\u5e73\u5747\u7ebf\n    sma_20 = indicators.sma(close_prices, 20)\n    ema_20 = indicators.ema(close_prices, 20)\n\n    # RSI\n    rsi = indicators.rsi(close_prices)\n\n    # \u5e03\u6797\u5e26\n    bb_middle, bb_upper, bb_lower = indicators.bollinger_bands(close_prices)\n\n    # MACD\n    macd, signal, histogram = indicators.macd(close_prices)\n\n    # \u521b\u5efa\u6280\u672f\u6307\u6807DataFrame\n    tech_df = pd.DataFrame({\n        'close': close_prices,\n        'sma_20': sma_20,\n        'ema_20': ema_20,\n        'rsi': rsi,\n        'bb_upper': bb_upper,\n        'bb_middle': bb_middle,\n        'bb_lower': bb_lower,\n        'macd': macd,\n        'macd_signal': signal,\n        'macd_histogram': histogram\n    })\n\n    print(\"\ud83d\udcca \u6280\u672f\u6307\u6807\u8ba1\u7b97\u5b8c\u6210:\")\n    print(tech_df.tail())\n\n    # \u751f\u6210\u4ea4\u6613\u4fe1\u53f7\n    signals = generate_trading_signals(tech_df)\n\n    return tech_df, signals\n\ndef generate_trading_signals(tech_df):\n    \"\"\"\u751f\u6210\u4ea4\u6613\u4fe1\u53f7\"\"\"\n\n    signals = pd.DataFrame(index=tech_df.index)\n\n    # RSI\u4fe1\u53f7\n    signals['rsi_overbought'] = tech_df['rsi'] &gt; 70\n    signals['rsi_oversold'] = tech_df['rsi'] &lt; 30\n\n    # \u79fb\u52a8\u5e73\u5747\u4fe1\u53f7\n    signals['golden_cross'] = (tech_df['sma_20'] &gt; tech_df['ema_20'].shift(1)) &amp; \\\n                             (tech_df['sma_20'].shift(1) &lt;= tech_df['ema_20'].shift(1))\n\n    # \u5e03\u6797\u5e26\u4fe1\u53f7\n    signals['bb_breakout_upper'] = tech_df['close'] &gt; tech_df['bb_upper']\n    signals['bb_breakout_lower'] = tech_df['close'] &lt; tech_df['bb_lower']\n\n    # MACD\u4fe1\u53f7\n    signals['macd_bullish'] = (tech_df['macd'] &gt; tech_df['macd_signal']) &amp; \\\n                             (tech_df['macd'].shift(1) &lt;= tech_df['macd_signal'].shift(1))\n\n    print(\"\\n\ud83d\udcc8 \u4ea4\u6613\u4fe1\u53f7\u7edf\u8ba1:\")\n    for signal in signals.columns:\n        count = signals[signal].sum()\n        print(f\"   {signal}: {count} \u6b21\")\n\n    return signals\n\n# tech_data, trade_signals = calculate_technical_indicators()\n</code></pre>"},{"location":"examples/data_processing/#_9","title":"\ud83d\udcca \u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"examples/data_processing/#_10","title":"\u4ef7\u683c\u56fe\u8868\u53ef\u89c6\u5316","text":"<pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.dates import DateFormatter\n\ndef create_price_charts():\n    \"\"\"\u521b\u5efa\u4ef7\u683c\u56fe\u8868\"\"\"\n\n    # \u83b7\u53d6\u6570\u636e\n    btc_data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        freq=Freq.d1,\n        symbols=[\"BTCUSDT\"]\n    )\n\n    # \u63d0\u53d6OHLCV\u6570\u636e\n    ohlcv = pd.DataFrame({\n        'open': btc_data[('open_price', 'BTCUSDT')],\n        'high': btc_data[('high_price', 'BTCUSDT')],\n        'low': btc_data[('low_price', 'BTCUSDT')],\n        'close': btc_data[('close_price', 'BTCUSDT')],\n        'volume': btc_data[('volume', 'BTCUSDT')]\n    }).dropna()\n\n    # \u521b\u5efa\u5b50\u56fe\n    fig, axes = plt.subplots(3, 1, figsize=(15, 12))\n    fig.suptitle('BTC/USDT \u5e02\u573a\u5206\u6790', fontsize=16, fontweight='bold')\n\n    # 1. \u4ef7\u683c\u8d70\u52bf\u56fe\n    ax1 = axes[0]\n    ax1.plot(ohlcv.index, ohlcv['close'], label='\u6536\u76d8\u4ef7', linewidth=2, color='blue')\n    ax1.fill_between(ohlcv.index, ohlcv['low'], ohlcv['high'], alpha=0.3, color='lightblue', label='\u4ef7\u683c\u8303\u56f4')\n    ax1.set_title('\u4ef7\u683c\u8d70\u52bf')\n    ax1.set_ylabel('\u4ef7\u683c (USDT)')\n    ax1.legend()\n    ax1.grid(True, alpha=0.3)\n\n    # \u6dfb\u52a0\u79fb\u52a8\u5e73\u5747\u7ebf\n    sma_20 = ohlcv['close'].rolling(20).mean()\n    sma_50 = ohlcv['close'].rolling(50).mean()\n    ax1.plot(ohlcv.index, sma_20, label='SMA-20', alpha=0.7, color='orange')\n    ax1.plot(ohlcv.index, sma_50, label='SMA-50', alpha=0.7, color='red')\n    ax1.legend()\n\n    # 2. \u6210\u4ea4\u91cf\u56fe\n    ax2 = axes[1]\n    colors = ['green' if close &gt;= open else 'red' for close, open in zip(ohlcv['close'], ohlcv['open'])]\n    ax2.bar(ohlcv.index, ohlcv['volume'], color=colors, alpha=0.7, width=0.8)\n    ax2.set_title('\u6210\u4ea4\u91cf')\n    ax2.set_ylabel('\u6210\u4ea4\u91cf (BTC)')\n    ax2.grid(True, alpha=0.3)\n\n    # 3. \u4ef7\u683c\u5206\u5e03\u56fe\n    ax3 = axes[2]\n    ax3.hist(ohlcv['close'], bins=50, alpha=0.7, color='purple', edgecolor='black')\n    ax3.set_title('\u4ef7\u683c\u5206\u5e03')\n    ax3.set_xlabel('\u4ef7\u683c (USDT)')\n    ax3.set_ylabel('\u9891\u6b21')\n    ax3.grid(True, alpha=0.3)\n\n    # \u6dfb\u52a0\u7edf\u8ba1\u4fe1\u606f\n    mean_price = ohlcv['close'].mean()\n    median_price = ohlcv['close'].median()\n    ax3.axvline(mean_price, color='red', linestyle='--', label=f'\u5747\u503c: ${mean_price:.0f}')\n    ax3.axvline(median_price, color='orange', linestyle='--', label=f'\u4e2d\u4f4d\u6570: ${median_price:.0f}')\n    ax3.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    return fig\n\n# chart = create_price_charts()\n</code></pre>"},{"location":"examples/data_processing/#_11","title":"\u591a\u5e01\u79cd\u6bd4\u8f83\u5206\u6790","text":"<pre><code>def multi_symbol_analysis():\n    \"\"\"\u591a\u5e01\u79cd\u6bd4\u8f83\u5206\u6790\"\"\"\n\n    symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\", \"ADAUSDT\"]\n\n    # \u83b7\u53d6\u6570\u636e\n    multi_data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        freq=Freq.d1,\n        symbols=symbols\n    )\n\n    # \u63d0\u53d6\u6536\u76d8\u4ef7\n    close_prices = pd.DataFrame({\n        symbol: multi_data[('close_price', symbol)]\n        for symbol in symbols\n    }).dropna()\n\n    # \u8ba1\u7b97\u5f52\u4e00\u5316\u4ef7\u683c (\u4ee5\u7b2c\u4e00\u5929\u4e3a\u57fa\u51c6)\n    normalized_prices = close_prices / close_prices.iloc[0] * 100\n\n    # \u8ba1\u7b97\u6536\u76ca\u7387\n    returns = close_prices.pct_change().dropna()\n\n    # \u521b\u5efa\u6bd4\u8f83\u56fe\u8868\n    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n    fig.suptitle('\u591a\u5e01\u79cd\u6bd4\u8f83\u5206\u6790', fontsize=16, fontweight='bold')\n\n    # 1. \u5f52\u4e00\u5316\u4ef7\u683c\u5bf9\u6bd4\n    ax1 = axes[0, 0]\n    for symbol in symbols:\n        ax1.plot(normalized_prices.index, normalized_prices[symbol], label=symbol, linewidth=2)\n    ax1.set_title('\u4ef7\u683c\u8868\u73b0\u5bf9\u6bd4 (\u5f52\u4e00\u5316)')\n    ax1.set_ylabel('\u76f8\u5bf9\u4ef7\u683c (%)')\n    ax1.legend()\n    ax1.grid(True, alpha=0.3)\n\n    # 2. \u6ce2\u52a8\u7387\u5bf9\u6bd4\n    ax2 = axes[0, 1]\n    volatility = returns.rolling(window=7).std() * np.sqrt(365) * 100  # \u5e74\u5316\u6ce2\u52a8\u7387\n    for symbol in symbols:\n        ax2.plot(volatility.index, volatility[symbol], label=symbol, alpha=0.7)\n    ax2.set_title('\u6ce2\u52a8\u7387\u5bf9\u6bd4 (7\u65e5\u6eda\u52a8)')\n    ax2.set_ylabel('\u5e74\u5316\u6ce2\u52a8\u7387 (%)')\n    ax2.legend()\n    ax2.grid(True, alpha=0.3)\n\n    # 3. \u6536\u76ca\u7387\u5206\u5e03\n    ax3 = axes[1, 0]\n    returns.plot(kind='box', ax=ax3)\n    ax3.set_title('\u6536\u76ca\u7387\u5206\u5e03')\n    ax3.set_ylabel('\u65e5\u6536\u76ca\u7387')\n    ax3.grid(True, alpha=0.3)\n\n    # 4. \u76f8\u5173\u6027\u70ed\u56fe\n    ax4 = axes[1, 1]\n    correlation_matrix = returns.corr()\n    sns.heatmap(correlation_matrix, annot=True, cmap='RdYlBu_r', center=0,\n                square=True, ax=ax4, fmt='.3f')\n    ax4.set_title('\u6536\u76ca\u7387\u76f8\u5173\u6027')\n\n    plt.tight_layout()\n    plt.show()\n\n    # \u6253\u5370\u7edf\u8ba1\u4fe1\u606f\n    print(\"\ud83d\udcca \u7edf\u8ba1\u4fe1\u606f\u6458\u8981:\")\n    print(\"=\" * 50)\n\n    stats = pd.DataFrame({\n        '\u5e73\u5747\u6536\u76ca\u7387(%)': returns.mean() * 100,\n        '\u6ce2\u52a8\u7387(%)': returns.std() * 100,\n        '\u590f\u666e\u6bd4\u7387': returns.mean() / returns.std(),\n        '\u6700\u5927\u6536\u76ca\u7387(%)': returns.max() * 100,\n        '\u6700\u5927\u4e8f\u635f(%)': returns.min() * 100\n    })\n\n    print(stats.round(3))\n\n    return normalized_prices, returns, stats\n\n# multi_analysis = multi_symbol_analysis()\n</code></pre>"},{"location":"examples/data_processing/#_12","title":"\ud83d\udcbe \u6570\u636e\u5bfc\u51fa\u548c\u5907\u4efd","text":""},{"location":"examples/data_processing/#_13","title":"\u591a\u683c\u5f0f\u6570\u636e\u5bfc\u51fa","text":"<pre><code>def export_processed_data():\n    \"\"\"\u5bfc\u51fa\u5904\u7406\u540e\u7684\u6570\u636e\"\"\"\n\n    # \u521b\u5efa\u5bfc\u51fa\u76ee\u5f55\n    export_dir = Path(\"./data/exports\")\n    export_dir.mkdir(exist_ok=True)\n\n    # \u83b7\u53d6\u6570\u636e\n    data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-03-31\",\n        freq=Freq.d1,\n        symbols=[\"BTCUSDT\", \"ETHUSDT\"]\n    )\n\n    # 1. \u5bfc\u51fa\u4e3aCSV\n    csv_file = export_dir / \"market_data.csv\"\n    data.to_csv(csv_file)\n    print(f\"\u2705 CSV\u5bfc\u51fa\u5b8c\u6210: {csv_file}\")\n\n    # 2. \u5bfc\u51fa\u4e3aParquet (\u9ad8\u6548\u538b\u7f29)\n    parquet_file = export_dir / \"market_data.parquet\"\n    data.to_parquet(parquet_file)\n    print(f\"\u2705 Parquet\u5bfc\u51fa\u5b8c\u6210: {parquet_file}\")\n\n    # 3. \u5bfc\u51fa\u4e3aExcel (\u591a\u5de5\u4f5c\u8868)\n    excel_file = export_dir / \"market_analysis.xlsx\"\n    with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:\n        # \u539f\u59cb\u6570\u636e\n        data.to_excel(writer, sheet_name='\u539f\u59cb\u6570\u636e')\n\n        # \u7edf\u8ba1\u6458\u8981\n        summary = data.describe()\n        summary.to_excel(writer, sheet_name='\u7edf\u8ba1\u6458\u8981')\n\n        # \u6280\u672f\u6307\u6807 (\u5982\u679c\u5df2\u8ba1\u7b97)\n        if 'tech_data' in locals():\n            tech_data.to_excel(writer, sheet_name='\u6280\u672f\u6307\u6807')\n\n    print(f\"\u2705 Excel\u5bfc\u51fa\u5b8c\u6210: {excel_file}\")\n\n    # 4. \u5bfc\u51fa\u4e3aNumPy\u6570\u7ec4\n    numpy_file = export_dir / \"market_data.npz\"\n\n    # \u8f6c\u6362\u4e3a\u6570\u7ec4\u683c\u5f0f\n    close_prices = data['close_price'].values\n    volumes = data['volume'].values\n    timestamps = data.index.values\n\n    np.savez_compressed(\n        numpy_file,\n        close_prices=close_prices,\n        volumes=volumes,\n        timestamps=timestamps,\n        symbols=data['close_price'].columns.tolist()\n    )\n    print(f\"\u2705 NumPy\u5bfc\u51fa\u5b8c\u6210: {numpy_file}\")\n\n    # \u6587\u4ef6\u5927\u5c0f\u6bd4\u8f83\n    print(\"\\n\ud83d\udcc1 \u6587\u4ef6\u5927\u5c0f\u6bd4\u8f83:\")\n    for file_path in [csv_file, parquet_file, excel_file, numpy_file]:\n        size_mb = file_path.stat().st_size / (1024 * 1024)\n        print(f\"   {file_path.name}: {size_mb:.2f} MB\")\n\n# export_processed_data()\n</code></pre>"},{"location":"examples/data_processing/#_14","title":"\u6570\u636e\u5e93\u5907\u4efd\u548c\u6062\u590d","text":"<pre><code>import shutil\nfrom datetime import datetime\n\ndef backup_database():\n    \"\"\"\u5907\u4efd\u6570\u636e\u5e93\"\"\"\n\n    backup_dir = Path(\"./data/backups\")\n    backup_dir.mkdir(exist_ok=True)\n\n    # \u521b\u5efa\u65f6\u95f4\u6233\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n\n    # 1. \u5b8c\u6574\u6570\u636e\u5e93\u5907\u4efd\n    backup_file = backup_dir / f\"market_db_backup_{timestamp}.db\"\n    shutil.copy2(db_path, backup_file)\n    print(f\"\u2705 \u6570\u636e\u5e93\u5907\u4efd\u5b8c\u6210: {backup_file}\")\n\n    # 2. \u5bfc\u51fa\u4e3aSQL\u811a\u672c\n    sql_backup = backup_dir / f\"market_db_dump_{timestamp}.sql\"\n\n    # \u4f7f\u7528SQLite\u7684.dump\u547d\u4ee4\n    import sqlite3\n\n    conn = sqlite3.connect(db_path)\n    with open(sql_backup, 'w') as f:\n        for line in conn.iterdump():\n            f.write('%s\\n' % line)\n    conn.close()\n\n    print(f\"\u2705 SQL\u811a\u672c\u5907\u4efd\u5b8c\u6210: {sql_backup}\")\n\n    # 3. \u538b\u7f29\u5907\u4efd\n    import zipfile\n\n    zip_backup = backup_dir / f\"market_db_archive_{timestamp}.zip\"\n    with zipfile.ZipFile(zip_backup, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        zipf.write(backup_file, backup_file.name)\n        zipf.write(sql_backup, sql_backup.name)\n\n    print(f\"\u2705 \u538b\u7f29\u5907\u4efd\u5b8c\u6210: {zip_backup}\")\n\n    # \u6e05\u7406\u4e34\u65f6\u6587\u4ef6\n    backup_file.unlink()\n    sql_backup.unlink()\n\n    return zip_backup\n\ndef restore_database(backup_file):\n    \"\"\"\u6062\u590d\u6570\u636e\u5e93\"\"\"\n\n    if not Path(backup_file).exists():\n        print(f\"\u274c \u5907\u4efd\u6587\u4ef6\u4e0d\u5b58\u5728: {backup_file}\")\n        return False\n\n    try:\n        # \u5907\u4efd\u5f53\u524d\u6570\u636e\u5e93\n        current_backup = f\"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n        shutil.copy2(db_path, current_backup)\n        print(f\"\ud83d\udcc1 \u5f53\u524d\u6570\u636e\u5e93\u5df2\u5907\u4efd\u5230: {current_backup}\")\n\n        # \u6062\u590d\u6570\u636e\u5e93\n        shutil.copy2(backup_file, db_path)\n        print(f\"\u2705 \u6570\u636e\u5e93\u6062\u590d\u5b8c\u6210: {backup_file}\")\n\n        return True\n\n    except Exception as e:\n        print(f\"\u274c \u6570\u636e\u5e93\u6062\u590d\u5931\u8d25: {e}\")\n        return False\n\n# \u6267\u884c\u5907\u4efd\n# backup_file = backup_database()\n</code></pre>"},{"location":"examples/data_processing/#_15","title":"\ud83d\udd04 \u81ea\u52a8\u5316\u6570\u636e\u5904\u7406\u6d41\u6c34\u7ebf","text":"<pre><code>import schedule\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass DataProcessingPipeline:\n    \"\"\"\u81ea\u52a8\u5316\u6570\u636e\u5904\u7406\u6d41\u6c34\u7ebf\"\"\"\n\n    def __init__(self):\n        self.db = MarketDB(db_path)\n        self.service = MarketDataService(\n            api_key=os.getenv(\"BINANCE_API_KEY\"),\n            api_secret=os.getenv(\"BINANCE_API_SECRET\")\n        )\n        self.symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n\n    def daily_data_update(self):\n        \"\"\"\u6bcf\u65e5\u6570\u636e\u66f4\u65b0\"\"\"\n        print(f\"\ud83d\udd04 \u5f00\u59cb\u6bcf\u65e5\u6570\u636e\u66f4\u65b0 - {datetime.now()}\")\n\n        try:\n            # \u83b7\u53d6\u6700\u65b0\u6570\u636e\n            end_time = datetime.now()\n            start_time = end_time - timedelta(days=1)\n\n            for symbol in self.symbols:\n                klines = self.service.get_historical_klines(\n                    symbol=symbol,\n                    start_time=start_time.strftime(\"%Y-%m-%d\"),\n                    end_time=end_time.strftime(\"%Y-%m-%d\"),\n                    interval=Freq.h1\n                )\n\n                # \u5b58\u50a8\u5230\u6570\u636e\u5e93\n                self.db.insert_klines(symbol, klines)\n                print(f\"\u2705 {symbol} \u6570\u636e\u66f4\u65b0\u5b8c\u6210: {len(klines)} \u6761\u8bb0\u5f55\")\n\n            print(\"\ud83c\udf89 \u6bcf\u65e5\u6570\u636e\u66f4\u65b0\u5b8c\u6210\")\n\n        except Exception as e:\n            print(f\"\u274c \u6bcf\u65e5\u6570\u636e\u66f4\u65b0\u5931\u8d25: {e}\")\n\n    def weekly_analysis(self):\n        \"\"\"\u6bcf\u5468\u5206\u6790\u62a5\u544a\"\"\"\n        print(f\"\ud83d\udcca \u5f00\u59cb\u6bcf\u5468\u5206\u6790 - {datetime.now()}\")\n\n        try:\n            # \u751f\u6210\u5468\u62a5\n            end_time = datetime.now()\n            start_time = end_time - timedelta(days=7)\n\n            weekly_data = self.db.read_data(\n                start_time=start_time.strftime(\"%Y-%m-%d\"),\n                end_time=end_time.strftime(\"%Y-%m-%d\"),\n                freq=Freq.d1,\n                symbols=self.symbols\n            )\n\n            # \u8ba1\u7b97\u5468\u5ea6\u7edf\u8ba1\n            weekly_stats = {}\n            for symbol in self.symbols:\n                close_prices = weekly_data[('close_price', symbol)]\n                weekly_stats[symbol] = {\n                    'return': (close_prices.iloc[-1] / close_prices.iloc[0] - 1) * 100,\n                    'volatility': close_prices.pct_change().std() * 100,\n                    'max_price': close_prices.max(),\n                    'min_price': close_prices.min()\n                }\n\n            # \u751f\u6210\u62a5\u544a\n            report_file = f\"./data/reports/weekly_report_{end_time.strftime('%Y%m%d')}.txt\"\n            Path(\"./data/reports\").mkdir(exist_ok=True)\n\n            with open(report_file, 'w') as f:\n                f.write(f\"\u52a0\u5bc6\u8d27\u5e01\u5468\u5ea6\u5206\u6790\u62a5\u544a\\n\")\n                f.write(f\"\u62a5\u544a\u65f6\u95f4: {end_time.strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n                f.write(\"=\" * 50 + \"\\n\\n\")\n\n                for symbol, stats in weekly_stats.items():\n                    f.write(f\"{symbol}:\\n\")\n                    f.write(f\"  \u5468\u5ea6\u6536\u76ca\u7387: {stats['return']:.2f}%\\n\")\n                    f.write(f\"  \u6ce2\u52a8\u7387: {stats['volatility']:.2f}%\\n\")\n                    f.write(f\"  \u6700\u9ad8\u4ef7: ${stats['max_price']:.2f}\\n\")\n                    f.write(f\"  \u6700\u4f4e\u4ef7: ${stats['min_price']:.2f}\\n\\n\")\n\n            print(f\"\u2705 \u5468\u5ea6\u62a5\u544a\u751f\u6210\u5b8c\u6210: {report_file}\")\n\n        except Exception as e:\n            print(f\"\u274c \u5468\u5ea6\u5206\u6790\u5931\u8d25: {e}\")\n\n    def monthly_backup(self):\n        \"\"\"\u6bcf\u6708\u6570\u636e\u5907\u4efd\"\"\"\n        print(f\"\ud83d\udcbe \u5f00\u59cb\u6bcf\u6708\u5907\u4efd - {datetime.now()}\")\n\n        try:\n            backup_file = backup_database()\n            print(f\"\u2705 \u6708\u5ea6\u5907\u4efd\u5b8c\u6210: {backup_file}\")\n\n        except Exception as e:\n            print(f\"\u274c \u6708\u5ea6\u5907\u4efd\u5931\u8d25: {e}\")\n\n    def setup_schedule(self):\n        \"\"\"\u8bbe\u7f6e\u5b9a\u65f6\u4efb\u52a1\"\"\"\n\n        # \u6bcf\u65e5\u51cc\u66682\u70b9\u66f4\u65b0\u6570\u636e\n        schedule.every().day.at(\"02:00\").do(self.daily_data_update)\n\n        # \u6bcf\u5468\u4e00\u65e9\u4e0a8\u70b9\u751f\u6210\u5468\u62a5\n        schedule.every().monday.at(\"08:00\").do(self.weekly_analysis)\n\n        # \u6bcf\u67081\u53f7\u51cc\u66683\u70b9\u5907\u4efd\u6570\u636e\n        schedule.every().month.do(self.monthly_backup)\n\n        print(\"\u23f0 \u5b9a\u65f6\u4efb\u52a1\u8bbe\u7f6e\u5b8c\u6210:\")\n        print(\"   - \u6bcf\u65e5 02:00: \u6570\u636e\u66f4\u65b0\")\n        print(\"   - \u6bcf\u5468\u4e00 08:00: \u5468\u5ea6\u5206\u6790\")\n        print(\"   - \u6bcf\u67081\u53f7 03:00: \u6570\u636e\u5907\u4efd\")\n\n    def run_forever(self):\n        \"\"\"\u8fd0\u884c\u5b9a\u65f6\u4efb\u52a1\"\"\"\n        self.setup_schedule()\n\n        print(\"\ud83d\ude80 \u6570\u636e\u5904\u7406\u6d41\u6c34\u7ebf\u542f\u52a8...\")\n        while True:\n            schedule.run_pending()\n            time.sleep(60)  # \u6bcf\u5206\u949f\u68c0\u67e5\u4e00\u6b21\n\n# \u4f7f\u7528\u793a\u4f8b\ndef run_data_pipeline():\n    pipeline = DataProcessingPipeline()\n\n    # \u624b\u52a8\u6267\u884c\u4e00\u6b21\u66f4\u65b0\n    pipeline.daily_data_update()\n\n    # \u6216\u8005\u542f\u52a8\u5b9a\u65f6\u4efb\u52a1\n    # pipeline.run_forever()\n\n# run_data_pipeline()\n</code></pre>"},{"location":"examples/data_processing/#_16","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u57fa\u7840\u4f7f\u7528\u793a\u4f8b - \u57fa\u7840\u529f\u80fd\u6f14\u793a</li> <li>\u5e02\u573a\u6570\u636e\u793a\u4f8b - \u5b9e\u65f6\u6570\u636e\u5904\u7406</li> <li>\u6570\u636e\u5b58\u50a8\u6307\u5357 - \u5b58\u50a8\u67b6\u6784\u8be6\u89e3</li> <li>\u6570\u636e\u5e93\u64cd\u4f5c - \u6570\u636e\u5e93\u7ba1\u7406</li> <li>MarketDB API - \u5b58\u50a8API\u53c2\u8003</li> </ul> <p>\ud83d\udca1 \u63d0\u793a: - \u5b9a\u671f\u5907\u4efd\u91cd\u8981\u6570\u636e - \u5927\u6570\u636e\u91cf\u5904\u7406\u65f6\u6ce8\u610f\u5185\u5b58\u4f7f\u7528 - \u4f7f\u7528\u9002\u5f53\u7684\u6570\u636e\u683c\u5f0f\u53ef\u63d0\u9ad8\u5904\u7406\u6548\u7387 - \u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u73b0\u9519\u8bef\u76d1\u63a7\u548c\u544a\u8b66\u673a\u5236</p>"},{"location":"examples/market_data/","title":"\u5e02\u573a\u6570\u636e\u793a\u4f8b","text":"<p>\u672c\u6587\u6863\u63d0\u4f9b\u4e86 CryptoService \u5e02\u573a\u6570\u636e\u529f\u80fd\u7684\u5b8c\u6574\u4f7f\u7528\u793a\u4f8b\uff0c\u6db5\u76d6\u5b9e\u65f6\u6570\u636e\u3001\u5386\u53f2\u6570\u636e\u548c WebSocket \u6d41\u6570\u636e\u3002</p>"},{"location":"examples/market_data/#_2","title":"\ud83d\ude80 \u57fa\u7840\u6570\u636e\u83b7\u53d6","text":""},{"location":"examples/market_data/#_3","title":"\u5b9e\u65f6\u884c\u60c5\u6570\u636e","text":"<pre><code>import os\nfrom dotenv import load_dotenv\nfrom cryptoservice.services import MarketDataService\n\nload_dotenv()\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=os.getenv(\"BINANCE_API_KEY\"),\n    api_secret=os.getenv(\"BINANCE_API_SECRET\")\n)\n\ndef get_current_prices():\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u4ef7\u683c\u4fe1\u606f\"\"\"\n\n    # \u5355\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5\n    btc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\n    print(f\"BTC\u5f53\u524d\u4ef7\u683c: ${btc_ticker.last_price}\")\n    print(f\"24h\u6da8\u8dcc\u5e45: {btc_ticker.price_change_percent}%\")\n    print(f\"24h\u6210\u4ea4\u91cf: {btc_ticker.volume} BTC\")\n    print(\"-\" * 40)\n\n    # \u591a\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5\n    symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\", \"ADAUSDT\", \"SOLUSDT\"]\n    tickers = service.get_symbol_tickers(symbols)\n\n    print(\"\ud83d\udcca TOP 5 \u52a0\u5bc6\u8d27\u5e01\u4ef7\u683c:\")\n    for ticker in tickers:\n        symbol = ticker.symbol.replace(\"USDT\", \"\")\n        price = float(ticker.last_price)\n        change = float(ticker.price_change_percent)\n\n        trend = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n        print(f\"{trend} {symbol}: ${price:,.2f} ({change:+.2f}%)\")\n\nif __name__ == \"__main__\":\n    get_current_prices()\n</code></pre>"},{"location":"examples/market_data/#k","title":"\u5386\u53f2K\u7ebf\u6570\u636e","text":"<pre><code>from cryptoservice.models import Freq\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\ndef analyze_price_history():\n    \"\"\"\u5206\u6790\u5386\u53f2\u4ef7\u683c\u6570\u636e\"\"\"\n\n    # \u83b7\u53d6\u8fc7\u53bb30\u5929\u7684\u65e5\u7ebf\u6570\u636e\n    end_time = datetime.now()\n    start_time = end_time - timedelta(days=30)\n\n    klines = service.get_historical_klines(\n        symbol=\"BTCUSDT\",\n        start_time=start_time.strftime(\"%Y-%m-%d\"),\n        end_time=end_time.strftime(\"%Y-%m-%d\"),\n        interval=Freq.d1\n    )\n\n    # \u8f6c\u6362\u4e3aDataFrame\n    df = pd.DataFrame([{\n        'timestamp': pd.to_datetime(k.open_time, unit='ms'),\n        'open': float(k.open_price),\n        'high': float(k.high_price),\n        'low': float(k.low_price),\n        'close': float(k.close_price),\n        'volume': float(k.volume)\n    } for k in klines])\n\n    print(\"\ud83d\udcc8 BTC\u4ef7\u683c\u5206\u6790 (\u8fc7\u53bb30\u5929)\")\n    print(f\"\u6700\u9ad8\u4ef7: ${df['high'].max():,.2f}\")\n    print(f\"\u6700\u4f4e\u4ef7: ${df['low'].min():,.2f}\")\n    print(f\"\u5e73\u5747\u4ef7: ${df['close'].mean():,.2f}\")\n    print(f\"\u603b\u6210\u4ea4\u91cf: {df['volume'].sum():,.2f} BTC\")\n\n    # \u8ba1\u7b97\u6280\u672f\u6307\u6807\n    df['sma_7'] = df['close'].rolling(window=7).mean()\n    df['sma_20'] = df['close'].rolling(window=20).mean()\n    df['volatility'] = df['close'].pct_change().rolling(window=7).std() * 100\n\n    # \u7ed8\u5236\u4ef7\u683c\u56fe\u8868\n    plt.figure(figsize=(12, 8))\n\n    plt.subplot(2, 1, 1)\n    plt.plot(df['timestamp'], df['close'], label='BTC\u4ef7\u683c', linewidth=2)\n    plt.plot(df['timestamp'], df['sma_7'], label='7\u65e5\u5747\u7ebf', alpha=0.7)\n    plt.plot(df['timestamp'], df['sma_20'], label='20\u65e5\u5747\u7ebf', alpha=0.7)\n    plt.title('BTC\u4ef7\u683c\u8d70\u52bf (\u8fc7\u53bb30\u5929)')\n    plt.ylabel('\u4ef7\u683c (USD)')\n    plt.legend()\n    plt.grid(True, alpha=0.3)\n\n    plt.subplot(2, 1, 2)\n    plt.plot(df['timestamp'], df['volatility'], color='red', alpha=0.7)\n    plt.title('\u4ef7\u683c\u6ce2\u52a8\u7387')\n    plt.ylabel('\u6ce2\u52a8\u7387 (%)')\n    plt.xlabel('\u65e5\u671f')\n    plt.grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.show()\n\n    return df\n\n# \u8fd0\u884c\u5206\u6790\nprice_data = analyze_price_history()\n</code></pre>"},{"location":"examples/market_data/#_4","title":"\ud83d\udce1 \u5b9e\u65f6\u6570\u636e\u6d41","text":""},{"location":"examples/market_data/#websocket","title":"WebSocket \u4ef7\u683c\u76d1\u63a7","text":"<pre><code>import asyncio\nfrom cryptoservice.services import WebSocketService\nfrom datetime import datetime\n\nclass PriceMonitor:\n    def __init__(self):\n        self.ws_service = WebSocketService(auto_reconnect=True)\n        self.symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n        self.price_alerts = {\n            \"BTCUSDT\": {\"high\": 50000, \"low\": 40000},\n            \"ETHUSDT\": {\"high\": 3000, \"low\": 2500},\n            \"BNBUSDT\": {\"high\": 400, \"low\": 300}\n        }\n\n    async def start_monitoring(self):\n        \"\"\"\u542f\u52a8\u4ef7\u683c\u76d1\u63a7\"\"\"\n        await self.ws_service.connect()\n\n        # \u8ba2\u9605\u4ef7\u683c\u6570\u636e\n        for symbol in self.symbols:\n            await self.ws_service.subscribe_ticker(symbol)\n\n        print(\"\ud83d\ude80 \u4ef7\u683c\u76d1\u63a7\u5df2\u542f\u52a8...\")\n        print(\"=\" * 50)\n\n        # \u76d1\u542c\u6570\u636e\u6d41\n        async for data in self.ws_service.listen():\n            await self.process_price_data(data)\n\n    async def process_price_data(self, ticker_data):\n        \"\"\"\u5904\u7406\u4ef7\u683c\u6570\u636e\"\"\"\n        symbol = ticker_data.symbol\n        price = float(ticker_data.last_price)\n        change_percent = float(ticker_data.price_change_percent)\n\n        # \u683c\u5f0f\u5316\u8f93\u51fa\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        trend = \"\ud83d\udcc8\" if change_percent &gt; 0 else \"\ud83d\udcc9\"\n\n        print(f\"[{timestamp}] {trend} {symbol}: ${price:,.2f} ({change_percent:+.2f}%)\")\n\n        # \u4ef7\u683c\u8b66\u62a5\n        await self.check_price_alerts(symbol, price)\n\n    async def check_price_alerts(self, symbol, current_price):\n        \"\"\"\u68c0\u67e5\u4ef7\u683c\u8b66\u62a5\"\"\"\n        if symbol in self.price_alerts:\n            alerts = self.price_alerts[symbol]\n\n            if current_price &gt;= alerts[\"high\"]:\n                print(f\"\ud83d\udea8 \u4ef7\u683c\u8b66\u62a5: {symbol} \u7a81\u7834\u9ad8\u4f4d ${alerts['high']:,.2f}\")\n                print(f\"   \u5f53\u524d\u4ef7\u683c: ${current_price:,.2f}\")\n\n            elif current_price &lt;= alerts[\"low\"]:\n                print(f\"\ud83d\udea8 \u4ef7\u683c\u8b66\u62a5: {symbol} \u8dcc\u7834\u4f4e\u4f4d ${alerts['low']:,.2f}\")\n                print(f\"   \u5f53\u524d\u4ef7\u683c: ${current_price:,.2f}\")\n\nasync def run_price_monitor():\n    monitor = PriceMonitor()\n    try:\n        await monitor.start_monitoring()\n    except KeyboardInterrupt:\n        print(\"\\n\u23f9\ufe0f \u505c\u6b62\u76d1\u63a7...\")\n    finally:\n        await monitor.ws_service.close()\n\n# \u8fd0\u884c\u76d1\u63a7 (\u5f02\u6b65)\n# asyncio.run(run_price_monitor())\n</code></pre>"},{"location":"examples/market_data/#k_1","title":"\u5b9e\u65f6K\u7ebf\u5206\u6790","text":"<pre><code>import asyncio\nfrom collections import deque\nfrom cryptoservice.models import Freq\n\nclass RealTimeAnalyzer:\n    def __init__(self, symbol=\"BTCUSDT\", window_size=20):\n        self.ws_service = WebSocketService()\n        self.symbol = symbol\n        self.window_size = window_size\n        self.price_buffer = deque(maxlen=window_size)\n        self.volume_buffer = deque(maxlen=window_size)\n\n    async def start_analysis(self):\n        \"\"\"\u542f\u52a8\u5b9e\u65f6\u5206\u6790\"\"\"\n        await self.ws_service.connect()\n        await self.ws_service.subscribe_kline(self.symbol, Freq.m1)\n\n        print(f\"\ud83d\udcca {self.symbol} \u5b9e\u65f6\u6280\u672f\u5206\u6790\u542f\u52a8...\")\n\n        async for data in self.ws_service.listen():\n            if data.type == \"kline\" and data.is_closed:\n                await self.analyze_kline(data)\n\n    async def analyze_kline(self, kline_data):\n        \"\"\"\u5206\u6790K\u7ebf\u6570\u636e\"\"\"\n        close_price = float(kline_data.close_price)\n        volume = float(kline_data.volume)\n\n        # \u66f4\u65b0\u7f13\u51b2\u533a\n        self.price_buffer.append(close_price)\n        self.volume_buffer.append(volume)\n\n        if len(self.price_buffer) &gt;= self.window_size:\n            # \u8ba1\u7b97\u6280\u672f\u6307\u6807\n            sma = sum(self.price_buffer) / len(self.price_buffer)\n\n            # \u8ba1\u7b97\u6ce2\u52a8\u7387\n            price_changes = [\n                (self.price_buffer[i] - self.price_buffer[i-1]) / self.price_buffer[i-1]\n                for i in range(1, len(self.price_buffer))\n            ]\n            volatility = (sum(x**2 for x in price_changes) / len(price_changes)) ** 0.5 * 100\n\n            # \u6210\u4ea4\u91cf\u5206\u6790\n            avg_volume = sum(self.volume_buffer) / len(self.volume_buffer)\n            volume_ratio = volume / avg_volume\n\n            # \u8d8b\u52bf\u5224\u65ad\n            recent_prices = list(self.price_buffer)[-5:]\n            trend = \"\u4e0a\u6da8\" if recent_prices[-1] &gt; recent_prices[0] else \"\u4e0b\u8dcc\"\n\n            # \u8f93\u51fa\u5206\u6790\u7ed3\u679c\n            print(f\"\\n\ud83d\udcca {self.symbol} \u6280\u672f\u5206\u6790 ({datetime.now().strftime('%H:%M:%S')})\")\n            print(f\"\u5f53\u524d\u4ef7\u683c: ${close_price:,.2f}\")\n            print(f\"\u79fb\u52a8\u5e73\u5747: ${sma:,.2f}\")\n            print(f\"\u6ce2\u52a8\u7387: {volatility:.2f}%\")\n            print(f\"\u6210\u4ea4\u91cf\u500d\u6570: {volume_ratio:.2f}x\")\n            print(f\"\u77ed\u671f\u8d8b\u52bf: {trend}\")\n\n            # \u4fe1\u53f7\u68c0\u6d4b\n            await self.detect_signals(close_price, sma, volume_ratio)\n\n    async def detect_signals(self, price, sma, volume_ratio):\n        \"\"\"\u68c0\u6d4b\u4ea4\u6613\u4fe1\u53f7\"\"\"\n        signals = []\n\n        # \u4ef7\u683c\u7a81\u7834\u4fe1\u53f7\n        if price &gt; sma * 1.02:  # \u4ef7\u683c\u7a81\u7834\u79fb\u52a8\u5e73\u57472%\n            signals.append(\"\ud83d\udd36 \u4ef7\u683c\u7a81\u7834\u79fb\u52a8\u5e73\u5747\u7ebf\")\n\n        # \u6210\u4ea4\u91cf\u5f02\u5e38\u4fe1\u53f7\n        if volume_ratio &gt; 2.0:  # \u6210\u4ea4\u91cf\u662f\u5e73\u5747\u503c\u76842\u500d\u4ee5\u4e0a\n            signals.append(\"\ud83d\udcc8 \u6210\u4ea4\u91cf\u653e\u5927\")\n\n        # \u8f93\u51fa\u4fe1\u53f7\n        if signals:\n            print(\"\ud83d\udd14 \u4ea4\u6613\u4fe1\u53f7:\")\n            for signal in signals:\n                print(f\"   {signal}\")\n\n# \u8fd0\u884c\u5b9e\u65f6\u5206\u6790\nasync def run_realtime_analysis():\n    analyzer = RealTimeAnalyzer(\"BTCUSDT\")\n    try:\n        await analyzer.start_analysis()\n    except KeyboardInterrupt:\n        print(\"\\n\u23f9\ufe0f \u505c\u6b62\u5206\u6790...\")\n    finally:\n        await analyzer.ws_service.close()\n\n# asyncio.run(run_realtime_analysis())\n</code></pre>"},{"location":"examples/market_data/#_5","title":"\ud83d\udcc8 \u5e02\u573a\u6982\u89c8","text":""},{"location":"examples/market_data/#_6","title":"\u5e02\u573a\u70ed\u70b9\u626b\u63cf","text":"<pre><code>def scan_market_hotspots():\n    \"\"\"\u626b\u63cf\u5e02\u573a\u70ed\u70b9\"\"\"\n\n    # \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u4fe1\u606f\n    exchange_info = service.get_exchange_info()\n\n    # \u7b5b\u9009USDT\u4ea4\u6613\u5bf9\n    usdt_symbols = [\n        symbol['symbol'] for symbol in exchange_info['symbols']\n        if symbol['symbol'].endswith('USDT') and symbol['status'] == 'TRADING'\n    ]\n\n    print(f\"\ud83d\udcca \u626b\u63cf {len(usdt_symbols)} \u4e2aUSDT\u4ea4\u6613\u5bf9...\")\n\n    # \u83b7\u53d624h\u884c\u60c5\u7edf\u8ba1\n    tickers = service.get_24hr_ticker_statistics()\n\n    # \u6570\u636e\u5206\u6790\n    analysis_data = []\n    for ticker in tickers:\n        if ticker.symbol in usdt_symbols:\n            try:\n                analysis_data.append({\n                    'symbol': ticker.symbol,\n                    'price': float(ticker.last_price),\n                    'change_percent': float(ticker.price_change_percent),\n                    'volume': float(ticker.volume),\n                    'quote_volume': float(ticker.quote_volume),\n                    'count': int(ticker.count)\n                })\n            except (ValueError, TypeError):\n                continue\n\n    # \u6392\u5e8f\u548c\u7b5b\u9009\n    df = pd.DataFrame(analysis_data)\n\n    print(\"\\n\ud83d\udd25 \u6da8\u5e45\u699c TOP 10:\")\n    top_gainers = df.nlargest(10, 'change_percent')\n    for _, row in top_gainers.iterrows():\n        print(f\"\ud83d\udcc8 {row['symbol']}: +{row['change_percent']:.2f}% (${row['price']:.4f})\")\n\n    print(\"\\n\ud83d\udcc9 \u8dcc\u5e45\u699c TOP 10:\")\n    top_losers = df.nsmallest(10, 'change_percent')\n    for _, row in top_losers.iterrows():\n        print(f\"\ud83d\udcc9 {row['symbol']}: {row['change_percent']:.2f}% (${row['price']:.4f})\")\n\n    print(\"\\n\ud83d\udcb0 \u6210\u4ea4\u989d\u699c TOP 10:\")\n    top_volume = df.nlargest(10, 'quote_volume')\n    for _, row in top_volume.iterrows():\n        volume_millions = row['quote_volume'] / 1_000_000\n        print(f\"\ud83d\udcb0 {row['symbol']}: ${volume_millions:.1f}M\")\n\n    return df\n\n# \u8fd0\u884c\u5e02\u573a\u626b\u63cf\nmarket_data = scan_market_hotspots()\n</code></pre>"},{"location":"examples/market_data/#_7","title":"\u76f8\u5173\u6027\u5206\u6790","text":"<pre><code>import numpy as np\nimport seaborn as sns\n\ndef correlation_analysis():\n    \"\"\"\u52a0\u5bc6\u8d27\u5e01\u76f8\u5173\u6027\u5206\u6790\"\"\"\n\n    # \u4e3b\u8981\u52a0\u5bc6\u8d27\u5e01\n    major_cryptos = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\", \"ADAUSDT\", \"SOLUSDT\", \"DOTUSDT\"]\n\n    # \u83b7\u53d6\u5386\u53f2\u6570\u636e\n    end_time = datetime.now()\n    start_time = end_time - timedelta(days=30)\n\n    price_data = {}\n    for symbol in major_cryptos:\n        klines = service.get_historical_klines(\n            symbol=symbol,\n            start_time=start_time.strftime(\"%Y-%m-%d\"),\n            end_time=end_time.strftime(\"%Y-%m-%d\"),\n            interval=Freq.d1\n        )\n\n        prices = [float(k.close_price) for k in klines]\n        price_data[symbol.replace(\"USDT\", \"\")] = prices\n\n    # \u521b\u5efaDataFrame\n    df = pd.DataFrame(price_data)\n\n    # \u8ba1\u7b97\u6536\u76ca\u7387\n    returns = df.pct_change().dropna()\n\n    # \u8ba1\u7b97\u76f8\u5173\u6027\u77e9\u9635\n    correlation_matrix = returns.corr()\n\n    print(\"\ud83d\udcca \u52a0\u5bc6\u8d27\u5e01\u76f8\u5173\u6027\u5206\u6790 (\u8fc7\u53bb30\u5929)\")\n    print(\"=\" * 50)\n    print(correlation_matrix.round(3))\n\n    # \u53ef\u89c6\u5316\u76f8\u5173\u6027\u70ed\u56fe\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(\n        correlation_matrix,\n        annot=True,\n        cmap='RdYlBu_r',\n        center=0,\n        square=True,\n        fmt='.3f'\n    )\n    plt.title('\u52a0\u5bc6\u8d27\u5e01\u4ef7\u683c\u76f8\u5173\u6027\u70ed\u56fe')\n    plt.tight_layout()\n    plt.show()\n\n    # \u5bfb\u627e\u6700\u76f8\u5173\u548c\u6700\u4e0d\u76f8\u5173\u7684\u5e01\u5bf9\n    correlations = []\n    for i in range(len(correlation_matrix.columns)):\n        for j in range(i+1, len(correlation_matrix.columns)):\n            correlations.append({\n                'pair': f\"{correlation_matrix.columns[i]}-{correlation_matrix.columns[j]}\",\n                'correlation': correlation_matrix.iloc[i, j]\n            })\n\n    correlations.sort(key=lambda x: abs(x['correlation']), reverse=True)\n\n    print(\"\\n\ud83d\udd17 \u6700\u76f8\u5173\u7684\u5e01\u5bf9:\")\n    for item in correlations[:3]:\n        print(f\"   {item['pair']}: {item['correlation']:.3f}\")\n\n    print(\"\\n\ud83d\udd00 \u6700\u4e0d\u76f8\u5173\u7684\u5e01\u5bf9:\")\n    for item in correlations[-3:]:\n        print(f\"   {item['pair']}: {item['correlation']:.3f}\")\n\n# \u8fd0\u884c\u76f8\u5173\u6027\u5206\u6790\n# correlation_analysis()\n</code></pre>"},{"location":"examples/market_data/#_8","title":"\ud83d\udd14 \u4ef7\u683c\u8b66\u62a5\u7cfb\u7edf","text":"<pre><code>import smtplib\nfrom email.mime.text import MimeText\nfrom email.mime.multipart import MimeMultipart\n\nclass PriceAlertSystem:\n    def __init__(self):\n        self.ws_service = WebSocketService()\n        self.alerts = {}\n        self.email_config = {\n            'smtp_server': 'smtp.gmail.com',\n            'smtp_port': 587,\n            'email': 'your_email@gmail.com',\n            'password': 'your_app_password'\n        }\n\n    def add_alert(self, symbol, condition, target_price, message=\"\"):\n        \"\"\"\u6dfb\u52a0\u4ef7\u683c\u8b66\u62a5\"\"\"\n        if symbol not in self.alerts:\n            self.alerts[symbol] = []\n\n        self.alerts[symbol].append({\n            'condition': condition,  # 'above' or 'below'\n            'target_price': target_price,\n            'message': message,\n            'triggered': False\n        })\n\n        print(f\"\u2705 \u8b66\u62a5\u5df2\u6dfb\u52a0: {symbol} {condition} ${target_price}\")\n\n    async def start_monitoring(self):\n        \"\"\"\u542f\u52a8\u8b66\u62a5\u76d1\u63a7\"\"\"\n        await self.ws_service.connect()\n\n        # \u8ba2\u9605\u6240\u6709\u9700\u8981\u76d1\u63a7\u7684\u4ea4\u6613\u5bf9\n        for symbol in self.alerts.keys():\n            await self.ws_service.subscribe_ticker(symbol)\n\n        print(\"\ud83d\udea8 \u4ef7\u683c\u8b66\u62a5\u7cfb\u7edf\u542f\u52a8...\")\n\n        async for data in self.ws_service.listen():\n            await self.check_alerts(data)\n\n    async def check_alerts(self, ticker_data):\n        \"\"\"\u68c0\u67e5\u8b66\u62a5\u6761\u4ef6\"\"\"\n        symbol = ticker_data.symbol\n        current_price = float(ticker_data.last_price)\n\n        if symbol in self.alerts:\n            for alert in self.alerts[symbol]:\n                if not alert['triggered']:\n                    condition_met = False\n\n                    if alert['condition'] == 'above' and current_price &gt;= alert['target_price']:\n                        condition_met = True\n                    elif alert['condition'] == 'below' and current_price &lt;= alert['target_price']:\n                        condition_met = True\n\n                    if condition_met:\n                        await self.trigger_alert(symbol, current_price, alert)\n                        alert['triggered'] = True\n\n    async def trigger_alert(self, symbol, current_price, alert):\n        \"\"\"\u89e6\u53d1\u8b66\u62a5\"\"\"\n        message = f\"\ud83d\udea8 \u4ef7\u683c\u8b66\u62a5\u89e6\u53d1!\\n\"\n        message += f\"\u4ea4\u6613\u5bf9: {symbol}\\n\"\n        message += f\"\u5f53\u524d\u4ef7\u683c: ${current_price:,.2f}\\n\"\n        message += f\"\u76ee\u6807\u4ef7\u683c: ${alert['target_price']:,.2f}\\n\"\n        message += f\"\u6761\u4ef6: {alert['condition']}\\n\"\n\n        if alert['message']:\n            message += f\"\u5907\u6ce8: {alert['message']}\\n\"\n\n        print(message)\n\n        # \u53d1\u9001\u90ae\u4ef6\u901a\u77e5\n        await self.send_email_alert(symbol, message)\n\n    async def send_email_alert(self, symbol, message):\n        \"\"\"\u53d1\u9001\u90ae\u4ef6\u8b66\u62a5\"\"\"\n        try:\n            msg = MimeMultipart()\n            msg['From'] = self.email_config['email']\n            msg['To'] = self.email_config['email']\n            msg['Subject'] = f\"CryptoService \u4ef7\u683c\u8b66\u62a5: {symbol}\"\n\n            msg.attach(MimeText(message, 'plain'))\n\n            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])\n            server.starttls()\n            server.login(self.email_config['email'], self.email_config['password'])\n            server.send_message(msg)\n            server.quit()\n\n            print(\"\ud83d\udce7 \u90ae\u4ef6\u8b66\u62a5\u5df2\u53d1\u9001\")\n\n        except Exception as e:\n            print(f\"\u274c \u90ae\u4ef6\u53d1\u9001\u5931\u8d25: {e}\")\n\n# \u4f7f\u7528\u793a\u4f8b\nasync def setup_price_alerts():\n    alert_system = PriceAlertSystem()\n\n    # \u6dfb\u52a0\u8b66\u62a5\n    alert_system.add_alert(\"BTCUSDT\", \"above\", 50000, \"BTC\u7a81\u78345\u4e07\u7f8e\u5143!\")\n    alert_system.add_alert(\"BTCUSDT\", \"below\", 40000, \"BTC\u8dcc\u78344\u4e07\u7f8e\u5143!\")\n    alert_system.add_alert(\"ETHUSDT\", \"above\", 3000, \"ETH\u7a81\u78343000\u7f8e\u5143!\")\n\n    try:\n        await alert_system.start_monitoring()\n    except KeyboardInterrupt:\n        print(\"\\n\u23f9\ufe0f \u505c\u6b62\u8b66\u62a5\u76d1\u63a7...\")\n    finally:\n        await alert_system.ws_service.close()\n\n# \u8fd0\u884c\u8b66\u62a5\u7cfb\u7edf\n# asyncio.run(setup_price_alerts())\n</code></pre>"},{"location":"examples/market_data/#_9","title":"\ud83d\udcca \u6570\u636e\u5bfc\u51fa\u548c\u5907\u4efd","text":"<pre><code>def export_market_data():\n    \"\"\"\u5bfc\u51fa\u5e02\u573a\u6570\u636e\"\"\"\n\n    # \u521b\u5efa\u8f93\u51fa\u76ee\u5f55\n    output_dir = \"market_data_export\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    # \u5bfc\u51fa\u5f53\u524d\u4ef7\u683c\n    print(\"\ud83d\udcca \u5bfc\u51fa\u5f53\u524d\u4ef7\u683c\u6570\u636e...\")\n    tickers = service.get_24hr_ticker_statistics()\n\n    ticker_data = []\n    for ticker in tickers[:50]:  # \u5bfc\u51fa\u524d50\u4e2a\u4ea4\u6613\u5bf9\n        ticker_data.append({\n            'symbol': ticker.symbol,\n            'price': ticker.last_price,\n            'change_24h': ticker.price_change_percent,\n            'volume_24h': ticker.volume,\n            'high_24h': ticker.high_price,\n            'low_24h': ticker.low_price\n        })\n\n    # \u4fdd\u5b58\u4e3aCSV\n    df = pd.DataFrame(ticker_data)\n    csv_file = os.path.join(output_dir, f\"market_snapshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\")\n    df.to_csv(csv_file, index=False)\n    print(f\"\u2705 \u4ef7\u683c\u6570\u636e\u5df2\u5bfc\u51fa: {csv_file}\")\n\n    # \u5bfc\u51fa\u5386\u53f2K\u7ebf\u6570\u636e\n    print(\"\ud83d\udcc8 \u5bfc\u51fa\u5386\u53f2K\u7ebf\u6570\u636e...\")\n    major_symbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n\n    for symbol in major_symbols:\n        klines = service.get_historical_klines(\n            symbol=symbol,\n            start_time=\"2024-01-01\",\n            end_time=\"2024-12-31\",\n            interval=Freq.d1\n        )\n\n        kline_data = []\n        for kline in klines:\n            kline_data.append({\n                'timestamp': kline.open_time,\n                'open': kline.open_price,\n                'high': kline.high_price,\n                'low': kline.low_price,\n                'close': kline.close_price,\n                'volume': kline.volume\n            })\n\n        # \u4fdd\u5b58\u5386\u53f2\u6570\u636e\n        kline_df = pd.DataFrame(kline_data)\n        kline_file = os.path.join(output_dir, f\"{symbol}_daily_2024.csv\")\n        kline_df.to_csv(kline_file, index=False)\n        print(f\"\u2705 {symbol} \u5386\u53f2\u6570\u636e\u5df2\u5bfc\u51fa: {kline_file}\")\n\n    print(f\"\\n\ud83c\udf89 \u6570\u636e\u5bfc\u51fa\u5b8c\u6210! \u6587\u4ef6\u4fdd\u5b58\u5728: {output_dir}\")\n\n# \u8fd0\u884c\u6570\u636e\u5bfc\u51fa\n# export_market_data()\n</code></pre>"},{"location":"examples/market_data/#_10","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u57fa\u7840\u4f7f\u7528\u793a\u4f8b - \u57fa\u7840\u529f\u80fd\u6f14\u793a</li> <li>\u6570\u636e\u5904\u7406\u793a\u4f8b - \u6570\u636e\u5904\u7406\u548c\u5206\u6790</li> <li>MarketDataService API - \u5b8c\u6574API\u53c2\u8003</li> <li>WebSocket\u670d\u52a1 - \u5b9e\u65f6\u6570\u636e\u6d41</li> <li>\u6570\u636e\u6a21\u578b - \u6570\u636e\u7ed3\u6784\u8bf4\u660e</li> </ul> <p>\ud83d\udca1 \u63d0\u793a: - \u5b9e\u65f6\u6570\u636e\u529f\u80fd\u9700\u8981\u7a33\u5b9a\u7684\u7f51\u7edc\u8fde\u63a5 - \u5927\u91cfAPI\u8c03\u7528\u53ef\u80fd\u53d7\u5230\u9891\u7387\u9650\u5236 - \u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u73b0\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236</p>"},{"location":"getting-started/basic-usage/","title":"\u57fa\u7840\u7528\u6cd5","text":"<p>\u672c\u6307\u5357\u5c06\u5e26\u4f60\u5feb\u901f\u4e0a\u624b CryptoService \u7684\u6838\u5fc3\u529f\u80fd\u3002</p>"},{"location":"getting-started/basic-usage/#_2","title":"\ud83d\ude80 \u521d\u59cb\u5316\u670d\u52a1","text":"<pre><code>from cryptoservice.services import MarketDataService\nfrom cryptoservice.models import Freq\nimport os\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=os.getenv(\"BINANCE_API_KEY\"),\n    api_secret=os.getenv(\"BINANCE_API_SECRET\")\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_3","title":"\ud83d\udcca \u5b9e\u65f6\u884c\u60c5\u6570\u636e","text":""},{"location":"getting-started/basic-usage/#_4","title":"\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5","text":"<pre><code># \u83b7\u53d6BTC/USDT\u5b9e\u65f6\u884c\u60c5\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"\u4ea4\u6613\u5bf9: {ticker.symbol}\")\nprint(f\"\u6700\u65b0\u4ef7\u683c: {ticker.last_price}\")\nprint(f\"24h\u53d8\u5316: {ticker.price_change_percent}%\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_5","title":"\u83b7\u53d6\u591a\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5","text":"<pre><code># \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u884c\u60c5\nall_tickers = service.get_symbol_ticker()\nprint(f\"\u603b\u5171 {len(all_tickers)} \u4e2a\u4ea4\u6613\u5bf9\")\n\n# \u663e\u793a\u524d5\u4e2a\nfor ticker in all_tickers[:5]:\n    print(f\"{ticker.symbol}: {ticker.last_price}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_6","title":"\u83b7\u53d6\u70ed\u95e8\u4ea4\u6613\u5bf9","text":"<pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u524d10\u7684\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n\nfor coin in top_coins:\n    print(f\"{coin.symbol}: {coin.quote_volume:,.0f} USDT\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_7","title":"\ud83d\udcc8 \u5386\u53f2\u6570\u636e\u83b7\u53d6","text":""},{"location":"getting-started/basic-usage/#k","title":"K\u7ebf\u6570\u636e","text":"<pre><code>from cryptoservice.models import HistoricalKlinesType\n\n# \u83b7\u53d6\u73b0\u8d27K\u7ebf\u6570\u636e\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\nprint(f\"\u83b7\u53d6\u5230 {len(klines)} \u6761K\u7ebf\u6570\u636e\")\nfor kline in klines[:3]:\n    print(f\"\u65f6\u95f4: {kline.open_time}, \u5f00\u76d8: {kline.open_price}, \u6536\u76d8: {kline.last_price}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_8","title":"\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u6279\u91cf\u4e0b\u8f7d","text":"<pre><code># \u6279\u91cf\u4e0b\u8f7d\u6c38\u7eed\u5408\u7ea6\u6570\u636e\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    start_time=\"2024-01-01\",\n    db_path=\"./data/market.db\",  # \u5fc5\u987b\u6307\u5b9a\u6570\u636e\u5e93\u8def\u5f84\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    max_workers=2  # \u5e76\u53d1\u7ebf\u7a0b\u6570\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#universe","title":"\ud83c\udfaf Universe\u5b9a\u4e49","text":"<p>Universe\u662f\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\uff0c\u53ef\u4ee5\u5b9a\u671f\u91cd\u65b0\u5e73\u8861\u6295\u8d44\u7ec4\u5408\u3002</p>"},{"location":"getting-started/basic-usage/#universe_1","title":"\u521b\u5efaUniverse","text":"<pre><code># \u5b9a\u4e49\u57fa\u4e8e\u6210\u4ea4\u91cf\u7684\u52a8\u6001Universe\nuniverse_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-03-31\",\n    t1_months=1,          # \u6570\u636e\u56de\u770b\u671f: 1\u4e2a\u6708\n    t2_months=1,          # \u91cd\u5e73\u8861\u9891\u7387: \u6bcf\u6708\n    t3_months=3,          # \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4: 3\u4e2a\u6708\n    top_k=5,              # \u9009\u62e9\u524d5\u4e2a\u5408\u7ea6\n    output_path=\"./universe.json\",\n    description=\"Top 5 crypto universe - Q1 2024\"\n)\n\nprint(f\"\u521b\u5efa\u4e86 {len(universe_def.snapshots)} \u4e2a\u65f6\u95f4\u5feb\u7167\")\nprint(f\"Universe\u914d\u7f6e: {universe_def.config.to_dict()}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#universe_2","title":"\u52a0\u8f7d\u5df2\u4fdd\u5b58\u7684Universe","text":"<pre><code>from cryptoservice.models import UniverseDefinition\n\n# \u4ece\u6587\u4ef6\u52a0\u8f7dUniverse\nuniverse_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n# \u67e5\u770bUniverse\u6982\u8981\nsummary = universe_def.get_universe_summary()\nprint(f\"\u65f6\u95f4\u8303\u56f4: {summary['date_range']}\")\nprint(f\"\u603b\u5feb\u7167\u6570: {summary['total_snapshots']}\")\nprint(f\"\u552f\u4e00\u4ea4\u6613\u5bf9\u6570: {summary['unique_symbols_count']}\")\n\n# \u83b7\u53d6\u7279\u5b9a\u65e5\u671f\u7684\u4ea4\u6613\u5bf9\nsymbols_for_feb = universe_def.get_symbols_for_date(\"2024-02-15\")\nprint(f\"2024\u5e742\u670815\u65e5\u7684Universe: {symbols_for_feb}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_9","title":"\ud83d\udcbe \u6570\u636e\u5b58\u50a8\u548c\u67e5\u8be2","text":""},{"location":"getting-started/basic-usage/#universe_3","title":"\u4e0b\u8f7dUniverse\u6570\u636e","text":"<pre><code># \u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u6240\u6709\u76f8\u5173\u6570\u636e\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,     # \u989d\u5916\u7f13\u51b2\u5929\u6570\n    extend_to_present=False    # \u4e0d\u5ef6\u4f38\u5230\u5f53\u524d\u65f6\u95f4\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_10","title":"\u67e5\u8be2\u6570\u636e\u5e93\u6570\u636e","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u8fde\u63a5\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u67e5\u8be2\u7279\u5b9a\u65f6\u95f4\u6bb5\u548c\u4ea4\u6613\u5bf9\u7684\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-03\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"]\n)\n\nprint(f\"\u6570\u636e\u5f62\u72b6: {data.shape}\")\nprint(data.head())\n</code></pre>"},{"location":"getting-started/basic-usage/#_11","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u5728\u7ec8\u7aef\u4e2d\u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_12","title":"\ud83d\udce4 \u6570\u636e\u5bfc\u51fa","text":""},{"location":"getting-started/basic-usage/#_13","title":"\u5bfc\u51fa\u4e3a\u6587\u4ef6","text":"<pre><code># \u5bfc\u51fa\u4e3anumpy/csv/parquet\u683c\u5f0f\ndb.export_to_files_by_timestamp(\n    output_path=\"./exports/btc_data\",\n    start_ts=\"1704067200000\",  # 2024-01-01 00:00:00 UTC\n    end_ts=\"1704153600000\",    # 2024-01-02 00:00:00 UTC\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#universe_4","title":"\u6309Universe\u5feb\u7167\u5bfc\u51fa","text":"<pre><code># \u4e3a\u6bcf\u4e2aUniverse\u5feb\u7167\u5355\u72ec\u5bfc\u51fa\u6570\u636e\nfor i, snapshot in enumerate(universe_def.snapshots):\n    print(f\"\u5bfc\u51fa\u5feb\u7167 {i+1}: {snapshot.effective_date}\")\n\n    db.export_to_files_by_timestamp(\n        output_path=f\"./exports/snapshot_{snapshot.effective_date}\",\n        start_ts=snapshot.period_start_ts,\n        end_ts=snapshot.period_end_ts,\n        freq=Freq.h1,\n        symbols=snapshot.symbols\n    )\n</code></pre>"},{"location":"getting-started/basic-usage/#_14","title":"\u26a0\ufe0f \u9519\u8bef\u5904\u7406","text":"<pre><code>from cryptoservice.exceptions import (\n    MarketDataFetchError,\n    InvalidSymbolError,\n    RateLimitError\n)\n\ntry:\n    ticker = service.get_symbol_ticker(\"INVALID_SYMBOL\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\nexcept RateLimitError as e:\n    print(f\"\u8bf7\u6c42\u9891\u7387\u9650\u5236: {e}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_15","title":"\ud83d\udca1 \u5b9e\u7528\u6280\u5de7","text":""},{"location":"getting-started/basic-usage/#1","title":"1. \u68c0\u67e5\u4ea4\u6613\u5bf9\u53ef\u7528\u6027","text":"<pre><code># \u83b7\u53d6\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\nsymbols = service.get_perpetual_symbols(only_trading=True)\nprint(f\"\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u6c38\u7eed\u5408\u7ea6: {len(symbols)} \u4e2a\")\nprint(f\"\u524d10\u4e2a: {symbols[:10]}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#2","title":"2. \u5e02\u573a\u6982\u89c8","text":"<pre><code># \u83b7\u53d6\u5e02\u573a\u6982\u89c8\nsummary = service.get_market_summary(interval=Freq.d1)\nprint(f\"\u5feb\u7167\u65f6\u95f4: {summary['snapshot_time']}\")\nprint(f\"\u5e02\u573a\u6570\u636e\u6761\u6570: {len(summary['data'])}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#3-universe","title":"3. Universe\u6570\u636e\u5206\u6790","text":"<pre><code># \u5bfc\u51faUniverse\u4e3aDataFrame\u5206\u6790\ndf = universe_def.export_to_dataframe()\nprint(df.groupby('effective_date')['symbol'].count())\n</code></pre>"},{"location":"getting-started/basic-usage/#_16","title":"\ud83d\ude80 \u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b \u5b8c\u6574\u793a\u4f8b \u4e86\u89e3\u66f4\u591a\u5b9e\u9645\u5e94\u7528</li> <li>\u5b66\u4e60 Universe\u5b9a\u4e49\u6307\u5357 \u6df1\u5165\u7406\u89e3\u7b56\u7565</li> <li>\u53c2\u8003 API\u6587\u6863 \u83b7\u53d6\u8be6\u7ec6\u53c2\u6570\u8bf4\u660e</li> <li>\u9605\u8bfb \u6570\u636e\u5904\u7406\u6307\u5357 \u4e86\u89e3\u9ad8\u7ea7\u529f\u80fd</li> </ul>"},{"location":"getting-started/configuration/","title":"\u914d\u7f6e\u8bf4\u660e","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u8bf4\u660e\u4e86 CryptoService \u7684\u6240\u6709\u914d\u7f6e\u9009\u9879\u3002</p>"},{"location":"getting-started/configuration/#_2","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_3","title":"\u5fc5\u9700\u7684\u73af\u5883\u53d8\u91cf","text":"<pre><code># Binance API \u914d\u7f6e\nBINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre>"},{"location":"getting-started/configuration/#_4","title":"\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf","text":"<pre><code># \u4ee3\u7406\u8bbe\u7f6e\nHTTP_PROXY=http://proxy.example.com:8080\nHTTPS_PROXY=http://proxy.example.com:8080\n\n# \u65e5\u5fd7\u7ea7\u522b\nLOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n\n# \u6570\u636e\u5b58\u50a8\u8def\u5f84\nDATA_STORAGE_PATH=./data\n</code></pre>"},{"location":"getting-started/configuration/#_5","title":"\u6570\u636e\u5b58\u50a8\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_6","title":"\u6570\u636e\u5e93\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u8def\u5f84\ndb = MarketDB(\"./custom/path/market.db\")\n</code></pre>"},{"location":"getting-started/configuration/#kdtv","title":"KDTV\u683c\u5f0f\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u81ea\u5b9a\u4e49\u5b58\u50a8\u8def\u5f84\nStorageUtils.store_kdtv_data(\n    data=data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./custom/path\"\n)\n</code></pre>"},{"location":"getting-started/configuration/#_7","title":"\u9891\u7387\u8bbe\u7f6e","text":"<p>\u652f\u6301\u7684\u65f6\u95f4\u9891\u7387\uff1a</p> <pre><code>from cryptoservice.models import Freq\n\n# \u5206\u949f\u7ea7\u522b\nFreq.m1  # 1\u5206\u949f\nFreq.m3  # 3\u5206\u949f\nFreq.m5  # 5\u5206\u949f\nFreq.m15 # 15\u5206\u949f\nFreq.m30 # 30\u5206\u949f\n\n# \u5c0f\u65f6\u7ea7\u522b\nFreq.h1  # 1\u5c0f\u65f6\nFreq.h2  # 2\u5c0f\u65f6\nFreq.h4  # 4\u5c0f\u65f6\nFreq.h6  # 6\u5c0f\u65f6\nFreq.h8  # 8\u5c0f\u65f6\nFreq.h12 # 12\u5c0f\u65f6\n\n# \u65e5\u7ea7\u522b\nFreq.d1  # 1\u5929\n</code></pre>"},{"location":"getting-started/configuration/#_8","title":"\u5e02\u573a\u7c7b\u578b\u8bbe\u7f6e","text":"<p>\u652f\u6301\u7684\u5e02\u573a\u7c7b\u578b\uff1a</p> <pre><code>from cryptoservice.models import HistoricalKlinesType\n\n# \u73b0\u8d27\u5e02\u573a\nHistoricalKlinesType.SPOT\n\n# \u6c38\u7eed\u5408\u7ea6\u5e02\u573a\nHistoricalKlinesType.FUTURES\n\n# \u5e01\u672c\u4f4d\u5408\u7ea6\u5e02\u573a\nHistoricalKlinesType.FUTURES_COIN\n</code></pre>"},{"location":"getting-started/configuration/#_9","title":"\u6027\u80fd\u4f18\u5316\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_10","title":"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u914d\u7f6e\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5  # \u6700\u5927\u8fde\u63a5\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_11","title":"\u5e76\u884c\u5904\u7406\u914d\u7f6e","text":"<pre><code># \u914d\u7f6e\u6570\u636e\u83b7\u53d6\u7684\u5e76\u884c\u5ea6\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_workers=4  # \u5e76\u884c\u7ebf\u7a0b\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_12","title":"\u9519\u8bef\u5904\u7406\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_13","title":"\u91cd\u8bd5\u914d\u7f6e","text":"<pre><code># \u914d\u7f6e\u6700\u5927\u91cd\u8bd5\u6b21\u6570\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_14","title":"\u65e5\u5fd7\u914d\u7f6e","text":"<pre><code>import logging\nfrom rich.logging import RichHandler\n\n# \u914d\u7f6e\u65e5\u5fd7\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(message)s\",\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(rich_tracebacks=True)]\n)\n</code></pre>"},{"location":"getting-started/configuration/#_15","title":"\u914d\u7f6e\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u73af\u5883\u53d8\u91cf\u7ba1\u7406</li> <li>\u4f7f\u7528 <code>.env</code> \u6587\u4ef6\u7ba1\u7406\u654f\u611f\u4fe1\u606f</li> <li> <p>\u4e0d\u8981\u5728\u4ee3\u7801\u4e2d\u786c\u7f16\u7801 API \u5bc6\u94a5</p> </li> <li> <p>\u6570\u636e\u5b58\u50a8\u4f18\u5316</p> </li> <li>\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u4f7f\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u8def\u5f84</li> <li> <p>\u5b9a\u671f\u6e05\u7406\u4e34\u65f6\u6570\u636e</p> </li> <li> <p>\u6027\u80fd\u8c03\u4f18</p> </li> <li>\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\u5e76\u884c\u5ea6</li> <li> <p>\u9002\u5f53\u914d\u7f6e\u8fde\u63a5\u6c60\u5927\u5c0f</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u8bbe\u7f6e\u5408\u7406\u7684\u91cd\u8bd5\u6b21\u6570</li> <li>\u5b9e\u73b0\u9002\u5f53\u7684\u9519\u8bef\u65e5\u5fd7\u8bb0\u5f55</li> </ol>"},{"location":"getting-started/configuration/#_16","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770bAPI\u6587\u6863\u4e86\u89e3\u66f4\u591a\u63a5\u53e3\u7ec6\u8282</li> <li>\u53c2\u8003\u793a\u4f8b\u4ee3\u7801\u83b7\u53d6\u5b9e\u8df5\u6307\u5bfc</li> <li>\u4e86\u89e3\u6570\u636e\u5904\u7406\u7684\u9ad8\u7ea7\u914d\u7f6e</li> </ul>"},{"location":"getting-started/installation/","title":"\u5b89\u88c5\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5c06\u5e2e\u4f60\u5feb\u901f\u5b89\u88c5\u548c\u914d\u7f6e CryptoService\u3002</p>"},{"location":"getting-started/installation/#_2","title":"\ud83d\udccb \u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python: 3.10 - 3.12</li> <li>\u64cd\u4f5c\u7cfb\u7edf: Windows, macOS, Linux</li> <li>\u5185\u5b58: \u5efa\u8bae 4GB \u4ee5\u4e0a</li> <li>\u5b58\u50a8: \u5efa\u8bae 1GB \u4ee5\u4e0a\u53ef\u7528\u7a7a\u95f4</li> </ul>"},{"location":"getting-started/installation/#_3","title":"\ud83d\ude80 \u5feb\u901f\u5b89\u88c5","text":""},{"location":"getting-started/installation/#pip","title":"\u4f7f\u7528 pip \u5b89\u88c5","text":"<pre><code>pip install cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#uv","title":"\u4f7f\u7528 uv \u5b89\u88c5 (\u63a8\u8350)","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528 <code>uv</code> \u5305\u7ba1\u7406\u5668:</p> <pre><code>uv add cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#_4","title":"\ud83d\udd27 \u5f00\u53d1\u73af\u5883\u5b89\u88c5","text":"<p>\u5982\u679c\u4f60\u60f3\u53c2\u4e0e\u5f00\u53d1\u6216\u4f7f\u7528\u6700\u65b0\u529f\u80fd:</p>"},{"location":"getting-started/installation/#1","title":"1. \u514b\u9686\u9879\u76ee","text":"<pre><code>git clone https://github.com/username/cryptoservice.git\ncd cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#2-uv","title":"2. \u4f7f\u7528 uv \u8bbe\u7f6e\u73af\u5883","text":"<pre><code># \u5b89\u88c5 uv (\u5982\u679c\u672a\u5b89\u88c5)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# \u521b\u5efa\u865a\u62df\u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d56\nuv sync --all-extras --dev\n\n# \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate  # Linux/macOS\n# \u6216\n.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"getting-started/installation/#3","title":"3. \u4f7f\u7528\u4f20\u7edf\u65b9\u5f0f\u8bbe\u7f6e\u73af\u5883","text":"<pre><code># \u521b\u5efa\u865a\u62df\u73af\u5883\npython -m venv .venv\n\n# \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate  # Linux/macOS\n# \u6216\n.venv\\Scripts\\activate     # Windows\n\n# \u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\npip install -e \".[dev,test]\"\n</code></pre>"},{"location":"getting-started/installation/#api","title":"\ud83d\udd11 API \u5bc6\u94a5\u914d\u7f6e","text":"<p>CryptoService \u9700\u8981 Binance API \u5bc6\u94a5\u6765\u83b7\u53d6\u5e02\u573a\u6570\u636e\u3002</p>"},{"location":"getting-started/installation/#1-binance-api","title":"1. \u83b7\u53d6 Binance API \u5bc6\u94a5","text":"<ol> <li>\u8bbf\u95ee Binance API \u7ba1\u7406\u9875\u9762</li> <li>\u521b\u5efa\u65b0\u7684 API \u5bc6\u94a5</li> <li>\u8bb0\u5f55 <code>API Key</code> \u548c <code>Secret Key</code></li> </ol> <p>\u26a0\ufe0f \u5b89\u5168\u63d0\u793a: - \u4e0d\u8981\u5728\u4ee3\u7801\u4e2d\u786c\u7f16\u7801 API \u5bc6\u94a5 - \u5efa\u8bae\u53ea\u542f\u7528 \"\u8bfb\u53d6\" \u6743\u9650 - \u5b9a\u671f\u8f6e\u6362 API \u5bc6\u94a5</p>"},{"location":"getting-started/installation/#2","title":"2. \u914d\u7f6e\u73af\u5883\u53d8\u91cf","text":""},{"location":"getting-started/installation/#env","title":"\u4f7f\u7528 .env \u6587\u4ef6 (\u63a8\u8350)","text":"<p>\u521b\u5efa <code>.env</code> \u6587\u4ef6:</p> <pre><code># .env\nBINANCE_API_KEY=your_api_key_here\nBINANCE_API_SECRET=your_secret_key_here\n</code></pre>"},{"location":"getting-started/installation/#_5","title":"\u4f7f\u7528\u7cfb\u7edf\u73af\u5883\u53d8\u91cf","text":"<p>Linux/macOS: <pre><code>export BINANCE_API_KEY=\"your_api_key_here\"\nexport BINANCE_API_SECRET=\"your_secret_key_here\"\n</code></pre></p> <p>Windows: <pre><code>set BINANCE_API_KEY=your_api_key_here\nset BINANCE_API_SECRET=your_secret_key_here\n</code></pre></p>"},{"location":"getting-started/installation/#3_1","title":"3. \u9a8c\u8bc1\u5b89\u88c5","text":"<p>\u521b\u5efa\u6d4b\u8bd5\u811a\u672c <code>test_installation.py</code>:</p> <pre><code>import os\nfrom cryptoservice.services import MarketDataService\nfrom dotenv import load_dotenv\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\n\ntry:\n    # \u521d\u59cb\u5316\u670d\u52a1\n    service = MarketDataService(\n        api_key=os.getenv(\"BINANCE_API_KEY\"),\n        api_secret=os.getenv(\"BINANCE_API_SECRET\")\n    )\n\n    # \u6d4b\u8bd5 API \u8fde\u63a5\n    ticker = service.get_symbol_ticker(\"BTCUSDT\")\n    print(f\"\u2705 \u5b89\u88c5\u6210\u529f! BTC \u5f53\u524d\u4ef7\u683c: ${ticker.last_price}\")\n\nexcept Exception as e:\n    print(f\"\u274c \u5b89\u88c5\u9a8c\u8bc1\u5931\u8d25: {e}\")\n</code></pre> <p>\u8fd0\u884c\u6d4b\u8bd5:</p> <pre><code>python test_installation.py\n</code></pre>"},{"location":"getting-started/installation/#_6","title":"\ud83d\udce6 \u53ef\u9009\u4f9d\u8d56","text":"<p>\u6839\u636e\u4f60\u7684\u4f7f\u7528\u573a\u666f\uff0c\u53ef\u4ee5\u5b89\u88c5\u989d\u5916\u7684\u4f9d\u8d56:</p>"},{"location":"getting-started/installation/#_7","title":"\u6570\u636e\u5206\u6790\u589e\u5f3a","text":"<pre><code>pip install cryptoservice[analysis]\n# \u6216\nuv add cryptoservice[analysis]\n</code></pre> <p>\u5305\u542b: <code>matplotlib</code>, <code>seaborn</code>, <code>plotly</code> \u7b49\u53ef\u89c6\u5316\u5e93</p>"},{"location":"getting-started/installation/#_8","title":"\u673a\u5668\u5b66\u4e60\u652f\u6301","text":"<pre><code>pip install cryptoservice[ml]\n# \u6216\nuv add cryptoservice[ml]\n</code></pre> <p>\u5305\u542b: <code>scikit-learn</code>, <code>tensorflow</code>, <code>torch</code> \u7b49 ML \u5e93</p>"},{"location":"getting-started/installation/#_9","title":"\u5b8c\u6574\u529f\u80fd","text":"<pre><code>pip install cryptoservice[all]\n# \u6216\nuv add cryptoservice[all]\n</code></pre> <p>\u5305\u542b\u6240\u6709\u53ef\u9009\u529f\u80fd\u3002</p>"},{"location":"getting-started/installation/#docker","title":"\ud83d\udc33 Docker \u5b89\u88c5","text":"<p>\u4f7f\u7528 Docker \u5feb\u901f\u90e8\u7f72:</p> <pre><code># \u62c9\u53d6\u955c\u50cf\ndocker pull cryptoservice:latest\n\n# \u8fd0\u884c\u5bb9\u5668\ndocker run -it \\\n  -e BINANCE_API_KEY=your_api_key \\\n  -e BINANCE_API_SECRET=your_secret_key \\\n  -v $(pwd)/data:/app/data \\\n  cryptoservice:latest\n</code></pre>"},{"location":"getting-started/installation/#_10","title":"\ud83d\udd27 \u6545\u969c\u6392\u9664","text":""},{"location":"getting-started/installation/#_11","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"getting-started/installation/#1_1","title":"1. \u7f51\u7edc\u8fde\u63a5\u95ee\u9898","text":"<p>\u5982\u679c\u9047\u5230\u7f51\u7edc\u8fde\u63a5\u9519\u8bef:</p> <pre><code># \u8bbe\u7f6e\u4ee3\u7406 (\u5982\u679c\u9700\u8981)\nexport HTTP_PROXY=http://proxy.example.com:8080\nexport HTTPS_PROXY=http://proxy.example.com:8080\n\n# \u6216\u8005\u4f7f\u7528\u56fd\u5185\u955c\u50cf\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#2-python","title":"2. Python \u7248\u672c\u4e0d\u517c\u5bb9","text":"<p>\u786e\u8ba4 Python \u7248\u672c:</p> <pre><code>python --version  # \u5e94\u8be5\u662f 3.10-3.12\n</code></pre>"},{"location":"getting-started/installation/#3_2","title":"3. \u4f9d\u8d56\u51b2\u7a81","text":"<p>\u6e05\u7406\u5e76\u91cd\u65b0\u5b89\u88c5:</p> <pre><code>pip uninstall cryptoservice\npip install --no-cache-dir cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#4-api","title":"4. API \u5bc6\u94a5\u9519\u8bef","text":"<p>\u9a8c\u8bc1 API \u5bc6\u94a5:</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\napi_key = os.getenv(\"BINANCE_API_KEY\")\napi_secret = os.getenv(\"BINANCE_API_SECRET\")\n\nprint(f\"API Key: {api_key[:8]}...\" if api_key else \"\u672a\u8bbe\u7f6e\")\nprint(f\"Secret: {api_secret[:8]}...\" if api_secret else \"\u672a\u8bbe\u7f6e\")\n</code></pre>"},{"location":"getting-started/installation/#_12","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u679c\u9047\u5230\u95ee\u9898:</p> <ol> <li>\u641c\u7d22 GitHub Issues</li> <li>\u63d0\u4ea4\u65b0\u7684 Issue</li> </ol>"},{"location":"getting-started/installation/#_13","title":"\u2705 \u4e0b\u4e00\u6b65","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5efa\u8bae:</p> <ol> <li>\u9605\u8bfb \u57fa\u7840\u7528\u6cd5</li> <li>\u67e5\u770b \u5b8c\u6574\u793a\u4f8b</li> <li>\u4e86\u89e3 Universe \u5b9a\u4e49</li> </ol> <p>\u606d\u559c! \u4f60\u5df2\u7ecf\u6210\u529f\u5b89\u88c5\u4e86 CryptoService \ud83c\udf89</p>"},{"location":"guides/enhanced_error_handling/","title":"\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u6307\u5357","text":""},{"location":"guides/enhanced_error_handling/#_2","title":"\u6982\u8ff0","text":"<p>\u4e3a\u4e86\u786e\u4fdd Binance Vision metrics \u6570\u636e\u4e0b\u8f7d\u7684\u5b8c\u6574\u6027\u548c\u53ef\u9760\u6027\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u5957\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u673a\u5236\u3002\u8fd9\u5957\u673a\u5236\u80fd\u591f\u81ea\u52a8\u5904\u7406\u7f51\u7edc\u4e0d\u7a33\u5b9a\u3001SSL\u9519\u8bef\u548c\u5176\u4ed6\u5e38\u89c1\u7684\u4e0b\u8f7d\u95ee\u9898\u3002</p>"},{"location":"guides/enhanced_error_handling/#_3","title":"\u4e3b\u8981\u529f\u80fd","text":""},{"location":"guides/enhanced_error_handling/#1","title":"1. \ud83d\udd04 \u81ea\u52a8\u91cd\u8bd5\u673a\u5236","text":"<p>\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bc6\u522b\u53ef\u91cd\u8bd5\u7684\u9519\u8bef\uff08\u5982\u7f51\u7edc\u8d85\u65f6\u3001SSL\u9519\u8bef\uff09\u5e76\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528\u6307\u6570\u9000\u907f\u7b56\u7565\u6765\u907f\u514d\u8fc7\u5ea6\u8bf7\u6c42\u3002</p> <pre><code>from cryptoservice.config import RetryConfig\nfrom cryptoservice.services.market_service import MarketDataService\n\n# \u81ea\u5b9a\u4e49\u91cd\u8bd5\u914d\u7f6e\nretry_config = RetryConfig(\n    max_retries=5,          # \u6700\u5927\u91cd\u8bd55\u6b21\n    base_delay=3.0,         # \u57fa\u7840\u5ef6\u8fdf3\u79d2\n    max_delay=30.0,         # \u6700\u5927\u5ef6\u8fdf30\u79d2\n    backoff_multiplier=2.0, # \u9000\u907f\u500d\u65702.0\n    jitter=True             # \u542f\u7528\u6296\u52a8\n)\n\nservice = MarketDataService(api_key, api_secret)\n</code></pre>"},{"location":"guides/enhanced_error_handling/#2","title":"2. \ud83d\udee1\ufe0f \u667a\u80fd\u9519\u8bef\u5206\u7c7b","text":"<p>\u7cfb\u7edf\u4f1a\u6839\u636e\u9519\u8bef\u7c7b\u578b\u81ea\u52a8\u5206\u7c7b\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u5904\u7406\u7b56\u7565\uff1a</p> <ul> <li>LOW: \u4f4e\u4e25\u91cd\u6027\u9519\u8bef\uff08\u5982\u65e0\u6548\u4ea4\u6613\u5bf9\uff09- \u8bb0\u5f55\u540e\u7ee7\u7eed</li> <li>MEDIUM: \u4e2d\u7b49\u4e25\u91cd\u6027\u9519\u8bef\uff08\u5982\u7f51\u7edc\u9519\u8bef\u3001SSL\u9519\u8bef\uff09- \u91cd\u8bd5</li> <li>HIGH: \u9ad8\u4e25\u91cd\u6027\u9519\u8bef\uff08\u5982\u670d\u52a1\u5668\u9519\u8bef\uff09- \u591a\u6b21\u91cd\u8bd5</li> <li>CRITICAL: \u4e25\u91cd\u9519\u8bef\uff08\u5982\u8ba4\u8bc1\u9519\u8bef\uff09- \u7acb\u5373\u505c\u6b62</li> </ul>"},{"location":"guides/enhanced_error_handling/#ssl","title":"SSL\u9519\u8bef\u5904\u7406","text":"<p>\u7cfb\u7edf\u7279\u522b\u9488\u5bf9SSL\u9519\u8bef\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u80fd\u591f\u8bc6\u522b\u5e76\u81ea\u52a8\u91cd\u8bd5\u4ee5\u4e0bSSL\u76f8\u5173\u9519\u8bef\uff1a</p> <ul> <li><code>SSLError</code>, <code>SSLEOFError</code></li> <li><code>UNEXPECTED_EOF_WHILE_READING</code></li> <li><code>certificate verify failed</code></li> <li><code>handshake failure</code></li> <li><code>connection reset by peer</code></li> <li>\u4ee5\u53ca\u5176\u4ed6\u5404\u79cdSSL\u76f8\u5173\u9519\u8bef</li> </ul> <pre><code>from cryptoservice.services.market_service import EnhancedErrorHandler\n\n# \u9519\u8bef\u5206\u7c7b\u793a\u4f8b\nerror = Exception(\"SSLError: UNEXPECTED_EOF_WHILE_READING\")\nseverity = EnhancedErrorHandler.classify_error(error)\nshould_retry = EnhancedErrorHandler.should_retry(error, 1, 3)\naction = EnhancedErrorHandler.get_recommended_action(error)\n\nprint(f\"\u4e25\u91cd\u7a0b\u5ea6: {severity}\")\nprint(f\"\u662f\u5426\u91cd\u8bd5: {should_retry}\")\nprint(f\"\u5efa\u8bae\u63aa\u65bd: {action}\")\n</code></pre>"},{"location":"guides/enhanced_error_handling/#3","title":"3. \ud83d\udcca \u5931\u8d25\u8bb0\u5f55\u7ba1\u7406","text":"<p>\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bb0\u5f55\u6240\u6709\u5931\u8d25\u7684\u4e0b\u8f7d\uff0c\u5e76\u63d0\u4f9b\u7ba1\u7406\u548c\u6062\u590d\u529f\u80fd\uff1a</p> <pre><code>service = MarketDataService(api_key, api_secret)\n\n# \u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\nfailed_downloads = service.get_failed_downloads()\nfor symbol, failures in failed_downloads.items():\n    print(f\"{symbol}: {len(failures)} \u4e2a\u5931\u8d25\u8bb0\u5f55\")\n\n# \u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\nretry_result = service.retry_failed_downloads(max_retries=3)\nprint(f\"\u91cd\u8bd5\u7ed3\u679c: {retry_result}\")\n\n# \u6e05\u7406\u5931\u8d25\u8bb0\u5f55\nservice.clear_failed_downloads()  # \u6e05\u7406\u6240\u6709\nservice.clear_failed_downloads(\"BTCUSDT\")  # \u6e05\u7406\u7279\u5b9a\u4ea4\u6613\u5bf9\n</code></pre>"},{"location":"guides/enhanced_error_handling/#4","title":"4. \ud83d\udd0d \u6570\u636e\u8d28\u91cf\u68c0\u67e5","text":"<p>\u7cfb\u7edf\u4f1a\u5bf9\u4e0b\u8f7d\u7684\u6570\u636e\u8fdb\u884c\u5b8c\u6574\u6027\u9a8c\u8bc1\uff1a</p> <ul> <li>\u5b57\u6bb5\u5b8c\u6574\u6027: \u68c0\u67e5\u5fc5\u8981\u5b57\u6bb5\u662f\u5426\u5b58\u5728</li> <li>\u6570\u636e\u6709\u6548\u6027: \u9a8c\u8bc1\u6570\u636e\u8303\u56f4\u548c\u683c\u5f0f</li> <li>\u65f6\u95f4\u6233\u9a8c\u8bc1: \u786e\u4fdd\u65f6\u95f4\u6233\u7684\u6709\u6548\u6027</li> <li>\u8d28\u91cf\u7edf\u8ba1: \u63d0\u4f9b\u6570\u636e\u8d28\u91cf\u62a5\u544a</li> </ul> <pre><code># \u6570\u636e\u9a8c\u8bc1\u4f1a\u81ea\u52a8\u8fdb\u884c\uff0c\u5e76\u5728\u65e5\u5fd7\u4e2d\u62a5\u544a\u95ee\u9898\n# \u4f8b\u5982:\n# \u26a0\ufe0f BTCUSDT: \u6301\u4ed3\u91cf\u6570\u636e\u8d28\u91cf\u8f83\u4f4e\uff0c\u6709\u6548\u8bb0\u5f55 80/100\n# \u2705 ETHUSDT: \u6570\u636e\u9a8c\u8bc1\u901a\u8fc7 - \u6301\u4ed3\u91cf: 144, \u591a\u7a7a\u6bd4\u4f8b: 144\n</code></pre>"},{"location":"guides/enhanced_error_handling/#5","title":"5. \ud83c\udf10 \u4f18\u5316\u7f51\u7edc\u914d\u7f6e","text":"<p>\u7cfb\u7edf\u4f7f\u7528\u589e\u5f3a\u7684\u7f51\u7edc\u4f1a\u8bdd\u914d\u7f6e\uff0c\u63d0\u4f9b\u66f4\u7a33\u5b9a\u7684\u8fde\u63a5\uff1a</p> <ul> <li>\u8fde\u63a5\u6c60: \u4f18\u5316\u7684\u8fde\u63a5\u6c60\u8bbe\u7f6e</li> <li>\u91cd\u8bd5\u7b56\u7565: \u5185\u7f6e\u7684HTTP\u91cd\u8bd5\u673a\u5236</li> <li>\u7528\u6237\u4ee3\u7406: \u6a21\u62df\u771f\u5b9e\u6d4f\u89c8\u5668\u8bf7\u6c42</li> <li>\u8fde\u63a5\u4fdd\u6301: \u4fdd\u6301\u957f\u8fde\u63a5\u4ee5\u63d0\u9ad8\u6548\u7387</li> </ul>"},{"location":"guides/enhanced_error_handling/#_4","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"guides/enhanced_error_handling/#_5","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>import os\nfrom cryptoservice.services.market_service import MarketDataService\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=os.getenv(\"BINANCE_API_KEY\"),\n    api_secret=os.getenv(\"BINANCE_API_SECRET\")\n)\n\n# \u4e0b\u8f7d\u6570\u636e\uff08\u81ea\u52a8\u4f7f\u7528\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\uff09\nservice.download_binance_vision_metrics(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_date=\"2024-10-01\",\n    end_date=\"2024-10-03\",\n    data_types=[\"openInterest\", \"longShortRatio\"],\n    request_delay=1.0\n)\n</code></pre>"},{"location":"guides/enhanced_error_handling/#_6","title":"\u9519\u8bef\u5904\u7406\u548c\u6062\u590d","text":"<pre><code># 1. \u4e0b\u8f7d\u6570\u636e\ntry:\n    service.download_binance_vision_metrics(\n        symbols=[\"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\"],\n        start_date=\"2024-10-01\",\n        end_date=\"2024-10-03\"\n    )\nexcept Exception as e:\n    print(f\"\u4e0b\u8f7d\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef: {e}\")\n\n# 2. \u68c0\u67e5\u5931\u8d25\u7684\u4e0b\u8f7d\nfailed_downloads = service.get_failed_downloads()\nif failed_downloads:\n    print(f\"\u53d1\u73b0 {len(failed_downloads)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u4e0b\u8f7d\u5931\u8d25\")\n\n    # 3. \u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\n    retry_result = service.retry_failed_downloads(max_retries=2)\n    print(f\"\u91cd\u8bd5\u7ed3\u679c: {retry_result}\")\n</code></pre>"},{"location":"guides/enhanced_error_handling/#_7","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code>from cryptoservice.config import RetryConfig\n\n# \u81ea\u5b9a\u4e49\u91cd\u8bd5\u914d\u7f6e\uff08\u9002\u7528\u4e8e\u7f51\u7edc\u4e0d\u7a33\u5b9a\u7684\u73af\u5883\uff09\ncustom_retry = RetryConfig(\n    max_retries=5,\n    base_delay=3.0,\n    max_delay=60.0,\n    backoff_multiplier=2.0,\n    jitter=True\n)\n\n# \u5728\u4e0b\u8f7d\u65b9\u6cd5\u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\n# \uff08\u6ce8\u610f\uff1a\u8fd9\u9700\u8981\u5728\u5185\u90e8\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u901a\u5e38\u7531\u7cfb\u7edf\u81ea\u52a8\u5904\u7406\uff09\n</code></pre>"},{"location":"guides/enhanced_error_handling/#_8","title":"\u9519\u8bef\u7c7b\u578b\u548c\u5904\u7406\u7b56\u7565","text":"\u9519\u8bef\u7c7b\u578b \u4e25\u91cd\u7a0b\u5ea6 \u5904\u7406\u7b56\u7565 \u793a\u4f8b SSL\u9519\u8bef MEDIUM \u81ea\u52a8\u91cd\u8bd5 <code>SSLError: UNEXPECTED_EOF_WHILE_READING</code> \u7f51\u7edc\u9519\u8bef MEDIUM \u81ea\u52a8\u91cd\u8bd5 <code>ConnectionError</code>, <code>timeout</code> \u670d\u52a1\u5668\u9519\u8bef HIGH \u591a\u6b21\u91cd\u8bd5 <code>500</code>, <code>502</code>, <code>503</code> \u9891\u7387\u9650\u5236 MEDIUM \u52a8\u6001\u5ef6\u8fdf\u91cd\u8bd5 <code>429 Too Many Requests</code> \u8ba4\u8bc1\u9519\u8bef CRITICAL \u7acb\u5373\u505c\u6b62 <code>401 Unauthorized</code> \u65e0\u6548\u4ea4\u6613\u5bf9 LOW \u8bb0\u5f55\u540e\u8df3\u8fc7 <code>Invalid symbol</code>"},{"location":"guides/enhanced_error_handling/#_9","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u76d1\u63a7\u5931\u8d25\u8bb0\u5f55: \u5b9a\u671f\u68c0\u67e5\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55</li> <li>\u5408\u7406\u8bbe\u7f6e\u5ef6\u8fdf: \u6839\u636e\u7f51\u7edc\u72b6\u51b5\u8c03\u6574 <code>request_delay</code></li> <li>\u6279\u91cf\u91cd\u8bd5: \u4f7f\u7528 <code>retry_failed_downloads()</code> \u6279\u91cf\u5904\u7406\u5931\u8d25\u7684\u4e0b\u8f7d</li> <li>\u65e5\u5fd7\u89c2\u5bdf: \u5173\u6ce8\u65e5\u5fd7\u4e2d\u7684\u9519\u8bef\u5206\u7c7b\u548c\u5efa\u8bae\u63aa\u65bd</li> <li>\u7f51\u7edc\u4f18\u5316: \u5728\u7f51\u7edc\u4e0d\u7a33\u5b9a\u65f6\u589e\u52a0\u91cd\u8bd5\u6b21\u6570\u548c\u5ef6\u8fdf</li> </ol>"},{"location":"guides/enhanced_error_handling/#_10","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"guides/enhanced_error_handling/#_11","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li>SSL\u9519\u8bef\u9891\u7e41\u51fa\u73b0</li> <li>\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u7a33\u5b9a\u6027</li> <li>\u8003\u8651\u4f7f\u7528VPN\u6216\u4ee3\u7406</li> <li> <p>\u589e\u52a0\u91cd\u8bd5\u6b21\u6570\u548c\u5ef6\u8fdf</p> </li> <li> <p>\u6570\u636e\u8d28\u91cf\u68c0\u67e5\u5931\u8d25</p> </li> <li>\u68c0\u67e5\u6570\u636e\u6e90\u7684\u53ef\u7528\u6027</li> <li>\u9a8c\u8bc1\u65f6\u95f4\u8303\u56f4\u7684\u5408\u7406\u6027</li> <li> <p>\u67e5\u770b\u8be6\u7ec6\u7684\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f</p> </li> <li> <p>\u91cd\u8bd5\u4ecd\u7136\u5931\u8d25</p> </li> <li>\u68c0\u67e5API\u5bc6\u94a5\u548c\u6743\u9650</li> <li>\u9a8c\u8bc1\u7f51\u7edc\u8fde\u63a5</li> <li>\u67e5\u770bBinance Vision\u6570\u636e\u7684\u53ef\u7528\u6027</li> </ol>"},{"location":"guides/enhanced_error_handling/#_12","title":"\u8c03\u8bd5\u6280\u5de7","text":"<pre><code>import logging\n\n# \u542f\u7528\u8be6\u7ec6\u65e5\u5fd7\nlogging.basicConfig(level=logging.DEBUG)\n\n# \u67e5\u770b\u5931\u8d25\u8be6\u60c5\nfailed_downloads = service.get_failed_downloads()\nfor symbol, failures in failed_downloads.items():\n    for failure in failures:\n        print(f\"{symbol}: {failure['error']}\")\n        print(f\"URL: {failure['url']}\")\n        print(f\"\u65f6\u95f4: {failure['timestamp']}\")\n</code></pre>"},{"location":"guides/enhanced_error_handling/#_13","title":"\u6027\u80fd\u5f71\u54cd","text":"<p>\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\uff1a</p> <ul> <li>\u8f7b\u5fae\u5ef6\u8fdf: \u7531\u4e8e\u91cd\u8bd5\u548c\u9a8c\u8bc1\uff0c\u53ef\u80fd\u4f1a\u589e\u52a0\u603b\u4f53\u4e0b\u8f7d\u65f6\u95f4</li> <li>\u5185\u5b58\u4f7f\u7528: \u5931\u8d25\u8bb0\u5f55\u4f1a\u5360\u7528\u5c11\u91cf\u5185\u5b58</li> <li>\u7f51\u7edc\u6548\u7387: \u4f18\u5316\u7684\u8fde\u63a5\u6c60\u63d0\u9ad8\u4e86\u7f51\u7edc\u4f7f\u7528\u6548\u7387</li> <li>\u6574\u4f53\u53ef\u9760\u6027: \u663e\u8457\u63d0\u9ad8\u4e86\u6570\u636e\u4e0b\u8f7d\u7684\u6210\u529f\u7387</li> </ul>"},{"location":"guides/enhanced_error_handling/#_14","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>\u9519\u8bef\u5904\u7406Demo</li> <li>RetryConfig\u914d\u7f6e</li> <li>MarketDataService</li> </ul>"},{"location":"guides/feature_naming_guide/","title":"\u529f\u80fd\u547d\u540d\u6307\u5357","text":""},{"location":"guides/feature_naming_guide/#_2","title":"\u6982\u8ff0","text":"<p>\u4e3a\u4e86\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u7ef4\u62a4\u6027\uff0c\u6211\u4eec\u5bf9\u6240\u6709\u529f\u80fd\u548c\u53c2\u6570\u8fdb\u884c\u4e86\u660e\u786e\u7684\u547d\u540d\u89c4\u8303\u3002\u672c\u6307\u5357\u8be6\u7ec6\u8bf4\u660e\u5404\u4e2a\u529f\u80fd\u7684\u542b\u4e49\u548c\u4f7f\u7528\u65b9\u5f0f\u3002</p>"},{"location":"guides/feature_naming_guide/#_3","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"guides/feature_naming_guide/#1-vs","title":"1. \u57fa\u7840\u5e02\u573a\u6570\u636e vs \u5e02\u573a\u6307\u6807\u6570\u636e","text":"<ul> <li>\u57fa\u7840\u5e02\u573a\u6570\u636e: K\u7ebf\u6570\u636e\uff08OHLCV\uff09</li> <li>\u5e02\u573a\u6307\u6807\u6570\u636e: \u9ad8\u7ea7\u5e02\u573a\u6307\u6807\uff0c\u5305\u62ec\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b</li> </ul>"},{"location":"guides/feature_naming_guide/#_4","title":"\u4e3b\u8981\u529f\u80fd\u53c2\u6570","text":""},{"location":"guides/feature_naming_guide/#universe","title":"Universe \u6570\u636e\u4e0b\u8f7d\u53c2\u6570","text":"\u53c2\u6570\u540d \u542b\u4e49 \u793a\u4f8b\u503c \u8bf4\u660e <code>download_market_metrics</code> \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e <code>True</code> \u63a7\u5236\u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\u7b49\u9ad8\u7ea7\u6307\u6807 <code>metrics_interval</code> \u5e02\u573a\u6307\u6807\u6570\u636e\u65f6\u95f4\u95f4\u9694 <code>Freq.m5</code> \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u91c7\u6837\u9891\u7387 <code>long_short_ratio_period</code> \u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f <code>Freq.m5</code> \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u7684\u7edf\u8ba1\u5468\u671f <code>long_short_ratio_types</code> \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b <code>[\"account\", \"position\"]</code> \u652f\u6301\u7684\u591a\u7a7a\u6bd4\u4f8b\u8ba1\u7b97\u65b9\u5f0f <code>use_binance_vision</code> \u662f\u5426\u4f7f\u7528Binance Vision <code>True</code> \u662f\u5426\u4eceBinance Vision\u4e0b\u8f7d\u5386\u53f2\u6307\u6807\u6570\u636e"},{"location":"guides/feature_naming_guide/#_5","title":"\u5e02\u573a\u6307\u6807\u6570\u636e\u7c7b\u578b","text":""},{"location":"guides/feature_naming_guide/#1-funding-rate","title":"1. \u8d44\u91d1\u8d39\u7387 (Funding Rate)","text":"<ul> <li>\u542b\u4e49: \u6c38\u7eed\u5408\u7ea6\u7684\u8d44\u91d1\u8d39\u7387</li> <li>\u9891\u7387: \u6bcf8\u5c0f\u65f6\u7ed3\u7b97\u4e00\u6b21</li> <li>\u7528\u9014: \u5206\u6790\u5e02\u573a\u60c5\u7eea\u548c\u5957\u5229\u673a\u4f1a</li> </ul>"},{"location":"guides/feature_naming_guide/#2-open-interest","title":"2. \u6301\u4ed3\u91cf (Open Interest)","text":"<ul> <li>\u542b\u4e49: \u5e02\u573a\u4e2d\u6240\u6709\u672a\u5e73\u4ed3\u5408\u7ea6\u7684\u603b\u4ef7\u503c</li> <li>\u9891\u7387: \u5b9e\u65f6\u66f4\u65b0\uff0c\u53ef\u6309\u4e0d\u540c\u95f4\u9694\u91c7\u6837</li> <li>\u7528\u9014: \u8861\u91cf\u5e02\u573a\u53c2\u4e0e\u5ea6\u548c\u6d41\u52a8\u6027</li> </ul>"},{"location":"guides/feature_naming_guide/#3-long-short-ratio","title":"3. \u591a\u7a7a\u6bd4\u4f8b (Long-Short Ratio)","text":"<ul> <li>\u542b\u4e49: \u591a\u5934\u6301\u4ed3\u4e0e\u7a7a\u5934\u6301\u4ed3\u7684\u6bd4\u4f8b</li> <li>\u7c7b\u578b:</li> <li><code>account</code>: \u57fa\u4e8e\u8d26\u6237\u6570\u91cf\u7684\u6bd4\u4f8b</li> <li><code>position</code>: \u57fa\u4e8e\u6301\u4ed3\u91cf\u7684\u6bd4\u4f8b</li> <li><code>global</code>: \u5168\u5c40\u7edf\u8ba1\u6bd4\u4f8b</li> <li><code>taker</code>: \u57fa\u4e8e\u5403\u5355\u65b9\u5411\u7684\u6bd4\u4f8b</li> <li>\u9891\u7387: \u53ef\u914d\u7f6e\uff0c\u901a\u5e38\u4e3a5\u5206\u949f\u95f4\u9694</li> <li>\u7528\u9014: \u5206\u6790\u5e02\u573a\u60c5\u7eea\u548c\u8d8b\u52bf</li> </ul>"},{"location":"guides/feature_naming_guide/#_6","title":"\u65b9\u6cd5\u547d\u540d\u89c4\u8303","text":""},{"location":"guides/feature_naming_guide/#_7","title":"\u6838\u5fc3\u4e0b\u8f7d\u65b9\u6cd5","text":"<ol> <li><code>download_universe_data()</code></li> <li>\u4e0b\u8f7d\u5b8c\u6574\u7684universe\u6570\u636e\u96c6</li> <li> <p>\u5305\u62ec\u57fa\u7840K\u7ebf\u6570\u636e\u548c\u5e02\u573a\u6307\u6807\u6570\u636e</p> </li> <li> <p><code>_download_market_metrics_for_snapshot()</code></p> </li> <li>\u4e3a\u5355\u4e2auniverse\u5feb\u7167\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e</li> <li> <p>\u5185\u90e8\u65b9\u6cd5\uff0c\u652f\u6301API\u548cBinance Vision\u4e24\u79cd\u65b9\u5f0f</p> </li> <li> <p><code>download_binance_vision_metrics()</code></p> </li> <li>\u4e13\u95e8\u4eceBinance Vision\u4e0b\u8f7d\u5386\u53f2\u6307\u6807\u6570\u636e</li> <li>\u652f\u6301\u6279\u91cf\u4e0b\u8f7d\u548c\u589e\u5f3a\u9519\u8bef\u5904\u7406</li> </ol>"},{"location":"guides/feature_naming_guide/#_8","title":"\u6279\u91cf\u4e0b\u8f7d\u65b9\u6cd5","text":"<ol> <li><code>_download_funding_rate_batch()</code></li> <li> <p>\u6279\u91cf\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> </li> <li> <p><code>_download_open_interest_batch()</code></p> </li> <li> <p>\u6279\u91cf\u4e0b\u8f7d\u6301\u4ed3\u91cf\u6570\u636e</p> </li> <li> <p><code>_download_long_short_ratio_batch()</code></p> </li> <li>\u6279\u91cf\u4e0b\u8f7d\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e</li> </ol>"},{"location":"guides/feature_naming_guide/#_9","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"guides/feature_naming_guide/#_10","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key, api_secret)\n\n# \u4e0b\u8f7d\u5b8c\u6574\u6570\u636e\uff08\u5305\u62ec\u5e02\u573a\u6307\u6807\uff09\nservice.download_universe_data(\n    universe_file=\"universe.json\",\n    db_path=\"market.db\",\n    download_market_metrics=True,          # \u542f\u7528\u5e02\u573a\u6307\u6807\u4e0b\u8f7d\n    metrics_interval=Freq.m5,              # 5\u5206\u949f\u95f4\u9694\n    long_short_ratio_period=Freq.m5,       # 5\u5206\u949f\u5468\u671f\n    long_short_ratio_types=[\"account\", \"position\"],\n    use_binance_vision=True                # \u4f7f\u7528Binance Vision\n)\n</code></pre>"},{"location":"guides/feature_naming_guide/#_11","title":"\u4ec5\u4e0b\u8f7d\u57fa\u7840\u6570\u636e","text":"<pre><code># \u4ec5\u4e0b\u8f7dK\u7ebf\u6570\u636e\uff0c\u4e0d\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\nservice.download_universe_data(\n    universe_file=\"universe.json\",\n    db_path=\"market.db\",\n    download_market_metrics=False          # \u7981\u7528\u5e02\u573a\u6307\u6807\u4e0b\u8f7d\n)\n</code></pre>"},{"location":"guides/feature_naming_guide/#_12","title":"\u81ea\u5b9a\u4e49\u5e02\u573a\u6307\u6807\u914d\u7f6e","text":"<pre><code># \u9ad8\u9891\u7387\u5e02\u573a\u6307\u6807\u6570\u636e\nservice.download_universe_data(\n    universe_file=\"universe.json\",\n    db_path=\"market.db\",\n    download_market_metrics=True,\n    metrics_interval=Freq.m1,              # 1\u5206\u949f\u9ad8\u9891\u6570\u636e\n    long_short_ratio_period=Freq.m1,       # 1\u5206\u949f\u5468\u671f\n    long_short_ratio_types=[\"account\", \"position\", \"global\", \"taker\"],  # \u6240\u6709\u7c7b\u578b\n    use_binance_vision=False               # \u4f7f\u7528\u5b9e\u65f6API\n)\n</code></pre>"},{"location":"guides/feature_naming_guide/#_13","title":"\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b","text":""},{"location":"guides/feature_naming_guide/#download_datapy","title":"download_data.py \u914d\u7f6e","text":"<pre><code># \u5e02\u573a\u6307\u6807\u914d\u7f6e\nDOWNLOAD_MARKET_METRICS = True  # \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\nMETRICS_INTERVAL = Freq.h1      # \u5e02\u573a\u6307\u6807\u6570\u636e\u65f6\u95f4\u95f4\u9694\nLONG_SHORT_RATIO_PERIOD = Freq.h1  # \u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f\nLONG_SHORT_RATIO_TYPES = [\"account\", \"position\"]  # \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\nUSE_BINANCE_VISION = True       # \u662f\u5426\u4f7f\u7528Binance Vision\n</code></pre>"},{"location":"guides/feature_naming_guide/#_14","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"guides/feature_naming_guide/#1","title":"1. \u53c2\u6570\u9009\u62e9\u5efa\u8bae","text":"<ul> <li>\u65b0\u624b\u7528\u6237: \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\uff0c<code>download_market_metrics=True</code></li> <li>\u9ad8\u7ea7\u7528\u6237: \u6839\u636e\u9700\u6c42\u81ea\u5b9a\u4e49\u65f6\u95f4\u95f4\u9694\u548c\u7c7b\u578b</li> <li>\u5386\u53f2\u6570\u636e: \u4f18\u5148\u4f7f\u7528 <code>use_binance_vision=True</code></li> <li>\u5b9e\u65f6\u6570\u636e: \u4f7f\u7528 <code>use_binance_vision=False</code></li> </ul>"},{"location":"guides/feature_naming_guide/#2","title":"2. \u6027\u80fd\u8003\u8651","text":"<ul> <li>\u5e02\u573a\u6307\u6807\u6570\u636e\u4f1a\u589e\u52a0\u4e0b\u8f7d\u65f6\u95f4\u548c\u5b58\u50a8\u7a7a\u95f4</li> <li>\u9ad8\u9891\u7387\u6570\u636e\uff08\u59821\u5206\u949f\uff09\u4f1a\u663e\u8457\u589e\u52a0\u6570\u636e\u91cf</li> <li>Binance Vision\u6570\u636e\u4e0b\u8f7d\u66f4\u7a33\u5b9a\u4f46\u66f4\u65b0\u6709\u5ef6\u8fdf</li> </ul>"},{"location":"guides/feature_naming_guide/#3","title":"3. \u9519\u8bef\u5904\u7406","text":"<ul> <li>\u6240\u6709\u5e02\u573a\u6307\u6807\u4e0b\u8f7d\u90fd\u5185\u7f6e\u4e86\u589e\u5f3a\u9519\u8bef\u5904\u7406</li> <li>SSL\u9519\u8bef\u4f1a\u81ea\u52a8\u91cd\u8bd5</li> <li>\u5931\u8d25\u7684\u4e0b\u8f7d\u4f1a\u88ab\u8bb0\u5f55\u5e76\u652f\u6301\u6279\u91cf\u91cd\u8bd5</li> </ul>"},{"location":"guides/feature_naming_guide/#_15","title":"\u8fc1\u79fb\u6307\u5357","text":""},{"location":"guides/feature_naming_guide/#_16","title":"\u4ece\u65e7\u7248\u672c\u5347\u7ea7","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u65e7\u7248\u672c\u7684\u53c2\u6570\u540d\u79f0\uff0c\u8bf7\u6309\u4ee5\u4e0b\u5bf9\u5e94\u5173\u7cfb\u66f4\u65b0\uff1a</p> \u65e7\u53c2\u6570\u540d \u65b0\u53c2\u6570\u540d \u8bf4\u660e <code>download_new_features</code> <code>download_market_metrics</code> \u66f4\u660e\u786e\u7684\u529f\u80fd\u63cf\u8ff0 <code>new_feature_interval</code> <code>metrics_interval</code> \u66f4\u51c6\u786e\u7684\u53c2\u6570\u542b\u4e49 <code>new_feature_period</code> <code>long_short_ratio_period</code> \u660e\u786e\u6307\u5411\u591a\u7a7a\u6bd4\u4f8b\u5468\u671f <code>_download_new_features_for_snapshot</code> <code>_download_market_metrics_for_snapshot</code> \u65b9\u6cd5\u540d\u79f0\u7edf\u4e00"},{"location":"guides/feature_naming_guide/#_17","title":"\u914d\u7f6e\u6587\u4ef6\u66f4\u65b0","text":"<pre><code># \u65e7\u914d\u7f6e\nDOWNLOAD_NEW_FEATURES = True\nNEW_FEATURE_INTERVAL = Freq.m5\nNEW_FEATURE_PERIOD = Freq.m5\n\n# \u65b0\u914d\u7f6e\nDOWNLOAD_MARKET_METRICS = True\nMETRICS_INTERVAL = Freq.m5\nLONG_SHORT_RATIO_PERIOD = Freq.m5\n</code></pre>"},{"location":"guides/feature_naming_guide/#_18","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"guides/feature_naming_guide/#q","title":"Q: \u4ec0\u4e48\u662f\u5e02\u573a\u6307\u6807\u6570\u636e\uff1f","text":"<p>A: \u5e02\u573a\u6307\u6807\u6570\u636e\u5305\u62ec\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\u7b49\u9ad8\u7ea7\u5e02\u573a\u4fe1\u606f\uff0c\u7528\u4e8e\u6df1\u5ea6\u5206\u6790\u5e02\u573a\u60c5\u7eea\u548c\u8d8b\u52bf\u3002</p>"},{"location":"guides/feature_naming_guide/#q_1","title":"Q: \u4e3a\u4ec0\u4e48\u8981\u533a\u5206\u57fa\u7840\u6570\u636e\u548c\u5e02\u573a\u6307\u6807\u6570\u636e\uff1f","text":"<p>A: \u57fa\u7840K\u7ebf\u6570\u636e\u662f\u5fc5\u9700\u7684\uff0c\u800c\u5e02\u573a\u6307\u6807\u6570\u636e\u662f\u53ef\u9009\u7684\u9ad8\u7ea7\u529f\u80fd\u3002\u5206\u5f00\u63a7\u5236\u53ef\u4ee5\u8ba9\u7528\u6237\u6839\u636e\u9700\u6c42\u9009\u62e9\u4e0b\u8f7d\u5185\u5bb9\u3002</p>"},{"location":"guides/feature_naming_guide/#q-binance-visionapi","title":"Q: Binance Vision\u548cAPI\u65b9\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\uff1f","text":"<p>A: Binance Vision\u63d0\u4f9b\u5386\u53f2\u6570\u636e\uff0c\u66f4\u7a33\u5b9a\u4f46\u6709\u5ef6\u8fdf\uff1bAPI\u65b9\u5f0f\u63d0\u4f9b\u5b9e\u65f6\u6570\u636e\uff0c\u66f4\u53ca\u65f6\u4f46\u53ef\u80fd\u53d7\u9650\u5236\u5f71\u54cd\u3002</p>"},{"location":"guides/feature_naming_guide/#q_2","title":"Q: \u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u65f6\u95f4\u95f4\u9694\uff1f","text":"<p>A: - \u65e5\u5185\u4ea4\u6613: \u5efa\u8bae\u4f7f\u75281-5\u5206\u949f\u95f4\u9694 - \u8d8b\u52bf\u5206\u6790: \u5efa\u8bae\u4f7f\u752815\u5206\u949f-1\u5c0f\u65f6\u95f4\u9694 - \u957f\u671f\u5206\u6790: \u5efa\u8bae\u4f7f\u75281\u5c0f\u65f6-1\u5929\u95f4\u9694</p>"},{"location":"guides/feature_naming_guide/#_19","title":"\u53c2\u8003\u94fe\u63a5","text":"<ul> <li>Enhanced Error Handling Guide</li> <li>API Reference</li> <li>Demo Scripts</li> </ul>"},{"location":"guides/category-data/","title":"\u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u529f\u80fd","text":""},{"location":"guides/category-data/#_2","title":"\u6982\u8ff0","text":"<p>\u4ea4\u6613\u5bf9\u5206\u7c7b\u529f\u80fd\u63d0\u4f9b\u4e86\u83b7\u53d6\u3001\u5b58\u50a8\u548c\u5206\u6790 Binance \u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u7684\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\u3002\u901a\u8fc7\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\ud83d\udcca \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u5206\u7c7b\u4fe1\u606f</li> <li>\ud83d\uddc2\ufe0f \u521b\u5efa\u5206\u7c7b\u77e9\u9635\u5e76\u4fdd\u5b58\u4e3a CSV \u683c\u5f0f</li> <li>\ud83c\udfaf \u57fa\u4e8e\u5206\u7c7b\u7b5b\u9009\u4ea4\u6613\u5bf9</li> <li>\ud83d\udcc8 \u751f\u6210\u5206\u7c7b\u7edf\u8ba1\u548c\u5206\u6790\u62a5\u544a</li> <li>\ud83d\udd04 \u4e0e\u73b0\u6709 universe \u6570\u636e\u65e0\u7f1d\u96c6\u6210</li> </ul>"},{"location":"guides/category-data/#_3","title":"\u6570\u636e\u7279\u70b9","text":""},{"location":"guides/category-data/#_4","title":"\u5f53\u524d\u7edf\u8ba1\uff08\u5b9e\u65f6\u83b7\u53d6\uff09","text":"<ul> <li>\u4ea4\u6613\u5bf9\u603b\u6570: 381 \u4e2a USDT \u4ea4\u6613\u5bf9</li> <li>\u5206\u7c7b\u6807\u7b7e\u6570: 23 \u4e2a\u56fa\u5b9a\u5206\u7c7b</li> <li>\u8986\u76d6\u7387: 94% \u7684\u4ea4\u6613\u5bf9\u6709\u5206\u7c7b\u6807\u7b7e</li> </ul>"},{"location":"guides/category-data/#_5","title":"\u5206\u7c7b\u6807\u7b7e\u5217\u8868\uff08\u6309\u5b57\u6bcd\u6392\u5e8f\uff09","text":"<pre><code>1. AI              - \u4eba\u5de5\u667a\u80fd\u76f8\u5173\n2. Gaming          - \u6e38\u620f\u4ee3\u5e01\n3. Infrastructure  - \u57fa\u7840\u8bbe\u65bd\u9879\u76ee\n4. Launchpad       - \u542f\u52a8\u5e73\u53f0\u4ee3\u5e01\n5. Launchpool      - \u6d41\u52a8\u6027\u6316\u77ff\u9879\u76ee\n6. Layer1_Layer2   - \u533a\u5757\u94fe\u5c42\u7ea7\u9879\u76ee\n7. Megadrop        - \u5927\u578b\u7a7a\u6295\u9879\u76ee\n8. Meme            - \u6a21\u56e0\u4ee3\u5e01\n9. Metaverse       - \u5143\u5b87\u5b99\u9879\u76ee\n10. Monitoring     - \u76d1\u63a7\u76f8\u5173\n11. NFT            - \u975e\u540c\u8d28\u5316\u4ee3\u5e01\n12. Payments       - \u652f\u4ed8\u76f8\u5173\n13. Polkadot       - Polkadot \u751f\u6001\n14. RWA            - \u73b0\u5b9e\u4e16\u754c\u8d44\u4ea7\n15. Seed           - \u79cd\u5b50\u9879\u76ee\n16. Solana         - Solana \u751f\u6001\n17. bnbchain       - BNB Chain \u751f\u6001\n18. defi           - \u53bb\u4e2d\u5fc3\u5316\u91d1\u878d\n19. fan_token      - \u7c89\u4e1d\u4ee3\u5e01\n20. liquid_staking - \u6d41\u52a8\u6027\u8d28\u62bc\n21. newListing     - \u65b0\u4e0a\u7ebf\u9879\u76ee\n22. pow            - \u5de5\u4f5c\u91cf\u8bc1\u660e\n23. storage-zone   - \u5b58\u50a8\u76f8\u5173\n</code></pre>"},{"location":"guides/category-data/#_6","title":"\u70ed\u95e8\u5206\u7c7b\u6392\u884c","text":"<ol> <li>Seed (36.2%) - 138 \u4e2a\u4ea4\u6613\u5bf9</li> <li>Layer1_Layer2 (28.1%) - 107 \u4e2a\u4ea4\u6613\u5bf9</li> <li>defi (27.6%) - 105 \u4e2a\u4ea4\u6613\u5bf9</li> <li>Launchpool (20.7%) - 79 \u4e2a\u4ea4\u6613\u5bf9</li> <li>Infrastructure (18.4%) - 70 \u4e2a\u4ea4\u6613\u5bf9</li> </ol>"},{"location":"guides/category-data/#_7","title":"\u6838\u5fc3\u529f\u80fd","text":""},{"location":"guides/category-data/#1","title":"1. \u83b7\u53d6\u5206\u7c7b\u4fe1\u606f","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\n\nservice = MarketDataService(api_key=\"your_key\", api_secret=\"your_secret\")\n\n# \u83b7\u53d6\u6240\u6709\u5206\u7c7b\u6807\u7b7e\ncategories = service.get_all_categories()\nprint(f\"\u5171\u6709 {len(categories)} \u4e2a\u5206\u7c7b\")\n\n# \u83b7\u53d6\u4ea4\u6613\u5bf9\u5206\u7c7b\u6620\u5c04\nsymbol_categories = service.get_symbol_categories()\nprint(f\"BTCUSDT \u7684\u5206\u7c7b: {symbol_categories['BTCUSDT']}\")\n</code></pre>"},{"location":"guides/category-data/#2","title":"2. \u521b\u5efa\u5206\u7c7b\u77e9\u9635","text":"<pre><code># \u4e3a\u6307\u5b9a\u4ea4\u6613\u5bf9\u521b\u5efa\u5206\u7c7b\u77e9\u9635\nsymbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\ncategories = [\"Layer1_Layer2\", \"defi\", \"AI\"]\n\nsymbols, categories, matrix = service.create_category_matrix(symbols, categories)\n\n# matrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]\n</code></pre>"},{"location":"guides/category-data/#3-csv","title":"3. \u4fdd\u5b58\u4e3a CSV \u683c\u5f0f","text":"<pre><code># \u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u4e3a CSV\nservice.save_category_matrix_csv(\n    output_path=\"data/categories\",\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    date_str=\"2025-01-22\"\n)\n# \u751f\u6210: data/categories/categories_2025-01-22.csv\n</code></pre>"},{"location":"guides/category-data/#csv","title":"CSV \u6587\u4ef6\u683c\u5f0f","text":"<pre><code>symbol,AI,Gaming,Infrastructure,Layer1_Layer2,Meme,defi...\nBTCUSDT,0,0,0,0,0,0...\nETHUSDT,0,0,0,1,0,0...\nBNBUSDT,0,0,0,1,0,0...\n</code></pre>"},{"location":"guides/category-data/#4-universe","title":"4. Universe \u96c6\u6210","text":"<pre><code># \u4e3a\u6574\u4e2a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f\nservice.download_and_save_categories_for_universe(\n    universe_file=\"data/universe.json\",\n    output_path=\"data/categories_universe\"\n)\n</code></pre> <p>\u751f\u6210\u7684\u6587\u4ef6\uff1a - <code>categories_2024-09-24.csv</code> - \u5386\u53f2\u5feb\u7167\u5206\u7c7b - <code>categories_2025-01-22.csv</code> - \u5f53\u524d\u65e5\u671f\u5206\u7c7b</p>"},{"location":"guides/category-data/#_8","title":"\u6570\u636e\u5904\u7406\u5de5\u5177","text":""},{"location":"guides/category-data/#categoryutils","title":"CategoryUtils \u5de5\u5177\u7c7b","text":"<pre><code>from cryptoservice.utils.category_utils import CategoryUtils\n\n# \u8bfb\u53d6 CSV \u6587\u4ef6\nsymbols, categories, matrix = CategoryUtils.read_category_csv(\"categories_2025-01-22.csv\")\n\n# \u6839\u636e\u5206\u7c7b\u7b5b\u9009\u4ea4\u6613\u5bf9\ndefi_symbols = CategoryUtils.filter_symbols_by_category(\n    symbols, categories, matrix,\n    target_categories=[\"defi\"],\n    require_all=False\n)\n\n# \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\nstats = CategoryUtils.get_category_statistics(symbols, categories, matrix)\n\n# \u751f\u6210\u5206\u6790\u62a5\u544a\nCategoryUtils.export_category_analysis(\n    \"categories_2025-01-22.csv\",\n    \"analysis_output\",\n    \"defi_analysis\"\n)\n</code></pre>"},{"location":"guides/category-data/#_9","title":"\u5b58\u50a8\u65b9\u6848","text":""},{"location":"guides/category-data/#_10","title":"\u6587\u4ef6\u7ec4\u7ec7\u7ed3\u6784","text":"<pre><code>data/\n\u251c\u2500\u2500 categories/                  # \u5355\u6b21\u4fdd\u5b58\u7684\u5206\u7c7b\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 categories_YYYY-MM-DD.csv\n\u251c\u2500\u2500 categories_universe/         # Universe \u96c6\u6210\u7684\u5206\u7c7b\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 categories_2024-09-24.csv\n\u2502   \u2514\u2500\u2500 categories_2025-01-22.csv\n\u2514\u2500\u2500 analysis/                   # \u5206\u6790\u62a5\u544a\n    \u251c\u2500\u2500 category_analysis.txt\n    \u2514\u2500\u2500 category_analysis.xlsx\n</code></pre>"},{"location":"guides/category-data/#kdtv","title":"\u4e0e KDTV \u6570\u636e\u7684\u533a\u5206","text":"\u7279\u6027 KDTV \u6570\u636e \u5206\u7c7b\u6570\u636e \u5b58\u50a8\u683c\u5f0f NPY \u4e8c\u8fdb\u5236 CSV \u6587\u672c \u6570\u636e\u7c7b\u578b \u65f6\u95f4\u5e8f\u5217\u4ef7\u683c\u91cf\u6570\u636e \u9759\u6001\u5206\u7c7b\u6807\u7b7e \u66f4\u65b0\u9891\u7387 \u5b9e\u65f6/\u5386\u53f2 \u5f53\u524d\u72b6\u6001+\u5386\u53f2\u586b\u5145 \u6587\u4ef6\u547d\u540d <code>date/feature/date.npy</code> <code>categories_date.csv</code> \u7d22\u5f15\u65b9\u5f0f \u65f6\u95f4\u6233\u7d22\u5f15 Symbol \u7d22\u5f15"},{"location":"guides/category-data/#_11","title":"\u4f7f\u7528\u573a\u666f","text":""},{"location":"guides/category-data/#1_1","title":"1. \u7b56\u7565\u7814\u7a76","text":"<pre><code># \u7b5b\u9009 DeFi \u76f8\u5173\u4ea4\u6613\u5bf9\u8fdb\u884c\u7b56\u7565\u6d4b\u8bd5\ndefi_symbols = CategoryUtils.filter_symbols_by_category(\n    symbols, categories, matrix, [\"defi\"]\n)\n</code></pre>"},{"location":"guides/category-data/#2_1","title":"2. \u98ce\u9669\u7ba1\u7406","text":"<pre><code># \u8bc6\u522b\u9ad8\u98ce\u9669\u5206\u7c7b\uff08\u5982 Meme \u4ee3\u5e01\uff09\nmeme_symbols = CategoryUtils.filter_symbols_by_category(\n    symbols, categories, matrix, [\"Meme\"]\n)\n</code></pre>"},{"location":"guides/category-data/#3","title":"3. \u884c\u4e1a\u5206\u6790","text":"<pre><code># \u5206\u6790\u5404\u884c\u4e1a\u7684\u4ee3\u5e01\u6570\u91cf\u5206\u5e03\nstats = CategoryUtils.get_category_statistics(symbols, categories, matrix)\nfor category, info in stats.items():\n    if category != \"_summary\":\n        print(f\"{category}: {info['count']} \u4e2a\u4ee3\u5e01\")\n</code></pre>"},{"location":"guides/category-data/#4-universe_1","title":"4. Universe \u6784\u5efa","text":"<pre><code># \u57fa\u4e8e\u5206\u7c7b\u6784\u5efa\u7279\u5b9a\u7684 universe\nai_gaming_symbols = CategoryUtils.filter_symbols_by_category(\n    symbols, categories, matrix,\n    [\"AI\", \"Gaming\"],\n    require_all=False  # \u5305\u542b\u4efb\u4e00\u5206\u7c7b\n)\n</code></pre>"},{"location":"guides/category-data/#_12","title":"\u6570\u636e\u7279\u6027\u8bf4\u660e","text":""},{"location":"guides/category-data/#_13","title":"\u4f18\u52bf","text":"<ul> <li>\u2705 \u5b98\u65b9\u6570\u636e\u6e90: \u76f4\u63a5\u4ece Binance API \u83b7\u53d6\uff0c\u6570\u636e\u6743\u5a01</li> <li>\u2705 \u5b9e\u65f6\u66f4\u65b0: API \u8fd4\u56de\u6700\u65b0\u7684\u5206\u7c7b\u4fe1\u606f</li> <li>\u2705 \u6807\u51c6\u5316\u683c\u5f0f: \u56fa\u5b9a\u7684 23 \u4e2a\u5206\u7c7b\uff0c\u6309\u5b57\u6bcd\u6392\u5e8f</li> <li>\u2705 \u5411\u540e\u517c\u5bb9: \u7528\u5f53\u524d\u5206\u7c7b\u586b\u5145\u5386\u53f2\u6570\u636e\uff0c\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027</li> <li>\u2705 \u6613\u4e8e\u5904\u7406: CSV \u683c\u5f0f\uff0c\u4fbf\u4e8e Excel\u3001pandas \u7b49\u5de5\u5177\u5904\u7406</li> </ul>"},{"location":"guides/category-data/#_14","title":"\u9650\u5236","text":"<ul> <li>\u26a0\ufe0f \u5386\u53f2\u5c40\u9650: \u53ea\u80fd\u83b7\u53d6\u5f53\u524d\u5206\u7c7b\uff0c\u5386\u53f2\u5206\u7c7b\u53d8\u5316\u65e0\u6cd5\u8ffd\u8e2a</li> <li>\u26a0\ufe0f \u5206\u7c7b\u56fa\u5b9a: \u5206\u7c7b\u4f53\u7cfb\u7531 Binance \u5b9a\u4e49\uff0c\u4e0d\u53ef\u81ea\u5b9a\u4e49</li> <li>\u26a0\ufe0f \u591a\u6807\u7b7e: \u4e00\u4e2a\u4ea4\u6613\u5bf9\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u5206\u7c7b\uff0c\u9700\u8981\u5408\u7406\u5904\u7406</li> </ul>"},{"location":"guides/category-data/#_15","title":"\u586b\u5145\u7b56\u7565","text":"<p>\u7531\u4e8e API \u53ea\u80fd\u83b7\u53d6\u5f53\u524d\u5206\u7c7b\uff0c\u5bf9\u4e8e\u5386\u53f2\u6570\u636e\u91c7\u7528\"\u5f53\u524d\u5206\u7c7b\u5411\u540e\u586b\u5145\"\u7684\u7b56\u7565\uff1a</p> <pre><code>2024-09-24.csv  &lt;- \u4f7f\u7528 2025-01-22 \u7684\u5206\u7c7b\u4fe1\u606f\n2024-10-15.csv  &lt;- \u4f7f\u7528 2025-01-22 \u7684\u5206\u7c7b\u4fe1\u606f\n2025-01-22.csv  &lt;- \u5b9e\u9645\u7684\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\n</code></pre> <p>\u8fd9\u79cd\u65b9\u5f0f\u786e\u4fdd\u4e86\uff1a - \u6570\u636e\u683c\u5f0f\u7684\u7edf\u4e00\u6027 - \u5206\u6790\u6d41\u7a0b\u7684\u4e00\u81f4\u6027 - \u907f\u514d\u56e0\u5206\u7c7b\u7f3a\u5931\u5bfc\u81f4\u7684\u6570\u636e\u5904\u7406\u95ee\u9898</p>"},{"location":"guides/category-data/#_16","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"guides/category-data/#_17","title":"\u8fd0\u884c\u6f14\u793a\u811a\u672c","text":"<pre><code>cd /path/to/Xdata\nuv run python demo/category_demo.py\n</code></pre>"},{"location":"guides/category-data/#_18","title":"\u57fa\u7840\u7528\u6cd5\u793a\u4f8b","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\n\n# 1. \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(api_key=\"\", api_secret=\"\")\n\n# 2. \u83b7\u53d6\u5206\u7c7b\u4fe1\u606f\u5e76\u4fdd\u5b58\nservice.save_category_matrix_csv(\n    output_path=\"my_categories\",\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    date_str=\"2025-01-22\"\n)\n\n# 3. \u4e0e universe \u96c6\u6210\nservice.download_and_save_categories_for_universe(\n    universe_file=\"universe.json\",\n    output_path=\"universe_categories\"\n)\n</code></pre> <p>\u8fd9\u6837\uff0c\u4f60\u5c31\u6709\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u4ea4\u6613\u5bf9\u5206\u7c7b\u6570\u636e\u7ba1\u7406\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4e0e\u73b0\u6709\u7684 KDTV \u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5b8c\u7f8e\u914d\u5408\uff0c\u4e3a\u91cf\u5316\u5206\u6790\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u57fa\u7840\u6570\u636e\uff01</p>"},{"location":"guides/data-processing/database/","title":"\u6570\u636e\u5e93\u64cd\u4f5c","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u7684\u6570\u636e\u5e93\u529f\u80fd\u8fdb\u884c\u6570\u636e\u7ba1\u7406\u548c\u5904\u7406\u3002</p>"},{"location":"guides/data-processing/database/#_2","title":"\u6570\u636e\u5e93\u6982\u8ff0","text":"<p>CryptoService \u4f7f\u7528 SQLite \u4f5c\u4e3a\u6570\u636e\u5b58\u50a8\u5f15\u64ce\uff0c\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u9ad8\u6548\u5b58\u50a8</li> <li>\u4f18\u5316\u7684\u8868\u7ed3\u6784</li> <li>\u7d22\u5f15\u52a0\u901f\u67e5\u8be2</li> <li> <p>\u652f\u6301\u5e76\u53d1\u8bbf\u95ee</p> </li> <li> <p>\u7075\u6d3b\u67e5\u8be2</p> </li> <li>\u591a\u7ef4\u5ea6\u8fc7\u6ee4</li> <li>\u65f6\u95f4\u8303\u56f4\u67e5\u8be2</li> <li> <p>\u7279\u5f81\u9009\u62e9</p> </li> <li> <p>\u6570\u636e\u7ba1\u7406</p> </li> <li>\u8fde\u63a5\u6c60\u7ba1\u7406</li> <li>\u81ea\u52a8\u5907\u4efd</li> <li>\u6570\u636e\u5bfc\u51fa</li> </ol>"},{"location":"guides/data-processing/database/#_3","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":""},{"location":"guides/data-processing/database/#_4","title":"\u8868\u7ed3\u6784","text":"<pre><code>CREATE TABLE market_data (\n    symbol TEXT,\n    timestamp INTEGER,\n    freq TEXT,\n    open_price REAL,\n    high_price REAL,\n    low_price REAL,\n    close_price REAL,\n    volume REAL,\n    quote_volume REAL,\n    trades_count INTEGER,\n    taker_buy_volume REAL,\n    taker_buy_quote_volume REAL,\n    taker_sell_volume REAL,\n    taker_sell_quote_volume REAL,\n    PRIMARY KEY (symbol, timestamp, freq)\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_5","title":"\u7d22\u5f15","text":"<pre><code>CREATE INDEX idx_symbol ON market_data(symbol);\nCREATE INDEX idx_timestamp ON market_data(timestamp);\nCREATE INDEX idx_freq ON market_data(freq);\n</code></pre>"},{"location":"guides/data-processing/database/#_6","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"guides/data-processing/database/#_7","title":"\u521d\u59cb\u5316\u6570\u636e\u5e93","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\ndb = MarketDB(\"./data/market.db\")\n</code></pre>"},{"location":"guides/data-processing/database/#_8","title":"\u8bfb\u53d6\u6570\u636e","text":"<pre><code># \u57fa\u672c\u8bfb\u53d6\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n\n# \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_9","title":"\u67e5\u8be2\u53ef\u7528\u65e5\u671f","text":"<pre><code># \u83b7\u53d6\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\ndates = db.get_available_dates(\n    symbol=\"BTCUSDT\",\n    freq=Freq.h1\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_10","title":"\u6570\u636e\u5bfc\u51fa","text":""},{"location":"guides/data-processing/database/#_11","title":"\u5bfc\u51fa\u4e3a\u6587\u4ef6","text":"<pre><code># \u5bfc\u51fa\u6570\u636e\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1,  # \u53ef\u9009\u7684\u964d\u91c7\u6837\n    chunk_days=30  # \u5206\u5757\u5904\u7406\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_12","title":"\u6570\u636e\u964d\u91c7\u6837","text":"<pre><code># \u964d\u91c7\u6837\u89c4\u5219\nfreq_map = {\n    Freq.m1: \"1T\",\n    Freq.m3: \"3T\",\n    Freq.m5: \"5T\",\n    Freq.m15: \"15T\",\n    Freq.m30: \"30T\",\n    Freq.h1: \"1h\",\n    Freq.h2: \"2h\",\n    Freq.h4: \"4h\",\n    Freq.h6: \"6h\",\n    Freq.h8: \"8h\",\n    Freq.h12: \"12h\",\n    Freq.d1: \"1D\",\n}\n\n# \u805a\u5408\u89c4\u5219\nagg_rules = {\n    \"open_price\": \"first\",\n    \"high_price\": \"max\",\n    \"low_price\": \"min\",\n    \"close_price\": \"last\",\n    \"volume\": \"sum\",\n    \"quote_volume\": \"sum\",\n    \"trades_count\": \"sum\",\n    \"taker_buy_volume\": \"sum\",\n    \"taker_buy_quote_volume\": \"sum\",\n    \"taker_sell_volume\": \"sum\",\n    \"taker_sell_quote_volume\": \"sum\",\n}\n</code></pre>"},{"location":"guides/data-processing/database/#_13","title":"\u8fde\u63a5\u6c60\u7ba1\u7406","text":""},{"location":"guides/data-processing/database/#_14","title":"\u521b\u5efa\u8fde\u63a5\u6c60","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u521d\u59cb\u5316\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_15","title":"\u4f7f\u7528\u8fde\u63a5\u6c60","text":"<pre><code># \u4f7f\u7528\u8fde\u63a5\u6c60\u83b7\u53d6\u8fde\u63a5\nwith pool.get_connection() as db:\n    data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        freq=Freq.h1,\n        symbols=[\"BTCUSDT\"]\n    )\n</code></pre>"},{"location":"guides/data-processing/database/#_16","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/database/#_17","title":"\u57fa\u672c\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_18","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"guides/data-processing/database/#_19","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code>def process_in_chunks(db, symbols, start_date, end_date, chunk_size=100):\n    \"\"\"\u5206\u6279\u5904\u7406\u6570\u636e\"\"\"\n    for i in range(0, len(symbols), chunk_size):\n        symbol_chunk = symbols[i:i + chunk_size]\n        data = db.read_data(\n            start_time=start_date,\n            end_time=end_date,\n            freq=Freq.h1,\n            symbols=symbol_chunk\n        )\n        # \u5904\u7406\u6570\u636e\u5757\n</code></pre>"},{"location":"guides/data-processing/database/#_20","title":"\u6570\u636e\u9a8c\u8bc1","text":"<pre><code>def validate_data(df):\n    \"\"\"\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\"\"\"\n    # \u68c0\u67e5\u7a7a\u503c\n    if df.isnull().any().any():\n        print(\"Warning: Found null values\")\n\n    # \u68c0\u67e5\u4ef7\u683c\n    if (df[\"close_price\"] &lt;= 0).any():\n        print(\"Warning: Found invalid prices\")\n\n    # \u68c0\u67e5\u6210\u4ea4\u91cf\n    if (df[\"volume\"] &lt; 0).any():\n        print(\"Warning: Found negative volume\")\n</code></pre>"},{"location":"guides/data-processing/database/#_21","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u8fde\u63a5\u7ba1\u7406</li> <li>\u4f7f\u7528\u8fde\u63a5\u6c60</li> <li>\u53ca\u65f6\u5173\u95ed\u8fde\u63a5</li> <li> <p>\u63a7\u5236\u5e76\u53d1\u6570\u91cf</p> </li> <li> <p>\u67e5\u8be2\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u7d22\u5f15</li> <li>\u9650\u5236\u67e5\u8be2\u8303\u56f4</li> <li> <p>\u6279\u91cf\u5904\u7406\u6570\u636e</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u6570\u636e\u4e00\u81f4\u6027</li> <li> <p>\u76d1\u63a7\u5f02\u5e38\u503c</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58</li> <li>\u4f18\u5316\u67e5\u8be2\u8bed\u53e5</li> </ol>"},{"location":"guides/data-processing/database/#_22","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3KDTV\u683c\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/data-processing/kdtv/","title":"KDTV\u683c\u5f0f","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd KDTV (Key-Date-Time-Value) \u6570\u636e\u683c\u5f0f\u7684\u8bbe\u8ba1\u539f\u7406\u548c\u4f7f\u7528\u65b9\u6cd5\u3002</p>"},{"location":"guides/data-processing/kdtv/#_1","title":"\u683c\u5f0f\u6982\u8ff0","text":"<p>KDTV \u662f\u4e00\u79cd\u4e3a\u9ad8\u6027\u80fd\u91d1\u878d\u6570\u636e\u5904\u7406\u800c\u8bbe\u8ba1\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a</p> <ol> <li>\u591a\u7ef4\u5ea6\u7ec4\u7ec7</li> <li>K (Key): \u4ea4\u6613\u5bf9\u6807\u8bc6</li> <li>D (Date): \u65e5\u671f\u7ef4\u5ea6</li> <li>T (Time): \u65f6\u95f4\u7ef4\u5ea6</li> <li> <p>V (Value): \u6570\u636e\u503c</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528 NumPy \u6570\u7ec4\u5b58\u50a8</li> <li>\u652f\u6301\u9ad8\u6548\u7684\u77e9\u9635\u8fd0\u7b97</li> <li> <p>\u4f18\u5316\u7684\u5185\u5b58\u4f7f\u7528</p> </li> <li> <p>\u7075\u6d3b\u6027</p> </li> <li>\u652f\u6301\u591a\u79cd\u6570\u636e\u7279\u5f81</li> <li>\u53ef\u6269\u5c55\u7684\u5b58\u50a8\u7ed3\u6784</li> <li>\u65b9\u4fbf\u7684\u6570\u636e\u8bbf\u95ee</li> </ol>"},{"location":"guides/data-processing/kdtv/#_2","title":"\u76ee\u5f55\u7ed3\u6784","text":"<pre><code>data/\n\u251c\u2500\u2500 h1/                      # \u9891\u7387\n\u2502   \u251c\u2500\u2500 close_price/        # \u7279\u5f81\n\u2502   \u2502   \u251c\u2500\u2500 20240101.npy   # \u65e5\u671f\u6587\u4ef6\n\u2502   \u2502   \u2514\u2500\u2500 20240102.npy\n\u2502   \u251c\u2500\u2500 volume/\n\u2502   \u2502   \u251c\u2500\u2500 20240101.npy\n\u2502   \u2502   \u2514\u2500\u2500 20240102.npy\n\u2502   \u2514\u2500\u2500 universe_token.pkl  # \u4ea4\u6613\u5bf9\u5217\u8868\n\u2514\u2500\u2500 m1/\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_3","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"guides/data-processing/kdtv/#_4","title":"\u5b58\u50a8\u5355\u65e5\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_5","title":"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868","text":"<pre><code># \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_6","title":"\u6570\u636e\u8bfb\u53d6","text":""},{"location":"guides/data-processing/kdtv/#_7","title":"\u57fa\u672c\u8bfb\u53d6","text":"<pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_8","title":"\u6307\u5b9a\u7279\u5f81\u8bfb\u53d6","text":"<pre><code># \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\"\n    ],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_9","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"guides/data-processing/kdtv/#_10","title":"\u7279\u5f81\u5217\u8868","text":"<p>\u9ed8\u8ba4\u652f\u6301\u7684\u7279\u5f81\uff1a</p> <pre><code>features = [\n    \"close_price\",\n    \"volume\",\n    \"quote_volume\",\n    \"high_price\",\n    \"low_price\",\n    \"open_price\",\n    \"trades_count\",\n    \"taker_buy_volume\",\n    \"taker_buy_quote_volume\",\n]\n\n# \u884d\u751f\u7279\u5f81\nderived_features = [\n    \"taker_sell_volume\",\n    \"taker_sell_quote_volume\",\n]\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_11","title":"\u6570\u636e\u8bbf\u95ee","text":"<pre><code># \u8bbf\u95ee\u7279\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\nbtc_data = kdtv_data.loc[\"BTCUSDT\"]\n\n# \u8bbf\u95ee\u7279\u5b9a\u65e5\u671f\u7684\u6570\u636e\ndate_data = kdtv_data.loc[:, \"20240101\"]\n\n# \u8bbf\u95ee\u7279\u5b9a\u65f6\u95f4\u7684\u6570\u636e\ntime_data = kdtv_data.loc[:, :, \"100000\"]  # 10:00:00\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_12","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/kdtv/#_13","title":"\u57fa\u672c\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#npy","title":"\u53ef\u89c6\u5316NPY\u6587\u4ef6","text":"<pre><code># \u53ef\u89c6\u5316\u5355\u4e2aNPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"Time1\", \"Time2\", \"Time3\"],\n    index=[\"BTC\", \"ETH\", \"BNB\"]\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_14","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"guides/data-processing/kdtv/#_15","title":"\u5185\u5b58\u4f18\u5316","text":"<pre><code># \u4f7f\u7528\u7279\u5f81\u8fc7\u6ee4\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\"close_price\"],  # \u53ea\u8bfb\u53d6\u5fc5\u8981\u7684\u7279\u5f81\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_16","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u6309\u65e5\u671f\u5206\u6279\u5904\u7406\u6570\u636e\ndates = pd.date_range(\"2024-01-01\", \"2024-01-31\")\nchunk_size = 5\n\nfor i in range(0, len(dates), chunk_size):\n    chunk_dates = dates[i:i + chunk_size]\n    start_date = chunk_dates[0].strftime(\"%Y-%m-%d\")\n    end_date = chunk_dates[-1].strftime(\"%Y-%m-%d\")\n\n    chunk_data = StorageUtils.read_kdtv_data(\n        start_date=start_date,\n        end_date=end_date,\n        freq=Freq.h1,\n        data_path=\"./data\"\n    )\n    # \u5904\u7406\u6570\u636e\u5757\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_17","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u7ec4\u7ec7</li> <li>\u5408\u7406\u89c4\u5212\u76ee\u5f55\u7ed3\u6784</li> <li>\u4fdd\u6301\u6570\u636e\u6587\u4ef6\u547d\u540d\u4e00\u81f4</li> <li> <p>\u5b9a\u671f\u6574\u7406\u548c\u6e05\u7406\u6570\u636e</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u53ea\u8bfb\u53d6\u5fc5\u8981\u7684\u7279\u5f81</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li> <p>\u6ce8\u610f\u5185\u5b58\u7ba1\u7406</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u7279\u5f81\u4e00\u81f4\u6027</li> <li> <p>\u76d1\u63a7\u6570\u636e\u8d28\u91cf</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u5904\u7406\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u60c5\u51b5</li> <li>\u9a8c\u8bc1\u6570\u636e\u683c\u5f0f</li> <li>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f</li> </ol>"},{"location":"guides/data-processing/kdtv/#_18","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/","title":"\u667a\u80fd\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668","text":""},{"location":"guides/data-processing/rate_limit_manager/#_2","title":"\u6982\u8ff0","text":"<p>\u4e3a\u4e86\u89e3\u51b3 Binance API \u9891\u7387\u9650\u5236\u95ee\u9898\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u667a\u80fd\u7684\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668 (<code>RateLimitManager</code>)\uff0c\u80fd\u591f\u81ea\u52a8\u68c0\u6d4b\u3001\u5904\u7406\u548c\u89c4\u907f API \u9891\u7387\u9650\u5236\uff0c\u786e\u4fdd\u6570\u636e\u4e0b\u8f7d\u7684\u7a33\u5b9a\u6027\u548c\u5b8c\u6574\u6027\u3002</p>"},{"location":"guides/data-processing/rate_limit_manager/#_3","title":"\u4e3b\u8981\u7279\u6027","text":""},{"location":"guides/data-processing/rate_limit_manager/#_4","title":"\ud83c\udfaf \u667a\u80fd\u9891\u7387\u63a7\u5236","text":"<ul> <li>\u52a8\u6001\u5ef6\u8fdf\u8c03\u6574: \u6839\u636e API \u54cd\u5e94\u81ea\u52a8\u8c03\u6574\u8bf7\u6c42\u95f4\u9694</li> <li>\u9884\u9632\u6027\u9650\u5236: \u5728\u63a5\u8fd1\u9891\u7387\u9650\u5236\u524d\u4e3b\u52a8\u51cf\u901f</li> <li>\u9519\u8bef\u6062\u590d: \u9047\u5230\u9891\u7387\u9650\u5236\u9519\u8bef\u65f6\u81ea\u52a8\u6062\u590d</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#_5","title":"\ud83d\udcca \u5b9e\u65f6\u76d1\u63a7","text":"<ul> <li>\u8bf7\u6c42\u8ba1\u6570: \u8ddf\u8e2a\u6bcf\u5206\u949f\u7684\u8bf7\u6c42\u6570\u91cf</li> <li>\u9519\u8bef\u7edf\u8ba1: \u8bb0\u5f55\u8fde\u7eed\u9519\u8bef\u6b21\u6570</li> <li>\u5ef6\u8fdf\u4f18\u5316: \u5728\u65e0\u9519\u8bef\u65f6\u9010\u6e10\u964d\u4f4e\u5ef6\u8fdf</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#_6","title":"\ud83d\udd04 \u81ea\u9002\u5e94\u7b56\u7565","text":"<ul> <li>\u6e10\u8fdb\u5f0f\u9000\u907f: \u9519\u8bef\u6b21\u6570\u8d8a\u591a\uff0c\u5ef6\u8fdf\u65f6\u95f4\u8d8a\u957f</li> <li>\u667a\u80fd\u91cd\u7f6e: \u6210\u529f\u8bf7\u6c42\u540e\u9010\u6b65\u6062\u590d\u6b63\u5e38\u901f\u5ea6</li> <li>\u7ebf\u7a0b\u5b89\u5168: \u652f\u6301\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bbf\u95ee</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#_7","title":"\u5de5\u4f5c\u539f\u7406","text":""},{"location":"guides/data-processing/rate_limit_manager/#1","title":"1. \u9884\u9632\u673a\u5236","text":"<pre><code># \u76d1\u63a7\u6bcf\u5206\u949f\u8bf7\u6c42\u6570\nif requests_this_minute &gt;= max_requests_per_minute * 0.8:\n    # \u8fbe\u523080%\u9650\u5236\u65f6\u589e\u52a0\u5ef6\u8fdf\n    additional_delay = 2.0\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#2","title":"2. \u9519\u8bef\u5904\u7406","text":"<pre><code># \u9047\u5230\u9891\u7387\u9650\u5236\u9519\u8bef\u65f6\nif is_rate_limit_error(error):\n    wait_time = rate_limit_manager.handle_rate_limit_error()\n    time.sleep(wait_time)\n    # \u81ea\u52a8\u91cd\u8bd5\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#3","title":"3. \u52a8\u6001\u8c03\u6574","text":"<pre><code># \u6839\u636e\u9519\u8bef\u6b21\u6570\u8c03\u6574\u5ef6\u8fdf\nif consecutive_errors &lt;= 3:\n    current_delay *= 2    # \u7b49\u5f851\u5206\u949f\nelif consecutive_errors &lt;= 6:\n    current_delay *= 1.5  # \u7b49\u5f852\u5206\u949f\nelse:\n    current_delay = 20.0  # \u7b49\u5f855\u5206\u949f\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_8","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"guides/data-processing/rate_limit_manager/#_9","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\n\nservice = MarketDataService(api_key=\"your_key\", api_secret=\"your_secret\")\n\n# \u4f7f\u7528\u667a\u80fd\u9891\u7387\u63a7\u5236\u4e0b\u8f7d\u6570\u636e\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-10-01\",\n    end_time=\"2024-10-31\",\n    db_path=\"./data/market.db\",\n    request_delay=2.0,  # \u57fa\u7840\u5ef6\u8fdf2\u79d2\n)\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_10","title":"\u4fdd\u5b88\u6a21\u5f0f\uff08\u63a8\u8350\uff09","text":"<pre><code># \u7528\u4e8e\u5927\u6279\u91cf\u4e0b\u8f7d\u7684\u4fdd\u5b88\u8bbe\u7f6e\nservice.download_universe_data(\n    universe_file=\"./data/universe.json\",\n    db_path=\"./data/market.db\",\n    max_workers=1,        # \u5355\u7ebf\u7a0b\n    request_delay=3.0,    # \u8f83\u957f\u7684\u57fa\u7840\u5ef6\u8fdf\n    max_retries=5,        # \u66f4\u591a\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_11","title":"\u914d\u7f6e\u53c2\u6570","text":""},{"location":"guides/data-processing/rate_limit_manager/#ratelimitmanager","title":"RateLimitManager \u53c2\u6570","text":"\u53c2\u6570 \u9ed8\u8ba4\u503c \u8bf4\u660e <code>base_delay</code> 0.5\u79d2 \u57fa\u7840\u8bf7\u6c42\u95f4\u9694 <code>max_requests_per_minute</code> 1800 \u6bcf\u5206\u949f\u6700\u5927\u8bf7\u6c42\u6570\uff08\u4fdd\u5b88\u4f30\u8ba1\uff09"},{"location":"guides/data-processing/rate_limit_manager/#_12","title":"\u52a8\u6001\u8c03\u6574\u7b56\u7565","text":"\u9519\u8bef\u6b21\u6570 \u5ef6\u8fdf\u500d\u6570 \u7b49\u5f85\u65f6\u95f4 \u8bf4\u660e 1-3\u6b21 2\u500d 60\u79d2 \u8f7b\u5ea6\u9650\u5236 4-6\u6b21 1.5\u500d 120\u79d2 \u4e2d\u5ea6\u9650\u5236 7+\u6b21 \u56fa\u5b9a20\u79d2 300\u79d2 \u4e25\u91cd\u9650\u5236"},{"location":"guides/data-processing/rate_limit_manager/#_13","title":"\u76d1\u63a7\u548c\u8c03\u8bd5","text":""},{"location":"guides/data-processing/rate_limit_manager/#_14","title":"\u65e5\u5fd7\u4fe1\u606f","text":"<pre><code>\u26a0\ufe0f \u63a5\u8fd1\u9891\u7387\u9650\u5236\uff0c\u589e\u52a0\u5ef6\u8fdf: 2.0\u79d2\n\ud83d\udeab \u9891\u7387\u9650\u5236\u9519\u8bef #1\uff0c\u7b49\u5f85 60\u79d2\uff0c\u8c03\u6574\u5ef6\u8fdf\u81f3 4.0\u79d2\n\u2705 \u6062\u590d\u6b63\u5e38\uff0c\u5f53\u524d\u5ef6\u8fdf: 2.0\u79d2\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_15","title":"\u8c03\u8bd5\u6a21\u5f0f","text":"<pre><code>import logging\nlogging.getLogger('cryptoservice').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_16","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"guides/data-processing/rate_limit_manager/#1_1","title":"1. \u9009\u62e9\u5408\u9002\u7684\u57fa\u7840\u5ef6\u8fdf","text":"<ul> <li>\u5c0f\u6279\u91cf\u4e0b\u8f7d: 1-2\u79d2</li> <li>\u4e2d\u7b49\u6279\u91cf: 2-3\u79d2</li> <li>\u5927\u6279\u91cf\u4e0b\u8f7d: 3-5\u79d2</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#2_1","title":"2. \u5e76\u53d1\u63a7\u5236","text":"<ul> <li>\u6d4b\u8bd5\u73af\u5883: max_workers=1</li> <li>\u751f\u4ea7\u73af\u5883: max_workers=1-2\uff08\u8c28\u614e\u4f7f\u7528\uff09</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#3_1","title":"3. \u9519\u8bef\u5904\u7406","text":"<pre><code>try:\n    service.download_universe_data(...)\nexcept KeyboardInterrupt:\n    print(\"\u7528\u6237\u4e2d\u65ad\uff0c\u5df2\u4e0b\u8f7d\u7684\u6570\u636e\u5df2\u4fdd\u5b58\")\nexcept Exception as e:\n    print(f\"\u4e0b\u8f7d\u9519\u8bef: {e}\")\n    print(\"\u53ef\u4ee5\u91cd\u65b0\u8fd0\u884c\u7ee7\u7eed\u4e0b\u8f7d\")\n</code></pre>"},{"location":"guides/data-processing/rate_limit_manager/#_17","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"guides/data-processing/rate_limit_manager/#_18","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li>\u4ecd\u7136\u9047\u5230\u9891\u7387\u9650\u5236</li> <li>\u589e\u52a0 <code>request_delay</code> \u5230 5-10\u79d2</li> <li>\u8bbe\u7f6e <code>max_workers=1</code></li> <li> <p>\u68c0\u67e5\u662f\u5426\u6709\u5176\u4ed6\u7a0b\u5e8f\u5728\u4f7f\u7528\u540c\u4e00 API</p> </li> <li> <p>\u4e0b\u8f7d\u901f\u5ea6\u592a\u6162</p> </li> <li>\u5728\u4f4e\u5cf0\u671f\u4e0b\u8f7d</li> <li>\u9010\u6b65\u51cf\u5c11 <code>request_delay</code></li> <li> <p>\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u7a33\u5b9a\u6027</p> </li> <li> <p>\u6570\u636e\u4e0d\u5b8c\u6574</p> </li> <li>\u589e\u52a0 <code>max_retries</code> \u6570\u91cf</li> <li>\u4f7f\u7528\u66f4\u957f\u7684\u57fa\u7840\u5ef6\u8fdf</li> <li>\u68c0\u67e5 API \u5bc6\u94a5\u6743\u9650</li> </ol>"},{"location":"guides/data-processing/rate_limit_manager/#_19","title":"\u6027\u80fd\u5bf9\u6bd4","text":"\u6a21\u5f0f \u6210\u529f\u7387 \u4e0b\u8f7d\u901f\u5ea6 \u9002\u7528\u573a\u666f \u65e0\u9650\u5236 30-50% \u5f88\u5feb \u4e0d\u63a8\u8350 \u56fa\u5b9a\u5ef6\u8fdf 70-80% \u4e2d\u7b49 \u5c0f\u6279\u91cf \u667a\u80fd\u7ba1\u7406 95%+ \u7a33\u5b9a \u63a8\u8350"},{"location":"guides/data-processing/rate_limit_manager/#_20","title":"\u6280\u672f\u5b9e\u73b0","text":""},{"location":"guides/data-processing/rate_limit_manager/#_21","title":"\u7ebf\u7a0b\u5b89\u5168","text":"<p>\u4f7f\u7528 <code>threading.Lock()</code> \u786e\u4fdd\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u6570\u636e\u4e00\u81f4\u6027\u3002</p>"},{"location":"guides/data-processing/rate_limit_manager/#_22","title":"\u72b6\u6001\u7ba1\u7406","text":"<ul> <li><code>request_count</code>: \u5f53\u524d\u7a97\u53e3\u5185\u8bf7\u6c42\u6570</li> <li><code>consecutive_errors</code>: \u8fde\u7eed\u9519\u8bef\u6b21\u6570</li> <li><code>current_delay</code>: \u5f53\u524d\u5ef6\u8fdf\u65f6\u95f4</li> </ul>"},{"location":"guides/data-processing/rate_limit_manager/#_23","title":"\u81ea\u52a8\u6062\u590d","text":"<p>\u6210\u529f\u8bf7\u6c42\u540e\u81ea\u52a8\u51cf\u5c11\u9519\u8bef\u8ba1\u6570\uff0c\u9010\u6b65\u6062\u590d\u6b63\u5e38\u901f\u5ea6\u3002</p>"},{"location":"guides/data-processing/rate_limit_manager/#_24","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<ul> <li>v1.0: \u57fa\u7840\u9891\u7387\u9650\u5236\u7ba1\u7406</li> <li>v1.1: \u6dfb\u52a0\u667a\u80fd\u9884\u9632\u673a\u5236</li> <li>v1.2: \u4f18\u5316\u9519\u8bef\u6062\u590d\u7b56\u7565</li> <li>v1.3: \u6dfb\u52a0\u591a\u7ebf\u7a0b\u652f\u6301</li> </ul>"},{"location":"guides/data-processing/request_delay_feature/","title":"\u8bf7\u6c42\u95f4\u9694\u529f\u80fd\u8bf4\u660e","text":""},{"location":"guides/data-processing/request_delay_feature/#_2","title":"\u6982\u8ff0","text":"<p>\u4e3a\u4e86\u907f\u514d\u89e6\u53d1 Binance API \u7684\u9891\u7387\u9650\u5236\uff0c\u6211\u4eec\u5728 <code>MarketDataService</code> \u4e2d\u589e\u52a0\u4e86\u8bf7\u6c42\u95f4\u9694\u529f\u80fd\u3002\u8be5\u529f\u80fd\u53ef\u4ee5\u5728\u6bcf\u6b21 API \u8bf7\u6c42\u4e4b\u95f4\u6dfb\u52a0\u53ef\u914d\u7f6e\u7684\u5ef6\u8fdf\u65f6\u95f4\u3002</p>"},{"location":"guides/data-processing/request_delay_feature/#_3","title":"\u529f\u80fd\u7279\u70b9","text":"<ul> <li>\u53ef\u914d\u7f6e\u5ef6\u8fdf: \u652f\u6301\u8bbe\u7f6e\u4efb\u610f\u7684\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\uff08\u79d2\uff09</li> <li>\u7ebf\u7a0b\u5b89\u5168: \u5728\u591a\u7ebf\u7a0b\u5e76\u53d1\u73af\u5883\u4e0b\u6b63\u786e\u5de5\u4f5c</li> <li>\u667a\u80fd\u63a7\u5236: \u53ea\u5728\u9700\u8981\u65f6\u6dfb\u52a0\u5ef6\u8fdf\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7b49\u5f85</li> <li>\u8be6\u7ec6\u65e5\u5fd7: \u8bb0\u5f55\u5ef6\u8fdf\u4fe1\u606f\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7</li> </ul>"},{"location":"guides/data-processing/request_delay_feature/#_4","title":"\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"guides/data-processing/request_delay_feature/#1-get_perpetual_data","title":"1. get_perpetual_data \u65b9\u6cd5","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key=\"your_key\", api_secret=\"your_secret\")\n\n# \u4f7f\u7528\u9ed8\u8ba4\u8bf7\u6c42\u95f4\u9694 (0.5\u79d2)\nreport = service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-12-01\",\n    end_time=\"2024-12-02\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n)\n\n# \u4f7f\u7528\u81ea\u5b9a\u4e49\u8bf7\u6c42\u95f4\u9694 (2\u79d2)\nreport = service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-12-01\",\n    end_time=\"2024-12-02\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    request_delay=2.0,  # 2\u79d2\u95f4\u9694\n)\n\n# \u65e0\u8bf7\u6c42\u95f4\u9694\uff08\u4e0d\u63a8\u8350\uff09\nreport = service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-12-01\",\n    end_time=\"2024-12-02\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    request_delay=0.0,  # \u65e0\u5ef6\u8fdf\n)\n</code></pre>"},{"location":"guides/data-processing/request_delay_feature/#2-download_universe_data","title":"2. download_universe_data \u65b9\u6cd5","text":"<pre><code># \u4e0b\u8f7d Universe \u6570\u636e\u65f6\u8bbe\u7f6e\u8bf7\u6c42\u95f4\u9694\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.m1,\n    max_workers=4,\n    request_delay=1.0,  # 1\u79d2\u95f4\u9694\n)\n</code></pre>"},{"location":"guides/data-processing/request_delay_feature/#_5","title":"\u53c2\u6570\u8bf4\u660e","text":""},{"location":"guides/data-processing/request_delay_feature/#request_delay","title":"request_delay","text":"<ul> <li>\u7c7b\u578b: float</li> <li>\u9ed8\u8ba4\u503c: 0.5 \u79d2</li> <li>\u8bf4\u660e: \u6bcf\u6b21 API \u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09</li> </ul>"},{"location":"guides/data-processing/request_delay_feature/#_6","title":"\u63a8\u8350\u914d\u7f6e","text":""},{"location":"guides/data-processing/request_delay_feature/#_7","title":"\u6839\u636e\u5e76\u53d1\u6570\u9009\u62e9\u5ef6\u8fdf","text":"\u5e76\u53d1\u7ebf\u7a0b\u6570 \u63a8\u8350\u5ef6\u8fdf\u65f6\u95f4 \u8bf4\u660e 1 0.2-0.5\u79d2 \u5355\u7ebf\u7a0b\uff0c\u8f83\u5c0f\u5ef6\u8fdf\u5373\u53ef 2-4 0.5-1.0\u79d2 \u4e2d\u7b49\u5e76\u53d1\uff0c\u5e73\u8861\u901f\u5ea6\u548c\u7a33\u5b9a\u6027 5-10 1.0-2.0\u79d2 \u9ad8\u5e76\u53d1\uff0c\u9700\u8981\u66f4\u957f\u5ef6\u8fdf 10+ 2.0\u79d2\u4ee5\u4e0a \u6781\u9ad8\u5e76\u53d1\uff0c\u8c28\u614e\u4f7f\u7528"},{"location":"guides/data-processing/request_delay_feature/#_8","title":"\u6839\u636e\u6570\u636e\u91cf\u9009\u62e9\u5ef6\u8fdf","text":"<ul> <li>\u5c11\u91cf\u6570\u636e (&lt; 100\u4e2a\u4ea4\u6613\u5bf9): 0.5\u79d2</li> <li>\u4e2d\u91cf\u6570\u636e (100-500\u4e2a\u4ea4\u6613\u5bf9): 1.0\u79d2</li> <li>\u5927\u91cf\u6570\u636e (500+\u4e2a\u4ea4\u6613\u5bf9): 2.0\u79d2\u6216\u66f4\u591a</li> </ul>"},{"location":"guides/data-processing/request_delay_feature/#_9","title":"\u5b9e\u73b0\u539f\u7406","text":"<ol> <li>\u7ebf\u7a0b\u9501\u63a7\u5236: \u4f7f\u7528 <code>threading.Lock()</code> \u786e\u4fdd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u6b63\u786e\u63a7\u5236\u8bf7\u6c42\u95f4\u9694</li> <li>\u65f6\u95f4\u5dee\u8ba1\u7b97: \u8bb0\u5f55\u4e0a\u6b21\u8bf7\u6c42\u65f6\u95f4\uff0c\u8ba1\u7b97\u4e0e\u5f53\u524d\u65f6\u95f4\u7684\u5dee\u503c</li> <li>\u667a\u80fd\u5ef6\u8fdf: \u53ea\u5728\u65f6\u95f4\u5dee\u5c0f\u4e8e\u8bbe\u5b9a\u95f4\u9694\u65f6\u624d\u6267\u884c\u5ef6\u8fdf</li> <li>\u7cbe\u786e\u63a7\u5236: \u4f7f\u7528 <code>time.sleep()</code> \u8fdb\u884c\u7cbe\u786e\u7684\u65f6\u95f4\u63a7\u5236</li> </ol>"},{"location":"guides/data-processing/request_delay_feature/#_10","title":"\u6838\u5fc3\u4ee3\u7801\u903b\u8f91","text":"<pre><code># \u7528\u4e8e\u63a7\u5236\u8bf7\u6c42\u95f4\u9694\u7684\u9501\u548c\u8ba1\u65f6\u5668\nrequest_lock = Lock()\nlast_request_time = [0.0]\n\ndef process_symbol(symbol: str):\n    # \u63a7\u5236\u8bf7\u6c42\u95f4\u9694\n    with request_lock:\n        current_time = time.time()\n        time_since_last = current_time - last_request_time[0]\n        if time_since_last &lt; request_delay:\n            sleep_time = request_delay - time_since_last\n            logger.debug(f\"\u7b49\u5f85 {sleep_time:.2f}\u79d2 - {symbol}\")\n            time.sleep(sleep_time)\n        last_request_time[0] = time.time()\n\n    # \u6267\u884c API \u8bf7\u6c42\n    data = self._fetch_symbol_data(...)\n</code></pre>"},{"location":"guides/data-processing/request_delay_feature/#_11","title":"\u65e5\u5fd7\u8f93\u51fa","text":"<p>\u542f\u7528\u8bf7\u6c42\u95f4\u9694\u529f\u80fd\u540e\uff0c\u60a8\u5c06\u770b\u5230\u7c7b\u4f3c\u7684\u65e5\u5fd7\u8f93\u51fa\uff1a</p> <pre><code>\ud83d\ude80 \u5f00\u59cb\u4e0b\u8f7d 3 \u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\n\ud83d\udcc5 \u65f6\u95f4\u8303\u56f4: 2024-12-01 \u5230 2024-12-02\n\u2699\ufe0f \u91cd\u8bd5\u914d\u7f6e: \u6700\u59273\u6b21, \u57fa\u7840\u5ef6\u8fdf1.0\u79d2\n\u23f1\ufe0f \u8bf7\u6c42\u95f4\u9694: 1.0\u79d2\n\u7b49\u5f85 0.83\u79d2 - ETHUSDT\n\u7b49\u5f85 0.91\u79d2 - BNBUSDT\n\u2705 BTCUSDT: 24 \u6761\u8bb0\u5f55\n\u2705 ETHUSDT: 24 \u6761\u8bb0\u5f55\n\u2705 BNBUSDT: 24 \u6761\u8bb0\u5f55\n</code></pre>"},{"location":"guides/data-processing/request_delay_feature/#_12","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u7f51\u7edc\u73af\u5883: \u7f51\u7edc\u5ef6\u8fdf\u8f83\u9ad8\u65f6\u53ef\u4ee5\u9002\u5f53\u51cf\u5c11\u8bf7\u6c42\u95f4\u9694</li> <li>API\u9650\u5236: \u4e0d\u540c\u7684API\u7aef\u70b9\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u9891\u7387\u9650\u5236</li> <li>\u6027\u80fd\u5e73\u8861: \u5ef6\u8fdf\u65f6\u95f4\u8d8a\u957f\u8d8a\u5b89\u5168\uff0c\u4f46\u4e0b\u8f7d\u901f\u5ea6\u4f1a\u76f8\u5e94\u53d8\u6162</li> <li>\u76d1\u63a7\u65e5\u5fd7: \u6ce8\u610f\u89c2\u5bdf\u662f\u5426\u4ecd\u6709\u9891\u7387\u9650\u5236\u9519\u8bef</li> <li>\u9519\u8bef\u91cd\u8bd5: \u5373\u4f7f\u8bbe\u7f6e\u4e86\u8bf7\u6c42\u95f4\u9694\uff0c\u4ecd\u7136\u4fdd\u7559\u4e86\u9519\u8bef\u91cd\u8bd5\u673a\u5236</li> </ol>"},{"location":"guides/data-processing/request_delay_feature/#_13","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"guides/data-processing/request_delay_feature/#_14","title":"\u4ecd\u7136\u51fa\u73b0\u9891\u7387\u9650\u5236\u9519\u8bef","text":"<ol> <li>\u589e\u52a0 <code>request_delay</code> \u503c</li> <li>\u51cf\u5c11 <code>max_workers</code> \u5e76\u53d1\u6570</li> <li>\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u7a33\u5b9a\u6027</li> </ol>"},{"location":"guides/data-processing/request_delay_feature/#_15","title":"\u4e0b\u8f7d\u901f\u5ea6\u592a\u6162","text":"<ol> <li>\u9002\u5f53\u51cf\u5c11 <code>request_delay</code> \u503c</li> <li>\u589e\u52a0 <code>max_workers</code> \u5e76\u53d1\u6570\uff08\u8c28\u614e\uff09</li> <li>\u5728\u7a33\u5b9a\u7684\u7f51\u7edc\u73af\u5883\u4e0b\u8fd0\u884c</li> </ol>"},{"location":"guides/data-processing/request_delay_feature/#_16","title":"\u65e5\u5fd7\u8fc7\u591a","text":"<ol> <li>\u8c03\u6574\u65e5\u5fd7\u7ea7\u522b\uff1a<code>logging.getLogger().setLevel(logging.INFO)</code></li> <li>\u6216\u8005\u7981\u7528\u8c03\u8bd5\u65e5\u5fd7\uff1a<code>logger.debug</code> \u8f93\u51fa</li> </ol>"},{"location":"guides/data-processing/request_delay_feature/#_17","title":"\u793a\u4f8b\u811a\u672c","text":"<p>\u5b8c\u6574\u7684\u793a\u4f8b\u811a\u672c\u8bf7\u53c2\u8003 <code>example_request_delay.py</code>\uff0c\u8be5\u811a\u672c\u6f14\u793a\u4e86\u4e0d\u540c\u8bf7\u6c42\u95f4\u9694\u914d\u7f6e\u7684\u6548\u679c\u3002</p>"},{"location":"guides/data-processing/storage/","title":"\u6570\u636e\u5b58\u50a8","text":"<p>\u672c\u6307\u5357\u4ecb\u7ecdCryptoService\u4e2d\u7684\u6570\u636e\u5b58\u50a8\u67b6\u6784\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p>"},{"location":"guides/data-processing/storage/#_2","title":"\ud83d\udcca \u5b58\u50a8\u67b6\u6784","text":"<p>CryptoService\u91c7\u7528SQLite\u6570\u636e\u5e93\u4f5c\u4e3a\u4e3b\u8981\u5b58\u50a8\u5f15\u64ce\uff0c\u63d0\u4f9b\u9ad8\u6548\u7684\u6570\u636e\u7ba1\u7406\u548c\u67e5\u8be2\u529f\u80fd\u3002</p>"},{"location":"guides/data-processing/storage/#_3","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":"<pre><code>-- \u5e02\u573a\u6570\u636e\u8868\u7ed3\u6784\nCREATE TABLE market_data (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    symbol TEXT NOT NULL,\n    timestamp INTEGER NOT NULL,\n    open_price REAL,\n    high_price REAL,\n    low_price REAL,\n    close_price REAL,\n    volume REAL,\n    quote_volume REAL,\n    trades_count INTEGER,\n    taker_buy_volume REAL,\n    taker_buy_quote_volume REAL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"guides/data-processing/storage/#_4","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"guides/data-processing/storage/#_5","title":"\u521d\u59cb\u5316\u6570\u636e\u5e93","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521b\u5efa\u6570\u636e\u5e93\u5b9e\u4f8b\ndb = MarketDB(\"./data/market.db\")\n\n# \u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u521b\u5efa\u8868\u7ed3\u6784\nprint(\"\u6570\u636e\u5e93\u521d\u59cb\u5316\u5b8c\u6210\")\n</code></pre>"},{"location":"guides/data-processing/storage/#_6","title":"\u6570\u636e\u5b58\u50a8","text":"<pre><code>from cryptoservice.services import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key=\"...\", api_secret=\"...\")\n\n# \u4e0b\u8f7d\u5e76\u5b58\u50a8\u6570\u636e\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1\n)\n</code></pre>"},{"location":"guides/data-processing/storage/#_7","title":"\ud83d\udcbe \u5b58\u50a8\u9009\u9879","text":""},{"location":"guides/data-processing/storage/#1","title":"1. \u6570\u636e\u5e93\u5b58\u50a8","text":"<ul> <li>\u4f18\u52bf: \u7ed3\u6784\u5316\u67e5\u8be2\u3001\u7d22\u5f15\u4f18\u5316\u3001ACID\u7279\u6027</li> <li>\u9002\u7528: \u751f\u4ea7\u73af\u5883\u3001\u590d\u6742\u67e5\u8be2\u3001\u6570\u636e\u5b8c\u6574\u6027\u8981\u6c42\u9ad8</li> </ul>"},{"location":"guides/data-processing/storage/#2","title":"2. \u6587\u4ef6\u5b58\u50a8","text":"<ul> <li>\u4f18\u52bf: \u4fbf\u4e8e\u8fc1\u79fb\u3001\u517c\u5bb9\u6027\u597d\u3001\u5904\u7406\u7b80\u5355</li> <li>\u9002\u7528: \u6570\u636e\u4ea4\u6362\u3001\u5907\u4efd\u3001\u6279\u5904\u7406</li> </ul>"},{"location":"guides/data-processing/storage/#3","title":"3. \u5185\u5b58\u5b58\u50a8","text":"<ul> <li>\u4f18\u52bf: \u8bbf\u95ee\u901f\u5ea6\u5feb\u3001\u8ba1\u7b97\u6548\u7387\u9ad8</li> <li>\u9002\u7528: \u5b9e\u65f6\u5206\u6790\u3001\u4e34\u65f6\u8ba1\u7b97\u3001\u6027\u80fd\u654f\u611f\u573a\u666f</li> </ul>"},{"location":"guides/data-processing/storage/#_8","title":"\ud83d\udd27 \u914d\u7f6e\u4f18\u5316","text":""},{"location":"guides/data-processing/storage/#_9","title":"\u6570\u636e\u5e93\u4f18\u5316","text":"<pre><code># \u6279\u91cf\u63d2\u5165\u4f18\u5316\ndb.execute_batch_insert(data_list, batch_size=1000)\n\n# \u7d22\u5f15\u521b\u5efa\ndb.create_index(\"idx_symbol_timestamp\", [\"symbol\", \"timestamp\"])\n\n# \u67e5\u8be2\u4f18\u5316\ndata = db.read_data_optimized(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    use_index=True\n)\n</code></pre>"},{"location":"guides/data-processing/storage/#_10","title":"\ud83d\udcc8 \u6700\u4f73\u5b9e\u8df5","text":""},{"location":"guides/data-processing/storage/#1_1","title":"1. \u6570\u636e\u5206\u533a","text":"<p>\u6309\u65f6\u95f4\u6216\u4ea4\u6613\u5bf9\u5206\u533a\u5b58\u50a8\uff0c\u63d0\u9ad8\u67e5\u8be2\u6548\u7387\uff1a</p> <pre><code># \u6309\u6708\u5206\u533a\ndb.create_partition_table(\"market_data_202401\")\n\n# \u6309\u4ea4\u6613\u5bf9\u5206\u533a\ndb.create_symbol_partition(\"BTCUSDT\")\n</code></pre>"},{"location":"guides/data-processing/storage/#2_1","title":"2. \u5b9a\u671f\u7ef4\u62a4","text":"<pre><code># \u6570\u636e\u6e05\u7406\ndb.cleanup_old_data(days=90)\n\n# \u7d22\u5f15\u91cd\u5efa\ndb.rebuild_indexes()\n\n# \u6570\u636e\u5e93\u538b\u7f29\ndb.vacuum()\n</code></pre>"},{"location":"guides/data-processing/storage/#3_1","title":"3. \u5907\u4efd\u7b56\u7565","text":"<pre><code># \u5168\u91cf\u5907\u4efd\ndb.backup_full(\"./backups/full_backup.db\")\n\n# \u589e\u91cf\u5907\u4efd\ndb.backup_incremental(\"./backups/incremental/\")\n</code></pre>"},{"location":"guides/data-processing/storage/#_11","title":"\ud83d\udee0\ufe0f \u6545\u969c\u6392\u9664","text":""},{"location":"guides/data-processing/storage/#_12","title":"\u5e38\u89c1\u95ee\u9898","text":"<ol> <li> <p>\u6570\u636e\u5e93\u9501\u5b9a <pre><code># \u8bbe\u7f6e\u8d85\u65f6\ndb = MarketDB(\"./data/market.db\", timeout=30)\n</code></pre></p> </li> <li> <p>\u5b58\u50a8\u7a7a\u95f4\u4e0d\u8db3 <pre><code># \u68c0\u67e5\u7a7a\u95f4\u4f7f\u7528\nusage = db.get_storage_usage()\nprint(f\"\u6570\u636e\u5e93\u5927\u5c0f: {usage['size_mb']} MB\")\n</code></pre></p> </li> <li> <p>\u67e5\u8be2\u6027\u80fd\u6162 <pre><code># \u5206\u6790\u67e5\u8be2\u8ba1\u5212\nplan = db.explain_query(\"SELECT * FROM market_data WHERE symbol = 'BTCUSDT'\")\n</code></pre></p> </li> </ol>"},{"location":"guides/data-processing/storage/#_13","title":"\ud83d\udcda \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u6570\u636e\u5e93\u64cd\u4f5c - \u8be6\u7ec6\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u6307\u5357</li> <li>\u6570\u636e\u53ef\u89c6\u5316 - \u6570\u636e\u5c55\u793a\u548c\u5206\u6790</li> <li>API\u53c2\u8003 - \u5b58\u50a8API\u8be6\u7ec6\u8bf4\u660e</li> </ul> <p>\ud83d\udca1 \u63d0\u793a: \u5efa\u8bae\u6839\u636e\u6570\u636e\u91cf\u548c\u4f7f\u7528\u573a\u666f\u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u7b56\u7565\uff0c\u5e76\u5b9a\u671f\u8fdb\u884c\u6570\u636e\u5e93\u7ef4\u62a4\u3002</p>"},{"location":"guides/data-processing/visualization/","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd CryptoService \u63d0\u4f9b\u7684\u6570\u636e\u53ef\u89c6\u5316\u529f\u80fd\u3002</p>"},{"location":"guides/data-processing/visualization/#_2","title":"\u53ef\u89c6\u5316\u5de5\u5177\u6982\u8ff0","text":"<p>CryptoService \u4f7f\u7528 Rich \u5e93\u63d0\u4f9b\u4e30\u5bcc\u7684\u7ec8\u7aef\u53ef\u89c6\u5316\u529f\u80fd\uff1a</p> <ol> <li>\u8868\u683c\u663e\u793a</li> <li>\u683c\u5f0f\u5316\u6570\u636e\u5c55\u793a</li> <li>\u989c\u8272\u9ad8\u4eae</li> <li> <p>\u81ea\u5b9a\u4e49\u6837\u5f0f</p> </li> <li> <p>\u6570\u636e\u683c\u5f0f\u5316</p> </li> <li>\u6570\u503c\u683c\u5f0f\u5316</li> <li>\u65f6\u95f4\u683c\u5f0f\u5316</li> <li> <p>\u81ea\u52a8\u5bf9\u9f50</p> </li> <li> <p>\u4ea4\u4e92\u529f\u80fd</p> </li> <li>\u8fdb\u5ea6\u663e\u793a</li> <li>\u9519\u8bef\u63d0\u793a</li> <li>\u72b6\u6001\u66f4\u65b0</li> </ol>"},{"location":"guides/data-processing/visualization/#_3","title":"\u6570\u636e\u5e93\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#_4","title":"\u57fa\u672c\u8868\u683c\u663e\u793a","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#_5","title":"\u81ea\u5b9a\u4e49\u663e\u793a","text":"<pre><code># \u8bfb\u53d6\u6570\u636e\u540e\u81ea\u5b9a\u4e49\u663e\u793a\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n\n# \u521b\u5efa\u8868\u683c\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\ntable = Table(\n    title=\"Market Data Visualization\",\n    show_header=True,\n    header_style=\"bold magenta\"\n)\n\n# \u6dfb\u52a0\u5217\ntable.add_column(\"Timestamp\", style=\"cyan\")\ntable.add_column(\"Close Price\", justify=\"right\")\ntable.add_column(\"Volume\", justify=\"right\")\n\n# \u6dfb\u52a0\u6570\u636e\nfor idx, row in data.head(10).iterrows():\n    timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n    close_price = f\"{row['close_price']:.2f}\"\n    volume = f\"{row['volume']:.2f}\"\n    table.add_row(timestamp, close_price, volume)\n\n# \u663e\u793a\u8868\u683c\nconsole.print(table)\n</code></pre>"},{"location":"guides/data-processing/visualization/#kdtv","title":"KDTV\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#kdtv_1","title":"\u53ef\u89c6\u5316KDTV\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u53ef\u89c6\u5316KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#npy","title":"\u53ef\u89c6\u5316NPY\u6587\u4ef6","text":"<pre><code># \u53ef\u89c6\u5316\u5355\u4e2aNPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"09:00\", \"10:00\", \"11:00\"],\n    index=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#_6","title":"\u8fdb\u5ea6\u663e\u793a","text":""},{"location":"guides/data-processing/visualization/#_7","title":"\u6570\u636e\u5904\u7406\u8fdb\u5ea6","text":"<pre><code>from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn\n\n# \u521b\u5efa\u8fdb\u5ea6\u663e\u793a\u5668\nprogress = Progress(\n    SpinnerColumn(),\n    TextColumn(\"[progress.description]{task.description}\"),\n    BarColumn(),\n    TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n    TimeElapsedColumn(),\n)\n\n# \u4f7f\u7528\u8fdb\u5ea6\u663e\u793a\u5668\nwith progress:\n    task = progress.add_task(\"[cyan]\u5904\u7406\u6570\u636e...\", total=100)\n\n    # \u6a21\u62df\u6570\u636e\u5904\u7406\n    for i in range(100):\n        progress.update(task, advance=1)\n        # \u5904\u7406\u6570\u636e\n</code></pre>"},{"location":"guides/data-processing/visualization/#_8","title":"\u9519\u8bef\u548c\u8b66\u544a\u663e\u793a","text":""},{"location":"guides/data-processing/visualization/#_9","title":"\u683c\u5f0f\u5316\u9519\u8bef\u4fe1\u606f","text":"<pre><code>from rich.console import Console\nfrom rich.panel import Panel\n\nconsole = Console()\n\ndef display_error(message: str):\n    \"\"\"\u663e\u793a\u9519\u8bef\u4fe1\u606f\"\"\"\n    console.print(Panel(\n        f\"[red]\u9519\u8bef: {message}[/red]\",\n        title=\"\u9519\u8bef\u4fe1\u606f\",\n        border_style=\"red\"\n    ))\n\ndef display_warning(message: str):\n    \"\"\"\u663e\u793a\u8b66\u544a\u4fe1\u606f\"\"\"\n    console.print(Panel(\n        f\"[yellow]\u8b66\u544a: {message}[/yellow]\",\n        title=\"\u8b66\u544a\u4fe1\u606f\",\n        border_style=\"yellow\"\n    ))\n</code></pre>"},{"location":"guides/data-processing/visualization/#_10","title":"\u6570\u636e\u9a8c\u8bc1\u663e\u793a","text":"<pre><code>def validate_and_display(data):\n    \"\"\"\u9a8c\u8bc1\u6570\u636e\u5e76\u663e\u793a\u7ed3\u679c\"\"\"\n    console = Console()\n\n    # \u68c0\u67e5\u7a7a\u503c\n    null_count = data.isnull().sum()\n    if null_count.any():\n        console.print(\"[yellow]\u53d1\u73b0\u7a7a\u503c:[/yellow]\")\n        for col, count in null_count[null_count &gt; 0].items():\n            console.print(f\"  - {col}: {count}\")\n\n    # \u68c0\u67e5\u5f02\u5e38\u503c\n    if (data[\"close_price\"] &lt;= 0).any():\n        console.print(\"[red]\u53d1\u73b0\u65e0\u6548\u4ef7\u683c[/red]\")\n\n    if (data[\"volume\"] &lt; 0).any():\n        console.print(\"[red]\u53d1\u73b0\u8d1f\u6210\u4ea4\u91cf[/red]\")\n</code></pre>"},{"location":"guides/data-processing/visualization/#_11","title":"\u81ea\u5b9a\u4e49\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#_12","title":"\u521b\u5efa\u81ea\u5b9a\u4e49\u8868\u683c","text":"<pre><code>def create_market_table(data, title=\"Market Data\"):\n    \"\"\"\u521b\u5efa\u81ea\u5b9a\u4e49\u5e02\u573a\u6570\u636e\u8868\u683c\"\"\"\n    table = Table(\n        title=title,\n        show_header=True,\n        header_style=\"bold magenta\",\n        title_style=\"bold cyan\"\n    )\n\n    # \u6dfb\u52a0\u5217\n    table.add_column(\"Time\", style=\"cyan\")\n    table.add_column(\"Symbol\", style=\"green\")\n    table.add_column(\"Price\", justify=\"right\")\n    table.add_column(\"Change\", justify=\"right\")\n    table.add_column(\"Volume\", justify=\"right\")\n\n    # \u6dfb\u52a0\u6570\u636e\n    for row in data:\n        change_color = \"red\" if row[\"change\"] &lt; 0 else \"green\"\n        table.add_row(\n            row[\"time\"],\n            row[\"symbol\"],\n            f\"{row['price']:.2f}\",\n            f\"[{change_color}]{row['change']:+.2f}%[/{change_color}]\",\n            f\"{row['volume']:,.0f}\"\n        )\n\n    return table\n</code></pre>"},{"location":"guides/data-processing/visualization/#_13","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u683c\u5f0f\u5316</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6570\u503c\u7cbe\u5ea6</li> <li>\u683c\u5f0f\u5316\u65f6\u95f4\u6233</li> <li> <p>\u6dfb\u52a0\u5355\u4f4d\u6807\u8bc6</p> </li> <li> <p>\u89c6\u89c9\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u989c\u8272\u7a81\u51fa\u91cd\u8981\u4fe1\u606f</li> <li>\u4fdd\u6301\u4e00\u81f4\u7684\u6837\u5f0f</li> <li> <p>\u9002\u5f53\u4f7f\u7528\u5206\u9694\u7b26</p> </li> <li> <p>\u6027\u80fd\u8003\u8651</p> </li> <li>\u9650\u5236\u663e\u793a\u884c\u6570</li> <li>\u907f\u514d\u8fc7\u591a\u7684\u683c\u5f0f\u5316</li> <li> <p>\u4f18\u5316\u66f4\u65b0\u9891\u7387</p> </li> <li> <p>\u7528\u6237\u4f53\u9a8c</p> </li> <li>\u63d0\u4f9b\u6e05\u6670\u7684\u6807\u9898</li> <li>\u6dfb\u52a0\u9002\u5f53\u7684\u8bf4\u660e</li> <li>\u4fdd\u6301\u5e03\u5c40\u6574\u6d01</li> </ol>"},{"location":"guides/data-processing/visualization/#_14","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u66f4\u591a\u529f\u80fd</li> <li>\u63a2\u7d22KDTV\u683c\u5f0f\u7684\u6570\u636e\u7ed3\u6784</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/market-data/historical/","title":"\u5386\u53f2\u6570\u636e","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u548c\u5904\u7406\u5386\u53f2\u5e02\u573a\u6570\u636e\u3002</p>"},{"location":"guides/market-data/historical/#k","title":"\u83b7\u53d6K\u7ebf\u6570\u636e","text":""},{"location":"guides/market-data/historical/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq, HistoricalKlinesType\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6BTC/USDT\u76841\u5c0f\u65f6K\u7ebf\u6570\u636e\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\n# \u663e\u793a\u6570\u636e\nfor kline in klines[:5]:\n    print(f\"\u5f00\u76d8\u65f6\u95f4: {kline.open_time}\")\n    print(f\"\u5f00\u76d8\u4ef7: {kline.open_price}\")\n    print(f\"\u6700\u9ad8\u4ef7: {kline.high_price}\")\n    print(f\"\u6700\u4f4e\u4ef7: {kline.low_price}\")\n    print(f\"\u6536\u76d8\u4ef7: {kline.close_price}\")\n    print(f\"\u6210\u4ea4\u91cf: {kline.volume}\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/market-data/historical/#_3","title":"\u652f\u6301\u7684\u65f6\u95f4\u9891\u7387","text":"<pre><code>from cryptoservice.models import Freq\n\n# \u5206\u949f\u7ea7\u522b\nFreq.m1  # 1\u5206\u949f\nFreq.m3  # 3\u5206\u949f\nFreq.m5  # 5\u5206\u949f\nFreq.m15 # 15\u5206\u949f\nFreq.m30 # 30\u5206\u949f\n\n# \u5c0f\u65f6\u7ea7\u522b\nFreq.h1  # 1\u5c0f\u65f6\nFreq.h2  # 2\u5c0f\u65f6\nFreq.h4  # 4\u5c0f\u65f6\nFreq.h6  # 6\u5c0f\u65f6\nFreq.h8  # 8\u5c0f\u65f6\nFreq.h12 # 12\u5c0f\u65f6\n\n# \u65e5\u7ea7\u522b\nFreq.d1  # 1\u5929\n</code></pre>"},{"location":"guides/market-data/historical/#_4","title":"\u5e02\u573a\u7c7b\u578b\u9009\u62e9","text":"<pre><code>from cryptoservice.models import HistoricalKlinesType\n\n# \u73b0\u8d27\u5e02\u573a\u6570\u636e\nspot_data = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\n# \u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\nfutures_data = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.FUTURES\n)\n\n# \u5e01\u672c\u4f4d\u5408\u7ea6\u5e02\u573a\u6570\u636e\ncoin_futures_data = service.get_historical_klines(\n    symbol=\"BTCUSD\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.FUTURES_COIN\n)\n</code></pre>"},{"location":"guides/market-data/historical/#_5","title":"\u6570\u636e\u7ed3\u6784\u8bf4\u660e","text":""},{"location":"guides/market-data/historical/#klinemarketticker","title":"KlineMarketTicker \u5c5e\u6027","text":"<p>\u6bcf\u4e2aK\u7ebf\u6570\u636e\u70b9\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>open_time</code>: \u5f00\u76d8\u65f6\u95f4</li> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>high_price</code>: \u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: \u6700\u4f4e\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>volume</code>: \u6210\u4ea4\u91cf</li> <li><code>close_time</code>: \u6536\u76d8\u65f6\u95f4</li> <li><code>quote_volume</code>: \u6210\u4ea4\u989d</li> <li><code>trades_count</code>: \u6210\u4ea4\u7b14\u6570</li> <li><code>taker_buy_volume</code>: \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u91cf</li> <li><code>taker_buy_quote_volume</code>: \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u989d</li> </ul>"},{"location":"guides/market-data/historical/#_6","title":"\u6570\u636e\u5904\u7406","text":""},{"location":"guides/market-data/historical/#_7","title":"\u6570\u636e\u8f6c\u6362","text":"<pre><code># \u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\nkline_dict = kline.to_dict()\n\n# \u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5\nprint(f\"\u6210\u4ea4\u91cf: {kline.get('volume')}\")\n</code></pre>"},{"location":"guides/market-data/historical/#_8","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\nsymbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\nall_data = {}\n\nfor symbol in symbols:\n    data = service.get_historical_klines(\n        symbol=symbol,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        interval=Freq.h1\n    )\n    all_data[symbol] = data\n</code></pre>"},{"location":"guides/market-data/historical/#_9","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"guides/market-data/historical/#_10","title":"\u5904\u7406\u5e38\u89c1\u9519\u8bef","text":"<pre><code>from cryptoservice.exceptions import MarketDataFetchError\n\ntry:\n    data = service.get_historical_klines(\n        symbol=\"BTCUSDT\",\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        interval=Freq.h1\n    )\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"guides/market-data/historical/#_11","title":"\u6570\u636e\u9a8c\u8bc1","text":"<pre><code>def validate_kline_data(kline):\n    \"\"\"\u9a8c\u8bc1K\u7ebf\u6570\u636e\u7684\u6709\u6548\u6027\"\"\"\n    if float(kline.high_price) &lt; float(kline.low_price):\n        raise ValueError(\"\u6700\u9ad8\u4ef7\u4e0d\u80fd\u4f4e\u4e8e\u6700\u4f4e\u4ef7\")\n    if float(kline.open_price) &lt; 0 or float(kline.close_price) &lt; 0:\n        raise ValueError(\"\u4ef7\u683c\u4e0d\u80fd\u4e3a\u8d1f\")\n    if float(kline.volume) &lt; 0:\n        raise ValueError(\"\u6210\u4ea4\u91cf\u4e0d\u80fd\u4e3a\u8d1f\")\n</code></pre>"},{"location":"guides/market-data/historical/#_12","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u65f6\u95f4\u8303\u56f4\u63a7\u5236</li> <li>\u5408\u7406\u8bbe\u7f6e\u65f6\u95f4\u8303\u56f4\uff0c\u907f\u514d\u8bf7\u6c42\u8fc7\u5927\u6570\u636e\u91cf</li> <li> <p>\u4f7f\u7528\u5206\u6279\u8bf7\u6c42\u5904\u7406\u957f\u65f6\u95f4\u8303\u56f4\u7684\u6570\u636e</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u5b9e\u73b0\u6570\u636e\u5b8c\u6574\u6027\u68c0\u67e5</li> <li> <p>\u9a8c\u8bc1\u4ef7\u683c\u548c\u6210\u4ea4\u91cf\u7684\u5408\u7406\u6027</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u5b9e\u73b0\u9002\u5f53\u7684\u91cd\u8bd5\u673a\u5236</li> <li> <p>\u8bb0\u5f55\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u65f6\u95f4\u9891\u7387</li> <li>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58\u673a\u5236</li> </ol>"},{"location":"guides/market-data/historical/#_13","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u7684\u7279\u6b8a\u5904\u7406</li> <li>\u63a2\u7d22\u6570\u636e\u5b58\u50a8\u65b9\u6848</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u529f\u80fd</li> </ul>"},{"location":"guides/market-data/perpetual/","title":"\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u548c\u5904\u7406\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u3002</p>"},{"location":"guides/market-data/perpetual/#_2","title":"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":""},{"location":"guides/market-data/perpetual/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_4","title":"\u6570\u636e\u7ed3\u6784","text":"<p><code>PerpetualMarketTicker</code> \u7c7b\u4f7f\u7528 <code>__slots__</code> \u4f18\u5316\u5185\u5b58\u4f7f\u7528\uff0c\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>open_time</code>: K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</li> <li><code>raw_data</code>: \u539f\u59cbK\u7ebf\u6570\u636e\u5217\u8868</li> </ul>"},{"location":"guides/market-data/perpetual/#_5","title":"\u539f\u59cb\u6570\u636e\u7d22\u5f15","text":"<p>\u4f7f\u7528 <code>KlineIndex</code> \u7c7b\u8bbf\u95ee\u539f\u59cb\u6570\u636e\uff1a</p> <pre><code>from cryptoservice.models import KlineIndex\n\n# \u8bbf\u95ee\u539f\u59cb\u6570\u636e\u793a\u4f8b\nticker = perpetual_data[0]\nopen_price = ticker.raw_data[KlineIndex.OPEN]\nhigh_price = ticker.raw_data[KlineIndex.HIGH]\nlow_price = ticker.raw_data[KlineIndex.LOW]\nclose_price = ticker.raw_data[KlineIndex.CLOSE]\nvolume = ticker.raw_data[KlineIndex.VOLUME]\n</code></pre> <p>\u5b8c\u6574\u7684\u7d22\u5f15\u5b9a\u4e49\uff1a</p> <pre><code>class KlineIndex:\n    OPEN_TIME = 0            # \u5f00\u76d8\u65f6\u95f4\n    OPEN = 1                 # \u5f00\u76d8\u4ef7\n    HIGH = 2                 # \u6700\u9ad8\u4ef7\n    LOW = 3                  # \u6700\u4f4e\u4ef7\n    CLOSE = 4                # \u6536\u76d8\u4ef7\n    VOLUME = 5               # \u6210\u4ea4\u91cf\n    CLOSE_TIME = 6           # \u6536\u76d8\u65f6\u95f4\n    QUOTE_VOLUME = 7         # \u6210\u4ea4\u989d\n    TRADES_COUNT = 8         # \u6210\u4ea4\u7b14\u6570\n    TAKER_BUY_VOLUME = 9     # \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u91cf\n    TAKER_BUY_QUOTE_VOLUME = 10  # \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u989d\n    IGNORE = 11              # \u5ffd\u7565\n</code></pre>"},{"location":"guides/market-data/perpetual/#_6","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"guides/market-data/perpetual/#sqlite","title":"SQLite\u5b58\u50a8","text":"<p>\u6570\u636e\u4f1a\u81ea\u52a8\u5b58\u50a8\u5230SQLite\u6570\u636e\u5e93\u4e2d\uff1a</p> <pre><code>from cryptoservice.data import MarketDB\n\n# \u8bfb\u53d6\u5b58\u50a8\u7684\u6570\u636e\ndb = MarketDB(\"./data/market.db\")\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n\nprint(data.head())\n</code></pre>"},{"location":"guides/market-data/perpetual/#kdtv","title":"KDTV\u683c\u5f0f\u5b58\u50a8","text":"<p>\u6570\u636e\u540c\u65f6\u4f1a\u4ee5KDTV\u683c\u5f0f\u5b58\u50a8\uff1a</p> <pre><code>from cryptoservice.data import StorageUtils\n\n# \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n\nprint(kdtv_data.head())\n</code></pre>"},{"location":"guides/market-data/perpetual/#_7","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"guides/market-data/perpetual/#_8","title":"\u5e76\u884c\u5904\u7406","text":"<pre><code># \u914d\u7f6e\u5e76\u884c\u5904\u7406\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_workers=4  # \u5e76\u884c\u7ebf\u7a0b\u6570\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_9","title":"\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5","text":"<pre><code># \u914d\u7f6e\u91cd\u8bd5\u673a\u5236\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_10","title":"\u6570\u636e\u5bfc\u51fa","text":"<pre><code># \u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u5176\u4ed6\u9891\u7387\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1  # \u964d\u91c7\u6837\u52301\u5c0f\u65f6\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_11","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u83b7\u53d6</li> <li>\u5408\u7406\u8bbe\u7f6e\u65f6\u95f4\u8303\u56f4</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u5e76\u884c\u5ea6</li> <li> <p>\u5b9e\u73b0\u9519\u8bef\u91cd\u8bd5\u673a\u5236</p> </li> <li> <p>\u6570\u636e\u5b58\u50a8</p> </li> <li>\u5b9a\u671f\u5907\u4efd\u6570\u636e\u5e93</li> <li>\u6e05\u7406\u8fc7\u671f\u6570\u636e</li> <li> <p>\u4f7f\u7528\u9002\u5f53\u7684\u5b58\u50a8\u683c\u5f0f</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\u5e76\u884c\u5ea6</li> <li>\u4f7f\u7528\u5408\u9002\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li> <p>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u8bb0\u5f55\u8be6\u7ec6\u7684\u9519\u8bef\u65e5\u5fd7</li> <li>\u5b9e\u73b0\u81ea\u52a8\u91cd\u8bd5\u673a\u5236</li> <li>\u76d1\u63a7\u6570\u636e\u5b8c\u6574\u6027</li> </ol>"},{"location":"guides/market-data/perpetual/#_12","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3Universe\u7ba1\u7406\u7684\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u529f\u80fd</li> <li>\u4e86\u89e3\u6570\u636e\u5b58\u50a8\u7684\u8be6\u7ec6\u9009\u9879</li> <li>\u63a2\u7d22\u6570\u636e\u5904\u7406\u529f\u80fd</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u65b9\u6848</li> </ul>"},{"location":"guides/market-data/realtime/","title":"\u5b9e\u65f6\u884c\u60c5","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u5b9e\u65f6\u5e02\u573a\u884c\u60c5\u6570\u636e\u3002</p>"},{"location":"guides/market-data/realtime/#_2","title":"\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5","text":""},{"location":"guides/market-data/realtime/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6BTC/USDT\u7684\u5b9e\u65f6\u884c\u60c5\nbtc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"Symbol: {btc_ticker.symbol}\")\nprint(f\"Last Price: {btc_ticker.last_price}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_4","title":"\u8fd4\u56de\u6570\u636e\u8bf4\u660e","text":"<p><code>SymbolTicker</code> \u5bf9\u8c61\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>last_price</code>: \u6700\u65b0\u4ef7\u683c</li> </ul>"},{"location":"guides/market-data/realtime/#_5","title":"\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u884c\u60c5","text":""},{"location":"guides/market-data/realtime/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code># \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\nall_tickers = service.get_symbol_ticker()\n\n# \u904d\u5386\u663e\u793a\nfor ticker in all_tickers[:5]:  # \u663e\u793a\u524d5\u4e2a\n    print(f\"{ticker.symbol}: {ticker.last_price}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_7","title":"\u6570\u636e\u8fc7\u6ee4\u548c\u6392\u5e8f","text":"<pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u6392\u540d\u524d10\u7684USDT\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n\nfor coin in top_coins:\n    print(f\"{coin.symbol}: \u6210\u4ea4\u91cf {coin.quote_volume}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#24","title":"24\u5c0f\u65f6\u884c\u60c5\u6570\u636e","text":""},{"location":"guides/market-data/realtime/#_8","title":"\u83b7\u53d6\u8be6\u7ec6\u7edf\u8ba1\u6570\u636e","text":"<pre><code># \u83b7\u53d624\u5c0f\u65f6\u884c\u60c5\u6570\u636e\ndaily_ticker = service.get_market_summary()\n\n# \u8bbf\u95ee\u6570\u636e\nfor ticker in daily_ticker[\"data\"][:5]:\n    print(f\"Symbol: {ticker['symbol']}\")\n    print(f\"Price Change: {ticker['price_change']}\")\n    print(f\"Price Change %: {ticker['price_change_percent']}%\")\n    print(f\"Volume: {ticker['volume']}\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/market-data/realtime/#dailymarketticker","title":"DailyMarketTicker \u5c5e\u6027","text":"<p>\u5b8c\u6574\u7684 <code>DailyMarketTicker</code> \u5c5e\u6027\u5217\u8868\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>last_price</code>: \u6700\u65b0\u4ef7\u683c</li> <li><code>price_change</code>: 24\u5c0f\u65f6\u4ef7\u683c\u53d8\u52a8</li> <li><code>price_change_percent</code>: 24\u5c0f\u65f6\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</li> <li><code>volume</code>: 24\u5c0f\u65f6\u6210\u4ea4\u91cf</li> <li><code>quote_volume</code>: 24\u5c0f\u65f6\u6210\u4ea4\u989d</li> <li><code>high_price</code>: 24\u5c0f\u65f6\u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: 24\u5c0f\u65f6\u6700\u4f4e\u4ef7</li> <li><code>weighted_avg_price</code>: \u52a0\u6743\u5e73\u5747\u4ef7</li> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>count</code>: \u6210\u4ea4\u7b14\u6570</li> </ul>"},{"location":"guides/market-data/realtime/#_9","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"guides/market-data/realtime/#_10","title":"\u5904\u7406\u5e38\u89c1\u9519\u8bef","text":"<pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    # \u5c1d\u8bd5\u83b7\u53d6\u65e0\u6548\u4ea4\u6613\u5bf9\u7684\u6570\u636e\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u7684\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_11","title":"\u91cd\u8bd5\u673a\u5236","text":"<pre><code># \u914d\u7f6e\u91cd\u8bd5\nservice.get_symbol_ticker(\n    symbol=\"BTCUSDT\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"guides/market-data/realtime/#_12","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6279\u91cf\u83b7\u53d6</li> <li>\u4f7f\u7528 <code>get_symbol_ticker()</code> \u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u4ea4\u6613\u5bf9\u6570\u636e</li> <li> <p>\u907f\u514d\u9891\u7e41\u7684\u5355\u4e2a\u8bf7\u6c42</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u59cb\u7ec8\u5305\u542b\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406</li> <li> <p>\u5b9e\u73b0\u91cd\u8bd5\u673a\u5236\u5904\u7406\u4e34\u65f6\u6027\u9519\u8bef</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u8fd4\u56de\u6570\u636e\u7684\u5b8c\u6574\u6027</li> <li> <p>\u9a8c\u8bc1\u4ef7\u683c\u548c\u6570\u91cf\u7684\u5408\u7406\u6027</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u5408\u7406\u8bbe\u7f6e\u8bf7\u6c42\u95f4\u9694</li> <li>\u9002\u5f53\u7f13\u5b58\u9891\u7e41\u4f7f\u7528\u7684\u6570\u636e</li> </ol>"},{"location":"guides/market-data/realtime/#_13","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u5386\u53f2\u6570\u636e\u7684\u83b7\u53d6\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u529f\u80fd</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"guides/market-data/storage/","title":"\u6570\u636e\u5b58\u50a8","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd CryptoService \u7684\u6570\u636e\u5b58\u50a8\u529f\u80fd\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p>"},{"location":"guides/market-data/storage/#_2","title":"\u5b58\u50a8\u65b9\u6848\u6982\u8ff0","text":"<p>CryptoService \u63d0\u4f9b\u4e24\u79cd\u4e3b\u8981\u7684\u6570\u636e\u5b58\u50a8\u65b9\u6848\uff1a</p> <ol> <li>SQLite\u6570\u636e\u5e93\u5b58\u50a8</li> <li>\u9002\u7528\u4e8e\u67e5\u8be2\u548c\u5206\u6790</li> <li>\u652f\u6301\u590d\u6742\u7684SQL\u67e5\u8be2</li> <li> <p>\u65b9\u4fbf\u7684\u6570\u636e\u7ba1\u7406</p> </li> <li> <p>KDTV\u683c\u5f0f\u5b58\u50a8</p> </li> <li>\u9488\u5bf9\u9ad8\u6027\u80fd\u8ba1\u7b97\u4f18\u5316</li> <li>\u652f\u6301\u77e9\u9635\u8fd0\u7b97</li> <li>\u9002\u5408\u673a\u5668\u5b66\u4e60\u5e94\u7528</li> </ol>"},{"location":"guides/market-data/storage/#sqlite","title":"SQLite\u6570\u636e\u5e93\u5b58\u50a8","text":""},{"location":"guides/market-data/storage/#_3","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u8bfb\u53d6\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_4","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":"<p>market_data \u8868\u7ed3\u6784\uff1a</p> <pre><code>CREATE TABLE market_data (\n    symbol TEXT,\n    timestamp INTEGER,\n    freq TEXT,\n    open_price REAL,\n    high_price REAL,\n    low_price REAL,\n    close_price REAL,\n    volume REAL,\n    quote_volume REAL,\n    trades_count INTEGER,\n    taker_buy_volume REAL,\n    taker_buy_quote_volume REAL,\n    taker_sell_volume REAL,\n    taker_sell_quote_volume REAL,\n    PRIMARY KEY (symbol, timestamp, freq)\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_5","title":"\u6570\u636e\u67e5\u8be2","text":"<pre><code># \u83b7\u53d6\u53ef\u7528\u65e5\u671f\ndates = db.get_available_dates(\n    symbol=\"BTCUSDT\",\n    freq=Freq.h1\n)\n\n# \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_6","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/market-data/storage/#kdtv","title":"KDTV\u683c\u5f0f\u5b58\u50a8","text":""},{"location":"guides/market-data/storage/#_7","title":"\u6570\u636e\u7ed3\u6784","text":"<p>KDTV\u683c\u5f0f\u5c06\u6570\u636e\u7ec4\u7ec7\u4e3a\u4ee5\u4e0b\u7ef4\u5ea6\uff1a</p> <ul> <li>K (Symbols): \u4ea4\u6613\u5bf9</li> <li>D (Date): \u65e5\u671f</li> <li>T (Time): \u65f6\u95f4</li> <li>V (Values): \u6570\u636e\u503c</li> </ul>"},{"location":"guides/market-data/storage/#_8","title":"\u5b58\u50a8\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n\n# \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_9","title":"\u8bfb\u53d6\u6570\u636e","text":"<pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\"\n    ],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_10","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_11","title":"\u6570\u636e\u5bfc\u51fa","text":""},{"location":"guides/market-data/storage/#_12","title":"\u5bfc\u51fa\u4e3a\u5176\u4ed6\u9891\u7387","text":"<pre><code># \u5bfc\u51fa\u5e76\u964d\u91c7\u6837\u6570\u636e\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1,\n    chunk_days=30\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_13","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"guides/market-data/storage/#_14","title":"\u6570\u636e\u5e93\u8fde\u63a5\u6c60","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u521b\u5efa\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5\n)\n\n# \u4f7f\u7528\u8fde\u63a5\u6c60\nwith pool.get_connection() as db:\n    db.store_data(data, freq)\n</code></pre>"},{"location":"guides/market-data/storage/#_15","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u5206\u5757\u5904\u7406\u5927\u91cf\u6570\u636e\nchunk_size = 1000\nfor i in range(0, len(data), chunk_size):\n    chunk = data[i:i + chunk_size]\n    db.store_data(chunk, freq)\n</code></pre>"},{"location":"guides/market-data/storage/#_16","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u5b58\u50a8\u683c\u5f0f\u9009\u62e9</li> <li>\u9891\u7e41\u67e5\u8be2\u4f7f\u7528SQLite</li> <li> <p>\u5927\u89c4\u6a21\u8ba1\u7b97\u4f7f\u7528KDTV</p> </li> <li> <p>\u6570\u636e\u7ba1\u7406</p> </li> <li>\u5b9a\u671f\u5907\u4efd\u6570\u636e</li> <li>\u5b9e\u73b0\u6570\u636e\u6e05\u7406\u7b56\u7565</li> <li> <p>\u76d1\u63a7\u5b58\u50a8\u7a7a\u95f4</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u8fde\u63a5\u6c60</li> <li>\u5b9e\u73b0\u6279\u91cf\u5904\u7406</li> <li> <p>\u4f18\u5316\u67e5\u8be2\u6027\u80fd</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u6570\u636e\u4e00\u81f4\u6027</li> <li>\u76d1\u63a7\u6570\u636e\u8d28\u91cf</li> </ol>"},{"location":"guides/market-data/storage/#_17","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3Universe\u7ba1\u7406\u7684\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u529f\u80fd</li> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u9ad8\u7ea7\u529f\u80fd</li> <li>\u63a2\u7d22KDTV\u683c\u5f0f\u7684\u8be6\u7ec6\u8bf4\u660e</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> </ul>"},{"location":"guides/market-data/universe/","title":"Universe \u7ba1\u7406","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd CryptoService \u7684 Universe \u529f\u80fd\uff0c\u5305\u62ec\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u3001\u6570\u636e\u4e0b\u8f7d\u548c\u7ba1\u7406\u3002</p>"},{"location":"guides/market-data/universe/#universe_1","title":"Universe \u6982\u8ff0","text":"<p>Universe \u662f\u4e00\u79cd\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u673a\u5236\uff0c\u80fd\u591f\uff1a</p> <ol> <li>\u5b9a\u671f\u91cd\u65b0\u9009\u62e9\u4ea4\u6613\u5bf9</li> <li>\u57fa\u4e8e\u6210\u4ea4\u91cf\u3001\u6d41\u52a8\u6027\u7b49\u6307\u6807</li> <li>\u652f\u6301\u81ea\u5b9a\u4e49\u91cd\u65b0\u9009\u62e9\u9891\u7387</li> <li> <p>\u81ea\u52a8\u6392\u9664\u65b0\u4e0a\u5e02\u5408\u7ea6</p> </li> <li> <p>\u65f6\u95f4\u7a97\u53e3\u7ba1\u7406</p> </li> <li>T1: \u8ba1\u7b97\u7a97\u53e3\uff08\u6708\uff09</li> <li>T2: \u91cd\u65b0\u9009\u62e9\u9891\u7387\uff08\u6708\uff09</li> <li> <p>T3: \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4\uff08\u6708\uff09</p> </li> <li> <p>\u6570\u636e\u5b8c\u6574\u6027\u4fdd\u8bc1</p> </li> <li>\u81ea\u52a8\u4e0b\u8f7d\u76f8\u5173\u5386\u53f2\u6570\u636e</li> <li>\u652f\u6301\u6570\u636e\u9a8c\u8bc1\u548c\u5b8c\u6574\u6027\u68c0\u67e5</li> <li>\u7075\u6d3b\u7684\u7f13\u51b2\u671f\u8bbe\u7f6e</li> </ol>"},{"location":"guides/market-data/universe/#universe_2","title":"\u5b9a\u4e49 Universe","text":""},{"location":"guides/market-data/universe/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u5b9a\u4e49 Universe\nuniverse_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-03-31\",\n    t1_months=1,          # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\u8ba1\u7b97\n    t2_months=1,          # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,          # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u4e0a\u5e02\u5408\u7ea6\n    top_k=5,              # \u9009\u62e9\u524d5\u4e2a\u5408\u7ea6 (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n    output_path=\"./universe.json\",\n    description=\"Top 5 crypto universe - Q1 2024\"\n)\n\n# \u4f7f\u7528\u6bd4\u7387\u9009\u62e9 (\u4f8b\u5982 top 80%)\nuniverse_by_ratio = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-03-31\",\n    t1_months=1,\n    t2_months=1,\n    t3_months=3,\n    top_ratio=0.8,       # \u9009\u62e9\u524d80%\u7684\u5408\u7ea6 (\u4e0e top_k \u4e8c\u9009\u4e00)\n    output_path=\"./universe_ratio.json\",\n    description=\"Top 80% crypto universe - Q1 2024\"\n)\n</code></pre>"},{"location":"guides/market-data/universe/#_2","title":"\u53c2\u6570\u8bf4\u660e","text":"\u53c2\u6570 \u7c7b\u578b \u8bf4\u660e <code>start_date</code> str \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD) <code>end_date</code> str \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD) <code>t1_months</code> int T1\u65f6\u95f4\u7a97\u53e3\uff0c\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u65e5\u6210\u4ea4\u91cf <code>t2_months</code> int T2\u91cd\u65b0\u9009\u62e9\u9891\u7387\uff0cuniverse\u66f4\u65b0\u95f4\u9694 <code>t3_months</code> int T3\u6700\u5c0f\u5b58\u5728\u65f6\u95f4\uff0c\u7b5b\u9664\u65b0\u5408\u7ea6 <code>top_k</code> int | None \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e <code>top_ratio</code> \u4e8c\u9009\u4e00) <code>top_ratio</code> float | None \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387, \u59820.8\u4ee3\u8868\u524d80% (\u4e0e <code>top_k</code> \u4e8c\u9009\u4e00) <code>output_path</code> Path|str Universe\u5b9a\u4e49\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84 <code>description</code> str \u53ef\u9009\u7684\u63cf\u8ff0\u4fe1\u606f <code>strict_date_range</code> bool \u662f\u5426\u4e25\u683c\u9650\u5236\u5728\u8f93\u5165\u65e5\u671f\u8303\u56f4\u5185"},{"location":"guides/market-data/universe/#_3","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code># \u4e25\u683c\u65e5\u671f\u8303\u56f4\u6a21\u5f0f\nuniverse_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=3,          # \u4f7f\u75283\u4e2a\u6708\u6570\u636e\u8ba1\u7b97\n    t2_months=3,          # \u6bcf\u5b63\u5ea6\u91cd\u65b0\u9009\u62e9\n    t3_months=6,          # \u6392\u96646\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=10,             # \u9009\u62e9\u524d10\u4e2a\u5408\u7ea6\n    output_path=\"./quarterly_universe.json\",\n    description=\"Quarterly rebalanced top 10 crypto universe\",\n    strict_date_range=True,  # \u4e25\u683c\u6a21\u5f0f\uff1a\u4e0d\u56de\u770bstart_date\u4e4b\u524d\u7684\u6570\u636e\n    # API\u5ef6\u8fdf\u63a7\u5236\u53c2\u6570\uff08\u53ef\u9009\uff09\n    api_delay_seconds=1.0,    # \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u5ef6\u8fdf1\u79d2\n    batch_delay_seconds=3.0,  # \u6bcf\u6279\u6b21\u4e4b\u95f4\u5ef6\u8fdf3\u79d2\n    batch_size=5             # \u6bcf5\u4e2a\u8bf7\u6c42\u4e3a\u4e00\u6279\n)\n\nprint(f\"\u2705 Universe\u5b9a\u4e49\u5b8c\u6210\")\nprint(f\"\ud83d\udccb \u5305\u542b {len(universe_def.snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\")\n</code></pre>"},{"location":"guides/market-data/universe/#api","title":"API\u5ef6\u8fdf\u63a7\u5236","text":"<p>\u4e3a\u4e86\u907f\u514d\u89e6\u53d1API\u9891\u7387\u9650\u5236\uff0cCryptoService \u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u5ef6\u8fdf\u63a7\u5236\u53c2\u6570\uff1a</p> <pre><code>universe_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-03-31\",\n    t1_months=1,\n    t2_months=1,\n    t3_months=3,\n    top_k=5,\n    output_path=\"./universe.json\",\n    # API\u5ef6\u8fdf\u63a7\u5236\u53c2\u6570\n    api_delay_seconds=1.0,    # \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u57fa\u7840\u5ef6\u8fdf\uff08\u79d2\uff09\n    batch_delay_seconds=3.0,  # \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u989d\u5916\u5ef6\u8fdf\uff08\u79d2\uff09\n    batch_size=5             # \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\n)\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> \u53c2\u6570 \u9ed8\u8ba4\u503c \u8bf4\u660e <code>api_delay_seconds</code> 1.0 \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u57fa\u7840\u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09 <code>batch_delay_seconds</code> 3.0 \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u989d\u5916\u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09 <code>batch_size</code> 5 \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u6bcf\u5904\u7406\u8fd9\u4e48\u591a\u8bf7\u6c42\u540e\u4f1a\u989d\u5916\u5ef6\u8fdf <p>\u4f7f\u7528\u5efa\u8bae\uff1a</p> <ol> <li> <p>\u8f7b\u91cf\u7ea7\u4f7f\u7528\uff1a\u5982\u679c\u4ea4\u6613\u5bf9\u6570\u91cf\u8f83\u5c11\uff08&lt; 20\u4e2a\uff09\uff0c\u53ef\u4ee5\u51cf\u5c11\u5ef6\u8fdf\uff1a    <pre><code>api_delay_seconds=0.5,\nbatch_delay_seconds=2.0,\nbatch_size=10\n</code></pre></p> </li> <li> <p>\u5927\u89c4\u6a21\u4f7f\u7528\uff1a\u5982\u679c\u4ea4\u6613\u5bf9\u6570\u91cf\u5f88\u591a\uff08&gt; 100\u4e2a\uff09\uff0c\u5efa\u8bae\u589e\u52a0\u5ef6\u8fdf\uff1a    <pre><code>api_delay_seconds=2.0,\nbatch_delay_seconds=5.0,\nbatch_size=3\n</code></pre></p> </li> <li> <p>API\u9650\u5236\u8f83\u4e25\u683c\u65f6\uff1a\u5982\u679c\u7ecf\u5e38\u9047\u5230\u9891\u7387\u9650\u5236\u9519\u8bef\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u589e\u52a0\u5ef6\u8fdf\uff1a    <pre><code>api_delay_seconds=3.0,\nbatch_delay_seconds=10.0,\nbatch_size=2\n</code></pre></p> </li> </ol> <p>print(f\"\u2705 Universe\u5b9a\u4e49\u5b8c\u6210\") print(f\"\ud83d\udccb \u5305\u542b {len(universe_def.snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\") <pre><code>## Universe \u6570\u636e\u7ed3\u6784\n\n### UniverseSnapshot\n\n\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684 Universe \u5feb\u7167\u5305\u542b\uff1a\n\n```python\n# \u8bbf\u95ee\u5feb\u7167\u4fe1\u606f\nfor snapshot in universe_def.snapshots:\n    print(f\"\u751f\u6548\u65e5\u671f: {snapshot.effective_date}\")\n    print(f\"\u6570\u636e\u671f\u95f4: {snapshot.period_start_date} ~ {snapshot.period_end_date}\")\n    print(f\"\u9009\u4e2d\u4ea4\u6613\u5bf9: {snapshot.symbols}\")\n    print(f\"\u5e73\u5747\u65e5\u6210\u4ea4\u91cf: {snapshot.mean_daily_amounts}\")\n    print(f\"\u65f6\u95f4\u6233\u8303\u56f4: {snapshot.period_start_ts} ~ {snapshot.period_end_ts}\")\n    print()\n</code></pre></p>"},{"location":"guides/market-data/universe/#_4","title":"\u5bfc\u51fa\u5206\u6790\u6570\u636e","text":"<pre><code># \u5c06Universe\u6570\u636e\u8f6c\u6362\u4e3aDataFrame\u8fdb\u884c\u5206\u6790\ndf = universe_def.export_to_dataframe()\n\nprint(\"\ud83d\udcca Universe\u5206\u6790:\")\nprint(f\"\u5404\u65f6\u671f\u4ea4\u6613\u5bf9\u6570\u91cf:\")\nperiod_counts = df.groupby('effective_date')['symbol'].count()\nfor date, count in period_counts.items():\n    print(f\"   {date}: {count} \u4e2a\u4ea4\u6613\u5bf9\")\n\nprint(f\"\u4ea4\u6613\u5bf9\u51fa\u73b0\u9891\u7387:\")\nsymbol_counts = df['symbol'].value_counts()\nprint(\"   \u6700\u7a33\u5b9a\u7684\u4ea4\u6613\u5bf9 (\u51fa\u73b0\u6b21\u6570\u6700\u591a):\")\nfor symbol, count in symbol_counts.head().items():\n    print(f\"   {symbol}: {count} \u6b21\")\n</code></pre>"},{"location":"guides/market-data/universe/#universe_3","title":"\u4e0b\u8f7d Universe \u6570\u636e","text":""},{"location":"guides/market-data/universe/#_5","title":"\u57fa\u672c\u6570\u636e\u4e0b\u8f7d","text":"<pre><code># \u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u6240\u6709\u76f8\u5173\u6570\u636e\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,\n    extend_to_present=False\n)\n\nprint(\"\u2705 Universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n</code></pre>"},{"location":"guides/market-data/universe/#_6","title":"\u6309\u5468\u671f\u4e0b\u8f7d\u6570\u636e","text":"<pre><code># \u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff1a\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\nservice.download_universe_data_by_periods(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=2,\n    include_buffer_days=3\n)\n\nprint(\"\u2705 \u6309\u5468\u671f\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n</code></pre>"},{"location":"guides/market-data/universe/#_7","title":"\u4e0b\u8f7d\u53c2\u6570\u8bf4\u660e","text":"\u53c2\u6570 \u8bf4\u660e \u9ed8\u8ba4\u503c <code>universe_file</code> Universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 \u5fc5\u9700 <code>db_path</code> \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 \u5fc5\u9700 <code>data_path</code> \u53ef\u9009\u7684\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 None <code>interval</code> \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49) Freq.h1 <code>max_workers</code> \u5e76\u53d1\u7ebf\u7a0b\u6570 4 <code>max_retries</code> \u6700\u5927\u91cd\u8bd5\u6b21\u6570 3 <code>include_buffer_days</code> \u7f13\u51b2\u5929\u6570 7 <code>extend_to_present</code> \u662f\u5426\u6269\u5c55\u5230\u5f53\u524d\u65e5\u671f True"},{"location":"guides/market-data/universe/#_8","title":"\u6570\u636e\u5bfc\u51fa","text":""},{"location":"guides/market-data/universe/#_9","title":"\u6309\u5feb\u7167\u5bfc\u51fa\u6570\u636e","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u8fde\u63a5\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u4e3a\u6bcf\u4e2aUniverse\u5feb\u7167\u5355\u72ec\u5bfc\u51fa\u6570\u636e\nexport_base = Path(\"./exports\")\nexport_base.mkdir(exist_ok=True)\n\nfor i, snapshot in enumerate(universe_def.snapshots, 1):\n    snapshot_dir = export_base / f\"snapshot_{snapshot.effective_date}\"\n\n    print(f\"\u5bfc\u51fa\u5feb\u7167 {snapshot.effective_date}...\")\n    print(f\"\u4ea4\u6613\u5bf9: {snapshot.symbols}\")\n\n    # \u5bfc\u51fa\u4e3aKDTV\u683c\u5f0f\n    db.export_to_files_by_timestamp(\n        output_path=snapshot_dir,\n        start_ts=snapshot.period_start_ts,\n        end_ts=snapshot.period_end_ts,\n        freq=Freq.h1,\n        symbols=snapshot.symbols\n    )\n\n    print(f\"\u2705 \u5feb\u7167\u6570\u636e\u5df2\u5bfc\u51fa\u5230: {snapshot_dir}\")\n</code></pre>"},{"location":"guides/market-data/universe/#_10","title":"\u5bfc\u51fa\u6587\u4ef6\u7ed3\u6784","text":"<p>\u5bfc\u51fa\u7684\u6570\u636e\u5c06\u6309\u7167 KDTV (Key-Date-Time-Value) \u683c\u5f0f\u7ec4\u7ec7\uff1a</p> <pre><code>exports/\n\u2514\u2500\u2500 snapshot_2024-01-31/\n    \u2514\u2500\u2500 h1/                    # \u9891\u7387\u76ee\u5f55\n        \u251c\u2500\u2500 20240101/          # \u65e5\u671f\u76ee\u5f55\n        \u2502   \u251c\u2500\u2500 universe_token.pkl    # \u4ea4\u6613\u5bf9\u5217\u8868\n        \u2502   \u251c\u2500\u2500 close_price/          # \u7279\u5f81\u76ee\u5f55\n        \u2502   \u2502   \u2514\u2500\u2500 20240101.npy     # K\u00d7T\u77e9\u9635\u6570\u636e\n        \u2502   \u251c\u2500\u2500 volume/\n        \u2502   \u2502   \u2514\u2500\u2500 20240101.npy\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 20240102/\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guides/market-data/universe/#universe_4","title":"Universe \u6587\u4ef6\u7ba1\u7406","text":""},{"location":"guides/market-data/universe/#universe_5","title":"\u52a0\u8f7d\u5df2\u4fdd\u5b58\u7684Universe","text":"<pre><code>from cryptoservice.models import UniverseDefinition\n\n# \u4ece\u6587\u4ef6\u52a0\u8f7dUniverse\u5b9a\u4e49\nuniverse_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\nprint(f\"Universe\u914d\u7f6e:\")\nprint(f\"  - \u65f6\u95f4\u8303\u56f4: {universe_def.config.start_date} ~ {universe_def.config.end_date}\")\nprint(f\"  - \u53c2\u6570: T1={universe_def.config.t1_months}\u6708, T2={universe_def.config.t2_months}\u6708\")\nprint(f\"  - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\n</code></pre>"},{"location":"guides/market-data/universe/#schema","title":"Schema\u5bfc\u51fa","text":"<pre><code># \u5bfc\u51faUniverse\u7684JSON Schema\u5b9a\u4e49\nuniverse_def.export_schema_to_file(\n    file_path=\"./universe_schema.json\",\n    include_example=True\n)\n\nprint(\"\u2705 Schema\u6587\u4ef6\u5df2\u5bfc\u51fa\")\n</code></pre>"},{"location":"guides/market-data/universe/#_11","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"guides/market-data/universe/#1-universe","title":"1. Universe\u8bbe\u8ba1","text":"<pre><code># \u63a8\u8350\u7684\u53c2\u6570\u7ec4\u5408\n\n# \u6708\u5ea6\u91cd\u5e73\u8861 (\u9002\u7528\u4e8e\u5927\u591a\u6570\u7b56\u7565)\nmonthly_universe = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,    # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\n    t2_months=1,    # \u6bcf\u6708\u91cd\u65b0\u9009\u62e9\n    t3_months=3,    # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=10,\n    output_path=\"./monthly_universe.json\"\n)\n\n# \u5b63\u5ea6\u91cd\u5e73\u8861 (\u9002\u7528\u4e8e\u957f\u671f\u7b56\u7565)\nquarterly_universe = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=3,    # \u57fa\u4e8e3\u4e2a\u6708\u6570\u636e\n    t2_months=3,    # \u6bcf\u5b63\u5ea6\u91cd\u65b0\u9009\u62e9\n    t3_months=6,    # \u6392\u96646\u4e2a\u6708\u5185\u65b0\u5408\u7ea6\n    top_k=20,\n    output_path=\"./quarterly_universe.json\"\n)\n</code></pre>"},{"location":"guides/market-data/universe/#2","title":"2. \u6570\u636e\u4e0b\u8f7d\u4f18\u5316","text":"<pre><code># \u5927\u91cf\u6570\u636e\u4e0b\u8f7d\u7684\u4f18\u5316\u914d\u7f6e\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=2,      # \u964d\u4f4e\u5e76\u53d1\u907f\u514dAPI\u9650\u5236\n    max_retries=5,      # \u589e\u52a0\u91cd\u8bd5\u6b21\u6570\n    include_buffer_days=10,  # \u589e\u52a0\u7f13\u51b2\u4fdd\u8bc1\u6570\u636e\u5b8c\u6574\u6027\n    extend_to_present=True   # \u6269\u5c55\u5230\u5f53\u524d\u65e5\u671f\n)\n</code></pre>"},{"location":"guides/market-data/universe/#3","title":"3. \u9519\u8bef\u5904\u7406","text":"<pre><code>try:\n    universe_def = service.define_universe(\n        start_date=\"2024-01-01\",\n        end_date=\"2024-03-31\",\n        t1_months=1,\n        t2_months=1,\n        t3_months=3,\n        top_k=5,\n        output_path=\"./universe.json\"\n    )\n\n    service.download_universe_data(\n        universe_file=\"./universe.json\",\n        db_path=\"./data/market.db\",\n        max_workers=2\n    )\n\nexcept MarketDataFetchError as e:\n    print(f\"\u6570\u636e\u83b7\u53d6\u5931\u8d25: {e}\")\n    # \u5b9e\u73b0\u91cd\u8bd5\u6216\u964d\u7ea7\u903b\u8f91\n\nexcept FileNotFoundError as e:\n    print(f\"\u6587\u4ef6\u4e0d\u5b58\u5728: {e}\")\n    # \u68c0\u67e5\u6587\u4ef6\u8def\u5f84\n\nexcept Exception as e:\n    print(f\"\u672a\u77e5\u9519\u8bef: {e}\")\n    # \u8bb0\u5f55\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\n</code></pre>"},{"location":"guides/market-data/universe/#4","title":"4. \u6027\u80fd\u76d1\u63a7","text":"<pre><code>import time\nfrom pathlib import Path\n\n# \u76d1\u63a7\u6570\u636e\u4e0b\u8f7d\u8fdb\u5ea6\nstart_time = time.time()\n\nservice.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1\n)\n\ndownload_time = time.time() - start_time\ndb_size = Path(\"./data/market.db\").stat().st_size / (1024 * 1024)  # MB\n\nprint(f\"\u4e0b\u8f7d\u8017\u65f6: {download_time:.1f} \u79d2\")\nprint(f\"\u6570\u636e\u5e93\u5927\u5c0f: {db_size:.1f} MB\")\n</code></pre>"},{"location":"guides/market-data/universe/#_12","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5b58\u50a8\u7684\u8be6\u7ec6\u9009\u9879</li> <li>\u63a2\u7d22\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u529f\u80fd</li> <li>\u67e5\u770b\u6570\u636e\u5904\u7406\u65b9\u6848</li> <li>\u5b66\u4e60\u5b8c\u6574\u793a\u4f8b</li> </ul>"},{"location":"guides/universe/data-download/","title":"Universe\u6570\u636e\u4e0b\u8f7d\u6307\u5357","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u6839\u636e Universe \u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93\uff0c\u4e3a\u540e\u7eed\u7684\u56de\u6d4b\u548c\u5206\u6790\u505a\u51c6\u5907\u3002</p>"},{"location":"guides/universe/data-download/#_1","title":"\u6982\u8ff0","text":"<p>\u5728\u5b9a\u4e49\u4e86 Universe \u4e4b\u540e\uff0c\u60a8\u9700\u8981\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u624d\u80fd\u8fdb\u884c\u56de\u6d4b\u548c\u5206\u6790\u3002CryptoService \u63d0\u4f9b\u4e86\u4e24\u79cd\u6570\u636e\u4e0b\u8f7d\u65b9\u5f0f\uff1a</p> <ol> <li>\u4e00\u6b21\u6027\u4e0b\u8f7d - \u4e0b\u8f7d\u6240\u6709\u76f8\u5173\u4ea4\u6613\u5bf9\u7684\u5b8c\u6574\u65f6\u95f4\u8303\u56f4\u6570\u636e</li> <li>\u6309\u5468\u671f\u4e0b\u8f7d - \u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u66f4\u7cbe\u786e\u4f46\u53ef\u80fd\u66f4\u6162</li> </ol>"},{"location":"guides/universe/data-download/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":""},{"location":"guides/universe/data-download/#_3","title":"\u4e00\u6b21\u6027\u4e0b\u8f7d\u6240\u6709\u6570\u636e","text":"<pre><code>from cryptoservice.services.market_service import MarketDataService\nfrom cryptoservice.models import Freq\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u4e0b\u8f7d universe \u6570\u636e\nservice.download_universe_data(\n    universe_file=\"./data/my_universe.json\",  # universe \u5b9a\u4e49\u6587\u4ef6\n    data_path=\"./data\",                       # \u6570\u636e\u5b58\u50a8\u8def\u5f84\n    interval=Freq.h1,                         # \u6570\u636e\u9891\u7387\uff081\u5c0f\u65f6\uff09\n    max_workers=4,                            # \u5e76\u53d1\u7ebf\u7a0b\u6570\n    max_retries=3,                            # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n    include_buffer_days=7,                    # \u524d\u540e\u5404\u52a07\u5929\u7f13\u51b2\n    extend_to_present=True                    # \u6269\u5c55\u5230\u5f53\u524d\u65e5\u671f\n)\n</code></pre>"},{"location":"guides/universe/data-download/#_4","title":"\u6309\u5468\u671f\u7cbe\u786e\u4e0b\u8f7d","text":"<pre><code># \u6309\u91cd\u5e73\u8861\u5468\u671f\u5206\u522b\u4e0b\u8f7d\u6570\u636e\nservice.download_universe_data_by_periods(\n    universe_file=\"./data/my_universe.json\",\n    data_path=\"./data\",\n    interval=Freq.d1,                         # \u65e5\u7ea7\u6570\u636e\n    max_workers=2,                            # \u8f83\u5c11\u7684\u5e76\u53d1\u6570\n    include_buffer_days=3                     # \u8f83\u5c11\u7684\u7f13\u51b2\u5929\u6570\n)\n</code></pre>"},{"location":"guides/universe/data-download/#_5","title":"\u53c2\u6570\u8bf4\u660e","text":""},{"location":"guides/universe/data-download/#download_universe_data","title":"<code>download_universe_data</code> \u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e <code>universe_file</code> Path|str \u5fc5\u9700 Universe \u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 <code>data_path</code> Path|str \u5fc5\u9700 \u6570\u636e\u5e93\u5b58\u50a8\u8def\u5f84 <code>interval</code> Freq <code>Freq.h1</code> \u6570\u636e\u9891\u7387 (1m, 5m, 1h, 4h, 1d) <code>max_workers</code> int 4 \u5e76\u53d1\u4e0b\u8f7d\u7ebf\u7a0b\u6570 <code>max_retries</code> int 3 \u7f51\u7edc\u8bf7\u6c42\u6700\u5927\u91cd\u8bd5\u6b21\u6570 <code>include_buffer_days</code> int 7 \u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570 <code>extend_to_present</code> bool True \u662f\u5426\u5c06\u6570\u636e\u6269\u5c55\u5230\u5f53\u524d\u65e5\u671f"},{"location":"guides/universe/data-download/#_6","title":"\u6570\u636e\u9891\u7387\u9009\u62e9","text":"<pre><code>from cryptoservice.models import Freq\n\n# \u4e0d\u540c\u7684\u6570\u636e\u9891\u7387\u9009\u9879\nintervals = {\n    Freq.m1: \"1\u5206\u949f\",     # \u9ad8\u9891\u4ea4\u6613\u5206\u6790\n    Freq.m5: \"5\u5206\u949f\",     # \u77ed\u671f\u7b56\u7565\n    Freq.m15: \"15\u5206\u949f\",   # \u4e2d\u77ed\u671f\u7b56\u7565\n    Freq.h1: \"1\u5c0f\u65f6\",     # \u65e5\u5185\u7b56\u7565 (\u63a8\u8350)\n    Freq.h4: \"4\u5c0f\u65f6\",     # swing\u4ea4\u6613\n    Freq.d1: \"1\u5929\",       # \u957f\u671f\u7b56\u7565\n}\n</code></pre>"},{"location":"guides/universe/data-download/#_7","title":"\u4e0b\u8f7d\u7b56\u7565\u5bf9\u6bd4","text":""},{"location":"guides/universe/data-download/#vs","title":"\u4e00\u6b21\u6027\u4e0b\u8f7d vs \u6309\u5468\u671f\u4e0b\u8f7d","text":"\u7279\u5f81 \u4e00\u6b21\u6027\u4e0b\u8f7d \u6309\u5468\u671f\u4e0b\u8f7d \u4e0b\u8f7d\u901f\u5ea6 \u5feb - \u5355\u6b21\u4e0b\u8f7d\u6240\u6709\u6570\u636e \u6162 - \u591a\u6b21\u5206\u6279\u4e0b\u8f7d \u6570\u636e\u7cbe\u5ea6 \u53ef\u80fd\u5305\u542b\u4e0d\u5fc5\u8981\u7684\u6570\u636e \u7cbe\u786e\u5339\u914d\u6bcf\u4e2a\u5468\u671f\u9700\u6c42 \u7f51\u7edc\u6548\u7387 \u9ad8 - \u51cf\u5c11API\u8c03\u7528\u6b21\u6570 \u4f4e - \u589e\u52a0API\u8c03\u7528\u6b21\u6570 \u5b58\u50a8\u7a7a\u95f4 \u53ef\u80fd\u5360\u7528\u66f4\u591a\u7a7a\u95f4 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u9002\u7528\u573a\u666f \u5c0f\u89c4\u6a21 Universe\u3001\u5feb\u901f\u539f\u578b \u5927\u89c4\u6a21 Universe\u3001\u751f\u4ea7\u73af\u5883"},{"location":"guides/universe/data-download/#_8","title":"\u4e0b\u8f7d\u8ba1\u5212\u5206\u6790","text":"<p>\u5728\u4e0b\u8f7d\u4e4b\u524d\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5206\u6790 Universe \u7684\u6570\u636e\u9700\u6c42\uff1a</p> <pre><code># \u81ea\u52a8\u5206\u6790\u4f1a\u663e\u793a\u5982\u4e0b\u4fe1\u606f\n\"\"\"\n\ud83d\udcca \u6570\u636e\u4e0b\u8f7d\u8ba1\u5212:\n   - \u603b\u4ea4\u6613\u5bf9\u6570: 25\n   - \u65f6\u95f4\u8303\u56f4: 2023-12-24 \u5230 2024-03-08\n   - \u6570\u636e\u9891\u7387: 1h\n   - \u9884\u8ba1\u5929\u6570: 75 \u5929\n\"\"\"\n</code></pre>"},{"location":"guides/universe/data-download/#_9","title":"\u4e0b\u8f7d\u8ba1\u5212\u5305\u542b\u7684\u4fe1\u606f","text":"<ul> <li>\u603b\u4ea4\u6613\u5bf9\u6570: \u6240\u6709\u5feb\u7167\u4e2d\u6d89\u53ca\u7684\u552f\u4e00\u4ea4\u6613\u5bf9\u6570\u91cf</li> <li>\u65f6\u95f4\u8303\u56f4: \u8003\u8651\u7f13\u51b2\u671f\u540e\u7684\u5b8c\u6574\u65f6\u95f4\u8303\u56f4</li> <li>\u6570\u636e\u9891\u7387: \u9009\u62e9\u7684\u6570\u636e\u95f4\u9694</li> <li>\u9884\u8ba1\u5929\u6570: \u603b\u4e0b\u8f7d\u65f6\u95f4\u8de8\u5ea6</li> </ul>"},{"location":"guides/universe/data-download/#_10","title":"\u6570\u636e\u9a8c\u8bc1","text":"<p>\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\uff1a</p> <pre><code># \u9a8c\u8bc1\u7ed3\u679c\u793a\u4f8b\n\"\"\"\n\ud83d\udd0d \u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027...\n\u9a8c\u8bc1\u5feb\u7167 1/3: 2024-01-31\n\u9a8c\u8bc1\u5feb\u7167 2/3: 2024-02-29\n\u9a8c\u8bc1\u5feb\u7167 3/3: 2024-03-31\n\u2705 \u6570\u636e\u5b8c\u6574\u6027\u9a8c\u8bc1\u901a\u8fc7!\n\n\ud83d\udcca \u6570\u636e\u5e93\u7edf\u8ba1:\n   - \u5df2\u4e0b\u8f7d\u4ea4\u6613\u5bf9: 25 \u4e2a\n   - \u65f6\u95f4\u8303\u56f4: 2023-12-24 \u5230 2024-03-08\n   - \u6570\u636e\u9891\u7387: 1h\n\"\"\"\n</code></pre>"},{"location":"guides/universe/data-download/#_11","title":"\u9a8c\u8bc1\u5185\u5bb9","text":"<ol> <li>\u6570\u636e\u8986\u76d6: \u68c0\u67e5\u6bcf\u4e2a\u5feb\u7167\u671f\u95f4\u7684\u6570\u636e\u662f\u5426\u5b58\u5728</li> <li>\u4ea4\u6613\u5bf9\u5b8c\u6574\u6027: \u9a8c\u8bc1\u6240\u9700\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u662f\u5426\u5b8c\u6574</li> <li>\u65f6\u95f4\u8fde\u7eed\u6027: \u786e\u4fdd\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u8fde\u7eed</li> <li>\u6570\u636e\u8d28\u91cf: \u68c0\u67e5\u662f\u5426\u5b58\u5728\u5f02\u5e38\u6570\u636e</li> </ol>"},{"location":"guides/universe/data-download/#_12","title":"\u6570\u636e\u4f7f\u7528","text":"<p>\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u5f0f\u8bbf\u95ee\u6570\u636e\uff1a</p>"},{"location":"guides/universe/data-download/#marketdb","title":"\u4f7f\u7528 MarketDB \u76f4\u63a5\u8bfb\u53d6","text":"<pre><code>from cryptoservice.data import MarketDB\nfrom cryptoservice.models import Freq\n\n# \u8fde\u63a5\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u8bfb\u53d6\u7279\u5b9a\u65f6\u95f4\u6bb5\u548c\u4ea4\u6613\u5bf9\u7684\u6570\u636e\ndf = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-02-01\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n)\n\nprint(df.head())\n</code></pre>"},{"location":"guides/universe/data-download/#universe_1","title":"\u7ed3\u5408 Universe \u5b9a\u4e49\u8bfb\u53d6","text":"<pre><code>from cryptoservice.models import UniverseDefinition\n\n# \u52a0\u8f7d universe \u5b9a\u4e49\nuniverse_def = UniverseDefinition.load_from_file(\"./data/my_universe.json\")\n\n# \u83b7\u53d6\u7279\u5b9a\u65e5\u671f\u7684\u4ea4\u6613\u5bf9\u5217\u8868\nsymbols_for_jan = universe_def.get_symbols_for_date(\"2024-01-15\")\n\n# \u8bfb\u53d6\u8be5\u65f6\u671f\u7684\u6570\u636e\njan_data = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-31\",\n    freq=Freq.h1,\n    symbols=symbols_for_jan\n)\n</code></pre>"},{"location":"guides/universe/data-download/#_13","title":"\u6279\u91cf\u5904\u7406\u6240\u6709\u5468\u671f","text":"<pre><code># \u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u8bfb\u53d6\u6570\u636e\nfor snapshot in universe_def.snapshots:\n    print(f\"\u5904\u7406\u5468\u671f: {snapshot.effective_date}\")\n\n    # \u8bfb\u53d6\u8be5\u5468\u671f\u7684\u6570\u636e\n    period_data = db.read_data(\n        start_time=snapshot.period_start_date,\n        end_time=snapshot.period_end_date,\n        freq=Freq.h1,\n        symbols=snapshot.symbols\n    )\n\n    # \u8fdb\u884c\u5206\u6790\n    print(f\"\u6570\u636e\u5f62\u72b6: {period_data.shape}\")\n    # ... \u60a8\u7684\u5206\u6790\u4ee3\u7801\n</code></pre>"},{"location":"guides/universe/data-download/#_14","title":"\u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":""},{"location":"guides/universe/data-download/#1","title":"1. \u5e76\u53d1\u8bbe\u7f6e","text":"<pre><code># \u6839\u636e\u60a8\u7684\u7f51\u7edc\u548c\u7cfb\u7edf\u6027\u80fd\u8c03\u6574\nmax_workers_recommendations = {\n    \"\u672c\u5730\u6d4b\u8bd5\": 2,\n    \"\u4e2a\u4eba\u4f7f\u7528\": 4,\n    \"\u751f\u4ea7\u73af\u5883\": 8,\n    \"\u9ad8\u6027\u80fd\u670d\u52a1\u5668\": 16,\n}\n</code></pre>"},{"location":"guides/universe/data-download/#2","title":"2. \u7f13\u51b2\u671f\u8bbe\u7f6e","text":"<pre><code># \u6839\u636e\u7b56\u7565\u9700\u6c42\u8bbe\u7f6e\u7f13\u51b2\u671f\nbuffer_days_recommendations = {\n    \"\u65e5\u5185\u7b56\u7565\": 3,      # \u8f83\u5c11\u7f13\u51b2\n    \"\u77ed\u671f\u7b56\u7565\": 7,      # \u6807\u51c6\u7f13\u51b2\n    \"\u957f\u671f\u7b56\u7565\": 14,     # \u66f4\u591a\u7f13\u51b2\n    \"\u56de\u6d4b\u9a8c\u8bc1\": 30,     # \u5145\u8db3\u7f13\u51b2\n}\n</code></pre>"},{"location":"guides/universe/data-download/#3","title":"3. \u9891\u7387\u9009\u62e9","text":"<pre><code># \u6839\u636e\u7b56\u7565\u9891\u7387\u9009\u62e9\u6570\u636e\u9891\u7387\nstrategy_to_freq = {\n    \"\u9ad8\u9891\u7b56\u7565\": Freq.m1,    # 1\u5206\u949f\u6570\u636e\n    \"\u65e5\u5185\u7b56\u7565\": Freq.h1,    # 1\u5c0f\u65f6\u6570\u636e (\u63a8\u8350)\n    \"swing\u7b56\u7565\": Freq.h4,   # 4\u5c0f\u65f6\u6570\u636e\n    \"\u957f\u671f\u7b56\u7565\": Freq.d1,    # \u65e5\u7ea7\u6570\u636e\n}\n</code></pre>"},{"location":"guides/universe/data-download/#_15","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"guides/universe/data-download/#_16","title":"\u5e38\u89c1\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6848","text":"<pre><code>try:\n    service.download_universe_data(\n        universe_file=\"./data/universe.json\",\n        data_path=\"./data\",\n        interval=Freq.h1\n    )\nexcept FileNotFoundError:\n    print(\"\u274c Universe\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u8bf7\u5148\u5b9a\u4e49Universe\")\nexcept PermissionError:\n    print(\"\u274c \u6570\u636e\u76ee\u5f55\u6743\u9650\u4e0d\u8db3\uff0c\u8bf7\u68c0\u67e5\u5199\u5165\u6743\u9650\")\nexcept MarketDataFetchError as e:\n    print(f\"\u274c \u6570\u636e\u4e0b\u8f7d\u5931\u8d25: {e}\")\n    # \u53ef\u4ee5\u5c1d\u8bd5\u51cf\u5c11\u5e76\u53d1\u6570\u6216\u589e\u52a0\u91cd\u8bd5\u6b21\u6570\nexcept Exception as e:\n    print(f\"\u274c \u672a\u77e5\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"guides/universe/data-download/#_17","title":"\u7f51\u7edc\u95ee\u9898\u5904\u7406","text":"<pre><code># \u5bf9\u4e8e\u7f51\u7edc\u4e0d\u7a33\u5b9a\u7684\u73af\u5883\nservice.download_universe_data(\n    universe_file=\"./data/universe.json\",\n    data_path=\"./data\",\n    max_workers=2,          # \u51cf\u5c11\u5e76\u53d1\n    max_retries=5,          # \u589e\u52a0\u91cd\u8bd5\n    interval=Freq.h4        # \u4f7f\u7528\u8f83\u4f4e\u9891\u7387\u6570\u636e\n)\n</code></pre>"},{"location":"guides/universe/data-download/#_18","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"guides/universe/data-download/#1_1","title":"1. \u5206\u9636\u6bb5\u4e0b\u8f7d","text":"<pre><code># \u5bf9\u4e8e\u5927\u578b Universe\uff0c\u5efa\u8bae\u5206\u9636\u6bb5\u4e0b\u8f7d\ndef download_large_universe(service, universe_file, data_path):\n    \"\"\"\u5206\u9636\u6bb5\u4e0b\u8f7d\u5927\u578b Universe \u6570\u636e\"\"\"\n\n    # \u7b2c\u4e00\u9636\u6bb5\uff1a\u4e0b\u8f7d\u6838\u5fc3\u4ea4\u6613\u5bf9\u7684\u9ad8\u9891\u6570\u636e\n    service.download_universe_data(\n        universe_file=universe_file,\n        data_path=data_path,\n        interval=Freq.h1,\n        max_workers=4\n    )\n\n    # \u7b2c\u4e8c\u9636\u6bb5\uff1a\u4e0b\u8f7d\u66f4\u8be6\u7ec6\u7684\u5206\u949f\u7ea7\u6570\u636e\uff08\u5982\u679c\u9700\u8981\uff09\n    service.download_universe_data(\n        universe_file=universe_file,\n        data_path=data_path,\n        interval=Freq.m5,\n        max_workers=2,\n        extend_to_present=False  # \u4e0d\u6269\u5c55\u5230\u5f53\u524d\n    )\n</code></pre>"},{"location":"guides/universe/data-download/#2_1","title":"2. \u6570\u636e\u5907\u4efd","text":"<pre><code>import shutil\nfrom datetime import datetime\n\n# \u4e0b\u8f7d\u5b8c\u6210\u540e\u5907\u4efd\u6570\u636e\u5e93\ndef backup_database(data_path):\n    \"\"\"\u5907\u4efd\u4e0b\u8f7d\u7684\u6570\u636e\u5e93\"\"\"\n    source = Path(data_path) / \"market.db\"\n    if source.exists():\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_path = Path(data_path) / f\"market_backup_{timestamp}.db\"\n        shutil.copy2(source, backup_path)\n        print(f\"\u6570\u636e\u5e93\u5df2\u5907\u4efd\u5230: {backup_path}\")\n</code></pre>"},{"location":"guides/universe/data-download/#3_1","title":"3. \u76d1\u63a7\u4e0b\u8f7d\u8fdb\u5ea6","text":"<pre><code>from rich.progress import Progress\n\n# \u4f7f\u7528\u8fdb\u5ea6\u6761\u76d1\u63a7\u4e0b\u8f7d\nwith Progress() as progress:\n    service.download_universe_data(\n        universe_file=\"./data/universe.json\",\n        data_path=\"./data\",\n        interval=Freq.h1,\n        max_workers=4\n    )\n</code></pre>"},{"location":"guides/universe/data-download/#_19","title":"\u4e0b\u4e00\u6b65","text":"<p>\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ul> <li>\u4f7f\u7528 \u6570\u636e\u53ef\u89c6\u5316 \u5206\u6790\u6570\u636e</li> <li>\u67e5\u770b \u6570\u636e\u5e93\u64cd\u4f5c \u4e86\u89e3\u66f4\u591a\u67e5\u8be2\u65b9\u6cd5</li> <li>\u53c2\u8003 \u57fa\u7840\u793a\u4f8b \u5b66\u4e60\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b</li> <li>\u9605\u8bfb API\u6587\u6863 \u4e86\u89e3\u66f4\u591a\u9009\u9879</li> </ul>"},{"location":"guides/universe/universe_schema_guide/","title":"Universe Schema \u4f7f\u7528\u6307\u5357","text":"<p>\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Cryptocurrency Universe\u7684JSON Schema\u5b9a\u4e49\u529f\u80fd\u3002</p>"},{"location":"guides/universe/universe_schema_guide/#_1","title":"\u6982\u8ff0","text":"<p>Universe Schema\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684JSON Schema\u5b9a\u4e49\uff0c\u7528\u4e8e\uff1a - \u6570\u636e\u9a8c\u8bc1 - API\u6587\u6863\u751f\u6210 - \u4e0e\u5176\u4ed6\u7cfb\u7edf\u96c6\u6210 - \u6570\u636e\u7ed3\u6784\u6807\u51c6\u5316</p>"},{"location":"guides/universe/universe_schema_guide/#_2","title":"\u4e3b\u8981\u529f\u80fd","text":""},{"location":"guides/universe/universe_schema_guide/#1-schema","title":"1. \u83b7\u53d6Schema\u5b9a\u4e49","text":"<pre><code>from cryptoservice.models.universe import UniverseDefinition\n\n# \u83b7\u53d6\u5b8c\u6574\u7684JSON Schema\nschema = UniverseDefinition.get_schema()\nprint(f\"Schema\u6807\u9898: {schema['title']}\")\nprint(f\"\u4e3b\u8981\u5c5e\u6027: {list(schema['properties'].keys())}\")\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#2","title":"2. \u83b7\u53d6\u793a\u4f8b\u6570\u636e","text":"<pre><code># \u83b7\u53d6\u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e\nexample = UniverseDefinition.get_schema_example()\nprint(f\"\u914d\u7f6e\u53c2\u6570: {example['config']}\")\nprint(f\"\u5feb\u7167\u6570\u91cf: {len(example['snapshots'])}\")\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#3-schema","title":"3. \u5bfc\u51faSchema\u5230\u6587\u4ef6","text":"<pre><code># \u521b\u5efauniverse\u5b9e\u4f8b\nuniverse_def = UniverseDefinition.load_from_file(\"universe.json\")\n\n# \u5bfc\u51faschema\uff08\u5305\u542b\u793a\u4f8b\uff09\nuniverse_def.export_schema_to_file(\n    file_path=\"./schemas/universe_schema.json\",\n    include_example=True\n)\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#4","title":"4. \u6570\u636e\u9a8c\u8bc1","text":"<pre><code># \u9a8c\u8bc1universe\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema\nvalidation_result = universe_def.validate_against_schema()\n\nif validation_result['valid']:\n    print(\"\u2705 \u9a8c\u8bc1\u901a\u8fc7\")\nelse:\n    print(\"\u274c \u9a8c\u8bc1\u5931\u8d25\")\n    for error in validation_result['errors']:\n        print(f\"  - {error}\")\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#schema","title":"Schema\u7ed3\u6784","text":""},{"location":"guides/universe/universe_schema_guide/#_3","title":"\u9876\u5c42\u7ed3\u6784","text":"<pre><code>{\n  \"config\": { ... },        // Universe\u914d\u7f6e\n  \"snapshots\": [ ... ],     // \u65f6\u95f4\u5e8f\u5217\u5feb\u7167\n  \"creation_time\": \"...\",   // \u521b\u5efa\u65f6\u95f4\n  \"description\": \"...\"      // \u53ef\u9009\u63cf\u8ff0\n}\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#config","title":"\u914d\u7f6e\u5b57\u6bb5 (config)","text":"\u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>start_date</code> string \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) <code>end_date</code> string \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) <code>t1_months</code> integer T1\u56de\u770b\u7a97\u53e3\uff08\u6708\uff09 <code>t2_months</code> integer T2\u91cd\u5e73\u8861\u9891\u7387\uff08\u6708\uff09 <code>t3_months</code> integer T3\u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4\uff08\u6708\uff09 <code>top_k</code> integer \u9009\u62e9\u7684top\u5408\u7ea6\u6570\u91cf"},{"location":"guides/universe/universe_schema_guide/#snapshots","title":"\u5feb\u7167\u5b57\u6bb5 (snapshots)","text":"\u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>effective_date</code> string \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f <code>period_start_date</code> string \u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f <code>period_end_date</code> string \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f <code>period_start_ts</code> string \u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09 <code>period_end_ts</code> string \u7ed3\u675f\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09 <code>symbols</code> array \u9009\u4e2d\u7684\u4ea4\u6613\u5bf9\u5217\u8868 <code>mean_daily_amounts</code> object \u5404\u4ea4\u6613\u5bf9\u7684\u5e73\u5747\u65e5\u6210\u4ea4\u91cf <code>metadata</code> object \u9644\u52a0\u5143\u6570\u636e"},{"location":"guides/universe/universe_schema_guide/#_4","title":"\u65f6\u95f4\u6233\u5b57\u6bb5\u7684\u4f18\u52bf","text":"<p>\u65b0\u589e\u7684\u65f6\u95f4\u6233\u5b57\u6bb5\uff08<code>period_start_ts</code>\u3001<code>period_end_ts</code>\uff09\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u4f18\u52bf\uff1a</p>"},{"location":"guides/universe/universe_schema_guide/#1-api","title":"1. \u76f4\u63a5API\u8c03\u7528","text":"<pre><code># \u65e0\u9700\u8f6c\u6362\uff0c\u76f4\u63a5\u4f7f\u7528\u65f6\u95f4\u6233\nfor snapshot in universe_def.snapshots:\n    data = service._fetch_symbol_data(\n        symbol=\"BTCUSDT\",\n        start_ts=snapshot.period_start_ts,\n        end_ts=snapshot.period_end_ts,\n        interval=Freq.h1\n    )\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#2_1","title":"2. \u6570\u636e\u5e93\u67e5\u8be2\u4f18\u5316","text":"<pre><code># \u7cbe\u786e\u7684\u65f6\u95f4\u8303\u56f4\u67e5\u8be2\ndata = db.read_data(\n    symbols=snapshot.symbols,\n    start_timestamp=snapshot.period_start_ts,\n    end_timestamp=snapshot.period_end_ts\n)\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#3","title":"3. \u6027\u80fd\u63d0\u5347","text":"<ul> <li>\u907f\u514d\u8fd0\u884c\u65f6\u65e5\u671f\u8f6c\u6362</li> <li>\u51cf\u5c11\u65f6\u533a\u76f8\u5173\u95ee\u9898</li> <li>\u63d0\u9ad8\u67e5\u8be2\u6027\u80fd</li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_5","title":"\u9a8c\u8bc1\u89c4\u5219","text":"<p>Schema\u5305\u542b\u4ee5\u4e0b\u9a8c\u8bc1\u89c4\u5219\uff1a</p>"},{"location":"guides/universe/universe_schema_guide/#_6","title":"\u65e5\u671f\u683c\u5f0f","text":"<ul> <li>\u6240\u6709\u65e5\u671f\u5b57\u6bb5\u5fc5\u987b\u7b26\u5408 <code>YYYY-MM-DD</code> \u683c\u5f0f</li> <li>\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f <code>^\\\\d{4}-\\\\d{2}-\\\\d{2}$</code> \u9a8c\u8bc1</li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_7","title":"\u65f6\u95f4\u6233\u683c\u5f0f","text":"<ul> <li>\u65f6\u95f4\u6233\u5fc5\u987b\u4e3a\u6570\u5b57\u5b57\u7b26\u4e32</li> <li>\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f <code>^\\\\d+$</code> \u9a8c\u8bc1</li> <li>\u8868\u793a\u6beb\u79d2\u7ea7Unix\u65f6\u95f4\u6233</li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_8","title":"\u4ea4\u6613\u5bf9\u683c\u5f0f","text":"<ul> <li>\u4ea4\u6613\u5bf9\u5fc5\u987b\u4ee5USDT\u7ed3\u5c3e</li> <li>\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f <code>^[A-Z0-9]+USDT$</code> \u9a8c\u8bc1</li> <li>\u4f8b\u5982\uff1a<code>BTCUSDT</code>, <code>ETHUSDT</code></li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_9","title":"\u6570\u503c\u8303\u56f4","text":"<ul> <li><code>t1_months</code>, <code>t2_months</code>, <code>top_k</code> \u5fc5\u987b \u2265 1</li> <li><code>t3_months</code> \u5fc5\u987b \u2265 0</li> <li><code>mean_daily_amounts</code> \u4e2d\u7684\u503c\u5fc5\u987b \u2265 0</li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_10","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"guides/universe/universe_schema_guide/#_11","title":"\u5b8c\u6574\u7684\u5de5\u4f5c\u6d41\u7a0b","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\u5b8c\u6574\u7684Schema\u4f7f\u7528\u793a\u4f8b\"\"\"\n\nfrom pathlib import Path\nfrom cryptoservice.models.universe import UniverseDefinition\n\ndef main():\n    # 1. \u52a0\u8f7d\u73b0\u6709\u7684universe\u5b9a\u4e49\n    universe_file = Path(\"./data/universe.json\")\n    if universe_file.exists():\n        universe_def = UniverseDefinition.load_from_file(universe_file)\n        print(f\"\u5df2\u52a0\u8f7duniverse: {len(universe_def.snapshots)} \u4e2a\u5feb\u7167\")\n    else:\n        print(\"\u672a\u627e\u5230universe\u6587\u4ef6\uff0c\u8bf7\u5148\u521b\u5efa\")\n        return\n\n    # 2. \u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\n    validation = universe_def.validate_against_schema()\n    print(f\"\u9a8c\u8bc1\u7ed3\u679c: {'\u901a\u8fc7' if validation['valid'] else '\u5931\u8d25'}\")\n\n    # 3. \u5bfc\u51faschema\u6587\u6863\n    schema_dir = Path(\"./docs/schemas\")\n    schema_file = schema_dir / \"universe_v1.0.json\"\n    universe_def.export_schema_to_file(schema_file, include_example=True)\n    print(f\"Schema\u5df2\u5bfc\u51fa\u5230: {schema_file}\")\n\n    # 4. \u4f7f\u7528\u65f6\u95f4\u6233\u8fdb\u884c\u6570\u636e\u5904\u7406\n    for i, snapshot in enumerate(universe_def.snapshots[:3]):  # \u524d3\u4e2a\u5feb\u7167\n        print(f\"\\n\u5feb\u7167 {i+1}: {snapshot.effective_date}\")\n        print(f\"  \u65f6\u95f4\u8303\u56f4: {snapshot.period_start_ts} - {snapshot.period_end_ts}\")\n        print(f\"  \u4ea4\u6613\u5bf9\u6570\u91cf: {len(snapshot.symbols)}\")\n        print(f\"  \u4e3b\u8981\u4ea4\u6613\u5bf9: {snapshot.symbols[:5]}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#_12","title":"\u4e0e\u5916\u90e8\u7cfb\u7edf\u96c6\u6210","text":"<pre><code>import requests\nimport json\n\n# \u4f7f\u7528schema\u9a8c\u8bc1\u5916\u90e8\u6570\u636e\ndef validate_external_universe_data(data_url: str) -&gt; bool:\n    \"\"\"\u9a8c\u8bc1\u5916\u90e8universe\u6570\u636e\u662f\u5426\u7b26\u5408schema\"\"\"\n\n    # \u83b7\u53d6\u5916\u90e8\u6570\u636e\n    response = requests.get(data_url)\n    external_data = response.json()\n\n    # \u83b7\u53d6schema\n    schema = UniverseDefinition.get_schema()\n\n    # \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528jsonschema\u5e93\u8fdb\u884c\u4e25\u683c\u9a8c\u8bc1\n    try:\n        import jsonschema\n        jsonschema.validate(external_data, schema)\n        print(\"\u2705 \u5916\u90e8\u6570\u636e\u9a8c\u8bc1\u901a\u8fc7\")\n        return True\n    except ImportError:\n        print(\"\u26a0\ufe0f  \u9700\u8981\u5b89\u88c5jsonschema\u5e93\u8fdb\u884c\u4e25\u683c\u9a8c\u8bc1\")\n        return False\n    except jsonschema.ValidationError as e:\n        print(f\"\u274c \u9a8c\u8bc1\u5931\u8d25: {e.message}\")\n        return False\n</code></pre>"},{"location":"guides/universe/universe_schema_guide/#_13","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u7248\u672c\u63a7\u5236: \u4e3aschema\u6587\u4ef6\u6dfb\u52a0\u7248\u672c\u53f7\uff0c\u4fbf\u4e8e\u8ffd\u8e2a\u53d8\u66f4</li> <li>\u6587\u6863\u540c\u6b65: \u4fdd\u6301schema\u4e0e\u4ee3\u7801\u6587\u6863\u7684\u540c\u6b65</li> <li>\u5411\u540e\u517c\u5bb9: \u65b0\u7248\u672cschema\u5e94\u4fdd\u6301\u5411\u540e\u517c\u5bb9</li> <li>\u4e25\u683c\u9a8c\u8bc1: \u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528jsonschema\u5e93\u8fdb\u884c\u4e25\u683c\u9a8c\u8bc1</li> <li>\u65f6\u95f4\u6233\u4f18\u5148: \u4f18\u5148\u4f7f\u7528\u65f6\u95f4\u6233\u5b57\u6bb5\u800c\u975e\u65e5\u671f\u5b57\u7b26\u4e32\u8fdb\u884c\u6570\u636e\u5904\u7406</li> </ol>"},{"location":"guides/universe/universe_schema_guide/#_14","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u65f6\u95f4\u6233\u5b57\u6bb5\u4e3a\u6beb\u79d2\u7ea7Unix\u65f6\u95f4\u6233</li> <li>\u6240\u6709\u65e5\u671f\u5747\u4f7f\u7528UTC\u65f6\u533a</li> <li>\u4ea4\u6613\u5bf9\u683c\u5f0f\u56fa\u5b9a\u4e3aXXXXUsdt\u6a21\u5f0f</li> <li>metadata\u5b57\u6bb5\u5141\u8bb8\u6269\u5c55\uff0c\u4f46\u6838\u5fc3\u5b57\u6bb5\u7ed3\u6784\u56fa\u5b9a</li> <li>\u5bfc\u51fa\u7684schema\u6587\u4ef6\u5305\u542b\u5b8c\u6574\u7684\u9a8c\u8bc1\u89c4\u5219\u548c\u793a\u4f8b\u6570\u636e</li> </ul>"},{"location":"guides/universe/universe_schema_guide/#_15","title":"\u76f8\u5173\u6587\u4ef6","text":"<ul> <li>\u6e90\u7801\uff1a<code>src/cryptoservice/models/universe.py</code></li> <li>\u6f14\u793a\u811a\u672c\uff1a<code>demo/export_schema.py</code></li> <li>Schema\u8f93\u51fa\uff1a<code>schema_output/universe_schema.json</code></li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>cryptoservice<ul> <li>client<ul> <li>client</li> </ul> </li> <li>config<ul> <li>retry</li> <li>settings</li> </ul> </li> <li>data<ul> <li>storage_db</li> <li>storage_utils</li> </ul> </li> <li>exceptions<ul> <li>market_exceptions</li> </ul> </li> <li>interfaces<ul> <li>market_interfaces</li> </ul> </li> <li>models<ul> <li>enums</li> <li>integrity_report</li> <li>market_data</li> <li>market_ticker</li> <li>universe</li> </ul> </li> <li>services<ul> <li>market_service</li> </ul> </li> <li>utils<ul> <li>cache_manager</li> <li>category_utils</li> <li>data_converter</li> <li>logger</li> <li>tools</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cryptoservice/","title":"cryptoservice","text":""},{"location":"reference/cryptoservice/#cryptoservice","title":"<code>cryptoservice</code>","text":"<p>Cryptocurrency trading bot package.</p>"},{"location":"reference/cryptoservice/#cryptoservice-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Client | None</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Client | None:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] | None = None, data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] | None = None,\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    if features is None:\n        features = [\n            \"close_price\",\n            \"volume\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in date_range]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(start=pd.Timestamp(date), periods=array.shape[1], freq=freq)\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                stacked_series = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                stacked_series.name = feature\n                date_data.append(stacked_series)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for idx, row in df.iterrows():\n                if isinstance(idx, tuple) and len(idx) == 2:\n                    symbol, time = idx\n                    values = [(f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x)) for x in row]\n                    table.add_row(str(time), str(symbol), *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\")\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\")\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\"[yellow]Warning: Index length is less than data length[/]\")\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; list[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.h1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: Optional[RetryConfig] = None, request_delay: float = 0.5) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: Optional[RetryConfig] = None,\n    request_delay: float = 0.5,\n) -&gt; None:\n    \"\"\"\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>  <code>abstractmethod</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[FundingRate]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: MarketDB | None = None\n    self.rate_limit_manager = RateLimitManager()\n    self.failed_downloads: dict[str, list[dict]] = {}  # \u8bb0\u5f55\u5931\u8d25\u7684\u4e0b\u8f7d\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <p>SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True, quote_asset: str = 'USDT') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True, quote_asset: str = \"USDT\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u7b5b\u9009\u6761\u4ef6\uff1a{quote_asset}\u7ed3\u5c3e\uff09\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n            and symbol[\"symbol\"].endswith(quote_asset)\n        ]\n\n        logger.info(f\"\u627e\u5230 {len(perpetual_symbols)} \u4e2a{quote_asset}\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\")\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time, end_time = self._date_to_timestamp_range(date)\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol,\n            interval=\"1d\",\n            startTime=start_time,\n            endTime=end_time,\n            limit=1,\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; list[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[DailyMarketTicker]</code> <p>list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; list[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers_result = self.get_symbol_ticker()\n        if isinstance(tickers_result, list):\n            tickers = [ticker.to_dict() for ticker in tickers_result]\n        else:\n            tickers = [tickers_result.to_dict()]\n        summary[\"data\"] = tickers\n\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; list[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09\n\n    Returns:\n        list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        # \u5904\u7406\u65f6\u95f4\u683c\u5f0f\n        if isinstance(start_time, str):\n            start_time = datetime.fromisoformat(start_time)\n        if end_time is None:\n            end_time = datetime.now()\n        elif isinstance(end_time, str):\n            end_time = datetime.fromisoformat(end_time)\n\n        # \u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time.strftime(\"%Y-%m-%d\"))\n        end_ts = self._date_to_timestamp_end(end_time.strftime(\"%Y-%m-%d\"))\n\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u5386\u53f2\u6570\u636e ({interval.value})\")\n\n        # \u6839\u636eklines_type\u9009\u62e9API\n        if klines_type == HistoricalKlinesType.FUTURES:\n            klines = self.client.futures_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n        else:  # SPOT\n            klines = self.client.get_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n\n        data = list(klines)\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230\u4ea4\u6613\u5bf9 {symbol} \u5728\u6307\u5b9a\u65f6\u95f4\u6bb5\u5185\u7684\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aKlineMarketTicker\u5bf9\u8c61\n        return [\n            KlineMarketTicker(\n                symbol=symbol,\n                last_price=Decimal(str(kline[4])),  # \u6536\u76d8\u4ef7\u4f5c\u4e3a\u6700\u65b0\u4ef7\u683c\n                open_price=Decimal(str(kline[1])),\n                high_price=Decimal(str(kline[2])),\n                low_price=Decimal(str(kline[3])),\n                volume=Decimal(str(kline[5])),\n                close_time=kline[6],\n            )\n            for kline in data\n        ]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>retry_config</code> <p>\u91cd\u8bd5\u914d\u7f6e</p> <p> TYPE: <code>Optional[RetryConfig]</code> DEFAULT: <code>None</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>enable_integrity_check</code> <p>\u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> RETURNS DESCRIPTION <code>IntegrityReport</code> <p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p> <p> TYPE: <code>IntegrityReport</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    # \u989d\u5916\u53c2\u6570\uff0c\u4fdd\u6301\u5411\u540e\u517c\u5bb9\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        retry_config: \u91cd\u8bd5\u914d\u7f6e\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n        enable_integrity_check: \u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n\n    Returns:\n        IntegrityReport: \u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a\n    \"\"\"\n    if retry_config is None:\n        retry_config = RetryConfig(max_retries=max_retries)\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u7edf\u8ba1\n    successful_symbols = []\n    failed_symbols = []\n    missing_periods = []\n\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time)\n        end_ts = self._date_to_timestamp_end(end_time)\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n        if self.db is None:\n            self.db = MarketDB(str(db_file_path))\n\n        # \u91cd\u65b0\u521d\u59cb\u5316\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668\uff0c\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u7684\u57fa\u7840\u5ef6\u8fdf\n        self.rate_limit_manager = RateLimitManager(base_delay=request_delay)\n\n        logger.info(f\"\ud83d\ude80 \u5f00\u59cb\u4e0b\u8f7d {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\")\n        logger.info(f\"\ud83d\udcc5 \u65f6\u95f4\u8303\u56f4: {start_time} \u5230 {end_time}\")\n        logger.info(f\"\u2699\ufe0f \u91cd\u8bd5\u914d\u7f6e: \u6700\u5927{retry_config.max_retries}\u6b21, \u57fa\u7840\u5ef6\u8fdf{retry_config.base_delay}\u79d2\")\n        logger.info(f\"\u23f1\ufe0f \u667a\u80fd\u9891\u7387\u63a7\u5236: \u57fa\u7840\u5ef6\u8fdf{request_delay}\u79d2\uff0c\u52a8\u6001\u8c03\u6574\")\n\n        # \u521b\u5efa\u8fdb\u5ea6\u8ddf\u8e2a\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TimeElapsedColumn(),\n            )\n\n        def process_symbol(symbol: str) -&gt; Dict[str, Any]:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6 (\u589e\u5f3a\u7248)\"\"\"\n            result = {\n                \"symbol\": symbol,\n                \"success\": False,\n                \"records\": 0,\n                \"error\": None,\n            }\n\n            try:\n                data = self._fetch_symbol_data(\n                    symbol=symbol,\n                    start_ts=start_ts,\n                    end_ts=end_ts,\n                    interval=interval,\n                    retry_config=retry_config,\n                )\n\n                if data:\n                    if self.db is None:\n                        raise MarketDataFetchError(\"Database is not initialized\")\n\n                    self.db.store_data(data, interval)\n                    result.update(\n                        {\n                            \"success\": True,\n                            \"records\": len(data),\n                            \"time_range\": f\"{data[0].open_time} - {data[-1].open_time}\",\n                        }\n                    )\n                    logger.debug(f\"\u2705 {symbol}: {len(data)} \u6761\u8bb0\u5f55\")\n                    successful_symbols.append(symbol)\n                else:\n                    result[\"error\"] = \"\u65e0\u6570\u636e\"\n                    logger.debug(f\"\u26a0\ufe0f {symbol}: \u65e0\u6570\u636e\")\n                    missing_periods.append(\n                        {\n                            \"symbol\": symbol,\n                            \"period\": f\"{start_time} - {end_time}\",\n                            \"reason\": \"no_data\",\n                        }\n                    )\n\n            except InvalidSymbolError as e:\n                result[\"error\"] = f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\"\n                logger.warning(f\"\u26a0\ufe0f \u8df3\u8fc7\u65e0\u6548\u4ea4\u6613\u5bf9 {symbol}\")\n                failed_symbols.append(symbol)\n\n            except Exception as e:\n                result[\"error\"] = str(e)\n                logger.error(f\"\u274c {symbol} \u5931\u8d25: {e}\")\n                failed_symbols.append(symbol)\n                missing_periods.append(\n                    {\n                        \"symbol\": symbol,\n                        \"period\": f\"{start_time} - {end_time}\",\n                        \"reason\": str(e),\n                    }\n                )\n\n            return result\n\n        # \u6267\u884c\u5e76\u884c\u4e0b\u8f7d\n        results = []\n        with progress if progress is not None else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u4e0b\u8f7d\u4ea4\u6613\u5bf9\u6570\u636e\", total=len(symbols)) if progress else None\n\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                for future in as_completed(futures):\n                    try:\n                        result = future.result()\n                        results.append(result)\n\n                        if progress and overall_task is not None:\n                            progress.update(overall_task, advance=1)\n\n                    except Exception as e:\n                        logger.error(f\"\u274c \u5904\u7406\u5f02\u5e38: {e}\")\n\n        # \u751f\u6210\u7edf\u8ba1\u62a5\u544a\n        total_records = sum(r.get(\"records\", 0) for r in results)\n        success_rate = len(successful_symbols) / len(symbols) if symbols else 0\n\n        logger.info(\"\ud83d\udcca \u4e0b\u8f7d\u5b8c\u6210\u7edf\u8ba1:\")\n        logger.info(f\"   \u2705 \u6210\u529f: {len(successful_symbols)}/{len(symbols)} ({success_rate:.1%})\")\n        logger.info(f\"   \u274c \u5931\u8d25: {len(failed_symbols)} \u4e2a\")\n        logger.info(f\"   \ud83d\udcc8 \u603b\u8bb0\u5f55\u6570: {total_records:,} \u6761\")\n        logger.info(f\"   \ud83d\udcbe \u6570\u636e\u5e93: {db_file_path}\")\n\n        # \u6267\u884c\u5b8c\u6574\u6027\u68c0\u67e5\n        if enable_integrity_check and self.db:\n            integrity_report = self._create_integrity_report(\n                symbols=symbols,\n                successful_symbols=successful_symbols,\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                start_time=start_time,\n                end_time=end_time,\n                interval=interval,\n                db_file_path=db_file_path,\n            )\n        else:\n            # \u751f\u6210\u57fa\u7840\u62a5\u544a\n            data_quality_score = len(successful_symbols) / len(symbols) if symbols else 0\n            recommendations = []\n            if data_quality_score &lt; 0.8:\n                recommendations.append(\"\u6570\u636e\u6210\u529f\u7387\u8f83\u4f4e\uff0c\u5efa\u8bae\u68c0\u67e5\u7f51\u7edc\u548cAPI\u914d\u7f6e\")\n            if failed_symbols:\n                recommendations.append(f\"\u6709{len(failed_symbols)}\u4e2a\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5931\u8d25\uff0c\u5efa\u8bae\u5355\u72ec\u91cd\u8bd5\")\n\n            integrity_report = IntegrityReport(\n                total_symbols=len(symbols),\n                successful_symbols=len(successful_symbols),\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                data_quality_score=data_quality_score,\n                recommendations=recommendations,\n            )\n\n        return integrity_report\n\n    except Exception as e:\n        logger.error(f\"\u274c \u6570\u636e\u4e0b\u8f7d\u5931\u8d25: {e}\")\n        # \u5373\u4f7f\u5931\u8d25\u4e5f\u8981\u8fd4\u56de\u62a5\u544a\n        return IntegrityReport(\n            total_symbols=len(symbols),\n            successful_symbols=len(successful_symbols),\n            failed_symbols=failed_symbols,\n            missing_periods=missing_periods,\n            data_quality_score=0.0,\n            recommendations=[f\"\u4e0b\u8f7d\u5931\u8d25: {e}\", \"\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u548cAPI\u914d\u7f6e\"],\n        )\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u8f93\u51fa\u8def\u5f84\n        output_path_obj = self._validate_and_prepare_path(\n            output_path,\n            is_file=True,\n            file_name=(\n                f\"universe_{start_date}_{end_date}_{t1_months}_{t2_months}_{t3_months}_{top_k or top_ratio}.json\"\n            ),\n        )\n\n        # \u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f\n        start_date = self._standardize_date_format(start_date)\n        end_date = self._standardize_date_format(end_date)\n\n        # \u521b\u5efa\u914d\u7f6e\n        config = UniverseConfig(\n            start_date=start_date,\n            end_date=end_date,\n            t1_months=t1_months,\n            t2_months=t2_months,\n            t3_months=t3_months,\n            delay_days=delay_days,\n            quote_asset=quote_asset,\n            top_k=top_k,\n            top_ratio=top_ratio,\n        )\n\n        logger.info(f\"\u5f00\u59cb\u5b9a\u4e49universe: {start_date} \u5230 {end_date}\")\n        log_selection_criteria = f\"Top-K={top_k}\" if top_k else f\"Top-Ratio={top_ratio}\"\n        logger.info(f\"\u53c2\u6570: T1={t1_months}\u6708, T2={t2_months}\u6708, T3={t3_months}\u6708, {log_selection_criteria}\")\n\n        # \u751f\u6210\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u5e8f\u5217 (\u6bcfT2\u4e2a\u6708)\n        # \u4ece\u8d77\u59cb\u65e5\u671f\u5f00\u59cb\uff0c\u6bcf\u9694T2\u4e2a\u6708\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8868\u793auniverse\u91cd\u65b0\u9009\u62e9\u7684\u65f6\u95f4\u70b9\n        rebalance_dates = self._generate_rebalance_dates(start_date, end_date, t2_months)\n\n        logger.info(\"\u91cd\u5e73\u8861\u8ba1\u5212:\")\n        logger.info(f\"  - \u65f6\u95f4\u8303\u56f4: {start_date} \u5230 {end_date}\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u95f4\u9694: \u6bcf{t2_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u6570\u636e\u5ef6\u8fdf: {delay_days}\u5929\")\n        logger.info(f\"  - T1\u6570\u636e\u7a97\u53e3: {t1_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u65e5\u671f: {rebalance_dates}\")\n\n        if not rebalance_dates:\n            raise ValueError(\"\u65e0\u6cd5\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8bf7\u68c0\u67e5\u65f6\u95f4\u8303\u56f4\u548cT2\u53c2\u6570\")\n\n        # \u6536\u96c6\u6240\u6709\u5468\u671f\u7684snapshots\n        all_snapshots = []\n\n        # \u5728\u6bcf\u4e2a\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u8ba1\u7b97universe\n        for i, rebalance_date in enumerate(rebalance_dates):\n            logger.info(f\"\u5904\u7406\u65e5\u671f {i + 1}/{len(rebalance_dates)}: {rebalance_date}\")\n\n            # \u8ba1\u7b97\u57fa\u51c6\u65e5\u671f\uff08\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff09\n            base_date = pd.to_datetime(rebalance_date) - timedelta(days=delay_days)\n            calculated_t1_end = base_date.strftime(\"%Y-%m-%d\")\n\n            # \u8ba1\u7b97T1\u56de\u770b\u671f\u95f4\u7684\u5f00\u59cb\u65e5\u671f\uff08\u4ecebase_date\u5f80\u524d\u63a8T1\u4e2a\u6708\uff09\n            calculated_t1_start = self._subtract_months(calculated_t1_end, t1_months)\n\n            logger.info(\n                f\"\u5468\u671f {i + 1}: \u57fa\u51c6\u65e5\u671f={calculated_t1_end} (\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d{delay_days}\u5929), \"\n                f\"T1\u6570\u636e\u671f\u95f4={calculated_t1_start} \u5230 {calculated_t1_end}\"\n            )\n\n            # \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u548c\u5b83\u4eec\u7684mean daily amount\n            universe_symbols, mean_amounts = self._calculate_universe_for_date(\n                calculated_t1_start,\n                calculated_t1_end,\n                t3_months=t3_months,\n                top_k=top_k,\n                top_ratio=top_ratio,\n                api_delay_seconds=api_delay_seconds,\n                batch_delay_seconds=batch_delay_seconds,\n                batch_size=batch_size,\n                quote_asset=quote_asset,\n            )\n\n            # \u521b\u5efa\u8be5\u5468\u671f\u7684snapshot\n            snapshot = UniverseSnapshot.create_with_dates_and_timestamps(\n                usage_t1_start=rebalance_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n                usage_t1_end=min(\n                    end_date,\n                    (pd.to_datetime(rebalance_date) + pd.DateOffset(months=t1_months)).strftime(\"%Y-%m-%d\"),\n                ),  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n                calculated_t1_start=calculated_t1_start,  # \u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n                calculated_t1_end=calculated_t1_end,  # \u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u57fa\u51c6\u65e5\u671f\uff09\n                symbols=universe_symbols,\n                mean_daily_amounts=mean_amounts,\n                metadata={\n                    \"calculated_t1_start\": calculated_t1_start,\n                    \"calculated_t1_end\": calculated_t1_end,\n                    \"delay_days\": delay_days,\n                    \"quote_asset\": quote_asset,\n                    \"selected_symbols_count\": len(universe_symbols),\n                },\n            )\n\n            all_snapshots.append(snapshot)\n\n            logger.info(f\"\u2705 \u65e5\u671f {rebalance_date}: \u9009\u62e9\u4e86 {len(universe_symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\n        # \u521b\u5efa\u5b8c\u6574\u7684universe\u5b9a\u4e49\n        universe_def = UniverseDefinition(\n            config=config,\n            snapshots=all_snapshots,\n            creation_time=datetime.now(),\n            description=description,\n        )\n\n        # \u4fdd\u5b58\u6c47\u603b\u7684universe\u5b9a\u4e49\n        universe_def.save_to_file(output_path_obj)\n\n        logger.info(\"\ud83c\udf89 Universe\u5b9a\u4e49\u5b8c\u6210\uff01\")\n        logger.info(f\"\ud83d\udcc1 \u5305\u542b {len(all_snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\")\n        logger.info(f\"\ud83d\udccb \u6c47\u603b\u6587\u4ef6: {output_path_obj}\")\n\n        return universe_def\n\n    except Exception as e:\n        logger.error(f\"[red]\u5b9a\u4e49universe\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u5b9a\u4e49universe\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.m1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: RetryConfig | None = None, request_delay: float = 0.5, download_market_metrics: bool = True, metrics_interval: Freq = Freq.m5, long_short_ratio_period: Freq = Freq.m5, long_short_ratio_types: list[str] | None = None, use_binance_vision: bool = False) -&gt; None</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>download_funding_rate</code> <p>\u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> </p> <code>download_market_metrics</code> <p>\u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>metrics_interval</code> <p>\u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_types</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: RetryConfig | None = None,\n    request_delay: float = 0.5,  # \u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n    download_market_metrics: bool = True,  # \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n    metrics_interval: Freq = Freq.m5,  # \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n    long_short_ratio_period: Freq = Freq.m5,  # \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n    long_short_ratio_types: list[str] | None = None,  # \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n    use_binance_vision: bool = False,  # \u662f\u5426\u4f7f\u7528 Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\n) -&gt; None:\n    \"\"\"\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002\n\n    \u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)\n        interval: \u6570\u636e\u9891\u7387\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n        download_funding_rate: \u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        download_market_metrics: \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n        metrics_interval: \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n        long_short_ratio_period: \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n        long_short_ratio_types: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = self._validate_and_prepare_path(universe_file, is_file=True)\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n\n        # data_path\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u9a8c\u8bc1\n        data_path_obj = None\n        if data_path:\n            data_path_obj = self._validate_and_prepare_path(data_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        # \u8bbe\u7f6e\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u9ed8\u8ba4\u503c\n        if long_short_ratio_types is None:\n            long_short_ratio_types = [\"account\", \"position\"]\n\n        logger.info(\"\ud83d\udcca \u6309\u5468\u671f\u4e0b\u8f7d\u6570\u636e:\")\n        logger.info(f\"   - \u603b\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u6570\u636e\u9891\u7387: {interval.value}\")\n        logger.info(f\"   - \u5e76\u53d1\u7ebf\u7a0b: {max_workers}\")\n        logger.info(f\"   - \u8bf7\u6c42\u95f4\u9694: {request_delay}\u79d2\")\n        logger.info(f\"   - \u6570\u636e\u5e93\u8def\u5f84: {db_file_path}\")\n        logger.info(f\"   - \u4e0b\u8f7d\u5e02\u573a\u6307\u6807: {download_market_metrics}\")\n        if download_market_metrics:\n            logger.info(f\"   - \u6307\u6807\u6570\u636e\u95f4\u9694: {metrics_interval}\")\n            logger.info(f\"   - \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b: {long_short_ratio_types}\")\n        if data_path_obj:\n            logger.info(f\"   - \u6570\u636e\u6587\u4ef6\u8def\u5f84: {data_path_obj}\")\n\n        # \u4e3a\u6bcf\u4e2a\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"\ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            logger.info(f\"   - \u4ea4\u6613\u5bf9\u6570\u91cf: {len(snapshot.symbols)}\")\n            logger.info(\n                f\"   - \u8ba1\u7b97\u671f\u95f4: {snapshot.calculated_t1_start} \u5230 {snapshot.calculated_t1_end} (\u5b9a\u4e49universe)\"\n            )\n            logger.info(f\"   - \u4f7f\u7528\u671f\u95f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u5b9e\u9645\u4f7f\u7528)\")\n            logger.info(\n                f\"   - \u4e0b\u8f7d\u8303\u56f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u542b{include_buffer_days}\u5929\u7f13\u51b2)\"\n            )\n\n            # \u4e0b\u8f7dK\u7ebf\u6570\u636e\n            self.get_perpetual_data(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                db_path=db_file_path,\n                interval=interval,\n                max_workers=max_workers,\n                max_retries=max_retries,\n                retry_config=retry_config,\n                enable_integrity_check=True,\n                request_delay=request_delay,\n            )\n\n            # \u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\n            if download_market_metrics:\n                logger.info(\"   \ud83d\udcc8 \u5f00\u59cb\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e...\")\n                self._download_market_metrics_for_snapshot(\n                    snapshot=snapshot,\n                    db_path=db_file_path,\n                    interval=metrics_interval,\n                    period=long_short_ratio_period,\n                    long_short_ratio_types=long_short_ratio_types,\n                    request_delay=request_delay,\n                    use_binance_vision=use_binance_vision,\n                )\n\n            logger.info(f\"   \u2705 \u5feb\u7167 {snapshot.effective_date} \u4e0b\u8f7d\u5b8c\u6210\")\n\n        logger.info(\"\ud83c\udf89 \u6240\u6709universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210!\")\n        logger.info(f\"\ud83d\udcc1 \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {db_file_path}\")\n\n    except Exception as e:\n        logger.error(f\"[red]\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 100) -&gt; list[FundingRate]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> Note <ul> <li>\u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e</li> <li>\u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761</li> <li>\u6570\u636e\u6309\u5347\u5e8f\u6392\u5217</li> <li>\u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236</li> </ul> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 100,  # \u6539\u4e3aAPI\u9ed8\u8ba4\u503c\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Note:\n        - \u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e\n        - \u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761\n        - \u6570\u636e\u6309\u5347\u5e8f\u6392\u5217\n        - \u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n\n        # \u53c2\u6570\u9a8c\u8bc1\n        if limit &lt; 1 or limit &gt; 1000:\n            raise ValueError(f\"limit\u53c2\u6570\u5fc5\u987b\u57281-1000\u8303\u56f4\u5185\uff0c\u5f53\u524d\u503c: {limit}\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"limit\": limit,\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236 - Funding Rate API: 500\u8bf7\u6c42/5\u5206\u949f/IP (\u66f4\u4e25\u683c)\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API\n        data = self.client.futures_funding_rate(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aFundingRate\u5bf9\u8c61\n        funding_rates = [FundingRate.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(funding_rates)} \u6761\u8d44\u91d1\u8d39\u7387\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return funding_rates\n\n    except ValueError as e:\n        logger.error(f\"[red]\u53c2\u6570\u9a8c\u8bc1\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API - \u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u91cf\u6570\u636e\n        data = self.client.futures_open_interest_hist(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aOpenInterest\u5bf9\u8c61\n        open_interests = [OpenInterest.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(open_interests)} \u6761\u6301\u4ed3\u91cf\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return open_interests\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e (\u7c7b\u578b: {ratio_type})\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u6839\u636eratio_type\u9009\u62e9\u4e0d\u540c\u7684API\u7aef\u70b9\n        if ratio_type == \"account\":\n            data = self.client.futures_top_longshort_account_ratio(**params)\n        elif ratio_type == \"position\":\n            data = self.client.futures_top_longshort_position_ratio(**params)\n        elif ratio_type == \"global\":\n            data = self.client.futures_global_longshort_ratio(**params)\n        elif ratio_type == \"taker\":\n            data = self.client.futures_taker_longshort_ratio(**params)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684ratio_type: {ratio_type}\")\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aLongShortRatio\u5bf9\u8c61\n        long_short_ratios = [LongShortRatio.from_binance_response(item, ratio_type) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(long_short_ratios)} \u6761\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return long_short_ratios\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.download_binance_vision_metrics","title":"<code>download_binance_vision_metrics(symbols: list[str], start_date: str, end_date: str, data_types: list[str] | None = None, request_delay: float = 1.0) -&gt; None</code>","text":"<p>\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_types</code> <p>\u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_binance_vision_metrics(\n    self,\n    symbols: list[str],\n    start_date: str,\n    end_date: str,\n    data_types: list[str] | None = None,\n    request_delay: float = 1.0,\n) -&gt; None:\n    \"\"\"\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        data_types: \u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"\n        request_delay: \u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09\n    \"\"\"\n    if data_types is None:\n        data_types = [\"openInterest\", \"longShortRatio\"]\n\n    try:\n        logger.info(f\"\u5f00\u59cb\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e: {data_types}\")\n\n        if self.db is None:\n            raise ValueError(\"\u6570\u636e\u5e93\u672a\u521d\u59cb\u5316\")\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        for date in date_range:\n            date_str = date.strftime(\"%Y-%m-%d\")\n            logger.info(f\"\u5904\u7406\u65e5\u671f: {date_str}\")\n\n            # \u4e0b\u8f7d\u6307\u6807\u6570\u636e\uff08\u6240\u6709\u7c7b\u578b\u90fd\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff09\n            self._download_metrics_from_vision(symbols, date_str, request_delay)\n\n            # \u8bf7\u6c42\u5ef6\u8fdf\n            if request_delay &gt; 0:\n                time.sleep(request_delay)\n\n        logger.info(\"\u2705 Binance Vision \u6307\u6807\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_failed_downloads","title":"<code>get_failed_downloads() -&gt; dict[str, list[dict]]</code>","text":"<p>\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[dict]]</code> <p>\u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_failed_downloads(self) -&gt; dict[str, list[dict]]:\n    \"\"\"\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Returns:\n        \u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178\n    \"\"\"\n    return self.failed_downloads.copy()\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.clear_failed_downloads","title":"<code>clear_failed_downloads(symbol: str | None = None) -&gt; None</code>","text":"<p>\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def clear_failed_downloads(self, symbol: str | None = None) -&gt; None:\n    \"\"\"\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709\n    \"\"\"\n    if symbol:\n        self.failed_downloads.pop(symbol, None)\n    else:\n        self.failed_downloads.clear()\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.retry_failed_downloads","title":"<code>retry_failed_downloads(symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]</code>","text":"<p>\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>\u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def retry_failed_downloads(self, symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]:\n    \"\"\"\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n\n    Returns:\n        \u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1\n    \"\"\"\n    if not self.failed_downloads:\n        logger.info(\"\ud83d\udccb \u6ca1\u6709\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\")\n        return {\"total\": 0, \"success\": 0, \"failed\": 0}\n\n    symbols_to_retry = [symbol] if symbol else list(self.failed_downloads.keys())\n    total_attempts = 0\n    success_count = 0\n    failed_count = 0\n\n    for retry_symbol in symbols_to_retry:\n        if retry_symbol not in self.failed_downloads:\n            continue\n\n        failures = self.failed_downloads[retry_symbol].copy()\n\n        for failure in failures:\n            if failure[\"retry_count\"] &gt;= max_retries:\n                logger.debug(f\"\u23ed\ufe0f {retry_symbol}: \u8df3\u8fc7\uff0c\u5df2\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\")\n                continue\n\n            total_attempts += 1\n\n            try:\n                logger.info(f\"\ud83d\udd04 \u91cd\u8bd5\u4e0b\u8f7d {retry_symbol}: {failure['date']}\")\n\n                # \u5c1d\u8bd5\u91cd\u65b0\u4e0b\u8f7d\n                retry_config = RetryConfig(max_retries=2, base_delay=3.0)\n                metrics_data = self._download_and_parse_metrics_csv(failure[\"url\"], retry_symbol, retry_config)\n\n                if metrics_data and self.db:\n                    # \u5b58\u50a8\u6570\u636e\n                    if metrics_data.get(\"open_interest\"):\n                        self.db.store_open_interest(metrics_data[\"open_interest\"])\n                    if metrics_data.get(\"long_short_ratio\"):\n                        self.db.store_long_short_ratio(metrics_data[\"long_short_ratio\"])\n\n                    # \u4ece\u5931\u8d25\u5217\u8868\u4e2d\u79fb\u9664\n                    self.failed_downloads[retry_symbol].remove(failure)\n                    if not self.failed_downloads[retry_symbol]:\n                        del self.failed_downloads[retry_symbol]\n\n                    success_count += 1\n                    logger.info(f\"\u2705 {retry_symbol}: \u91cd\u8bd5\u6210\u529f\")\n\n                else:\n                    failure[\"retry_count\"] += 1\n                    failed_count += 1\n                    logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5931\u8d25\")\n\n            except Exception as e:\n                failure[\"retry_count\"] += 1\n                failed_count += 1\n                logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5f02\u5e38 - {e}\")\n\n            # \u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u91cd\u8bd5\n            time.sleep(1.0)\n\n    result: dict[str, Any] = {\n        \"total\": total_attempts,\n        \"success\": success_count,\n        \"failed\": failed_count,\n    }\n\n    logger.info(f\"\ud83d\udcca \u91cd\u8bd5\u7edf\u8ba1: \u603b\u8ba1 {total_attempts}, \u6210\u529f {success_count}, \u5931\u8d25 {failed_count}\")\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_symbol_categories","title":"<code>get_symbol_categories() -&gt; dict[str, list[str]]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[str]]</code> <p>\u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_symbol_categories() -&gt; dict[str, list[str]]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Returns:\n        \u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(\"\u83b7\u53d6 Binance \u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f...\")\n\n        # \u8c03\u7528 Binance \u5206\u7c7b API\n        url = \"https://www.binance.com/bapi/composite/v1/public/marketing/symbol/list\"\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n\n        if data.get(\"code\") != \"000000\":\n            raise ValueError(f\"API \u8fd4\u56de\u9519\u8bef: {data.get('message', 'Unknown error')}\")\n\n        # \u63d0\u53d6 symbol \u548c tags \u7684\u6620\u5c04\u5173\u7cfb\n        symbol_categories = {}\n        for item in data.get(\"data\", []):\n            symbol = item.get(\"symbol\", \"\")\n            tags = item.get(\"tags\", [])\n\n            # \u53ea\u4fdd\u7559 USDT \u4ea4\u6613\u5bf9\n            if symbol.endswith(\"USDT\"):\n                symbol_categories[symbol] = sorted(tags)  # \u5bf9\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {len(symbol_categories)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n        return symbol_categories\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_all_categories","title":"<code>get_all_categories() -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002</p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_all_categories() -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002\n\n    Returns:\n        \u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u6536\u96c6\u6240\u6709\u6807\u7b7e\n        all_tags = set()\n        for tags in symbol_categories.values():\n            all_tags.update(tags)\n\n        # \u6309\u5b57\u6bcd\u6392\u5e8f\n        return sorted(list(all_tags))\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u5206\u7c7b\u6807\u7b7e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.create_category_matrix","title":"<code>create_category_matrix(symbols: list[str], categories: list[str] | None = None) -&gt; tuple[list[str], list[str], list[list[int]]]</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u5143\u7ec4 (symbols, categories, matrix)</p> <code>list[str]</code> <ul> <li>symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</li> </ul> <code>list[list[int]]</code> <ul> <li>categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868</li> </ul> <code>tuple[list[str], list[str], list[list[int]]]</code> <ul> <li>matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]</li> </ul> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef create_category_matrix(\n    symbols: list[str], categories: list[str] | None = None\n) -&gt; tuple[list[str], list[str], list[list[int]]]:\n    \"\"\"\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n\n    Returns:\n        \u5143\u7ec4 (symbols, categories, matrix)\n        - symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n        - categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868\n        - matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5206\u7c7b\uff0c\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n        if categories is None:\n            categories = MarketDataService.get_all_categories()\n        else:\n            categories = sorted(categories)\n\n        # \u8fc7\u6ee4\u5e76\u6392\u5e8fsymbols\uff08\u53ea\u4fdd\u7559\u6709\u5206\u7c7b\u4fe1\u606f\u7684\uff09\n        valid_symbols = [s for s in symbols if s in symbol_categories]\n        valid_symbols.sort()\n\n        # \u521b\u5efa\u77e9\u9635\n        matrix = []\n        for symbol in valid_symbols:\n            symbol_tags = symbol_categories.get(symbol, [])\n            row = [1 if category in symbol_tags else 0 for category in categories]\n            matrix.append(row)\n\n        logger.info(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635: {len(valid_symbols)} symbols \u00d7 {len(categories)} categories\")\n\n        return valid_symbols, categories, matrix\n\n    except Exception as e:\n        logger.error(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.save_category_matrix_csv","title":"<code>save_category_matrix_csv(output_path: Path | str, symbols: list[str], date_str: str | None = None, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>date_str</code> <p>\u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef save_category_matrix_csv(\n    output_path: Path | str,\n    symbols: list[str],\n    date_str: str | None = None,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\u8def\u5f84\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        date_str: \u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        import csv\n        from datetime import datetime\n\n        output_path = Path(output_path)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65e5\u671f\uff0c\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        if date_str is None:\n            date_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u521b\u5efa\u5206\u7c7b\u77e9\u9635\n        valid_symbols, sorted_categories, matrix = MarketDataService.create_category_matrix(symbols, categories)\n\n        # \u6587\u4ef6\u540d\u683c\u5f0f: categories_YYYY-MM-DD.csv\n        filename = f\"categories_{date_str}.csv\"\n        file_path = output_path / filename\n\n        # \u5199\u5165 CSV \u6587\u4ef6\n        with open(file_path, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n            writer = csv.writer(csvfile)\n\n            # \u5199\u5165\u8868\u5934 (symbol, category1, category2, ...)\n            header = [\"symbol\"] + sorted_categories\n            writer.writerow(header)\n\n            # \u5199\u5165\u6570\u636e\u884c\n            for i, symbol in enumerate(valid_symbols):\n                row = [symbol] + matrix[i]\n                writer.writerow(row)\n\n        logger.info(f\"\u6210\u529f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5230: {file_path}\")\n        logger.info(f\"\u77e9\u9635\u5927\u5c0f: {len(valid_symbols)} symbols \u00d7 {len(sorted_categories)} categories\")\n\n    except Exception as e:\n        logger.error(f\"\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.download_and_save_categories_for_universe","title":"<code>download_and_save_categories_for_universe(universe_file: Path | str, output_path: Path | str, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe \u5b9a\u4e49\u6587\u4ef6</p> <p> TYPE: <code>Path | str</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef download_and_save_categories_for_universe(\n    universe_file: Path | str,\n    output_path: Path | str,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Args:\n        universe_file: universe \u5b9a\u4e49\u6587\u4ef6\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        from datetime import datetime\n\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = MarketDataService._validate_and_prepare_path(universe_file, is_file=True)\n        output_path_obj = MarketDataService._validate_and_prepare_path(output_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        logger.info(\"\ud83c\udff7\ufe0f \u5f00\u59cb\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f:\")\n        logger.info(f\"   - Universe\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u8f93\u51fa\u76ee\u5f55: {output_path_obj}\")\n\n        # \u6536\u96c6\u6240\u6709\u4ea4\u6613\u5bf9\n        all_symbols = set()\n        for snapshot in universe_def.snapshots:\n            all_symbols.update(snapshot.symbols)\n\n        all_symbols_list = sorted(list(all_symbols))\n        logger.info(f\"   - \u603b\u4ea4\u6613\u5bf9\u6570: {len(all_symbols_list)}\")\n\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u6240\u6709\u5386\u53f2\u6570\u636e\uff09\n        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n        logger.info(f\"   \ud83d\udcc5 \u83b7\u53d6 {current_date} \u7684\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u586b\u5145\u5386\u53f2\u6570\u636e\uff09\")\n\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u65e5\u671f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"   \ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            # \u4f7f\u7528\u5feb\u7167\u7684\u6709\u6548\u65e5\u671f\n            snapshot_date = snapshot.effective_date\n\n            # \u4fdd\u5b58\u8be5\u5feb\u7167\u7684\u5206\u7c7b\u77e9\u9635\n            MarketDataService.save_category_matrix_csv(\n                output_path=output_path_obj,\n                symbols=snapshot.symbols,\n                date_str=snapshot_date,\n                categories=categories,\n            )\n\n            logger.info(f\"       \u2705 \u4fdd\u5b58\u4e86 {len(snapshot.symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n\n        # \u4e5f\u4fdd\u5b58\u4e00\u4e2a\u5f53\u524d\u65e5\u671f\u7684\u5b8c\u6574\u77e9\u9635\uff08\u5305\u542b\u6240\u6709\u4ea4\u6613\u5bf9\uff09\n        logger.info(f\"   \ud83d\udcc5 \u4fdd\u5b58\u5f53\u524d\u65e5\u671f ({current_date}) \u7684\u5b8c\u6574\u5206\u7c7b\u77e9\u9635\")\n        MarketDataService.save_category_matrix_csv(\n            output_path=output_path_obj,\n            symbols=all_symbols_list,\n            date_str=current_date,\n            categories=categories,\n        )\n\n        logger.info(\"\u2705 \u6240\u6709\u5206\u7c7b\u4fe1\u606f\u4e0b\u8f7d\u548c\u4fdd\u5b58\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/client/","title":"cryptoservice.client","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client","title":"<code>cryptoservice.client</code>","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Client | None</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Client | None:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/client/client/","title":"cryptoservice.client.client","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client","title":"<code>cryptoservice.client.client</code>","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Client | None</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Client | None:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/config/","title":"cryptoservice.config","text":""},{"location":"reference/cryptoservice/config/#cryptoservice.config","title":"<code>cryptoservice.config</code>","text":""},{"location":"reference/cryptoservice/config/#cryptoservice.config-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/config/#cryptoservice.config.RetryConfig","title":"<code>RetryConfig(max_retries: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, backoff_multiplier: float = 2.0, jitter: bool = True)</code>  <code>dataclass</code>","text":"<p>\u91cd\u8bd5\u914d\u7f6e</p>"},{"location":"reference/cryptoservice/config/retry/","title":"cryptoservice.config.retry","text":""},{"location":"reference/cryptoservice/config/retry/#cryptoservice.config.retry","title":"<code>cryptoservice.config.retry</code>","text":""},{"location":"reference/cryptoservice/config/retry/#cryptoservice.config.retry-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/config/retry/#cryptoservice.config.retry.RetryConfig","title":"<code>RetryConfig(max_retries: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, backoff_multiplier: float = 2.0, jitter: bool = True)</code>  <code>dataclass</code>","text":"<p>\u91cd\u8bd5\u914d\u7f6e</p>"},{"location":"reference/cryptoservice/config/settings/","title":"cryptoservice.config.settings","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings","title":"<code>cryptoservice.config.settings</code>","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>\u5e94\u7528\u914d\u7f6e\u7c7b.</p>"},{"location":"reference/cryptoservice/data/","title":"cryptoservice.data","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data","title":"<code>cryptoservice.data</code>","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB","title":"<code>MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.store_data","title":"<code>store_data(data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self,\n    data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]],\n    freq: Freq,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[list[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(\n            data_list: Any,\n        ) -&gt; TypeGuard[list[list[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(f\"Successfully stored {len(records)} records for {symbol} with frequency {freq.value}\")\n\n    except Exception:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.store_funding_rate","title":"<code>store_funding_rate(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u8d44\u91d1\u8d39\u7387\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>FundingRate\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_funding_rate(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u8d44\u91d1\u8d39\u7387\u6570\u636e.\n\n    Args:\n        data: FundingRate\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No funding rate data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.funding_time,\n                \"funding_rate\": float(item.funding_rate),\n                \"funding_time\": item.funding_time,\n                \"mark_price\": float(item.mark_price) if item.mark_price else None,\n                \"index_price\": (float(item.index_price) if item.index_price else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO funding_rate (\n                    symbol, timestamp, funding_rate, funding_time, mark_price, index_price\n                ) VALUES (\n                    :symbol, :timestamp, :funding_rate, :funding_time, :mark_price, :index_price\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} funding rate records\")\n\n    except Exception:\n        logger.exception(\"Failed to store funding rate data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.store_open_interest","title":"<code>store_open_interest(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>OpenInterest\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_open_interest(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        data: OpenInterest\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No open interest data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.time,\n                \"interval\": getattr(item, \"interval\", \"5m\"),  # \u9ed8\u8ba45m\u95f4\u9694\n                \"open_interest\": float(item.open_interest),\n                \"open_interest_value\": (float(item.open_interest_value) if item.open_interest_value else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO open_interest (\n                    symbol, timestamp, interval, open_interest, open_interest_value\n                ) VALUES (\n                    :symbol, :timestamp, :interval, :open_interest, :open_interest_value\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} open interest records\")\n\n    except Exception:\n        logger.exception(\"Failed to store open interest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.store_long_short_ratio","title":"<code>store_long_short_ratio(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>LongShortRatio\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_long_short_ratio(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        data: LongShortRatio\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No long short ratio data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.timestamp,\n                \"period\": getattr(item, \"period\", \"5m\"),  # \u9ed8\u8ba45m\u5468\u671f\n                \"ratio_type\": item.ratio_type,\n                \"long_short_ratio\": float(item.long_short_ratio),\n                \"long_account\": (float(item.long_account) if item.long_account else None),\n                \"short_account\": (float(item.short_account) if item.short_account else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO long_short_ratio (\n                    symbol, timestamp, period, ratio_type, long_short_ratio, long_account, short_account\n                ) VALUES (\n                    :symbol, :timestamp, :period, :ratio_type, :long_short_ratio, :long_account, :short_account\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} long short ratio records\")\n\n    except Exception:\n        logger.exception(\"Failed to store long short ratio data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: list[str], features: list[str] | None = None, raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: list[str],\n    features: list[str] | None = None,\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        return self._read_data_by_timestamp(start_ts, end_ts, freq, symbols, features, raise_on_empty)\n\n    except Exception:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_data_by_timestamp","title":"<code>read_data_by_timestamp(start_ts: int | str, end_ts: int | str, freq: Freq, symbols: list[str], features: list[str] | None = None, raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_ts</code> <p>\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>end_ts</code> <p>\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data_by_timestamp(\n    self,\n    start_ts: int | str,\n    end_ts: int | str,\n    freq: Freq,\n    symbols: list[str],\n    features: list[str] | None = None,\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_ts: \u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        end_ts: \u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u65f6\u95f4\u6233\u4e3a\u6574\u6570\n        start_timestamp = int(start_ts)\n        end_timestamp = int(end_ts)\n\n        return self._read_data_by_timestamp(start_timestamp, end_timestamp, freq, symbols, features, raise_on_empty)\n\n    except Exception:\n        logger.exception(\"Failed to read market data by timestamp\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_funding_rate","title":"<code>read_funding_rate(start_time: str, end_time: str, symbols: list[str], raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u8d44\u91d1\u8d39\u7387\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u8d44\u91d1\u8d39\u7387\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_funding_rate(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u8d44\u91d1\u8d39\u7387\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u8d44\u91d1\u8d39\u7387\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, funding_rate, funding_time, mark_price, index_price\n            FROM funding_rate\n            WHERE timestamp BETWEEN ? AND ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params = [start_ts, end_ts] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=tuple(params), parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No funding rate data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"funding_rate\",\n                        \"funding_time\",\n                        \"mark_price\",\n                        \"index_price\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read funding rate data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_open_interest","title":"<code>read_open_interest(start_time: str, end_time: str, symbols: list[str], interval: str = '5m', raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u6301\u4ed3\u91cf\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_open_interest(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    interval: str = \"5m\",\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u65f6\u95f4\u95f4\u9694\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u6301\u4ed3\u91cf\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, interval, open_interest, open_interest_value\n            FROM open_interest\n            WHERE timestamp BETWEEN ? AND ?\n            AND interval = ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params: list[Any] = [start_ts, end_ts, interval] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No open interest data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"interval\",\n                        \"open_interest\",\n                        \"open_interest_value\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read open interest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_long_short_ratio","title":"<code>read_long_short_ratio(start_time: str, end_time: str, symbols: list[str], period: str = '5m', ratio_type: str = 'account', raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_long_short_ratio(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        period: \u65f6\u95f4\u5468\u671f\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, period, ratio_type, long_short_ratio, long_account, short_account\n            FROM long_short_ratio\n            WHERE timestamp BETWEEN ? AND ?\n            AND period = ?\n            AND ratio_type = ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params: list[Any] = [start_ts, end_ts, period, ratio_type] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No long short ratio data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"period\",\n                        \"ratio_type\",\n                        \"long_short_ratio\",\n                        \"long_account\",\n                        \"short_account\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read long short ratio data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.export_to_files_by_timestamp","title":"<code>export_to_files_by_timestamp(output_path: Path | str, start_ts: int | str, end_ts: int | str, freq: Freq, symbols: list[str], target_freq: Freq | None = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u4f7f\u7528\u65f6\u95f4\u6233\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_ts</code> <p>\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>end_ts</code> <p>\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files_by_timestamp(\n    self,\n    output_path: Path | str,\n    start_ts: int | str,\n    end_ts: int | str,\n    freq: Freq,\n    symbols: list[str],\n    target_freq: Freq | None = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u4f7f\u7528\u65f6\u95f4\u6233\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_ts: \u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        end_ts: \u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u65f6\u95f4\u6233\u4e3a\u6574\u6570\n        start_timestamp = int(start_ts)\n        end_timestamp = int(end_ts)\n\n        # \u8f6c\u6362\u65f6\u95f4\u6233\u4e3a\u65e5\u671f\uff0c\u7528\u4e8e\u8ba1\u7b97\u5904\u7406\u8303\u56f4\n        from datetime import datetime\n\n        start_datetime = datetime.fromtimestamp(start_timestamp / 1000)\n        end_datetime = datetime.fromtimestamp(end_timestamp / 1000)\n\n        logger.info(f\"Exporting data from timestamp {start_timestamp} to {end_timestamp}\")\n        logger.info(\n            f\"Date range: {start_datetime.strftime('%Y-%m-%d %H:%M:%S')} to \"\n            f\"{end_datetime.strftime('%Y-%m-%d %H:%M:%S')}\"\n        )\n\n        output_path = Path(output_path)\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4 - \u57fa\u4e8e\u65f6\u95f4\u6233\u8ba1\u7b97\u5b9e\u9645\u7684\u65e5\u671f\u8303\u56f4\n        start_date = start_datetime.date()\n        end_date = end_datetime.date()\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        total_days = len(date_range)\n\n        # \u4f7f\u7528\u6709\u6548\u7684\u9891\u7387\u8fdb\u884c\u5bfc\u51fa\n        export_freq = target_freq if target_freq is not None else freq\n\n        # \u5982\u679c\u603b\u5929\u6570\u5c11\u4e8e\u7b49\u4e8echunk_days\uff0c\u76f4\u63a5\u5904\u7406\u6574\u4e2a\u8303\u56f4\uff0c\u4e0d\u5206\u5757\n        if total_days &lt;= chunk_days:\n            logger.info(\n                f\"Processing all data from timestamp {start_timestamp} to {end_timestamp} \"\n                f\"(total: {total_days} days)\"\n            )\n\n            # \u76f4\u63a5\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u6240\u6709\u6570\u636e\n            try:\n                df = self._read_data_by_timestamp(\n                    start_timestamp,\n                    end_timestamp,\n                    freq,\n                    symbols,\n                    raise_on_empty=False,\n                )\n            except ValueError as e:\n                if \"No data found\" in str(e):\n                    logger.warning(f\"No data found for timestamp range {start_timestamp} to {end_timestamp}\")\n                    return\n                else:\n                    raise\n\n            if df.empty:\n                logger.warning(f\"No data found for timestamp range {start_timestamp} to {end_timestamp}\")\n                return\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n\n            # \u5904\u7406\u6240\u6709\u6570\u636e\n            self._process_dataframe_for_export_by_timestamp(\n                df, output_path, export_freq, start_timestamp, end_timestamp\n            )\n\n        else:\n            # \u6309chunk_days\u5206\u5757\u5904\u7406\uff08\u7528\u4e8e\u5927\u91cf\u6570\u636e\uff09\n            one_day_ms = 24 * 60 * 60 * 1000  # \u4e00\u5929\u7684\u6beb\u79d2\u6570\n            chunk_ms = chunk_days * one_day_ms\n\n            current_ts = start_timestamp\n            while current_ts &lt; end_timestamp:\n                chunk_end_ts = min(current_ts + chunk_ms, end_timestamp)\n\n                chunk_start_datetime = datetime.fromtimestamp(current_ts / 1000)\n                chunk_end_datetime = datetime.fromtimestamp(chunk_end_ts / 1000)\n\n                logger.info(\n                    f\"Processing data chunk from \"\n                    f\"{chunk_start_datetime.strftime('%Y-%m-%d %H:%M:%S')} to \"\n                    f\"{chunk_end_datetime.strftime('%Y-%m-%d %H:%M:%S')}\"\n                )\n\n                # \u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u6570\u636e\u5757\n                try:\n                    df = self._read_data_by_timestamp(\n                        current_ts,\n                        chunk_end_ts,\n                        freq,\n                        symbols,\n                        raise_on_empty=False,\n                    )\n                except ValueError as e:\n                    if \"No data found\" in str(e):\n                        logger.warning(f\"No data found for timestamp range {current_ts} to {chunk_end_ts}\")\n                        current_ts = chunk_end_ts\n                        continue\n                    else:\n                        raise\n\n                if df.empty:\n                    logger.warning(f\"No data found for timestamp range {current_ts} to {chunk_end_ts}\")\n                    current_ts = chunk_end_ts\n                    continue\n\n                # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n                if target_freq is not None:\n                    df = self._resample_data(df, target_freq)\n\n                # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\n                self._process_dataframe_for_export_by_timestamp(\n                    df, output_path, export_freq, current_ts, chunk_end_ts\n                )\n\n                # \u6e05\u7406\u5185\u5b58\n                del df\n                current_ts = chunk_end_ts\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data by timestamp: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: list[str], target_freq: Freq | None = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: list[str],\n    target_freq: Freq | None = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        total_days = len(date_range)\n\n        # \u5982\u679c\u603b\u5929\u6570\u5c11\u4e8e\u7b49\u4e8echunk_days\uff0c\u76f4\u63a5\u5904\u7406\u6574\u4e2a\u8303\u56f4\uff0c\u4e0d\u5206\u5757\n        if total_days &lt;= chunk_days:\n            logger.info(f\"Processing all data from {start_date} to {end_date} (total: {total_days} days)\")\n\n            # \u8bfb\u53d6\u6240\u6709\u6570\u636e\n            try:\n                df = self.read_data(\n                    start_date,\n                    end_date,\n                    freq,\n                    symbols,\n                    raise_on_empty=False,\n                )\n            except ValueError as e:\n                if \"No data found\" in str(e):\n                    logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                    return\n                else:\n                    raise\n\n            if df.empty:\n                logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                return\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5904\u7406\u6240\u6709\u6570\u636e\n            self._process_dataframe_for_export(df, output_path, freq, date_range)\n\n        else:\n            # \u6309chunk_days\u5206\u5757\u5904\u7406\uff08\u7528\u4e8e\u5927\u91cf\u6570\u636e\uff09\n            for chunk_start in range(0, len(date_range), chunk_days):\n                chunk_end = min(chunk_start + chunk_days, len(date_range))\n                chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n                chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n                logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n                # \u8bfb\u53d6\u6570\u636e\u5757\n                try:\n                    df = self.read_data(\n                        chunk_start_date,\n                        chunk_end_date,\n                        freq,\n                        symbols,\n                        raise_on_empty=False,\n                    )\n                except ValueError as e:\n                    if \"No data found\" in str(e):\n                        logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                        continue\n                    else:\n                        raise\n\n                if df.empty:\n                    logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                    continue\n\n                # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n                if target_freq is not None:\n                    df = self._resample_data(df, target_freq)\n                    freq = target_freq\n\n                # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\n                chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n                self._process_dataframe_for_export(df, output_path, freq, chunk_dates)\n\n                # \u6e05\u7406\u5185\u5b58\n                del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.is_date_matching","title":"<code>is_date_matching(ts: Any, target_date: datetime.date) -&gt; bool</code>","text":"<p>\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def is_date_matching(self, ts: Any, target_date: datetime.date) -&gt; bool:\n    \"\"\"\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f\"\"\"\n    # \u786e\u4fdd\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u800c\u4e0d\u662fAny\u7c7b\u578b\n    return bool(pd.Timestamp(ts).date() == target_date)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.process_dataframe_by_date","title":"<code>process_dataframe_by_date(df: pd.DataFrame, date: datetime.date, feature_processor: Callable[[pd.DataFrame, str], None]) -&gt; None</code>","text":"<p>\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def process_dataframe_by_date(\n    self,\n    df: pd.DataFrame,\n    date: datetime.date,\n    feature_processor: Callable[[pd.DataFrame, str], None],\n) -&gt; None:\n    \"\"\"\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\"\"\"\n    timestamps = df.index.get_level_values(\"timestamp\")\n    # \u4e0d\u4f7f\u7528.values\uff0c\u76f4\u63a5\u4f7f\u7528Series\u4f5c\u4e3a\u5e03\u5c14\u7d22\u5f15\n    date_mask = pd.Series(timestamps).map(lambda ts: pd.Timestamp(ts).date() == date)\n    # \u4f7f\u7528\u5e03\u5c14Series\u8fdb\u884c\u7d22\u5f15\n    day_data = df.loc[date_mask]\n\n    if day_data.empty:\n        return\n\n    # \u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\n    for feature in df.columns:\n        feature_processor(day_data, feature)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_data_summary","title":"<code>get_data_summary() -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6982\u51b5\u7edf\u8ba1.</p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u5404\u79cd\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_data_summary(self) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6982\u51b5\u7edf\u8ba1.\n\n    Returns:\n        dict: \u5305\u542b\u5404\u79cd\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            # \u83b7\u53d6\u5e02\u573a\u6570\u636e\u7edf\u8ba1\n            market_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    freq,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp,\n                    MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                    MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                FROM market_data\n                GROUP BY freq\n            \"\"\"\n            ).fetchall()\n\n            # \u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u7edf\u8ba1\n            funding_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM funding_rate\n            \"\"\"\n            ).fetchone()\n\n            # \u83b7\u53d6\u6301\u4ed3\u91cf\u7edf\u8ba1\n            oi_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    interval,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM open_interest\n                GROUP BY interval\n            \"\"\"\n            ).fetchall()\n\n            # \u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u7edf\u8ba1\n            lsr_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    period,\n                    ratio_type,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM long_short_ratio\n                GROUP BY period, ratio_type\n            \"\"\"\n            ).fetchall()\n\n            return {\n                \"market_data\": [dict(row) for row in market_stats],\n                \"funding_rate\": dict(funding_stats) if funding_stats else {},\n                \"open_interest\": [dict(row) for row in oi_stats],\n                \"long_short_ratio\": [dict(row) for row in lsr_stats],\n            }\n\n    except Exception:\n        logger.exception(\"Failed to get data summary\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_symbol_data_range","title":"<code>get_symbol_data_range(symbol: str, freq: Freq | None = None) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u65f6\u95f4\u8303\u56f4.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_symbol_data_range(self, symbol: str, freq: Freq | None = None) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u65f6\u95f4\u8303\u56f4.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\n\n    Returns:\n        dict: \u5305\u542b\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            if freq is None:\n                # \u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u6570\u636e\u8303\u56f4\n                query = \"\"\"\n                    SELECT\n                        freq,\n                        COUNT(*) as record_count,\n                        MIN(timestamp) as earliest_timestamp,\n                        MAX(timestamp) as latest_timestamp,\n                        MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                        MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                    FROM market_data\n                    WHERE symbol = ?\n                    GROUP BY freq\n                \"\"\"\n                result = conn.execute(query, (symbol,)).fetchall()\n                return {\n                    \"symbol\": symbol,\n                    \"frequencies\": [dict(row) for row in result],\n                }\n            else:\n                # \u83b7\u53d6\u6307\u5b9a\u9891\u7387\u7684\u6570\u636e\u8303\u56f4\n                query = \"\"\"\n                    SELECT\n                        COUNT(*) as record_count,\n                        MIN(timestamp) as earliest_timestamp,\n                        MAX(timestamp) as latest_timestamp,\n                        MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                        MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                    FROM market_data\n                    WHERE symbol = ? AND freq = ?\n                \"\"\"\n                result = conn.execute(query, (symbol, freq.value)).fetchone()\n                result_dict = {\n                    \"symbol\": symbol,\n                    \"frequency\": freq.value,\n                }\n                if result:\n                    result_dict.update(dict(result))\n                return result_dict\n\n    except Exception:\n        logger.exception(\"Failed to get symbol data range\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.check_data_completeness","title":"<code>check_data_completeness(symbol: str, start_time: str, end_time: str, freq: Freq, expected_interval_minutes: int | None = None) -&gt; dict[str, Any]</code>","text":"<p>\u68c0\u67e5\u6570\u636e\u7684\u5b8c\u6574\u6027.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>expected_interval_minutes</code> <p>\u9884\u671f\u7684\u65f6\u95f4\u95f4\u9694\uff08\u5206\u949f\uff09\uff0cNone\u8868\u793a\u81ea\u52a8\u63a8\u65ad</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u5b8c\u6574\u6027\u68c0\u67e5\u7ed3\u679c\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def check_data_completeness(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    expected_interval_minutes: int | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"\u68c0\u67e5\u6570\u636e\u7684\u5b8c\u6574\u6027.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        expected_interval_minutes: \u9884\u671f\u7684\u65f6\u95f4\u95f4\u9694\uff08\u5206\u949f\uff09\uff0cNone\u8868\u793a\u81ea\u52a8\u63a8\u65ad\n\n    Returns:\n        dict: \u5305\u542b\u5b8c\u6574\u6027\u68c0\u67e5\u7ed3\u679c\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        # \u81ea\u52a8\u63a8\u65ad\u65f6\u95f4\u95f4\u9694\n        if expected_interval_minutes is None:\n            freq_to_minutes = {\n                Freq.m1: 1,\n                Freq.m3: 3,\n                Freq.m5: 5,\n                Freq.m15: 15,\n                Freq.m30: 30,\n                Freq.h1: 60,\n                Freq.h2: 120,\n                Freq.h4: 240,\n                Freq.h6: 360,\n                Freq.h8: 480,\n                Freq.h12: 720,\n                Freq.d1: 1440,\n            }\n            expected_interval_minutes = freq_to_minutes.get(freq, 1)\n\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol], raise_on_empty=False)\n\n        if df.empty:\n            return {\n                \"symbol\": symbol,\n                \"period\": f\"{start_time} to {end_time}\",\n                \"frequency\": freq.value,\n                \"total_records\": 0,\n                \"missing_records\": 0,\n                \"completeness_rate\": 0.0,\n                \"missing_periods\": [],\n            }\n\n        # \u83b7\u53d6\u5b9e\u9645\u65f6\u95f4\u6233\n        actual_timestamps = sorted(df.index.get_level_values(\"timestamp\").unique())\n\n        # \u751f\u6210\u9884\u671f\u7684\u65f6\u95f4\u6233\u5e8f\u5217\n        start_ts = pd.Timestamp(start_time)\n        end_ts = pd.Timestamp(end_time)\n        expected_timestamps = pd.date_range(start=start_ts, end=end_ts, freq=f\"{expected_interval_minutes}min\")\n\n        # \u8f6c\u6362\u4e3a\u6beb\u79d2\u65f6\u95f4\u6233\n        expected_ts_ms = [int(ts.timestamp() * 1000) for ts in expected_timestamps]\n        actual_ts_ms = [int(pd.Timestamp(ts).timestamp() * 1000) for ts in actual_timestamps]\n\n        # \u627e\u51fa\u7f3a\u5931\u7684\u65f6\u95f4\u6233\n        missing_ts = set(expected_ts_ms) - set(actual_ts_ms)\n        missing_periods = [pd.Timestamp(ts, unit=\"ms\").strftime(\"%Y-%m-%d %H:%M:%S\") for ts in sorted(missing_ts)]\n\n        return {\n            \"symbol\": symbol,\n            \"period\": f\"{start_time} to {end_time}\",\n            \"frequency\": freq.value,\n            \"expected_records\": len(expected_ts_ms),\n            \"actual_records\": len(actual_ts_ms),\n            \"missing_records\": len(missing_ts),\n            \"completeness_rate\": ((len(actual_ts_ms) / len(expected_ts_ms)) * 100 if expected_ts_ms else 0),\n            \"missing_periods\": missing_periods[:10],  # \u53ea\u663e\u793a\u524d10\u4e2a\u7f3a\u5931\u65f6\u95f4\u70b9\n        }\n\n    except Exception:\n        logger.exception(\"Failed to check data completeness\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_latest_data","title":"<code>get_latest_data(symbols: list[str], freq: Freq, limit: int = 1) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u70b9.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>limit</code> <p>\u6bcf\u4e2asymbol\u8fd4\u56de\u7684\u8bb0\u5f55\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u6700\u65b0\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_latest_data(self, symbols: list[str], freq: Freq, limit: int = 1) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u70b9.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n        limit: \u6bcf\u4e2asymbol\u8fd4\u56de\u7684\u8bb0\u5f55\u6570\n\n    Returns:\n        pd.DataFrame: \u6700\u65b0\u6570\u636e\n    \"\"\"\n    try:\n        placeholders = \",\".join(\"?\" * len(symbols))\n        query = f\"\"\"\n            SELECT symbol, timestamp,\n                   open_price, high_price, low_price, close_price,\n                   volume, quote_volume, trades_count,\n                   taker_buy_volume, taker_buy_quote_volume,\n                   taker_sell_volume, taker_sell_quote_volume\n            FROM (\n                SELECT *,\n                       ROW_NUMBER() OVER (PARTITION BY symbol ORDER BY timestamp DESC) as rn\n                FROM market_data\n                WHERE freq = ? AND symbol IN ({placeholders})\n            ) ranked\n            WHERE rn &lt;= ?\n            ORDER BY symbol, timestamp DESC\n        \"\"\"\n\n        params = tuple([freq.value] + symbols + [limit])\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            return pd.DataFrame()\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to get latest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_combined_data","title":"<code>get_combined_data(symbols: list[str], start_time: str, end_time: str, freq: Freq, include_funding_rate: bool = False, include_open_interest: bool = False, include_long_short_ratio: bool = False, oi_interval: str = '5m', lsr_period: str = '5m', lsr_ratio_type: str = 'account') -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u5408\u5e76\u7684\u591a\u7c7b\u578b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>include_funding_rate</code> <p>\u662f\u5426\u5305\u542b\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_open_interest</code> <p>\u662f\u5426\u5305\u542b\u6301\u4ed3\u91cf\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_long_short_ratio</code> <p>\u662f\u5426\u5305\u542b\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>oi_interval</code> <p>\u6301\u4ed3\u91cf\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>lsr_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>lsr_ratio_type</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5408\u5e76\u540e\u7684\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_combined_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    include_funding_rate: bool = False,\n    include_open_interest: bool = False,\n    include_long_short_ratio: bool = False,\n    oi_interval: str = \"5m\",\n    lsr_period: str = \"5m\",\n    lsr_ratio_type: str = \"account\",\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u5408\u5e76\u7684\u591a\u7c7b\u578b\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        include_funding_rate: \u662f\u5426\u5305\u542b\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        include_open_interest: \u662f\u5426\u5305\u542b\u6301\u4ed3\u91cf\u6570\u636e\n        include_long_short_ratio: \u662f\u5426\u5305\u542b\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\n        oi_interval: \u6301\u4ed3\u91cf\u65f6\u95f4\u95f4\u9694\n        lsr_period: \u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f\n        lsr_ratio_type: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n\n    Returns:\n        pd.DataFrame: \u5408\u5e76\u540e\u7684\u6570\u636e\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u57fa\u7840\u5e02\u573a\u6570\u636e\n        base_data = self.read_data(start_time, end_time, freq, symbols, raise_on_empty=False)\n\n        if base_data.empty:\n            return pd.DataFrame()\n\n        # \u5982\u679c\u4e0d\u9700\u8981\u989d\u5916\u6570\u636e\uff0c\u76f4\u63a5\u8fd4\u56de\u57fa\u7840\u6570\u636e\n        if not any([include_funding_rate, include_open_interest, include_long_short_ratio]):\n            return base_data\n\n        # \u83b7\u53d6\u989d\u5916\u6570\u636e\u5e76\u5408\u5e76\n        additional_data = []\n\n        if include_funding_rate:\n            try:\n                funding_data = self.read_funding_rate(start_time, end_time, symbols, raise_on_empty=False)\n                if not funding_data.empty:\n                    additional_data.append(funding_data[[\"funding_rate\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get funding rate data: {e}\")\n\n        if include_open_interest:\n            try:\n                oi_data = self.read_open_interest(start_time, end_time, symbols, oi_interval, raise_on_empty=False)\n                if not oi_data.empty:\n                    additional_data.append(oi_data[[\"open_interest\", \"open_interest_value\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get open interest data: {e}\")\n\n        if include_long_short_ratio:\n            try:\n                lsr_data = self.read_long_short_ratio(\n                    start_time,\n                    end_time,\n                    symbols,\n                    lsr_period,\n                    lsr_ratio_type,\n                    raise_on_empty=False,\n                )\n                if not lsr_data.empty:\n                    additional_data.append(lsr_data[[\"long_short_ratio\", \"long_account\", \"short_account\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get long short ratio data: {e}\")\n\n        # \u5408\u5e76\u6570\u636e\n        if additional_data:\n            for data in additional_data:\n                base_data = base_data.join(data, how=\"left\")\n\n        return base_data\n\n    except Exception:\n        logger.exception(\"Failed to get combined data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_symbols_list","title":"<code>get_symbols_list(freq: Freq | None = None) -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6240\u6709\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>freq</code> <p>\u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_symbols_list(self, freq: Freq | None = None) -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6240\u6709\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        freq: \u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            if freq is None:\n                query = \"SELECT DISTINCT symbol FROM market_data ORDER BY symbol\"\n                result = conn.execute(query).fetchall()\n            else:\n                query = \"SELECT DISTINCT symbol FROM market_data WHERE freq = ? ORDER BY symbol\"\n                result = conn.execute(query, (freq.value,)).fetchall()\n\n            return [row[0] for row in result]\n\n    except Exception:\n        logger.exception(\"Failed to get symbols list\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.data_exists","title":"<code>data_exists(symbol: str, start_time: str, end_time: str, freq: Freq) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u662f\u5426\u5b58\u5728\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u6570\u636e</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def data_exists(self, symbol: str, start_time: str, end_time: str, freq: Freq) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u662f\u5426\u5b58\u5728\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u6570\u636e\n    \"\"\"\n    try:\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT COUNT(*) as count\n                FROM market_data\n                WHERE symbol = ? AND freq = ? AND timestamp BETWEEN ? AND ?\n            \"\"\"\n            result = conn.execute(query, (symbol, freq.value, start_ts, end_ts)).fetchone()\n            return result[0] &gt; 0 if result else False\n\n    except Exception:\n        logger.exception(\"Failed to check data existence\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_aggregated_data","title":"<code>get_aggregated_data(symbols: list[str], start_time: str, end_time: str, freq: Freq, agg_period: str = '1D', agg_functions: Any = None) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u805a\u5408\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>agg_period</code> <p>\u805a\u5408\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'1D'</code> </p> <code>agg_functions</code> <p>\u805a\u5408\u51fd\u6570\u5b57\u5178\uff0ckey\u4e3a\u5217\u540d\uff0cvalue\u4e3a\u805a\u5408\u51fd\u6570</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u805a\u5408\u540e\u7684\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_aggregated_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    agg_period: str = \"1D\",  # \u805a\u5408\u5468\u671f\uff1a1D, 1W, 1M\u7b49\n    agg_functions: Any = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u805a\u5408\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        agg_period: \u805a\u5408\u5468\u671f\n        agg_functions: \u805a\u5408\u51fd\u6570\u5b57\u5178\uff0ckey\u4e3a\u5217\u540d\uff0cvalue\u4e3a\u805a\u5408\u51fd\u6570\n\n    Returns:\n        pd.DataFrame: \u805a\u5408\u540e\u7684\u6570\u636e\n    \"\"\"\n    try:\n        # \u9ed8\u8ba4\u805a\u5408\u51fd\u6570\n        if agg_functions is None:\n            agg_functions = {\n                \"open_price\": \"first\",\n                \"high_price\": \"max\",\n                \"low_price\": \"min\",\n                \"close_price\": \"last\",\n                \"volume\": \"sum\",\n                \"quote_volume\": \"sum\",\n                \"trades_count\": \"sum\",\n            }\n\n        # \u83b7\u53d6\u539f\u59cb\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, symbols, raise_on_empty=False)\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # \u6309symbol\u5206\u7ec4\u805a\u5408\n        aggregated_dfs = []\n        for symbol in symbols:\n            if symbol in df.index.get_level_values(\"symbol\"):\n                symbol_data = df.loc[symbol]\n\n                # \u6267\u884c\u805a\u5408 - \u4f7f\u7528\u5b57\u5178\u7c7b\u578b\u8f6c\u6362\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\n                agg_data = symbol_data.resample(agg_period).agg(dict(agg_functions))\n\n                # \u6dfb\u52a0symbol\u7ea7\u522b\u7684\u7d22\u5f15 - \u4f7f\u7528list()\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\n                agg_data.index = pd.MultiIndex.from_product(\n                    [[symbol], list(agg_data.index)], names=[\"symbol\", \"timestamp\"]\n                )\n                aggregated_dfs.append(agg_data)\n\n        if aggregated_dfs:\n            return pd.concat(aggregated_dfs)\n        else:\n            return pd.DataFrame()\n\n    except Exception:\n        logger.exception(\"Failed to get aggregated data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_data_statistics","title":"<code>get_data_statistics(symbols: list[str], start_time: str, end_time: str, freq: Freq, features: list[str] | None = None) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u7684\u7edf\u8ba1\u4fe1\u606f.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u7edf\u8ba1\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u7edf\u8ba1\u4fe1\u606f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_data_statistics(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    features: list[str] | None = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u7684\u7edf\u8ba1\u4fe1\u606f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        features: \u9700\u8981\u7edf\u8ba1\u7684\u7279\u5f81\u5217\u8868\n\n    Returns:\n        pd.DataFrame: \u7edf\u8ba1\u4fe1\u606f\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, symbols, features, raise_on_empty=False)\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # \u6309symbol\u5206\u7ec4\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n        stats_list = []\n        for symbol in symbols:\n            if symbol in df.index.get_level_values(\"symbol\"):\n                symbol_data = df.loc[symbol]\n\n                # \u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n                stats = symbol_data.describe()\n                stats.index = pd.MultiIndex.from_product(\n                    [[symbol], list(stats.index)], names=[\"symbol\", \"statistic\"]\n                )\n                stats_list.append(stats)\n\n        if stats_list:\n            return pd.concat(stats_list)\n        else:\n            return pd.DataFrame()\n\n    except Exception:\n        logger.exception(\"Failed to get data statistics\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] | None = None, data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] | None = None,\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    if features is None:\n        features = [\n            \"close_price\",\n            \"volume\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in date_range]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(start=pd.Timestamp(date), periods=array.shape[1], freq=freq)\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                stacked_series = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                stacked_series.name = feature\n                date_data.append(stacked_series)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for idx, row in df.iterrows():\n                if isinstance(idx, tuple) and len(idx) == 2:\n                    symbol, time = idx\n                    values = [(f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x)) for x in row]\n                    table.add_row(str(time), str(symbol), *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\")\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\")\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\"[yellow]Warning: Index length is less than data length[/]\")\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/","title":"cryptoservice.data.storage_db","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db","title":"<code>cryptoservice.data.storage_db</code>","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool","title":"<code>DatabaseConnectionPool(db_path: Path | str, max_connections: int = 5)</code>","text":"<p>\u7ebf\u7a0b\u5b89\u5168\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5b9e\u73b0</p> <p>\u521d\u59cb\u5316\u8fde\u63a5\u6c60</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_connections</code> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\u6c60\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_connections: \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.max_connections = max_connections\n    self._local = threading.local()  # \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool.get_connection","title":"<code>get_connection() -&gt; Generator[sqlite3.Connection, None, None]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>@contextmanager\ndef get_connection(self) -&gt; Generator[sqlite3.Connection, None, None]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    self._init_thread_connections()\n    connection = self._local.connections.get()\n    try:\n        yield connection\n    finally:\n        self._local.connections.put(connection)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool.close_all","title":"<code>close_all() -&gt; None</code>","text":"<p>\u5173\u95ed\u6240\u6709\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close_all(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6240\u6709\u8fde\u63a5\"\"\"\n    if hasattr(self._local, \"connections\"):\n        while not self._local.connections.empty():\n            connection = self._local.connections.get()\n            connection.close()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB","title":"<code>MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_data","title":"<code>store_data(data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self,\n    data: list[PerpetualMarketTicker] | list[list[PerpetualMarketTicker]],\n    freq: Freq,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[list[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(\n            data_list: Any,\n        ) -&gt; TypeGuard[list[list[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(f\"Successfully stored {len(records)} records for {symbol} with frequency {freq.value}\")\n\n    except Exception:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_funding_rate","title":"<code>store_funding_rate(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u8d44\u91d1\u8d39\u7387\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>FundingRate\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_funding_rate(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u8d44\u91d1\u8d39\u7387\u6570\u636e.\n\n    Args:\n        data: FundingRate\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No funding rate data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.funding_time,\n                \"funding_rate\": float(item.funding_rate),\n                \"funding_time\": item.funding_time,\n                \"mark_price\": float(item.mark_price) if item.mark_price else None,\n                \"index_price\": (float(item.index_price) if item.index_price else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO funding_rate (\n                    symbol, timestamp, funding_rate, funding_time, mark_price, index_price\n                ) VALUES (\n                    :symbol, :timestamp, :funding_rate, :funding_time, :mark_price, :index_price\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} funding rate records\")\n\n    except Exception:\n        logger.exception(\"Failed to store funding rate data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_open_interest","title":"<code>store_open_interest(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>OpenInterest\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_open_interest(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        data: OpenInterest\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No open interest data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.time,\n                \"interval\": getattr(item, \"interval\", \"5m\"),  # \u9ed8\u8ba45m\u95f4\u9694\n                \"open_interest\": float(item.open_interest),\n                \"open_interest_value\": (float(item.open_interest_value) if item.open_interest_value else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO open_interest (\n                    symbol, timestamp, interval, open_interest, open_interest_value\n                ) VALUES (\n                    :symbol, :timestamp, :interval, :open_interest, :open_interest_value\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} open interest records\")\n\n    except Exception:\n        logger.exception(\"Failed to store open interest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_long_short_ratio","title":"<code>store_long_short_ratio(data: list) -&gt; None</code>","text":"<p>\u5b58\u50a8\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>LongShortRatio\u5bf9\u8c61\u5217\u8868</p> <p> TYPE: <code>list</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_long_short_ratio(self, data: list) -&gt; None:\n    \"\"\"\u5b58\u50a8\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        data: LongShortRatio\u5bf9\u8c61\u5217\u8868\n    \"\"\"\n    try:\n        if not data:\n            logger.warning(\"No long short ratio data to store\")\n            return\n\n        records = []\n        for item in data:\n            record = {\n                \"symbol\": item.symbol,\n                \"timestamp\": item.timestamp,\n                \"period\": getattr(item, \"period\", \"5m\"),  # \u9ed8\u8ba45m\u5468\u671f\n                \"ratio_type\": item.ratio_type,\n                \"long_short_ratio\": float(item.long_short_ratio),\n                \"long_account\": (float(item.long_account) if item.long_account else None),\n                \"short_account\": (float(item.short_account) if item.short_account else None),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO long_short_ratio (\n                    symbol, timestamp, period, ratio_type, long_short_ratio, long_account, short_account\n                ) VALUES (\n                    :symbol, :timestamp, :period, :ratio_type, :long_short_ratio, :long_account, :short_account\n                )\n                \"\"\",\n                records,\n            )\n            conn.commit()\n\n        logger.info(f\"Successfully stored {len(records)} long short ratio records\")\n\n    except Exception:\n        logger.exception(\"Failed to store long short ratio data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: list[str], features: list[str] | None = None, raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: list[str],\n    features: list[str] | None = None,\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        return self._read_data_by_timestamp(start_ts, end_ts, freq, symbols, features, raise_on_empty)\n\n    except Exception:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_data_by_timestamp","title":"<code>read_data_by_timestamp(start_ts: int | str, end_ts: int | str, freq: Freq, symbols: list[str], features: list[str] | None = None, raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_ts</code> <p>\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>end_ts</code> <p>\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data_by_timestamp(\n    self,\n    start_ts: int | str,\n    end_ts: int | str,\n    freq: Freq,\n    symbols: list[str],\n    features: list[str] | None = None,\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_ts: \u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        end_ts: \u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\uff0cFalse\u5219\u8fd4\u56de\u7a7aDataFrame\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u65f6\u95f4\u6233\u4e3a\u6574\u6570\n        start_timestamp = int(start_ts)\n        end_timestamp = int(end_ts)\n\n        return self._read_data_by_timestamp(start_timestamp, end_timestamp, freq, symbols, features, raise_on_empty)\n\n    except Exception:\n        logger.exception(\"Failed to read market data by timestamp\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_funding_rate","title":"<code>read_funding_rate(start_time: str, end_time: str, symbols: list[str], raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u8d44\u91d1\u8d39\u7387\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u8d44\u91d1\u8d39\u7387\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_funding_rate(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u8d44\u91d1\u8d39\u7387\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u8d44\u91d1\u8d39\u7387\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, funding_rate, funding_time, mark_price, index_price\n            FROM funding_rate\n            WHERE timestamp BETWEEN ? AND ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params = [start_ts, end_ts] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=tuple(params), parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No funding rate data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"funding_rate\",\n                        \"funding_time\",\n                        \"mark_price\",\n                        \"index_price\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read funding rate data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_open_interest","title":"<code>read_open_interest(start_time: str, end_time: str, symbols: list[str], interval: str = '5m', raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u6301\u4ed3\u91cf\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_open_interest(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    interval: str = \"5m\",\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u65f6\u95f4\u95f4\u9694\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u6301\u4ed3\u91cf\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, interval, open_interest, open_interest_value\n            FROM open_interest\n            WHERE timestamp BETWEEN ? AND ?\n            AND interval = ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params: list[Any] = [start_ts, end_ts, interval] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No open interest data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"interval\",\n                        \"open_interest\",\n                        \"open_interest_value\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read open interest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_long_short_ratio","title":"<code>read_long_short_ratio(start_time: str, end_time: str, symbols: list[str], period: str = '5m', ratio_type: str = 'account', raise_on_empty: bool = True) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>raise_on_empty</code> <p>\u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_long_short_ratio(\n    self,\n    start_time: str,\n    end_time: str,\n    symbols: list[str],\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    raise_on_empty: bool = True,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        period: \u65f6\u95f4\u5468\u671f\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b\n        raise_on_empty: \u5f53\u6ca1\u6709\u6570\u636e\u65f6\u662f\u5426\u629b\u51fa\u5f02\u5e38\n\n    Returns:\n        pd.DataFrame: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        query = \"\"\"\n            SELECT symbol, timestamp, period, ratio_type, long_short_ratio, long_account, short_account\n            FROM long_short_ratio\n            WHERE timestamp BETWEEN ? AND ?\n            AND period = ?\n            AND ratio_type = ?\n            AND symbol IN ({})\n            ORDER BY symbol, timestamp\n        \"\"\".format(\",\".join(\"?\" * len(symbols)))\n\n        params: list[Any] = [start_ts, end_ts, period, ratio_type] + symbols\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            if raise_on_empty:\n                raise ValueError(\"No long short ratio data found for the specified criteria\")\n            else:\n                empty_df = pd.DataFrame(\n                    columns=[\n                        \"symbol\",\n                        \"timestamp\",\n                        \"period\",\n                        \"ratio_type\",\n                        \"long_short_ratio\",\n                        \"long_account\",\n                        \"short_account\",\n                    ]\n                )\n                empty_df = empty_df.set_index([\"symbol\", \"timestamp\"])\n                return empty_df\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to read long short ratio data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.export_to_files_by_timestamp","title":"<code>export_to_files_by_timestamp(output_path: Path | str, start_ts: int | str, end_ts: int | str, freq: Freq, symbols: list[str], target_freq: Freq | None = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u4f7f\u7528\u65f6\u95f4\u6233\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_ts</code> <p>\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>end_ts</code> <p>\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)</p> <p> TYPE: <code>int | str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files_by_timestamp(\n    self,\n    output_path: Path | str,\n    start_ts: int | str,\n    end_ts: int | str,\n    freq: Freq,\n    symbols: list[str],\n    target_freq: Freq | None = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u4f7f\u7528\u65f6\u95f4\u6233\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_ts: \u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        end_ts: \u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2\uff0cint\u6216str)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u65f6\u95f4\u6233\u4e3a\u6574\u6570\n        start_timestamp = int(start_ts)\n        end_timestamp = int(end_ts)\n\n        # \u8f6c\u6362\u65f6\u95f4\u6233\u4e3a\u65e5\u671f\uff0c\u7528\u4e8e\u8ba1\u7b97\u5904\u7406\u8303\u56f4\n        from datetime import datetime\n\n        start_datetime = datetime.fromtimestamp(start_timestamp / 1000)\n        end_datetime = datetime.fromtimestamp(end_timestamp / 1000)\n\n        logger.info(f\"Exporting data from timestamp {start_timestamp} to {end_timestamp}\")\n        logger.info(\n            f\"Date range: {start_datetime.strftime('%Y-%m-%d %H:%M:%S')} to \"\n            f\"{end_datetime.strftime('%Y-%m-%d %H:%M:%S')}\"\n        )\n\n        output_path = Path(output_path)\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4 - \u57fa\u4e8e\u65f6\u95f4\u6233\u8ba1\u7b97\u5b9e\u9645\u7684\u65e5\u671f\u8303\u56f4\n        start_date = start_datetime.date()\n        end_date = end_datetime.date()\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        total_days = len(date_range)\n\n        # \u4f7f\u7528\u6709\u6548\u7684\u9891\u7387\u8fdb\u884c\u5bfc\u51fa\n        export_freq = target_freq if target_freq is not None else freq\n\n        # \u5982\u679c\u603b\u5929\u6570\u5c11\u4e8e\u7b49\u4e8echunk_days\uff0c\u76f4\u63a5\u5904\u7406\u6574\u4e2a\u8303\u56f4\uff0c\u4e0d\u5206\u5757\n        if total_days &lt;= chunk_days:\n            logger.info(\n                f\"Processing all data from timestamp {start_timestamp} to {end_timestamp} \"\n                f\"(total: {total_days} days)\"\n            )\n\n            # \u76f4\u63a5\u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u6240\u6709\u6570\u636e\n            try:\n                df = self._read_data_by_timestamp(\n                    start_timestamp,\n                    end_timestamp,\n                    freq,\n                    symbols,\n                    raise_on_empty=False,\n                )\n            except ValueError as e:\n                if \"No data found\" in str(e):\n                    logger.warning(f\"No data found for timestamp range {start_timestamp} to {end_timestamp}\")\n                    return\n                else:\n                    raise\n\n            if df.empty:\n                logger.warning(f\"No data found for timestamp range {start_timestamp} to {end_timestamp}\")\n                return\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n\n            # \u5904\u7406\u6240\u6709\u6570\u636e\n            self._process_dataframe_for_export_by_timestamp(\n                df, output_path, export_freq, start_timestamp, end_timestamp\n            )\n\n        else:\n            # \u6309chunk_days\u5206\u5757\u5904\u7406\uff08\u7528\u4e8e\u5927\u91cf\u6570\u636e\uff09\n            one_day_ms = 24 * 60 * 60 * 1000  # \u4e00\u5929\u7684\u6beb\u79d2\u6570\n            chunk_ms = chunk_days * one_day_ms\n\n            current_ts = start_timestamp\n            while current_ts &lt; end_timestamp:\n                chunk_end_ts = min(current_ts + chunk_ms, end_timestamp)\n\n                chunk_start_datetime = datetime.fromtimestamp(current_ts / 1000)\n                chunk_end_datetime = datetime.fromtimestamp(chunk_end_ts / 1000)\n\n                logger.info(\n                    f\"Processing data chunk from \"\n                    f\"{chunk_start_datetime.strftime('%Y-%m-%d %H:%M:%S')} to \"\n                    f\"{chunk_end_datetime.strftime('%Y-%m-%d %H:%M:%S')}\"\n                )\n\n                # \u4f7f\u7528\u65f6\u95f4\u6233\u8bfb\u53d6\u6570\u636e\u5757\n                try:\n                    df = self._read_data_by_timestamp(\n                        current_ts,\n                        chunk_end_ts,\n                        freq,\n                        symbols,\n                        raise_on_empty=False,\n                    )\n                except ValueError as e:\n                    if \"No data found\" in str(e):\n                        logger.warning(f\"No data found for timestamp range {current_ts} to {chunk_end_ts}\")\n                        current_ts = chunk_end_ts\n                        continue\n                    else:\n                        raise\n\n                if df.empty:\n                    logger.warning(f\"No data found for timestamp range {current_ts} to {chunk_end_ts}\")\n                    current_ts = chunk_end_ts\n                    continue\n\n                # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n                if target_freq is not None:\n                    df = self._resample_data(df, target_freq)\n\n                # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\n                self._process_dataframe_for_export_by_timestamp(\n                    df, output_path, export_freq, current_ts, chunk_end_ts\n                )\n\n                # \u6e05\u7406\u5185\u5b58\n                del df\n                current_ts = chunk_end_ts\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data by timestamp: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: list[str], target_freq: Freq | None = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: list[str],\n    target_freq: Freq | None = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        total_days = len(date_range)\n\n        # \u5982\u679c\u603b\u5929\u6570\u5c11\u4e8e\u7b49\u4e8echunk_days\uff0c\u76f4\u63a5\u5904\u7406\u6574\u4e2a\u8303\u56f4\uff0c\u4e0d\u5206\u5757\n        if total_days &lt;= chunk_days:\n            logger.info(f\"Processing all data from {start_date} to {end_date} (total: {total_days} days)\")\n\n            # \u8bfb\u53d6\u6240\u6709\u6570\u636e\n            try:\n                df = self.read_data(\n                    start_date,\n                    end_date,\n                    freq,\n                    symbols,\n                    raise_on_empty=False,\n                )\n            except ValueError as e:\n                if \"No data found\" in str(e):\n                    logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                    return\n                else:\n                    raise\n\n            if df.empty:\n                logger.warning(f\"No data found for period {start_date} to {end_date}\")\n                return\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5904\u7406\u6240\u6709\u6570\u636e\n            self._process_dataframe_for_export(df, output_path, freq, date_range)\n\n        else:\n            # \u6309chunk_days\u5206\u5757\u5904\u7406\uff08\u7528\u4e8e\u5927\u91cf\u6570\u636e\uff09\n            for chunk_start in range(0, len(date_range), chunk_days):\n                chunk_end = min(chunk_start + chunk_days, len(date_range))\n                chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n                chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n                logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n                # \u8bfb\u53d6\u6570\u636e\u5757\n                try:\n                    df = self.read_data(\n                        chunk_start_date,\n                        chunk_end_date,\n                        freq,\n                        symbols,\n                        raise_on_empty=False,\n                    )\n                except ValueError as e:\n                    if \"No data found\" in str(e):\n                        logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                        continue\n                    else:\n                        raise\n\n                if df.empty:\n                    logger.warning(f\"No data found for period {chunk_start_date} to {chunk_end_date}\")\n                    continue\n\n                # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n                if target_freq is not None:\n                    df = self._resample_data(df, target_freq)\n                    freq = target_freq\n\n                # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\n                chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n                self._process_dataframe_for_export(df, output_path, freq, chunk_dates)\n\n                # \u6e05\u7406\u5185\u5b58\n                del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.is_date_matching","title":"<code>is_date_matching(ts: Any, target_date: datetime.date) -&gt; bool</code>","text":"<p>\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def is_date_matching(self, ts: Any, target_date: datetime.date) -&gt; bool:\n    \"\"\"\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f\"\"\"\n    # \u786e\u4fdd\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u800c\u4e0d\u662fAny\u7c7b\u578b\n    return bool(pd.Timestamp(ts).date() == target_date)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.process_dataframe_by_date","title":"<code>process_dataframe_by_date(df: pd.DataFrame, date: datetime.date, feature_processor: Callable[[pd.DataFrame, str], None]) -&gt; None</code>","text":"<p>\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def process_dataframe_by_date(\n    self,\n    df: pd.DataFrame,\n    date: datetime.date,\n    feature_processor: Callable[[pd.DataFrame, str], None],\n) -&gt; None:\n    \"\"\"\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\"\"\"\n    timestamps = df.index.get_level_values(\"timestamp\")\n    # \u4e0d\u4f7f\u7528.values\uff0c\u76f4\u63a5\u4f7f\u7528Series\u4f5c\u4e3a\u5e03\u5c14\u7d22\u5f15\n    date_mask = pd.Series(timestamps).map(lambda ts: pd.Timestamp(ts).date() == date)\n    # \u4f7f\u7528\u5e03\u5c14Series\u8fdb\u884c\u7d22\u5f15\n    day_data = df.loc[date_mask]\n\n    if day_data.empty:\n        return\n\n    # \u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\n    for feature in df.columns:\n        feature_processor(day_data, feature)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_data_summary","title":"<code>get_data_summary() -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6982\u51b5\u7edf\u8ba1.</p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u5404\u79cd\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_data_summary(self) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6982\u51b5\u7edf\u8ba1.\n\n    Returns:\n        dict: \u5305\u542b\u5404\u79cd\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            # \u83b7\u53d6\u5e02\u573a\u6570\u636e\u7edf\u8ba1\n            market_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    freq,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp,\n                    MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                    MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                FROM market_data\n                GROUP BY freq\n            \"\"\"\n            ).fetchall()\n\n            # \u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u7edf\u8ba1\n            funding_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM funding_rate\n            \"\"\"\n            ).fetchone()\n\n            # \u83b7\u53d6\u6301\u4ed3\u91cf\u7edf\u8ba1\n            oi_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    interval,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM open_interest\n                GROUP BY interval\n            \"\"\"\n            ).fetchall()\n\n            # \u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u7edf\u8ba1\n            lsr_stats = conn.execute(\n                \"\"\"\n                SELECT\n                    period,\n                    ratio_type,\n                    COUNT(*) as record_count,\n                    COUNT(DISTINCT symbol) as unique_symbols,\n                    MIN(timestamp) as earliest_timestamp,\n                    MAX(timestamp) as latest_timestamp\n                FROM long_short_ratio\n                GROUP BY period, ratio_type\n            \"\"\"\n            ).fetchall()\n\n            return {\n                \"market_data\": [dict(row) for row in market_stats],\n                \"funding_rate\": dict(funding_stats) if funding_stats else {},\n                \"open_interest\": [dict(row) for row in oi_stats],\n                \"long_short_ratio\": [dict(row) for row in lsr_stats],\n            }\n\n    except Exception:\n        logger.exception(\"Failed to get data summary\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_symbol_data_range","title":"<code>get_symbol_data_range(symbol: str, freq: Freq | None = None) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u65f6\u95f4\u8303\u56f4.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_symbol_data_range(self, symbol: str, freq: Freq | None = None) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u65f6\u95f4\u8303\u56f4.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\n\n    Returns:\n        dict: \u5305\u542b\u65f6\u95f4\u8303\u56f4\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            if freq is None:\n                # \u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u6570\u636e\u8303\u56f4\n                query = \"\"\"\n                    SELECT\n                        freq,\n                        COUNT(*) as record_count,\n                        MIN(timestamp) as earliest_timestamp,\n                        MAX(timestamp) as latest_timestamp,\n                        MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                        MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                    FROM market_data\n                    WHERE symbol = ?\n                    GROUP BY freq\n                \"\"\"\n                result = conn.execute(query, (symbol,)).fetchall()\n                return {\n                    \"symbol\": symbol,\n                    \"frequencies\": [dict(row) for row in result],\n                }\n            else:\n                # \u83b7\u53d6\u6307\u5b9a\u9891\u7387\u7684\u6570\u636e\u8303\u56f4\n                query = \"\"\"\n                    SELECT\n                        COUNT(*) as record_count,\n                        MIN(timestamp) as earliest_timestamp,\n                        MAX(timestamp) as latest_timestamp,\n                        MIN(date(timestamp/1000, 'unixepoch')) as earliest_date,\n                        MAX(date(timestamp/1000, 'unixepoch')) as latest_date\n                    FROM market_data\n                    WHERE symbol = ? AND freq = ?\n                \"\"\"\n                result = conn.execute(query, (symbol, freq.value)).fetchone()\n                result_dict = {\n                    \"symbol\": symbol,\n                    \"frequency\": freq.value,\n                }\n                if result:\n                    result_dict.update(dict(result))\n                return result_dict\n\n    except Exception:\n        logger.exception(\"Failed to get symbol data range\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.check_data_completeness","title":"<code>check_data_completeness(symbol: str, start_time: str, end_time: str, freq: Freq, expected_interval_minutes: int | None = None) -&gt; dict[str, Any]</code>","text":"<p>\u68c0\u67e5\u6570\u636e\u7684\u5b8c\u6574\u6027.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>expected_interval_minutes</code> <p>\u9884\u671f\u7684\u65f6\u95f4\u95f4\u9694\uff08\u5206\u949f\uff09\uff0cNone\u8868\u793a\u81ea\u52a8\u63a8\u65ad</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>\u5305\u542b\u5b8c\u6574\u6027\u68c0\u67e5\u7ed3\u679c\u7684\u5b57\u5178</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def check_data_completeness(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    expected_interval_minutes: int | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"\u68c0\u67e5\u6570\u636e\u7684\u5b8c\u6574\u6027.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        expected_interval_minutes: \u9884\u671f\u7684\u65f6\u95f4\u95f4\u9694\uff08\u5206\u949f\uff09\uff0cNone\u8868\u793a\u81ea\u52a8\u63a8\u65ad\n\n    Returns:\n        dict: \u5305\u542b\u5b8c\u6574\u6027\u68c0\u67e5\u7ed3\u679c\u7684\u5b57\u5178\n    \"\"\"\n    try:\n        # \u81ea\u52a8\u63a8\u65ad\u65f6\u95f4\u95f4\u9694\n        if expected_interval_minutes is None:\n            freq_to_minutes = {\n                Freq.m1: 1,\n                Freq.m3: 3,\n                Freq.m5: 5,\n                Freq.m15: 15,\n                Freq.m30: 30,\n                Freq.h1: 60,\n                Freq.h2: 120,\n                Freq.h4: 240,\n                Freq.h6: 360,\n                Freq.h8: 480,\n                Freq.h12: 720,\n                Freq.d1: 1440,\n            }\n            expected_interval_minutes = freq_to_minutes.get(freq, 1)\n\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol], raise_on_empty=False)\n\n        if df.empty:\n            return {\n                \"symbol\": symbol,\n                \"period\": f\"{start_time} to {end_time}\",\n                \"frequency\": freq.value,\n                \"total_records\": 0,\n                \"missing_records\": 0,\n                \"completeness_rate\": 0.0,\n                \"missing_periods\": [],\n            }\n\n        # \u83b7\u53d6\u5b9e\u9645\u65f6\u95f4\u6233\n        actual_timestamps = sorted(df.index.get_level_values(\"timestamp\").unique())\n\n        # \u751f\u6210\u9884\u671f\u7684\u65f6\u95f4\u6233\u5e8f\u5217\n        start_ts = pd.Timestamp(start_time)\n        end_ts = pd.Timestamp(end_time)\n        expected_timestamps = pd.date_range(start=start_ts, end=end_ts, freq=f\"{expected_interval_minutes}min\")\n\n        # \u8f6c\u6362\u4e3a\u6beb\u79d2\u65f6\u95f4\u6233\n        expected_ts_ms = [int(ts.timestamp() * 1000) for ts in expected_timestamps]\n        actual_ts_ms = [int(pd.Timestamp(ts).timestamp() * 1000) for ts in actual_timestamps]\n\n        # \u627e\u51fa\u7f3a\u5931\u7684\u65f6\u95f4\u6233\n        missing_ts = set(expected_ts_ms) - set(actual_ts_ms)\n        missing_periods = [pd.Timestamp(ts, unit=\"ms\").strftime(\"%Y-%m-%d %H:%M:%S\") for ts in sorted(missing_ts)]\n\n        return {\n            \"symbol\": symbol,\n            \"period\": f\"{start_time} to {end_time}\",\n            \"frequency\": freq.value,\n            \"expected_records\": len(expected_ts_ms),\n            \"actual_records\": len(actual_ts_ms),\n            \"missing_records\": len(missing_ts),\n            \"completeness_rate\": ((len(actual_ts_ms) / len(expected_ts_ms)) * 100 if expected_ts_ms else 0),\n            \"missing_periods\": missing_periods[:10],  # \u53ea\u663e\u793a\u524d10\u4e2a\u7f3a\u5931\u65f6\u95f4\u70b9\n        }\n\n    except Exception:\n        logger.exception(\"Failed to check data completeness\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_latest_data","title":"<code>get_latest_data(symbols: list[str], freq: Freq, limit: int = 1) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u70b9.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>limit</code> <p>\u6bcf\u4e2asymbol\u8fd4\u56de\u7684\u8bb0\u5f55\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u6700\u65b0\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_latest_data(self, symbols: list[str], freq: Freq, limit: int = 1) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u6700\u65b0\u7684\u6570\u636e\u70b9.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n        limit: \u6bcf\u4e2asymbol\u8fd4\u56de\u7684\u8bb0\u5f55\u6570\n\n    Returns:\n        pd.DataFrame: \u6700\u65b0\u6570\u636e\n    \"\"\"\n    try:\n        placeholders = \",\".join(\"?\" * len(symbols))\n        query = f\"\"\"\n            SELECT symbol, timestamp,\n                   open_price, high_price, low_price, close_price,\n                   volume, quote_volume, trades_count,\n                   taker_buy_volume, taker_buy_quote_volume,\n                   taker_sell_volume, taker_sell_quote_volume\n            FROM (\n                SELECT *,\n                       ROW_NUMBER() OVER (PARTITION BY symbol ORDER BY timestamp DESC) as rn\n                FROM market_data\n                WHERE freq = ? AND symbol IN ({placeholders})\n            ) ranked\n            WHERE rn &lt;= ?\n            ORDER BY symbol, timestamp DESC\n        \"\"\"\n\n        params = tuple([freq.value] + symbols + [limit])\n\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            return pd.DataFrame()\n\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception:\n        logger.exception(\"Failed to get latest data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_combined_data","title":"<code>get_combined_data(symbols: list[str], start_time: str, end_time: str, freq: Freq, include_funding_rate: bool = False, include_open_interest: bool = False, include_long_short_ratio: bool = False, oi_interval: str = '5m', lsr_period: str = '5m', lsr_ratio_type: str = 'account') -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u5408\u5e76\u7684\u591a\u7c7b\u578b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>include_funding_rate</code> <p>\u662f\u5426\u5305\u542b\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_open_interest</code> <p>\u662f\u5426\u5305\u542b\u6301\u4ed3\u91cf\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_long_short_ratio</code> <p>\u662f\u5426\u5305\u542b\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>oi_interval</code> <p>\u6301\u4ed3\u91cf\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>lsr_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>lsr_ratio_type</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5408\u5e76\u540e\u7684\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_combined_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    include_funding_rate: bool = False,\n    include_open_interest: bool = False,\n    include_long_short_ratio: bool = False,\n    oi_interval: str = \"5m\",\n    lsr_period: str = \"5m\",\n    lsr_ratio_type: str = \"account\",\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u5408\u5e76\u7684\u591a\u7c7b\u578b\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        include_funding_rate: \u662f\u5426\u5305\u542b\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        include_open_interest: \u662f\u5426\u5305\u542b\u6301\u4ed3\u91cf\u6570\u636e\n        include_long_short_ratio: \u662f\u5426\u5305\u542b\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\n        oi_interval: \u6301\u4ed3\u91cf\u65f6\u95f4\u95f4\u9694\n        lsr_period: \u591a\u7a7a\u6bd4\u4f8b\u65f6\u95f4\u5468\u671f\n        lsr_ratio_type: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n\n    Returns:\n        pd.DataFrame: \u5408\u5e76\u540e\u7684\u6570\u636e\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u57fa\u7840\u5e02\u573a\u6570\u636e\n        base_data = self.read_data(start_time, end_time, freq, symbols, raise_on_empty=False)\n\n        if base_data.empty:\n            return pd.DataFrame()\n\n        # \u5982\u679c\u4e0d\u9700\u8981\u989d\u5916\u6570\u636e\uff0c\u76f4\u63a5\u8fd4\u56de\u57fa\u7840\u6570\u636e\n        if not any([include_funding_rate, include_open_interest, include_long_short_ratio]):\n            return base_data\n\n        # \u83b7\u53d6\u989d\u5916\u6570\u636e\u5e76\u5408\u5e76\n        additional_data = []\n\n        if include_funding_rate:\n            try:\n                funding_data = self.read_funding_rate(start_time, end_time, symbols, raise_on_empty=False)\n                if not funding_data.empty:\n                    additional_data.append(funding_data[[\"funding_rate\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get funding rate data: {e}\")\n\n        if include_open_interest:\n            try:\n                oi_data = self.read_open_interest(start_time, end_time, symbols, oi_interval, raise_on_empty=False)\n                if not oi_data.empty:\n                    additional_data.append(oi_data[[\"open_interest\", \"open_interest_value\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get open interest data: {e}\")\n\n        if include_long_short_ratio:\n            try:\n                lsr_data = self.read_long_short_ratio(\n                    start_time,\n                    end_time,\n                    symbols,\n                    lsr_period,\n                    lsr_ratio_type,\n                    raise_on_empty=False,\n                )\n                if not lsr_data.empty:\n                    additional_data.append(lsr_data[[\"long_short_ratio\", \"long_account\", \"short_account\"]])\n            except Exception as e:\n                logger.warning(f\"Failed to get long short ratio data: {e}\")\n\n        # \u5408\u5e76\u6570\u636e\n        if additional_data:\n            for data in additional_data:\n                base_data = base_data.join(data, how=\"left\")\n\n        return base_data\n\n    except Exception:\n        logger.exception(\"Failed to get combined data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_symbols_list","title":"<code>get_symbols_list(freq: Freq | None = None) -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6240\u6709\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>freq</code> <p>\u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>Freq | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_symbols_list(self, freq: Freq | None = None) -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u6240\u6709\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        freq: \u6570\u636e\u9891\u7387\uff0cNone\u8868\u793a\u83b7\u53d6\u6240\u6709\u9891\u7387\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            if freq is None:\n                query = \"SELECT DISTINCT symbol FROM market_data ORDER BY symbol\"\n                result = conn.execute(query).fetchall()\n            else:\n                query = \"SELECT DISTINCT symbol FROM market_data WHERE freq = ? ORDER BY symbol\"\n                result = conn.execute(query, (freq.value,)).fetchall()\n\n            return [row[0] for row in result]\n\n    except Exception:\n        logger.exception(\"Failed to get symbols list\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.data_exists","title":"<code>data_exists(symbol: str, start_time: str, end_time: str, freq: Freq) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u662f\u5426\u5b58\u5728\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u6570\u636e</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def data_exists(self, symbol: str, start_time: str, end_time: str, freq: Freq) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u662f\u5426\u5b58\u5728\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u6570\u636e\n    \"\"\"\n    try:\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT COUNT(*) as count\n                FROM market_data\n                WHERE symbol = ? AND freq = ? AND timestamp BETWEEN ? AND ?\n            \"\"\"\n            result = conn.execute(query, (symbol, freq.value, start_ts, end_ts)).fetchone()\n            return result[0] &gt; 0 if result else False\n\n    except Exception:\n        logger.exception(\"Failed to check data existence\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_aggregated_data","title":"<code>get_aggregated_data(symbols: list[str], start_time: str, end_time: str, freq: Freq, agg_period: str = '1D', agg_functions: Any = None) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u805a\u5408\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>agg_period</code> <p>\u805a\u5408\u5468\u671f</p> <p> TYPE: <code>str</code> DEFAULT: <code>'1D'</code> </p> <code>agg_functions</code> <p>\u805a\u5408\u51fd\u6570\u5b57\u5178\uff0ckey\u4e3a\u5217\u540d\uff0cvalue\u4e3a\u805a\u5408\u51fd\u6570</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u805a\u5408\u540e\u7684\u6570\u636e</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_aggregated_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    agg_period: str = \"1D\",  # \u805a\u5408\u5468\u671f\uff1a1D, 1W, 1M\u7b49\n    agg_functions: Any = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u805a\u5408\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        agg_period: \u805a\u5408\u5468\u671f\n        agg_functions: \u805a\u5408\u51fd\u6570\u5b57\u5178\uff0ckey\u4e3a\u5217\u540d\uff0cvalue\u4e3a\u805a\u5408\u51fd\u6570\n\n    Returns:\n        pd.DataFrame: \u805a\u5408\u540e\u7684\u6570\u636e\n    \"\"\"\n    try:\n        # \u9ed8\u8ba4\u805a\u5408\u51fd\u6570\n        if agg_functions is None:\n            agg_functions = {\n                \"open_price\": \"first\",\n                \"high_price\": \"max\",\n                \"low_price\": \"min\",\n                \"close_price\": \"last\",\n                \"volume\": \"sum\",\n                \"quote_volume\": \"sum\",\n                \"trades_count\": \"sum\",\n            }\n\n        # \u83b7\u53d6\u539f\u59cb\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, symbols, raise_on_empty=False)\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # \u6309symbol\u5206\u7ec4\u805a\u5408\n        aggregated_dfs = []\n        for symbol in symbols:\n            if symbol in df.index.get_level_values(\"symbol\"):\n                symbol_data = df.loc[symbol]\n\n                # \u6267\u884c\u805a\u5408 - \u4f7f\u7528\u5b57\u5178\u7c7b\u578b\u8f6c\u6362\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\n                agg_data = symbol_data.resample(agg_period).agg(dict(agg_functions))\n\n                # \u6dfb\u52a0symbol\u7ea7\u522b\u7684\u7d22\u5f15 - \u4f7f\u7528list()\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\n                agg_data.index = pd.MultiIndex.from_product(\n                    [[symbol], list(agg_data.index)], names=[\"symbol\", \"timestamp\"]\n                )\n                aggregated_dfs.append(agg_data)\n\n        if aggregated_dfs:\n            return pd.concat(aggregated_dfs)\n        else:\n            return pd.DataFrame()\n\n    except Exception:\n        logger.exception(\"Failed to get aggregated data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_data_statistics","title":"<code>get_data_statistics(symbols: list[str], start_time: str, end_time: str, freq: Freq, features: list[str] | None = None) -&gt; pd.DataFrame</code>","text":"<p>\u83b7\u53d6\u6570\u636e\u7684\u7edf\u8ba1\u4fe1\u606f.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u7edf\u8ba1\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u7edf\u8ba1\u4fe1\u606f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_data_statistics(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    features: list[str] | None = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u83b7\u53d6\u6570\u636e\u7684\u7edf\u8ba1\u4fe1\u606f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        features: \u9700\u8981\u7edf\u8ba1\u7684\u7279\u5f81\u5217\u8868\n\n    Returns:\n        pd.DataFrame: \u7edf\u8ba1\u4fe1\u606f\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, symbols, features, raise_on_empty=False)\n\n        if df.empty:\n            return pd.DataFrame()\n\n        # \u6309symbol\u5206\u7ec4\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n        stats_list = []\n        for symbol in symbols:\n            if symbol in df.index.get_level_values(\"symbol\"):\n                symbol_data = df.loc[symbol]\n\n                # \u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n                stats = symbol_data.describe()\n                stats.index = pd.MultiIndex.from_product(\n                    [[symbol], list(stats.index)], names=[\"symbol\", \"statistic\"]\n                )\n                stats_list.append(stats)\n\n        if stats_list:\n            return pd.concat(stats_list)\n        else:\n            return pd.DataFrame()\n\n    except Exception:\n        logger.exception(\"Failed to get data statistics\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/","title":"cryptoservice.data.storage_utils","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils","title":"<code>cryptoservice.data.storage_utils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u51fd\u6570.</p>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"mean\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] | None = None, data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] | None = None,\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    if features is None:\n        features = [\n            \"close_price\",\n            \"volume\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in date_range]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(start=pd.Timestamp(date), periods=array.shape[1], freq=freq)\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                stacked_series = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                stacked_series.name = feature\n                date_data.append(stacked_series)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for idx, row in df.iterrows():\n                if isinstance(idx, tuple) and len(idx) == 2:\n                    symbol, time = idx\n                    values = [(f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x)) for x in row]\n                    table.add_row(str(time), str(symbol), *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\")\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\")\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\"[yellow]Warning: Index length is less than data length[/]\")\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/","title":"cryptoservice.exceptions","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions","title":"<code>cryptoservice.exceptions</code>","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.InvalidSymbolError","title":"<code>InvalidSymbolError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>\u65e0\u6548\u7684\u4ea4\u6613\u5bf9\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataError","title":"<code>MarketDataError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u5e02\u573a\u6570\u636e\u76f8\u5173\u9519\u8bef\u7684\u57fa\u7c7b.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataFetchError","title":"<code>MarketDataFetchError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u83b7\u53d6\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataParseError","title":"<code>MarketDataParseError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u89e3\u6790\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataStoreError","title":"<code>MarketDataStoreError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u5b58\u50a8\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.RateLimitError","title":"<code>RateLimitError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>API\u8bf7\u6c42\u901f\u7387\u9650\u5236\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/","title":"cryptoservice.exceptions.market_exceptions","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions","title":"<code>cryptoservice.exceptions.market_exceptions</code>","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataError","title":"<code>MarketDataError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u5e02\u573a\u6570\u636e\u76f8\u5173\u9519\u8bef\u7684\u57fa\u7c7b.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataFetchError","title":"<code>MarketDataFetchError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u83b7\u53d6\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataParseError","title":"<code>MarketDataParseError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u89e3\u6790\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.InvalidSymbolError","title":"<code>InvalidSymbolError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>\u65e0\u6548\u7684\u4ea4\u6613\u5bf9\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataStoreError","title":"<code>MarketDataStoreError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u5b58\u50a8\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.RateLimitError","title":"<code>RateLimitError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>API\u8bf7\u6c42\u901f\u7387\u9650\u5236\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/","title":"cryptoservice.interfaces","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces","title":"<code>cryptoservice.interfaces</code>","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; list[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.h1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: Optional[RetryConfig] = None, request_delay: float = 0.5) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: Optional[RetryConfig] = None,\n    request_delay: float = 0.5,\n) -&gt; None:\n    \"\"\"\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>  <code>abstractmethod</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[FundingRate]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/","title":"cryptoservice.interfaces.market_interfaces","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces","title":"<code>cryptoservice.interfaces.market_interfaces</code>","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | list[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; list[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.h1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: Optional[RetryConfig] = None, request_delay: float = 0.5) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: Optional[RetryConfig] = None,\n    request_delay: float = 0.5,\n) -&gt; None:\n    \"\"\"\u6839\u636euniverse\u5b9a\u4e49\u6587\u4ef6\u4e0b\u8f7d\u76f8\u5e94\u7684\u5386\u53f2\u6570\u636e\u5230\u6570\u636e\u5e93.\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u5728\u6570\u636e\u671f\u95f4\u524d\u540e\u589e\u52a0\u7684\u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>  <code>abstractmethod</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[FundingRate]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/models/","title":"cryptoservice.models","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models","title":"<code>cryptoservice.models</code>","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq","title":"<code>Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq.from_string","title":"<code>from_string(interval_str: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> PARAMETER DESCRIPTION <code>interval_str</code> <p>\u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Freq</code> <p>\u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c</p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_string(cls, interval_str: str) -&gt; \"Freq\":\n    \"\"\"\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\n\n    Args:\n        interval_str: \u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49\n\n    Returns:\n        \u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c\n\n    Raises:\n        ValueError: \u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548\n    \"\"\"\n    # \u4fdd\u5b58\u539f\u59cb\u5b57\u7b26\u4e32\u7528\u4e8e\u5927\u5c0f\u5199\u654f\u611f\u6bd4\u8f83\n    original_str = interval_str.strip()\n\n    # \u5904\u7406\u5927\u5c0f\u5199\u654f\u611f\u7684\u6708\u4efd\n    if original_str == \"1M\":\n        return cls.M1\n\n    # \u6807\u51c6\u5316\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a\u5c0f\u5199\n    interval_str = original_str.lower()\n\n    # \u6620\u5c04\u5b57\u5178\n    string_to_freq = {\n        \"1s\": cls.s1,\n        \"1m\": cls.m1,\n        \"3m\": cls.m3,\n        \"5m\": cls.m5,\n        \"15m\": cls.m15,\n        \"30m\": cls.m30,\n        \"1h\": cls.h1,\n        \"2h\": cls.h2,\n        \"4h\": cls.h4,\n        \"6h\": cls.h6,\n        \"8h\": cls.h8,\n        \"12h\": cls.h12,\n        \"1d\": cls.d1,\n        \"3d\": cls.d3,\n        \"1w\": cls.w1,\n    }\n\n    result = string_to_freq.get(interval_str)\n    if result is None:\n        raise ValueError(f\"Invalid interval string: {original_str}\")\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType","title":"<code>HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.SortBy","title":"<code>SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.Univ","title":"<code>Univ</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u6570\u636e\u96c6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.ErrorSeverity","title":"<code>ErrorSeverity</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u9519\u8bef\u4e25\u91cd\u7a0b\u5ea6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.DailyMarketTicker","title":"<code>DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.KlineIndex","title":"<code>KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.KlineMarketTicker","title":"<code>KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker","title":"<code>PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.SymbolTicker","title":"<code>SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.FundingRate","title":"<code>FundingRate(symbol: str, funding_time: int, funding_rate: Decimal, mark_price: Decimal | None = None, index_price: Decimal | None = None, estimated_settle_price: Decimal | None = None, last_funding_rate: Decimal | None = None, next_funding_time: int | None = None, interest_rate: Decimal | None = None)</code>  <code>dataclass</code>","text":"<p>\u8d44\u91d1\u8d39\u7387\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>funding_time</code> <p>\u8d44\u91d1\u8d39\u7387\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\uff09</p> <p> TYPE: <code>int</code> </p> <code>funding_rate</code> <p>\u8d44\u91d1\u8d39\u7387</p> <p> TYPE: <code>Decimal</code> </p> <code>mark_price</code> <p>\u6807\u8bb0\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>index_price</code> <p>\u6307\u6570\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>estimated_settle_price</code> <p>\u9884\u4f30\u7ed3\u7b97\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>last_funding_rate</code> <p>\u4e0a\u4e00\u6b21\u8d44\u91d1\u8d39\u7387\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>next_funding_time</code> <p>\u4e0b\u4e00\u6b21\u8d44\u91d1\u8d39\u7387\u65f6\u95f4\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>int | None</code> </p> <code>interest_rate</code> <p>\u5229\u7387\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.FundingRate-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.FundingRate.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any]) -&gt; FundingRate</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaFundingRate\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>FundingRate</code> <p>\u8d44\u91d1\u8d39\u7387\u5b9e\u4f8b</p> <p> TYPE: <code>FundingRate</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any]) -&gt; \"FundingRate\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaFundingRate\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n\n    Returns:\n        FundingRate: \u8d44\u91d1\u8d39\u7387\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        funding_time=int(data[\"fundingTime\"]),\n        funding_rate=Decimal(str(data[\"fundingRate\"])),\n        mark_price=Decimal(str(data[\"markPrice\"])) if \"markPrice\" in data else None,\n        index_price=(Decimal(str(data[\"indexPrice\"])) if \"indexPrice\" in data else None),\n        estimated_settle_price=(\n            Decimal(str(data[\"estimatedSettlePrice\"])) if \"estimatedSettlePrice\" in data else None\n        ),\n        last_funding_rate=(Decimal(str(data[\"lastFundingRate\"])) if \"lastFundingRate\" in data else None),\n        next_funding_time=(int(data[\"nextFundingTime\"]) if \"nextFundingTime\" in data else None),\n        interest_rate=(Decimal(str(data[\"interestRate\"])) if \"interestRate\" in data else None),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.FundingRate.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    result = {\n        \"symbol\": self.symbol,\n        \"funding_time\": self.funding_time,\n        \"funding_rate\": float(self.funding_rate),\n    }\n\n    if self.mark_price is not None:\n        result[\"mark_price\"] = float(self.mark_price)\n    if self.index_price is not None:\n        result[\"index_price\"] = float(self.index_price)\n    if self.estimated_settle_price is not None:\n        result[\"estimated_settle_price\"] = float(self.estimated_settle_price)\n    if self.last_funding_rate is not None:\n        result[\"last_funding_rate\"] = float(self.last_funding_rate)\n    if self.next_funding_time is not None:\n        result[\"next_funding_time\"] = self.next_funding_time\n    if self.interest_rate is not None:\n        result[\"interest_rate\"] = float(self.interest_rate)\n\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.OpenInterest","title":"<code>OpenInterest(symbol: str, open_interest: Decimal, time: int, open_interest_value: Decimal | None = None)</code>  <code>dataclass</code>","text":"<p>\u6301\u4ed3\u91cf\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>open_interest</code> <p>\u6301\u4ed3\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>time</code> <p>\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> TYPE: <code>int</code> </p> <code>open_interest_value</code> <p>\u6301\u4ed3\u91cf\u4ef7\u503c\uff08\u53ef\u9009\uff0cUSDT\u8ba1\u4ef7\uff09</p> <p> TYPE: <code>Decimal | None</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.OpenInterest-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.OpenInterest.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any]) -&gt; OpenInterest</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaOpenInterest\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>OpenInterest</code> <p>\u6301\u4ed3\u91cf\u5b9e\u4f8b</p> <p> TYPE: <code>OpenInterest</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any]) -&gt; \"OpenInterest\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaOpenInterest\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n\n    Returns:\n        OpenInterest: \u6301\u4ed3\u91cf\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        open_interest=Decimal(str(data[\"sumOpenInterest\"])),\n        time=int(data[\"timestamp\"]),\n        open_interest_value=(\n            Decimal(str(data[\"sumOpenInterestValue\"])) if \"sumOpenInterestValue\" in data else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.OpenInterest.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    result = {\n        \"symbol\": self.symbol,\n        \"open_interest\": float(self.open_interest),\n        \"time\": self.time,\n    }\n\n    if self.open_interest_value is not None:\n        result[\"open_interest_value\"] = float(self.open_interest_value)\n\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.LongShortRatio","title":"<code>LongShortRatio(symbol: str, long_short_ratio: Decimal, long_account: Decimal, short_account: Decimal, timestamp: int, ratio_type: str = 'account')</code>  <code>dataclass</code>","text":"<p>\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>long_short_ratio</code> <p>\u591a\u7a7a\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>long_account</code> <p>\u591a\u5934\u8d26\u6237\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>short_account</code> <p>\u7a7a\u5934\u8d26\u6237\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>timestamp</code> <p>\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> TYPE: <code>int</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b\uff08account/position/global\u7b49\uff09</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.LongShortRatio-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.LongShortRatio.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any], ratio_type: str = 'account') -&gt; LongShortRatio</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaLongShortRatio\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> RETURNS DESCRIPTION <code>LongShortRatio</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u5b9e\u4f8b</p> <p> TYPE: <code>LongShortRatio</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any], ratio_type: str = \"account\") -&gt; \"LongShortRatio\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaLongShortRatio\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b\n\n    Returns:\n        LongShortRatio: \u591a\u7a7a\u6bd4\u4f8b\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        long_short_ratio=Decimal(str(data[\"longShortRatio\"])),\n        long_account=Decimal(str(data.get(\"longAccount\", data.get(\"longPosition\", \"0\")))),\n        short_account=Decimal(str(data.get(\"shortAccount\", data.get(\"shortPosition\", \"0\")))),\n        timestamp=int(data[\"timestamp\"]),\n        ratio_type=ratio_type,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.LongShortRatio.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    return {\n        \"symbol\": self.symbol,\n        \"long_short_ratio\": float(self.long_short_ratio),\n        \"long_account\": float(self.long_account),\n        \"short_account\": float(self.short_account),\n        \"timestamp\": self.timestamp,\n        \"ratio_type\": self.ratio_type,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseConfig","title":"<code>UniverseConfig(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, delay_days: int, quote_asset: str, top_k: int | None = None, top_ratio: float | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u914d\u7f6e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>delay_days</code> <p>\u5ef6\u8fdf\u5929\u6570</p> <p> TYPE: <code>int</code> </p> <code>quote_asset</code> <p>\u8ba1\u4ef7\u5e01\u79cd</p> <p> TYPE: <code>str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf</p> <p> TYPE: <code>int | None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4f8b\u5982 0.8 \u8868\u793a top 80%)</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseConfig-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseConfig.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    data = {\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"t1_months\": self.t1_months,\n        \"t2_months\": self.t2_months,\n        \"t3_months\": self.t3_months,\n        \"delay_days\": self.delay_days,\n        \"quote_asset\": self.quote_asset,\n    }\n    if self.top_k is not None:\n        data[\"top_k\"] = self.top_k\n    if self.top_ratio is not None:\n        data[\"top_ratio\"] = self.top_ratio\n    return data\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition","title":"<code>UniverseDefinition(config: UniverseConfig, snapshots: list[UniverseSnapshot], creation_time: datetime, description: str | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5b9a\u4e49\u7c7b\uff0c\u5305\u542b\u5b8c\u6574\u7684universe\u5386\u53f2.</p> ATTRIBUTE DESCRIPTION <code>config</code> <p>Universe\u914d\u7f6e</p> <p> TYPE: <code>UniverseConfig</code> </p> <code>snapshots</code> <p>\u65f6\u95f4\u5e8f\u5217\u7684universe\u5feb\u7167\u5217\u8868</p> <p> TYPE: <code>list[UniverseSnapshot]</code> </p> <code>creation_time</code> <p>\u521b\u5efa\u65f6\u95f4</p> <p> TYPE: <code>datetime</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"config\": self.config.to_dict(),\n        \"snapshots\": [snapshot.to_dict() for snapshot in self.snapshots],\n        \"creation_time\": self.creation_time.isoformat(),\n        \"description\": self.description,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.from_dict","title":"<code>from_dict(data: dict[str, Any]) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49\"\"\"\n    config = UniverseConfig(**data[\"config\"])\n    snapshots = []\n\n    for snap in data[\"snapshots\"]:\n        # \u8ba1\u7b97\u6570\u636e\u5468\u671f\n        calculated_t1_start = snap[\"calculated_t1_start\"]\n        calculated_t1_end = snap[\"calculated_t1_end\"]\n        calculated_t1_start_ts = snap[\"calculated_t1_start_ts\"]\n        calculated_t1_end_ts = snap[\"calculated_t1_end_ts\"]\n\n        # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f - \u4ece\u5386\u53f2\u6570\u636e\u63a8\u65ad\u6216\u9ed8\u8ba4\u8ba1\u7b97\n        effective_dt = pd.to_datetime(snap[\"effective_date\"])\n        usage_start_dt = effective_dt + pd.Timedelta(days=1)\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n        # \u4ece\u5feb\u7167\u6570\u636e\u4e2d\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u8ba1\u7b97\u7684\u503c\n        start_date = snap.get(\"start_date\", usage_start_dt.strftime(\"%Y-%m-%d\"))\n        end_date = snap.get(\"end_date\", usage_end_dt.strftime(\"%Y-%m-%d\"))\n\n        # \u8ba1\u7b97\u6216\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\u7684\u65f6\u95f4\u6233\n        start_date_ts = snap.get(\"start_date_ts\")\n        end_date_ts = snap.get(\"end_date_ts\")\n\n        if start_date_ts is None:\n            start_date_ts = UniverseSnapshot._calculate_timestamp(start_date, \"00:00:00\")\n        if end_date_ts is None:\n            end_date_ts = UniverseSnapshot._calculate_timestamp(end_date, \"23:59:59\")\n\n        snapshot = UniverseSnapshot(\n            effective_date=snap[\"effective_date\"],\n            start_date=start_date,\n            end_date=end_date,\n            start_date_ts=start_date_ts,\n            end_date_ts=end_date_ts,\n            calculated_t1_start=calculated_t1_start,\n            calculated_t1_end=calculated_t1_end,\n            calculated_t1_start_ts=calculated_t1_start_ts,\n            calculated_t1_end_ts=calculated_t1_end_ts,\n            symbols=snap[\"symbols\"],\n            mean_daily_amounts=snap[\"mean_daily_amounts\"],\n            metadata=snap.get(\"metadata\"),\n        )\n        snapshots.append(snapshot)\n\n    creation_time = datetime.fromisoformat(data[\"creation_time\"])\n\n    return cls(\n        config=config,\n        snapshots=snapshots,\n        creation_time=creation_time,\n        description=data.get(\"description\"),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.save_to_file","title":"<code>save_to_file(file_path: Path | str) -&gt; None</code>","text":"<p>\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def save_to_file(self, file_path: Path | str) -&gt; None:\n    \"\"\"\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6\"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(self.to_dict(), f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.load_from_file","title":"<code>load_from_file(file_path: Path | str) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef load_from_file(cls, file_path: Path | str) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49\"\"\"\n    import json\n\n    with open(file_path, encoding=\"utf-8\") as f:\n        data = json.load(f)\n\n    return cls.from_dict(data)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.get_symbols_for_date","title":"<code>get_symbols_for_date(target_date: str, date_type: str = 'usage') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".        - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167        - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_symbols_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n                   - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167\n                   - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167\n\n    Returns:\n        List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot.symbols\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot.symbols\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return []\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.get_snapshot_for_date","title":"<code>get_snapshot_for_date(target_date: str, date_type: str = 'usage') -&gt; UniverseSnapshot | None</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot | None</code> <p>UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_snapshot_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; UniverseSnapshot | None:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n\n    Returns:\n        UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.get_schema","title":"<code>get_schema() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>JSON Schema\u5b9a\u4e49</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema\n\n    Returns:\n        Dict: JSON Schema\u5b9a\u4e49\n    \"\"\"\n    config_properties = {\n        \"start_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"Start date in YYYY-MM-DD format\",\n        },\n        \"end_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"End date in YYYY-MM-DD format\",\n        },\n        \"t1_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T1 lookback window in months for calculating mean daily amount\",\n        },\n        \"t2_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T2 rebalancing frequency in months\",\n        },\n        \"t3_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"T3 minimum contract existence time in months\",\n        },\n        \"top_k\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Number of top contracts to select\",\n        },\n        \"top_ratio\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"exclusiveMaximum\": 1,\n            \"description\": \"Ratio of top contracts to select (e.g., 0.8 for top 80%)\",\n        },\n        \"delay_days\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"Delay days for universe rebalancing\",\n        },\n        \"quote_asset\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^[A-Z0-9]+$\",\n            \"description\": \"Quote asset for trading pairs\",\n        },\n    }\n\n    return {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"title\": \"Universe Definition Schema\",\n        \"description\": \"Cryptocurrency universe definition with configuration and snapshots\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"config\": {\n                \"type\": \"object\",\n                \"description\": \"Universe configuration parameters\",\n                \"properties\": config_properties,\n                \"required\": [\n                    \"start_date\",\n                    \"end_date\",\n                    \"t1_months\",\n                    \"t2_months\",\n                    \"t3_months\",\n                ],\n                \"oneOf\": [{\"required\": [\"top_k\"]}, {\"required\": [\"top_ratio\"]}],\n                \"additionalProperties\": False,\n            },\n            \"snapshots\": {\n                \"type\": \"array\",\n                \"description\": \"Time series of universe snapshots\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"effective_date\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Rebalancing effective date\",\n                        },\n                        \"calculated_t1_start\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": (\"Data calculation period start date (T1 lookback start)\"),\n                        },\n                        \"calculated_t1_end\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Data calculation period end date (T1 lookback end)\",\n                        },\n                        \"calculated_t1_start_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period start timestamp in milliseconds\"),\n                        },\n                        \"calculated_t1_end_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period end timestamp in milliseconds\"),\n                        },\n                        \"symbols\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"pattern\": \"^[A-Z0-9]+USDT$\",\n                                \"description\": \"Trading pair symbol (e.g., BTCUSDT)\",\n                            },\n                            \"description\": \"List of selected trading pairs for this period\",\n                        },\n                        \"mean_daily_amounts\": {\n                            \"type\": \"object\",\n                            \"patternProperties\": {\n                                \"^[A-Z0-9]+USDT$\": {\n                                    \"type\": \"number\",\n                                    \"minimum\": 0,\n                                    \"description\": \"Mean daily trading volume in USDT\",\n                                }\n                            },\n                            \"description\": \"Mean daily trading amounts for each symbol\",\n                        },\n                        \"metadata\": {\n                            \"type\": \"object\",\n                            \"description\": \"Additional metadata for this snapshot\",\n                            \"properties\": {\n                                \"t1_start_date\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"calculated_t1_start\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"period_adjusted\": {\"type\": \"boolean\"},\n                                \"strict_date_range\": {\"type\": \"boolean\"},\n                                \"selected_symbols_count\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                                \"total_candidates\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                            },\n                            \"additionalProperties\": True,\n                        },\n                    },\n                    \"required\": [\n                        \"effective_date\",\n                        \"calculated_t1_start\",\n                        \"calculated_t1_end\",\n                        \"calculated_t1_start_ts\",\n                        \"calculated_t1_end_ts\",\n                        \"symbols\",\n                        \"mean_daily_amounts\",\n                    ],\n                    \"additionalProperties\": False,\n                },\n            },\n            \"creation_time\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp when this universe definition was created\",\n            },\n            \"description\": {\n                \"type\": [\"string\", \"null\"],\n                \"description\": \"Optional description of this universe definition\",\n            },\n        },\n        \"required\": [\"config\", \"snapshots\", \"creation_time\"],\n        \"additionalProperties\": False,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.get_schema_example","title":"<code>get_schema_example() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema_example(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e\n\n    Returns:\n        Dict: \u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    return {\n        \"config\": {\n            \"start_date\": \"2024-01-01\",\n            \"end_date\": \"2024-12-31\",\n            \"t1_months\": 1,\n            \"t2_months\": 1,\n            \"t3_months\": 3,\n            \"top_k\": 10,\n            \"delay_days\": 7,\n            \"quote_asset\": \"USDT\",\n        },\n        \"snapshots\": [\n            {\n                \"effective_date\": \"2024-01-31\",\n                \"start_date\": \"2024-02-01\",\n                \"end_date\": \"2024-02-29\",\n                \"calculated_t1_start\": \"2023-12-31\",\n                \"calculated_t1_end\": \"2024-01-31\",\n                \"calculated_t1_start_ts\": \"1703980800000\",\n                \"calculated_t1_end_ts\": \"1706745599000\",\n                \"symbols\": [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n                \"mean_daily_amounts\": {\n                    \"BTCUSDT\": 1234567890.0,\n                    \"ETHUSDT\": 987654321.0,\n                    \"BNBUSDT\": 456789123.0,\n                },\n                \"metadata\": {\n                    \"calculated_t1_start\": \"2023-12-31\",\n                    \"calculated_t1_end\": \"2024-01-31\",\n                    \"delay_days\": 7,\n                    \"quote_asset\": \"USDT\",\n                    \"selected_symbols_count\": 3,\n                },\n            }\n        ],\n        \"creation_time\": \"2024-01-01T00:00:00\",\n        \"description\": \"Example universe definition for top cryptocurrency pairs\",\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.export_schema_to_file","title":"<code>export_schema_to_file(file_path: Path | str, include_example: bool = True) -&gt; None</code>","text":"<p>\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6</p> PARAMETER DESCRIPTION <code>file_path</code> <p>\u8f93\u51fa\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>include_example</code> <p>\u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def export_schema_to_file(self, file_path: Path | str, include_example: bool = True) -&gt; None:\n    \"\"\"\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6\n\n    Args:\n        file_path: \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n        include_example: \u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    schema_data = {\n        \"schema\": self.get_schema(),\n        \"version\": \"1.0.0\",\n        \"generated_at\": datetime.now().isoformat(),\n    }\n\n    if include_example:\n        schema_data[\"example\"] = self.get_schema_example()\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(schema_data, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseDefinition.validate_against_schema","title":"<code>validate_against_schema() -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_against_schema(self) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\n    \"\"\"\n    try:\n        # \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528jsonschema\u5e93\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4f9d\u8d56\uff0c\u6211\u4eec\u8fdb\u884c\u57fa\u672c\u9a8c\u8bc1\n        data = self.to_dict()\n\n        errors: list[str] = []\n        warnings: list[str] = []\n\n        # \u57fa\u672c\u7ed3\u6784\u9a8c\u8bc1\n        required_fields = [\"config\", \"snapshots\", \"creation_time\"]\n        for field in required_fields:\n            if field not in data:\n                errors.append(f\"Missing required field: {field}\")\n\n        # \u914d\u7f6e\u9a8c\u8bc1\n        if \"config\" in data:\n            config = data[\"config\"]\n            config_required = [\n                \"start_date\",\n                \"end_date\",\n                \"t1_months\",\n                \"t2_months\",\n                \"t3_months\",\n            ]\n            if \"top_k\" not in config and \"top_ratio\" not in config:\n                errors.append(\"Config must contain either 'top_k' or 'top_ratio'\")\n\n            for field in config_required:\n                if field not in config:\n                    errors.append(f\"Missing required config field: {field}\")\n\n            # \u65e5\u671f\u683c\u5f0f\u9a8c\u8bc1\n            import re\n\n            date_pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n            for date_field in [\"start_date\", \"end_date\"]:\n                if date_field in config and not re.match(date_pattern, config[date_field]):\n                    errors.append(f\"Invalid date format for {date_field}: {config[date_field]}\")\n\n        # \u5feb\u7167\u9a8c\u8bc1\n        if \"snapshots\" in data:\n            for i, snapshot in enumerate(data[\"snapshots\"]):\n                snapshot_required = [\n                    \"effective_date\",\n                    \"calculated_t1_start\",\n                    \"calculated_t1_end\",\n                    \"calculated_t1_start_ts\",\n                    \"calculated_t1_end_ts\",\n                    \"symbols\",\n                    \"mean_daily_amounts\",\n                ]\n                for field in snapshot_required:\n                    if field not in snapshot:\n                        errors.append(f\"Missing required field in snapshot {i}: {field}\")\n\n        return {\n            \"valid\": len(errors) == 0,\n            \"errors\": errors,\n            \"warnings\": warnings,\n            \"validation_time\": datetime.now().isoformat(),\n        }\n\n    except Exception as e:\n        return {\n            \"valid\": False,\n            \"errors\": [f\"Validation failed with exception: {str(e)}\"],\n            \"warnings\": [],\n            \"validation_time\": datetime.now().isoformat(),\n        }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot","title":"<code>UniverseSnapshot(effective_date: str, start_date: str, end_date: str, start_date_ts: str, end_date_ts: str, calculated_t1_start: str, calculated_t1_end: str, calculated_t1_start_ts: str, calculated_t1_end_ts: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5feb\u7167\u7c7b\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684universe\u72b6\u6001.</p> ATTRIBUTE DESCRIPTION <code>effective_date</code> <p>\u751f\u6548\u65e5\u671f\uff08\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u901a\u5e38\u662f\u6708\u672b\uff09</p> <p> TYPE: <code>str</code> </p> <code>start_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>start_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>end_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\uff08T1\u56de\u770b\u7684\u5f00\u59cb\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u901a\u5e38\u7b49\u4e8e\u91cd\u5e73\u8861\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u8be5\u65f6\u95f4\u70b9\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u57fa\u4e8eperiod\u5185\u6570\u636e\u8ba1\u7b97\u5f97\u51fa\uff09</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5404\u4ea4\u6613\u5bf9\u5728period\u5185\u7684\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u989d\u5916\u7684\u5143\u6570\u636e\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any] | None</code> </p> Note <p>\u5728\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\u4e0b\uff1a - effective_date: \u91cd\u5e73\u8861\u51b3\u7b56\u7684\u65e5\u671f\uff08\u59822024-01-31\uff09 - period: \u7528\u4e8e\u8ba1\u7b97\u7684\u6570\u636e\u533a\u95f4\uff08\u59822023-12-31\u52302024-01-31\uff09 - \u542b\u4e49: \u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efd\u7684universe</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.create_with_inferred_periods","title":"<code>create_with_inferred_periods(effective_date: str, t1_months: int, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None, next_effective_date: str | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> <p>\u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002</p> PARAMETER DESCRIPTION <code>effective_date</code> <p>\u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97</p> <p> TYPE: <code>int</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>next_effective_date</code> <p>\u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Example <p>\u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a effective_date=\"2024-01-31\", t1_months=1 -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe) -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4) \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_inferred_periods(\n    cls,\n    effective_date: str,\n    t1_months: int,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n    next_effective_date: str | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    \u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c\n    \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002\n\n    Args:\n        effective_date: \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09\n        metadata: \u5143\u6570\u636e\n        next_effective_date: \u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n\n    Returns:\n        UniverseSnapshot: \u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167\n\n    Example:\n        \u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a\n        effective_date=\"2024-01-31\", t1_months=1\n        -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe)\n        -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4)\n        \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse\n    \"\"\"\n    effective_dt = pd.to_datetime(effective_date)\n    calculated_t1_start = effective_dt - pd.DateOffset(months=t1_months)\n\n    # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f\n    usage_start_dt = effective_dt + pd.Timedelta(days=1)\n    if next_effective_date:\n        usage_end_dt = pd.to_datetime(next_effective_date)\n    else:\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u4f30\u7b97\u5230\u4e0b\u4e2a\u6708\u672b\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_str = calculated_t1_start.strftime(\"%Y-%m-%d\")\n    usage_start_str = usage_start_dt.strftime(\"%Y-%m-%d\")\n    usage_end_str = usage_end_dt.strftime(\"%Y-%m-%d\")\n\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start_str, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(effective_date, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_start_str, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_end_str, \"23:59:59\")\n\n    return cls(\n        effective_date=effective_date,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\n        start_date=usage_start_str,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_end_str,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start_str,\n        calculated_t1_end=effective_date,  # \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f = \u91cd\u5e73\u8861\u65e5\u671f\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.create_with_dates_and_timestamps","title":"<code>create_with_dates_and_timestamps(usage_t1_start: str, usage_t1_end: str, calculated_t1_start: str, calculated_t1_end: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> PARAMETER DESCRIPTION <code>usage_t1_start</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>usage_t1_end</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5feb\u7167\u5b9e\u4f8b</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_dates_and_timestamps(\n    cls,\n    usage_t1_start: str,\n    usage_t1_end: str,\n    calculated_t1_start: str,\n    calculated_t1_end: str,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    Args:\n        usage_t1_start: \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        usage_t1_end: \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n        calculated_t1_end: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\n        metadata: \u5143\u6570\u636e\n\n    Returns:\n        UniverseSnapshot: \u5feb\u7167\u5b9e\u4f8b\n    \"\"\"\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(calculated_t1_end, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_t1_start, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_t1_end, \"23:59:59\")\n\n    return cls(\n        effective_date=calculated_t1_end,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n        start_date=usage_t1_start,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_t1_end,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start,\n        calculated_t1_end=calculated_t1_end,\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.validate_period_consistency","title":"<code>validate_period_consistency(expected_t1_months: int) -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027</p> <p>\u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002 \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002</p> PARAMETER DESCRIPTION <code>expected_t1_months</code> <p>\u671f\u671b\u7684T1\u6708\u6570</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_period_consistency(self, expected_t1_months: int) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027\n\n    \u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002\n    \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002\n\n    Args:\n        expected_t1_months: \u671f\u671b\u7684T1\u6708\u6570\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    effective_dt = pd.to_datetime(self.effective_date)\n    calculated_t1_start_dt = pd.to_datetime(self.calculated_t1_start)\n    calculated_t1_end_dt = pd.to_datetime(self.calculated_t1_end)\n\n    # \u8ba1\u7b97\u5b9e\u9645\u7684\u6708\u6570\u5dee\n    actual_months_diff = (effective_dt.year - calculated_t1_start_dt.year) * 12 + (\n        effective_dt.month - calculated_t1_start_dt.month\n    )\n\n    # \u8ba1\u7b97\u5b9e\u9645\u5929\u6570\n    actual_days = (calculated_t1_end_dt - calculated_t1_start_dt).days\n\n    # \u9a8c\u8bc1\u671f\u672b\u65e5\u671f\u662f\u5426\u7b49\u4e8e\u751f\u6548\u65e5\u671f\n    period_end_matches_effective = self.calculated_t1_end == self.effective_date\n\n    return {\n        \"is_consistent\": (\n            abs(actual_months_diff - expected_t1_months) &lt;= 1  # \u5141\u8bb81\u4e2a\u6708\u7684\u8bef\u5dee\n            and period_end_matches_effective\n        ),\n        \"expected_t1_months\": expected_t1_months,\n        \"actual_months_diff\": actual_months_diff,\n        \"actual_days\": actual_days,\n        \"period_end_matches_effective\": period_end_matches_effective,\n        \"details\": {\n            \"effective_date\": self.effective_date,\n            \"calculated_t1_start\": self.calculated_t1_start,\n            \"calculated_t1_end\": self.calculated_t1_end,\n        },\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"effective_date\": self.effective_date,\n        \"start_date\": self.start_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        \"end_date\": self.end_date,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"symbols\": self.symbols,\n        \"mean_daily_amounts\": self.mean_daily_amounts,\n        \"metadata\": self.metadata or {},\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.get_period_info","title":"<code>get_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6\u5468\u671f\u4fe1\u606f</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6\u5468\u671f\u4fe1\u606f\n\n    Returns:\n        Dict: \u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    return {\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"effective_date\": self.effective_date,\n        \"period_duration_days\": str(\n            (pd.to_datetime(self.calculated_t1_end) - pd.to_datetime(self.calculated_t1_start)).days\n        ),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.UniverseSnapshot.get_usage_period_info","title":"<code>get_usage_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f</p> <p>\u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_usage_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f\n\n    \u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002\n\n    Returns:\n        Dict: \u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f\n    \"\"\"\n    return {\n        # \u8ba1\u7b97\u671f\u95f4 - \u7528\u4e8e\u5b9a\u4e49universe\n        \"calculation_period_start\": self.calculated_t1_start,\n        \"calculation_period_end\": self.calculated_t1_end,\n        \"rebalance_decision_date\": self.effective_date,\n        # \u4f7f\u7528\u671f\u95f4 - \u5b9e\u9645\u9700\u8981\u4e0b\u8f7d\u7684\u6570\u636e\n        \"usage_period_start\": self.start_date,\n        \"usage_period_end\": self.end_date,\n        \"usage_period_duration_days\": str((pd.to_datetime(self.end_date) - pd.to_datetime(self.start_date)).days),\n        # \u5176\u4ed6\u4fe1\u606f\n        \"universe_symbols_count\": str(len(self.symbols)),\n        \"note\": \"calculation_period\u7528\u4e8e\u5b9a\u4e49universe\uff0cusage_period\u7528\u4e8e\u4e0b\u8f7d\u8bad\u7ec3\u6570\u636e\",\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.IntegrityReport","title":"<code>IntegrityReport(total_symbols: int, successful_symbols: int, failed_symbols: List[str], missing_periods: List[Dict[str, str]], data_quality_score: float, recommendations: List[str])</code>  <code>dataclass</code>","text":"<p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p>"},{"location":"reference/cryptoservice/models/enums/","title":"cryptoservice.models.enums","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums","title":"<code>cryptoservice.models.enums</code>","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.SortBy","title":"<code>SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.InstType","title":"<code>InstType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u4ea7\u54c1\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Market","title":"<code>Market</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u5e02\u573a\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Vendor","title":"<code>Vendor</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u4f9b\u5e94\u5546\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.IndustrySrc","title":"<code>IndustrySrc</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u884c\u4e1a\u6765\u6e90\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderStatus","title":"<code>OrderStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u72b6\u6001\u679a\u4e3e\uff0c\u4e0e Binance SDK \u4fdd\u6301\u4e00\u81f4</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderType","title":"<code>OrderType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderSide","title":"<code>OrderSide</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u65b9\u5411\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.TimeInForce","title":"<code>TimeInForce</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u6709\u6548\u671f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderResponseType","title":"<code>OrderResponseType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u54cd\u5e94\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq","title":"<code>Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq.from_string","title":"<code>from_string(interval_str: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> PARAMETER DESCRIPTION <code>interval_str</code> <p>\u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Freq</code> <p>\u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c</p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_string(cls, interval_str: str) -&gt; \"Freq\":\n    \"\"\"\u4ece\u5b57\u7b26\u4e32\u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\n\n    Args:\n        interval_str: \u95f4\u9694\u5b57\u7b26\u4e32\uff0c\u5982 \"1m\", \"5m\", \"1h\", \"1d\" \u7b49\n\n    Returns:\n        \u5bf9\u5e94\u7684 Freq \u679a\u4e3e\u503c\n\n    Raises:\n        ValueError: \u5982\u679c\u95f4\u9694\u5b57\u7b26\u4e32\u65e0\u6548\n    \"\"\"\n    # \u4fdd\u5b58\u539f\u59cb\u5b57\u7b26\u4e32\u7528\u4e8e\u5927\u5c0f\u5199\u654f\u611f\u6bd4\u8f83\n    original_str = interval_str.strip()\n\n    # \u5904\u7406\u5927\u5c0f\u5199\u654f\u611f\u7684\u6708\u4efd\n    if original_str == \"1M\":\n        return cls.M1\n\n    # \u6807\u51c6\u5316\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a\u5c0f\u5199\n    interval_str = original_str.lower()\n\n    # \u6620\u5c04\u5b57\u5178\n    string_to_freq = {\n        \"1s\": cls.s1,\n        \"1m\": cls.m1,\n        \"3m\": cls.m3,\n        \"5m\": cls.m5,\n        \"15m\": cls.m15,\n        \"30m\": cls.m30,\n        \"1h\": cls.h1,\n        \"2h\": cls.h2,\n        \"4h\": cls.h4,\n        \"6h\": cls.h6,\n        \"8h\": cls.h8,\n        \"12h\": cls.h12,\n        \"1d\": cls.d1,\n        \"3d\": cls.d3,\n        \"1w\": cls.w1,\n    }\n\n    result = string_to_freq.get(interval_str)\n    if result is None:\n        raise ValueError(f\"Invalid interval string: {original_str}\")\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Univ","title":"<code>Univ</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u6570\u636e\u96c6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Status","title":"<code>Status</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u72b6\u6001\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.ReturnType","title":"<code>ReturnType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u56de\u62a5\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType","title":"<code>HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.ErrorSeverity","title":"<code>ErrorSeverity</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u9519\u8bef\u4e25\u91cd\u7a0b\u5ea6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/integrity_report/","title":"cryptoservice.models.integrity_report","text":""},{"location":"reference/cryptoservice/models/integrity_report/#cryptoservice.models.integrity_report","title":"<code>cryptoservice.models.integrity_report</code>","text":""},{"location":"reference/cryptoservice/models/integrity_report/#cryptoservice.models.integrity_report-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/integrity_report/#cryptoservice.models.integrity_report.IntegrityReport","title":"<code>IntegrityReport(total_symbols: int, successful_symbols: int, failed_symbols: List[str], missing_periods: List[Dict[str, str]], data_quality_score: float, recommendations: List[str])</code>  <code>dataclass</code>","text":"<p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p>"},{"location":"reference/cryptoservice/models/market_data/","title":"cryptoservice.models.market_data","text":""},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data","title":"<code>cryptoservice.models.market_data</code>","text":"<p>\u5e02\u573a\u6570\u636e\u6a21\u578b\u6a21\u5757\u3002</p> <p>\u5305\u542b\u5404\u79cd\u5e02\u573a\u6570\u636e\u7684\u6570\u636e\u6a21\u578b\uff0c\u5982\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\u7b49\u3002</p>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.FundingRate","title":"<code>FundingRate(symbol: str, funding_time: int, funding_rate: Decimal, mark_price: Decimal | None = None, index_price: Decimal | None = None, estimated_settle_price: Decimal | None = None, last_funding_rate: Decimal | None = None, next_funding_time: int | None = None, interest_rate: Decimal | None = None)</code>  <code>dataclass</code>","text":"<p>\u8d44\u91d1\u8d39\u7387\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>funding_time</code> <p>\u8d44\u91d1\u8d39\u7387\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\uff09</p> <p> TYPE: <code>int</code> </p> <code>funding_rate</code> <p>\u8d44\u91d1\u8d39\u7387</p> <p> TYPE: <code>Decimal</code> </p> <code>mark_price</code> <p>\u6807\u8bb0\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>index_price</code> <p>\u6307\u6570\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>estimated_settle_price</code> <p>\u9884\u4f30\u7ed3\u7b97\u4ef7\u683c\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>last_funding_rate</code> <p>\u4e0a\u4e00\u6b21\u8d44\u91d1\u8d39\u7387\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p> <code>next_funding_time</code> <p>\u4e0b\u4e00\u6b21\u8d44\u91d1\u8d39\u7387\u65f6\u95f4\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>int | None</code> </p> <code>interest_rate</code> <p>\u5229\u7387\uff08\u53ef\u9009\uff09</p> <p> TYPE: <code>Decimal | None</code> </p>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.FundingRate-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.FundingRate.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any]) -&gt; FundingRate</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaFundingRate\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>FundingRate</code> <p>\u8d44\u91d1\u8d39\u7387\u5b9e\u4f8b</p> <p> TYPE: <code>FundingRate</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any]) -&gt; \"FundingRate\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaFundingRate\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n\n    Returns:\n        FundingRate: \u8d44\u91d1\u8d39\u7387\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        funding_time=int(data[\"fundingTime\"]),\n        funding_rate=Decimal(str(data[\"fundingRate\"])),\n        mark_price=Decimal(str(data[\"markPrice\"])) if \"markPrice\" in data else None,\n        index_price=(Decimal(str(data[\"indexPrice\"])) if \"indexPrice\" in data else None),\n        estimated_settle_price=(\n            Decimal(str(data[\"estimatedSettlePrice\"])) if \"estimatedSettlePrice\" in data else None\n        ),\n        last_funding_rate=(Decimal(str(data[\"lastFundingRate\"])) if \"lastFundingRate\" in data else None),\n        next_funding_time=(int(data[\"nextFundingTime\"]) if \"nextFundingTime\" in data else None),\n        interest_rate=(Decimal(str(data[\"interestRate\"])) if \"interestRate\" in data else None),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.FundingRate.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    result = {\n        \"symbol\": self.symbol,\n        \"funding_time\": self.funding_time,\n        \"funding_rate\": float(self.funding_rate),\n    }\n\n    if self.mark_price is not None:\n        result[\"mark_price\"] = float(self.mark_price)\n    if self.index_price is not None:\n        result[\"index_price\"] = float(self.index_price)\n    if self.estimated_settle_price is not None:\n        result[\"estimated_settle_price\"] = float(self.estimated_settle_price)\n    if self.last_funding_rate is not None:\n        result[\"last_funding_rate\"] = float(self.last_funding_rate)\n    if self.next_funding_time is not None:\n        result[\"next_funding_time\"] = self.next_funding_time\n    if self.interest_rate is not None:\n        result[\"interest_rate\"] = float(self.interest_rate)\n\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.OpenInterest","title":"<code>OpenInterest(symbol: str, open_interest: Decimal, time: int, open_interest_value: Decimal | None = None)</code>  <code>dataclass</code>","text":"<p>\u6301\u4ed3\u91cf\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>open_interest</code> <p>\u6301\u4ed3\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>time</code> <p>\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> TYPE: <code>int</code> </p> <code>open_interest_value</code> <p>\u6301\u4ed3\u91cf\u4ef7\u503c\uff08\u53ef\u9009\uff0cUSDT\u8ba1\u4ef7\uff09</p> <p> TYPE: <code>Decimal | None</code> </p>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.OpenInterest-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.OpenInterest.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any]) -&gt; OpenInterest</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaOpenInterest\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>OpenInterest</code> <p>\u6301\u4ed3\u91cf\u5b9e\u4f8b</p> <p> TYPE: <code>OpenInterest</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any]) -&gt; \"OpenInterest\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaOpenInterest\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n\n    Returns:\n        OpenInterest: \u6301\u4ed3\u91cf\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        open_interest=Decimal(str(data[\"sumOpenInterest\"])),\n        time=int(data[\"timestamp\"]),\n        open_interest_value=(\n            Decimal(str(data[\"sumOpenInterestValue\"])) if \"sumOpenInterestValue\" in data else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.OpenInterest.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    result = {\n        \"symbol\": self.symbol,\n        \"open_interest\": float(self.open_interest),\n        \"time\": self.time,\n    }\n\n    if self.open_interest_value is not None:\n        result[\"open_interest_value\"] = float(self.open_interest_value)\n\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.LongShortRatio","title":"<code>LongShortRatio(symbol: str, long_short_ratio: Decimal, long_account: Decimal, short_account: Decimal, timestamp: int, ratio_type: str = 'account')</code>  <code>dataclass</code>","text":"<p>\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u6a21\u578b\u3002</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u7b26\u53f7</p> <p> TYPE: <code>str</code> </p> <code>long_short_ratio</code> <p>\u591a\u7a7a\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>long_account</code> <p>\u591a\u5934\u8d26\u6237\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>short_account</code> <p>\u7a7a\u5934\u8d26\u6237\u6bd4\u4f8b</p> <p> TYPE: <code>Decimal</code> </p> <code>timestamp</code> <p>\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> TYPE: <code>int</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b\uff08account/position/global\u7b49\uff09</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.LongShortRatio-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.LongShortRatio.from_binance_response","title":"<code>from_binance_response(data: Dict[str, Any], ratio_type: str = 'account') -&gt; LongShortRatio</code>  <code>classmethod</code>","text":"<p>\u4eceBinance API\u54cd\u5e94\u521b\u5efaLongShortRatio\u5b9e\u4f8b\u3002</p> PARAMETER DESCRIPTION <code>data</code> <p>Binance API\u54cd\u5e94\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> RETURNS DESCRIPTION <code>LongShortRatio</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u5b9e\u4f8b</p> <p> TYPE: <code>LongShortRatio</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>@classmethod\ndef from_binance_response(cls, data: Dict[str, Any], ratio_type: str = \"account\") -&gt; \"LongShortRatio\":\n    \"\"\"\u4eceBinance API\u54cd\u5e94\u521b\u5efaLongShortRatio\u5b9e\u4f8b\u3002\n\n    Args:\n        data: Binance API\u54cd\u5e94\u6570\u636e\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b\n\n    Returns:\n        LongShortRatio: \u591a\u7a7a\u6bd4\u4f8b\u5b9e\u4f8b\n    \"\"\"\n    return cls(\n        symbol=data[\"symbol\"],\n        long_short_ratio=Decimal(str(data[\"longShortRatio\"])),\n        long_account=Decimal(str(data.get(\"longAccount\", data.get(\"longPosition\", \"0\")))),\n        short_account=Decimal(str(data.get(\"shortAccount\", data.get(\"shortPosition\", \"0\")))),\n        timestamp=int(data[\"timestamp\"]),\n        ratio_type=ratio_type,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/market_data/#cryptoservice.models.market_data.LongShortRatio.to_dict","title":"<code>to_dict() -&gt; Dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/market_data.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002\n\n    Returns:\n        Dict: \u5b57\u5178\u683c\u5f0f\u7684\u6570\u636e\n    \"\"\"\n    return {\n        \"symbol\": self.symbol,\n        \"long_short_ratio\": float(self.long_short_ratio),\n        \"long_account\": float(self.long_account),\n        \"short_account\": float(self.short_account),\n        \"timestamp\": self.timestamp,\n        \"ratio_type\": self.ratio_type,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/market_ticker/","title":"cryptoservice.models.market_ticker","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker","title":"<code>cryptoservice.models.market_ticker</code>","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.KlineIndex","title":"<code>KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/","title":"cryptoservice.models.universe","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe","title":"<code>cryptoservice.models.universe</code>","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseConfig","title":"<code>UniverseConfig(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, delay_days: int, quote_asset: str, top_k: int | None = None, top_ratio: float | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u914d\u7f6e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>delay_days</code> <p>\u5ef6\u8fdf\u5929\u6570</p> <p> TYPE: <code>int</code> </p> <code>quote_asset</code> <p>\u8ba1\u4ef7\u5e01\u79cd</p> <p> TYPE: <code>str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf</p> <p> TYPE: <code>int | None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4f8b\u5982 0.8 \u8868\u793a top 80%)</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseConfig-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseConfig.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    data = {\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"t1_months\": self.t1_months,\n        \"t2_months\": self.t2_months,\n        \"t3_months\": self.t3_months,\n        \"delay_days\": self.delay_days,\n        \"quote_asset\": self.quote_asset,\n    }\n    if self.top_k is not None:\n        data[\"top_k\"] = self.top_k\n    if self.top_ratio is not None:\n        data[\"top_ratio\"] = self.top_ratio\n    return data\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot","title":"<code>UniverseSnapshot(effective_date: str, start_date: str, end_date: str, start_date_ts: str, end_date_ts: str, calculated_t1_start: str, calculated_t1_end: str, calculated_t1_start_ts: str, calculated_t1_end_ts: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5feb\u7167\u7c7b\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684universe\u72b6\u6001.</p> ATTRIBUTE DESCRIPTION <code>effective_date</code> <p>\u751f\u6548\u65e5\u671f\uff08\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u901a\u5e38\u662f\u6708\u672b\uff09</p> <p> TYPE: <code>str</code> </p> <code>start_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u5b9e\u9645\u4e0b\u8f7d\u6570\u636e\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>start_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>end_date_ts</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\uff08T1\u56de\u770b\u7684\u5f00\u59cb\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u901a\u5e38\u7b49\u4e8e\u91cd\u5e73\u8861\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end_ts</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65f6\u95f4\u6233 (\u6beb\u79d2)</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u8be5\u65f6\u95f4\u70b9\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u57fa\u4e8eperiod\u5185\u6570\u636e\u8ba1\u7b97\u5f97\u51fa\uff09</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5404\u4ea4\u6613\u5bf9\u5728period\u5185\u7684\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u989d\u5916\u7684\u5143\u6570\u636e\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any] | None</code> </p> Note <p>\u5728\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\u4e0b\uff1a - effective_date: \u91cd\u5e73\u8861\u51b3\u7b56\u7684\u65e5\u671f\uff08\u59822024-01-31\uff09 - period: \u7528\u4e8e\u8ba1\u7b97\u7684\u6570\u636e\u533a\u95f4\uff08\u59822023-12-31\u52302024-01-31\uff09 - \u542b\u4e49: \u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efd\u7684universe</p>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.create_with_inferred_periods","title":"<code>create_with_inferred_periods(effective_date: str, t1_months: int, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None, next_effective_date: str | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> <p>\u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002</p> PARAMETER DESCRIPTION <code>effective_date</code> <p>\u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97</p> <p> TYPE: <code>int</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>next_effective_date</code> <p>\u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Example <p>\u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a effective_date=\"2024-01-31\", t1_months=1 -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe) -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4) \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_inferred_periods(\n    cls,\n    effective_date: str,\n    t1_months: int,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n    next_effective_date: str | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    \u6839\u636e\u91cd\u5e73\u8861\u65e5\u671f\uff08effective_date\uff09\u548c\u56de\u770b\u7a97\u53e3\uff08t1_months\uff09\uff0c\n    \u81ea\u52a8\u8ba1\u7b97\u6570\u636e\u8ba1\u7b97\u7684\u65f6\u95f4\u533a\u95f4\u548c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u3002\n\n    Args:\n        effective_date: \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u5efa\u8bae\u4f7f\u7528\u6708\u672b\u65e5\u671f\uff09\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u56de\u770b\u6570\u636e\u8ba1\u7b97\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\uff08\u57fa\u4e8e\u8ba1\u7b97\u5468\u671f\u5185\u7684\u6570\u636e\uff09\n        metadata: \u5143\u6570\u636e\n        next_effective_date: \u4e0b\u4e00\u6b21\u91cd\u5e73\u8861\u65e5\u671f\uff08\u7528\u4e8e\u786e\u5b9a\u4f7f\u7528\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n\n    Returns:\n        UniverseSnapshot: \u5e26\u6709\u63a8\u65ad\u5468\u671f\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u5feb\u7167\n\n    Example:\n        \u5bf9\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u7b56\u7565\uff1a\n        effective_date=\"2024-01-31\", t1_months=1\n        -&gt; period: 2023-12-31 to 2024-01-31 (\u7528\u4e8e\u8ba1\u7b97universe)\n        -&gt; usage: 2024-02-01 to 2024-02-29 (\u5b9e\u9645\u4f7f\u7528\u671f\u95f4)\n        \u542b\u4e49\uff1a\u57fa\u4e8e1\u6708\u4efd\u6570\u636e\uff0c\u57281\u6708\u672b\u9009\u62e92\u6708\u4efduniverse\n    \"\"\"\n    effective_dt = pd.to_datetime(effective_date)\n    calculated_t1_start = effective_dt - pd.DateOffset(months=t1_months)\n\n    # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f\n    usage_start_dt = effective_dt + pd.Timedelta(days=1)\n    if next_effective_date:\n        usage_end_dt = pd.to_datetime(next_effective_date)\n    else:\n        # \u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u4f30\u7b97\u5230\u4e0b\u4e2a\u6708\u672b\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_str = calculated_t1_start.strftime(\"%Y-%m-%d\")\n    usage_start_str = usage_start_dt.strftime(\"%Y-%m-%d\")\n    usage_end_str = usage_end_dt.strftime(\"%Y-%m-%d\")\n\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start_str, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(effective_date, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_start_str, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_end_str, \"23:59:59\")\n\n    return cls(\n        effective_date=effective_date,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\n        start_date=usage_start_str,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_end_str,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start_str,\n        calculated_t1_end=effective_date,  # \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f = \u91cd\u5e73\u8861\u65e5\u671f\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.create_with_dates_and_timestamps","title":"<code>create_with_dates_and_timestamps(usage_t1_start: str, usage_t1_end: str, calculated_t1_start: str, calculated_t1_end: str, symbols: list[str], mean_daily_amounts: dict[str, float], metadata: dict[str, Any] | None = None) -&gt; UniverseSnapshot</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233</p> PARAMETER DESCRIPTION <code>usage_t1_start</code> <p>\u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>usage_t1_end</code> <p>\u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_start</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>calculated_t1_end</code> <p>\u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f</p> <p> TYPE: <code>str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>mean_daily_amounts</code> <p>\u5e73\u5747\u65e5\u6210\u4ea4\u91cf</p> <p> TYPE: <code>dict[str, float]</code> </p> <code>metadata</code> <p>\u5143\u6570\u636e</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot</code> <p>\u5feb\u7167\u5b9e\u4f8b</p> <p> TYPE: <code>UniverseSnapshot</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef create_with_dates_and_timestamps(\n    cls,\n    usage_t1_start: str,\n    usage_t1_end: str,\n    calculated_t1_start: str,\n    calculated_t1_end: str,\n    symbols: list[str],\n    mean_daily_amounts: dict[str, float],\n    metadata: dict[str, Any] | None = None,\n) -&gt; \"UniverseSnapshot\":\n    \"\"\"\u521b\u5efa\u5feb\u7167\uff0c\u660e\u786e\u6307\u5b9a\u6240\u6709\u65e5\u671f\u548c\u65f6\u95f4\u6233\n\n    Args:\n        usage_t1_start: \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        usage_t1_end: \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n        calculated_t1_end: \u6570\u636e\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        mean_daily_amounts: \u5e73\u5747\u65e5\u6210\u4ea4\u91cf\n        metadata: \u5143\u6570\u636e\n\n    Returns:\n        UniverseSnapshot: \u5feb\u7167\u5b9e\u4f8b\n    \"\"\"\n    # \u8ba1\u7b97\u6240\u6709\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09\n    calculated_t1_start_ts = cls._calculate_timestamp(calculated_t1_start, \"00:00:00\")\n    calculated_t1_end_ts = cls._calculate_timestamp(calculated_t1_end, \"23:59:59\")\n    start_date_ts = cls._calculate_timestamp(usage_t1_start, \"00:00:00\")\n    end_date_ts = cls._calculate_timestamp(usage_t1_end, \"23:59:59\")\n\n    return cls(\n        effective_date=calculated_t1_end,  # \u91cd\u5e73\u8861\u751f\u6548\u65e5\u671f\uff08\u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff09\n        start_date=usage_t1_start,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        end_date=usage_t1_end,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        calculated_t1_start=calculated_t1_start,\n        calculated_t1_end=calculated_t1_end,\n        calculated_t1_start_ts=calculated_t1_start_ts,\n        calculated_t1_end_ts=calculated_t1_end_ts,\n        start_date_ts=start_date_ts,\n        end_date_ts=end_date_ts,\n        symbols=symbols,\n        mean_daily_amounts=mean_daily_amounts,\n        metadata=metadata,\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.validate_period_consistency","title":"<code>validate_period_consistency(expected_t1_months: int) -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027</p> <p>\u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002 \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002</p> PARAMETER DESCRIPTION <code>expected_t1_months</code> <p>\u671f\u671b\u7684T1\u6708\u6570</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_period_consistency(self, expected_t1_months: int) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5468\u671f\u65e5\u671f\u7684\u4e00\u81f4\u6027\n\n    \u68c0\u67e5\u5b58\u50a8\u7684period\u65e5\u671f\u662f\u5426\u4e0e\u9884\u671f\u7684T1\u914d\u7f6e\u4e00\u81f4\u3002\n    \u9002\u7528\u4e8e\u6708\u672b\u91cd\u5e73\u8861\u548c\u5176\u4ed6\u91cd\u5e73\u8861\u7b56\u7565\u3002\n\n    Args:\n        expected_t1_months: \u671f\u671b\u7684T1\u6708\u6570\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\uff0c\u5305\u542b\u4e00\u81f4\u6027\u68c0\u67e5\u548c\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    effective_dt = pd.to_datetime(self.effective_date)\n    calculated_t1_start_dt = pd.to_datetime(self.calculated_t1_start)\n    calculated_t1_end_dt = pd.to_datetime(self.calculated_t1_end)\n\n    # \u8ba1\u7b97\u5b9e\u9645\u7684\u6708\u6570\u5dee\n    actual_months_diff = (effective_dt.year - calculated_t1_start_dt.year) * 12 + (\n        effective_dt.month - calculated_t1_start_dt.month\n    )\n\n    # \u8ba1\u7b97\u5b9e\u9645\u5929\u6570\n    actual_days = (calculated_t1_end_dt - calculated_t1_start_dt).days\n\n    # \u9a8c\u8bc1\u671f\u672b\u65e5\u671f\u662f\u5426\u7b49\u4e8e\u751f\u6548\u65e5\u671f\n    period_end_matches_effective = self.calculated_t1_end == self.effective_date\n\n    return {\n        \"is_consistent\": (\n            abs(actual_months_diff - expected_t1_months) &lt;= 1  # \u5141\u8bb81\u4e2a\u6708\u7684\u8bef\u5dee\n            and period_end_matches_effective\n        ),\n        \"expected_t1_months\": expected_t1_months,\n        \"actual_months_diff\": actual_months_diff,\n        \"actual_days\": actual_days,\n        \"period_end_matches_effective\": period_end_matches_effective,\n        \"details\": {\n            \"effective_date\": self.effective_date,\n            \"calculated_t1_start\": self.calculated_t1_start,\n            \"calculated_t1_end\": self.calculated_t1_end,\n        },\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"effective_date\": self.effective_date,\n        \"start_date\": self.start_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n        \"end_date\": self.end_date,  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"symbols\": self.symbols,\n        \"mean_daily_amounts\": self.mean_daily_amounts,\n        \"metadata\": self.metadata or {},\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.get_period_info","title":"<code>get_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6\u5468\u671f\u4fe1\u606f</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6\u5468\u671f\u4fe1\u606f\n\n    Returns:\n        Dict: \u5305\u542b\u5468\u671f\u76f8\u5173\u7684\u8be6\u7ec6\u4fe1\u606f\n    \"\"\"\n    return {\n        \"calculated_t1_start\": self.calculated_t1_start,\n        \"calculated_t1_end\": self.calculated_t1_end,\n        \"calculated_t1_start_ts\": self.calculated_t1_start_ts,\n        \"calculated_t1_end_ts\": self.calculated_t1_end_ts,\n        \"start_date\": self.start_date,\n        \"end_date\": self.end_date,\n        \"start_date_ts\": self.start_date_ts,\n        \"end_date_ts\": self.end_date_ts,\n        \"effective_date\": self.effective_date,\n        \"period_duration_days\": str(\n            (pd.to_datetime(self.calculated_t1_end) - pd.to_datetime(self.calculated_t1_start)).days\n        ),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseSnapshot.get_usage_period_info","title":"<code>get_usage_period_info() -&gt; dict[str, str]</code>","text":"<p>\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f</p> <p>\u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f</p> <p> TYPE: <code>dict[str, str]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_usage_period_info(self) -&gt; dict[str, str]:\n    \"\"\"\u83b7\u53d6Universe\u4f7f\u7528\u5468\u671f\u4fe1\u606f\n\n    \u8fd4\u56de\u8be5\u5feb\u7167\u5bf9\u5e94\u7684\u5b9e\u9645\u4f7f\u7528\u671f\u95f4\u548c\u8ba1\u7b97\u671f\u95f4\u3002\n\n    Returns:\n        Dict: \u5305\u542b\u4e24\u4e2a\u5173\u952e\u65f6\u95f4\u8303\u56f4\u7684\u4fe1\u606f\n    \"\"\"\n    return {\n        # \u8ba1\u7b97\u671f\u95f4 - \u7528\u4e8e\u5b9a\u4e49universe\n        \"calculation_period_start\": self.calculated_t1_start,\n        \"calculation_period_end\": self.calculated_t1_end,\n        \"rebalance_decision_date\": self.effective_date,\n        # \u4f7f\u7528\u671f\u95f4 - \u5b9e\u9645\u9700\u8981\u4e0b\u8f7d\u7684\u6570\u636e\n        \"usage_period_start\": self.start_date,\n        \"usage_period_end\": self.end_date,\n        \"usage_period_duration_days\": str((pd.to_datetime(self.end_date) - pd.to_datetime(self.start_date)).days),\n        # \u5176\u4ed6\u4fe1\u606f\n        \"universe_symbols_count\": str(len(self.symbols)),\n        \"note\": \"calculation_period\u7528\u4e8e\u5b9a\u4e49universe\uff0cusage_period\u7528\u4e8e\u4e0b\u8f7d\u8bad\u7ec3\u6570\u636e\",\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition","title":"<code>UniverseDefinition(config: UniverseConfig, snapshots: list[UniverseSnapshot], creation_time: datetime, description: str | None = None)</code>  <code>dataclass</code>","text":"<p>Universe\u5b9a\u4e49\u7c7b\uff0c\u5305\u542b\u5b8c\u6574\u7684universe\u5386\u53f2.</p> ATTRIBUTE DESCRIPTION <code>config</code> <p>Universe\u914d\u7f6e</p> <p> TYPE: <code>UniverseConfig</code> </p> <code>snapshots</code> <p>\u65f6\u95f4\u5e8f\u5217\u7684universe\u5feb\u7167\u5217\u8868</p> <p> TYPE: <code>list[UniverseSnapshot]</code> </p> <code>creation_time</code> <p>\u521b\u5efa\u65f6\u95f4</p> <p> TYPE: <code>datetime</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def to_dict(self) -&gt; dict[str, Any]:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\"\"\"\n    return {\n        \"config\": self.config.to_dict(),\n        \"snapshots\": [snapshot.to_dict() for snapshot in self.snapshots],\n        \"creation_time\": self.creation_time.isoformat(),\n        \"description\": self.description,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.from_dict","title":"<code>from_dict(data: dict[str, Any]) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u5b57\u5178\u521b\u5efaUniverse\u5b9a\u4e49\"\"\"\n    config = UniverseConfig(**data[\"config\"])\n    snapshots = []\n\n    for snap in data[\"snapshots\"]:\n        # \u8ba1\u7b97\u6570\u636e\u5468\u671f\n        calculated_t1_start = snap[\"calculated_t1_start\"]\n        calculated_t1_end = snap[\"calculated_t1_end\"]\n        calculated_t1_start_ts = snap[\"calculated_t1_start_ts\"]\n        calculated_t1_end_ts = snap[\"calculated_t1_end_ts\"]\n\n        # \u8ba1\u7b97\u4f7f\u7528\u5468\u671f - \u4ece\u5386\u53f2\u6570\u636e\u63a8\u65ad\u6216\u9ed8\u8ba4\u8ba1\u7b97\n        effective_dt = pd.to_datetime(snap[\"effective_date\"])\n        usage_start_dt = effective_dt + pd.Timedelta(days=1)\n        usage_end_dt = usage_start_dt + pd.offsets.MonthEnd(0)\n\n        # \u4ece\u5feb\u7167\u6570\u636e\u4e2d\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u8ba1\u7b97\u7684\u503c\n        start_date = snap.get(\"start_date\", usage_start_dt.strftime(\"%Y-%m-%d\"))\n        end_date = snap.get(\"end_date\", usage_end_dt.strftime(\"%Y-%m-%d\"))\n\n        # \u8ba1\u7b97\u6216\u83b7\u53d6\u4f7f\u7528\u671f\u95f4\u7684\u65f6\u95f4\u6233\n        start_date_ts = snap.get(\"start_date_ts\")\n        end_date_ts = snap.get(\"end_date_ts\")\n\n        if start_date_ts is None:\n            start_date_ts = UniverseSnapshot._calculate_timestamp(start_date, \"00:00:00\")\n        if end_date_ts is None:\n            end_date_ts = UniverseSnapshot._calculate_timestamp(end_date, \"23:59:59\")\n\n        snapshot = UniverseSnapshot(\n            effective_date=snap[\"effective_date\"],\n            start_date=start_date,\n            end_date=end_date,\n            start_date_ts=start_date_ts,\n            end_date_ts=end_date_ts,\n            calculated_t1_start=calculated_t1_start,\n            calculated_t1_end=calculated_t1_end,\n            calculated_t1_start_ts=calculated_t1_start_ts,\n            calculated_t1_end_ts=calculated_t1_end_ts,\n            symbols=snap[\"symbols\"],\n            mean_daily_amounts=snap[\"mean_daily_amounts\"],\n            metadata=snap.get(\"metadata\"),\n        )\n        snapshots.append(snapshot)\n\n    creation_time = datetime.fromisoformat(data[\"creation_time\"])\n\n    return cls(\n        config=config,\n        snapshots=snapshots,\n        creation_time=creation_time,\n        description=data.get(\"description\"),\n    )\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.save_to_file","title":"<code>save_to_file(file_path: Path | str) -&gt; None</code>","text":"<p>\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def save_to_file(self, file_path: Path | str) -&gt; None:\n    \"\"\"\u4fdd\u5b58universe\u5b9a\u4e49\u5230\u6587\u4ef6\"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(self.to_dict(), f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.load_from_file","title":"<code>load_from_file(file_path: Path | str) -&gt; UniverseDefinition</code>  <code>classmethod</code>","text":"<p>\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef load_from_file(cls, file_path: Path | str) -&gt; \"UniverseDefinition\":\n    \"\"\"\u4ece\u6587\u4ef6\u52a0\u8f7duniverse\u5b9a\u4e49\"\"\"\n    import json\n\n    with open(file_path, encoding=\"utf-8\") as f:\n        data = json.load(f)\n\n    return cls.from_dict(data)\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_symbols_for_date","title":"<code>get_symbols_for_date(target_date: str, date_type: str = 'usage') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".        - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167        - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_symbols_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684universe\u4ea4\u6613\u5bf9\u5217\u8868\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n                   - \"usage\": \u67e5\u627e\u8986\u76d6\u8be5\u4f7f\u7528\u65e5\u671f\u7684\u5feb\u7167\n                   - \"effective\": \u67e5\u627e\u5728\u8be5\u751f\u6548\u65e5\u671f\u751f\u6210\u7684\u5feb\u7167\n\n    Returns:\n        List[str]: \u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot.symbols\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot.symbols\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return []\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_snapshot_for_date","title":"<code>get_snapshot_for_date(target_date: str, date_type: str = 'usage') -&gt; UniverseSnapshot | None</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot</p> PARAMETER DESCRIPTION <code>target_date</code> <p>\u76ee\u6807\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>date_type</code> <p>\u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'usage'</code> </p> RETURNS DESCRIPTION <code>UniverseSnapshot | None</code> <p>UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone</p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def get_snapshot_for_date(self, target_date: str, date_type: str = \"usage\") -&gt; UniverseSnapshot | None:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684UniverseSnapshot\n\n    Args:\n        target_date: \u76ee\u6807\u65e5\u671f (YYYY-MM-DD)\n        date_type: \u65e5\u671f\u7c7b\u578b, \"usage\" (\u9ed8\u8ba4) \u6216 \"effective\".\n\n    Returns:\n        UniverseSnapshot | None: \u5bf9\u5e94\u7684\u5feb\u7167\uff0c\u5982\u679c\u672a\u627e\u5230\u5219\u8fd4\u56deNone\n    \"\"\"\n    target_dt = pd.to_datetime(target_date)\n\n    if date_type == \"usage\":\n        for snapshot in sorted(self.snapshots, key=lambda x: x.start_date, reverse=True):\n            start_dt = pd.to_datetime(snapshot.start_date)\n            end_dt = pd.to_datetime(snapshot.end_date)\n            if start_dt &lt;= target_dt &lt;= end_dt:\n                return snapshot\n    elif date_type == \"effective\":\n        for snapshot in self.snapshots:\n            if snapshot.effective_date == target_date:\n                return snapshot\n    else:\n        raise ValueError(\"date_type \u5fc5\u987b\u662f 'usage' \u6216 'effective'\")\n\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_schema","title":"<code>get_schema() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>JSON Schema\u5b9a\u4e49</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684JSON Schema\n\n    Returns:\n        Dict: JSON Schema\u5b9a\u4e49\n    \"\"\"\n    config_properties = {\n        \"start_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"Start date in YYYY-MM-DD format\",\n        },\n        \"end_date\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^\\d{4}-\\d{2}-\\d{2}$\",\n            \"description\": \"End date in YYYY-MM-DD format\",\n        },\n        \"t1_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T1 lookback window in months for calculating mean daily amount\",\n        },\n        \"t2_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"T2 rebalancing frequency in months\",\n        },\n        \"t3_months\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"T3 minimum contract existence time in months\",\n        },\n        \"top_k\": {\n            \"type\": \"integer\",\n            \"minimum\": 1,\n            \"description\": \"Number of top contracts to select\",\n        },\n        \"top_ratio\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"exclusiveMaximum\": 1,\n            \"description\": \"Ratio of top contracts to select (e.g., 0.8 for top 80%)\",\n        },\n        \"delay_days\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"description\": \"Delay days for universe rebalancing\",\n        },\n        \"quote_asset\": {\n            \"type\": \"string\",\n            \"pattern\": r\"^[A-Z0-9]+$\",\n            \"description\": \"Quote asset for trading pairs\",\n        },\n    }\n\n    return {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"title\": \"Universe Definition Schema\",\n        \"description\": \"Cryptocurrency universe definition with configuration and snapshots\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"config\": {\n                \"type\": \"object\",\n                \"description\": \"Universe configuration parameters\",\n                \"properties\": config_properties,\n                \"required\": [\n                    \"start_date\",\n                    \"end_date\",\n                    \"t1_months\",\n                    \"t2_months\",\n                    \"t3_months\",\n                ],\n                \"oneOf\": [{\"required\": [\"top_k\"]}, {\"required\": [\"top_ratio\"]}],\n                \"additionalProperties\": False,\n            },\n            \"snapshots\": {\n                \"type\": \"array\",\n                \"description\": \"Time series of universe snapshots\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"effective_date\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Rebalancing effective date\",\n                        },\n                        \"calculated_t1_start\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": (\"Data calculation period start date (T1 lookback start)\"),\n                        },\n                        \"calculated_t1_end\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                            \"description\": \"Data calculation period end date (T1 lookback end)\",\n                        },\n                        \"calculated_t1_start_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period start timestamp in milliseconds\"),\n                        },\n                        \"calculated_t1_end_ts\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\d+$\",\n                            \"description\": (\"Data calculation period end timestamp in milliseconds\"),\n                        },\n                        \"symbols\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"pattern\": \"^[A-Z0-9]+USDT$\",\n                                \"description\": \"Trading pair symbol (e.g., BTCUSDT)\",\n                            },\n                            \"description\": \"List of selected trading pairs for this period\",\n                        },\n                        \"mean_daily_amounts\": {\n                            \"type\": \"object\",\n                            \"patternProperties\": {\n                                \"^[A-Z0-9]+USDT$\": {\n                                    \"type\": \"number\",\n                                    \"minimum\": 0,\n                                    \"description\": \"Mean daily trading volume in USDT\",\n                                }\n                            },\n                            \"description\": \"Mean daily trading amounts for each symbol\",\n                        },\n                        \"metadata\": {\n                            \"type\": \"object\",\n                            \"description\": \"Additional metadata for this snapshot\",\n                            \"properties\": {\n                                \"t1_start_date\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"calculated_t1_start\": {\n                                    \"type\": \"string\",\n                                    \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\",\n                                },\n                                \"period_adjusted\": {\"type\": \"boolean\"},\n                                \"strict_date_range\": {\"type\": \"boolean\"},\n                                \"selected_symbols_count\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                                \"total_candidates\": {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0,\n                                },\n                            },\n                            \"additionalProperties\": True,\n                        },\n                    },\n                    \"required\": [\n                        \"effective_date\",\n                        \"calculated_t1_start\",\n                        \"calculated_t1_end\",\n                        \"calculated_t1_start_ts\",\n                        \"calculated_t1_end_ts\",\n                        \"symbols\",\n                        \"mean_daily_amounts\",\n                    ],\n                    \"additionalProperties\": False,\n                },\n            },\n            \"creation_time\": {\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n                \"description\": \"ISO 8601 timestamp when this universe definition was created\",\n            },\n            \"description\": {\n                \"type\": [\"string\", \"null\"],\n                \"description\": \"Optional description of this universe definition\",\n            },\n        },\n        \"required\": [\"config\", \"snapshots\", \"creation_time\"],\n        \"additionalProperties\": False,\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.get_schema_example","title":"<code>get_schema_example() -&gt; dict[str, Any]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>@classmethod\ndef get_schema_example(cls) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6Universe\u5b9a\u4e49\u7684\u793a\u4f8b\u6570\u636e\n\n    Returns:\n        Dict: \u7b26\u5408schema\u7684\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    return {\n        \"config\": {\n            \"start_date\": \"2024-01-01\",\n            \"end_date\": \"2024-12-31\",\n            \"t1_months\": 1,\n            \"t2_months\": 1,\n            \"t3_months\": 3,\n            \"top_k\": 10,\n            \"delay_days\": 7,\n            \"quote_asset\": \"USDT\",\n        },\n        \"snapshots\": [\n            {\n                \"effective_date\": \"2024-01-31\",\n                \"start_date\": \"2024-02-01\",\n                \"end_date\": \"2024-02-29\",\n                \"calculated_t1_start\": \"2023-12-31\",\n                \"calculated_t1_end\": \"2024-01-31\",\n                \"calculated_t1_start_ts\": \"1703980800000\",\n                \"calculated_t1_end_ts\": \"1706745599000\",\n                \"symbols\": [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n                \"mean_daily_amounts\": {\n                    \"BTCUSDT\": 1234567890.0,\n                    \"ETHUSDT\": 987654321.0,\n                    \"BNBUSDT\": 456789123.0,\n                },\n                \"metadata\": {\n                    \"calculated_t1_start\": \"2023-12-31\",\n                    \"calculated_t1_end\": \"2024-01-31\",\n                    \"delay_days\": 7,\n                    \"quote_asset\": \"USDT\",\n                    \"selected_symbols_count\": 3,\n                },\n            }\n        ],\n        \"creation_time\": \"2024-01-01T00:00:00\",\n        \"description\": \"Example universe definition for top cryptocurrency pairs\",\n    }\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.export_schema_to_file","title":"<code>export_schema_to_file(file_path: Path | str, include_example: bool = True) -&gt; None</code>","text":"<p>\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6</p> PARAMETER DESCRIPTION <code>file_path</code> <p>\u8f93\u51fa\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>include_example</code> <p>\u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def export_schema_to_file(self, file_path: Path | str, include_example: bool = True) -&gt; None:\n    \"\"\"\u5bfc\u51faschema\u5b9a\u4e49\u5230\u6587\u4ef6\n\n    Args:\n        file_path: \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n        include_example: \u662f\u5426\u5305\u542b\u793a\u4f8b\u6570\u636e\n    \"\"\"\n    import json\n\n    file_path = Path(file_path)\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n\n    schema_data = {\n        \"schema\": self.get_schema(),\n        \"version\": \"1.0.0\",\n        \"generated_at\": datetime.now().isoformat(),\n    }\n\n    if include_example:\n        schema_data[\"example\"] = self.get_schema_example()\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(schema_data, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"reference/cryptoservice/models/universe/#cryptoservice.models.universe.UniverseDefinition.validate_against_schema","title":"<code>validate_against_schema() -&gt; dict[str, Any]</code>","text":"<p>\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema</p> RETURNS DESCRIPTION <code>Dict</code> <p>\u9a8c\u8bc1\u7ed3\u679c</p> <p> TYPE: <code>dict[str, Any]</code> </p> Source code in <code>src/cryptoservice/models/universe.py</code> <pre><code>def validate_against_schema(self) -&gt; dict[str, Any]:\n    \"\"\"\u9a8c\u8bc1\u5f53\u524duniverse\u5b9a\u4e49\u662f\u5426\u7b26\u5408schema\n\n    Returns:\n        Dict: \u9a8c\u8bc1\u7ed3\u679c\n    \"\"\"\n    try:\n        # \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528jsonschema\u5e93\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4f9d\u8d56\uff0c\u6211\u4eec\u8fdb\u884c\u57fa\u672c\u9a8c\u8bc1\n        data = self.to_dict()\n\n        errors: list[str] = []\n        warnings: list[str] = []\n\n        # \u57fa\u672c\u7ed3\u6784\u9a8c\u8bc1\n        required_fields = [\"config\", \"snapshots\", \"creation_time\"]\n        for field in required_fields:\n            if field not in data:\n                errors.append(f\"Missing required field: {field}\")\n\n        # \u914d\u7f6e\u9a8c\u8bc1\n        if \"config\" in data:\n            config = data[\"config\"]\n            config_required = [\n                \"start_date\",\n                \"end_date\",\n                \"t1_months\",\n                \"t2_months\",\n                \"t3_months\",\n            ]\n            if \"top_k\" not in config and \"top_ratio\" not in config:\n                errors.append(\"Config must contain either 'top_k' or 'top_ratio'\")\n\n            for field in config_required:\n                if field not in config:\n                    errors.append(f\"Missing required config field: {field}\")\n\n            # \u65e5\u671f\u683c\u5f0f\u9a8c\u8bc1\n            import re\n\n            date_pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n            for date_field in [\"start_date\", \"end_date\"]:\n                if date_field in config and not re.match(date_pattern, config[date_field]):\n                    errors.append(f\"Invalid date format for {date_field}: {config[date_field]}\")\n\n        # \u5feb\u7167\u9a8c\u8bc1\n        if \"snapshots\" in data:\n            for i, snapshot in enumerate(data[\"snapshots\"]):\n                snapshot_required = [\n                    \"effective_date\",\n                    \"calculated_t1_start\",\n                    \"calculated_t1_end\",\n                    \"calculated_t1_start_ts\",\n                    \"calculated_t1_end_ts\",\n                    \"symbols\",\n                    \"mean_daily_amounts\",\n                ]\n                for field in snapshot_required:\n                    if field not in snapshot:\n                        errors.append(f\"Missing required field in snapshot {i}: {field}\")\n\n        return {\n            \"valid\": len(errors) == 0,\n            \"errors\": errors,\n            \"warnings\": warnings,\n            \"validation_time\": datetime.now().isoformat(),\n        }\n\n    except Exception as e:\n        return {\n            \"valid\": False,\n            \"errors\": [f\"Validation failed with exception: {str(e)}\"],\n            \"warnings\": [],\n            \"validation_time\": datetime.now().isoformat(),\n        }\n</code></pre>"},{"location":"reference/cryptoservice/services/","title":"cryptoservice.services","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services","title":"<code>cryptoservice.services</code>","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: MarketDB | None = None\n    self.rate_limit_manager = RateLimitManager()\n    self.failed_downloads: dict[str, list[dict]] = {}  # \u8bb0\u5f55\u5931\u8d25\u7684\u4e0b\u8f7d\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <p>SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True, quote_asset: str = 'USDT') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True, quote_asset: str = \"USDT\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u7b5b\u9009\u6761\u4ef6\uff1a{quote_asset}\u7ed3\u5c3e\uff09\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n            and symbol[\"symbol\"].endswith(quote_asset)\n        ]\n\n        logger.info(f\"\u627e\u5230 {len(perpetual_symbols)} \u4e2a{quote_asset}\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\")\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time, end_time = self._date_to_timestamp_range(date)\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol,\n            interval=\"1d\",\n            startTime=start_time,\n            endTime=end_time,\n            limit=1,\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; list[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[DailyMarketTicker]</code> <p>list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; list[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers_result = self.get_symbol_ticker()\n        if isinstance(tickers_result, list):\n            tickers = [ticker.to_dict() for ticker in tickers_result]\n        else:\n            tickers = [tickers_result.to_dict()]\n        summary[\"data\"] = tickers\n\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; list[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09\n\n    Returns:\n        list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        # \u5904\u7406\u65f6\u95f4\u683c\u5f0f\n        if isinstance(start_time, str):\n            start_time = datetime.fromisoformat(start_time)\n        if end_time is None:\n            end_time = datetime.now()\n        elif isinstance(end_time, str):\n            end_time = datetime.fromisoformat(end_time)\n\n        # \u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time.strftime(\"%Y-%m-%d\"))\n        end_ts = self._date_to_timestamp_end(end_time.strftime(\"%Y-%m-%d\"))\n\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u5386\u53f2\u6570\u636e ({interval.value})\")\n\n        # \u6839\u636eklines_type\u9009\u62e9API\n        if klines_type == HistoricalKlinesType.FUTURES:\n            klines = self.client.futures_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n        else:  # SPOT\n            klines = self.client.get_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n\n        data = list(klines)\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230\u4ea4\u6613\u5bf9 {symbol} \u5728\u6307\u5b9a\u65f6\u95f4\u6bb5\u5185\u7684\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aKlineMarketTicker\u5bf9\u8c61\n        return [\n            KlineMarketTicker(\n                symbol=symbol,\n                last_price=Decimal(str(kline[4])),  # \u6536\u76d8\u4ef7\u4f5c\u4e3a\u6700\u65b0\u4ef7\u683c\n                open_price=Decimal(str(kline[1])),\n                high_price=Decimal(str(kline[2])),\n                low_price=Decimal(str(kline[3])),\n                volume=Decimal(str(kline[5])),\n                close_time=kline[6],\n            )\n            for kline in data\n        ]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>retry_config</code> <p>\u91cd\u8bd5\u914d\u7f6e</p> <p> TYPE: <code>Optional[RetryConfig]</code> DEFAULT: <code>None</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>enable_integrity_check</code> <p>\u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> RETURNS DESCRIPTION <code>IntegrityReport</code> <p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p> <p> TYPE: <code>IntegrityReport</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    # \u989d\u5916\u53c2\u6570\uff0c\u4fdd\u6301\u5411\u540e\u517c\u5bb9\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        retry_config: \u91cd\u8bd5\u914d\u7f6e\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n        enable_integrity_check: \u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n\n    Returns:\n        IntegrityReport: \u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a\n    \"\"\"\n    if retry_config is None:\n        retry_config = RetryConfig(max_retries=max_retries)\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u7edf\u8ba1\n    successful_symbols = []\n    failed_symbols = []\n    missing_periods = []\n\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time)\n        end_ts = self._date_to_timestamp_end(end_time)\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n        if self.db is None:\n            self.db = MarketDB(str(db_file_path))\n\n        # \u91cd\u65b0\u521d\u59cb\u5316\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668\uff0c\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u7684\u57fa\u7840\u5ef6\u8fdf\n        self.rate_limit_manager = RateLimitManager(base_delay=request_delay)\n\n        logger.info(f\"\ud83d\ude80 \u5f00\u59cb\u4e0b\u8f7d {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\")\n        logger.info(f\"\ud83d\udcc5 \u65f6\u95f4\u8303\u56f4: {start_time} \u5230 {end_time}\")\n        logger.info(f\"\u2699\ufe0f \u91cd\u8bd5\u914d\u7f6e: \u6700\u5927{retry_config.max_retries}\u6b21, \u57fa\u7840\u5ef6\u8fdf{retry_config.base_delay}\u79d2\")\n        logger.info(f\"\u23f1\ufe0f \u667a\u80fd\u9891\u7387\u63a7\u5236: \u57fa\u7840\u5ef6\u8fdf{request_delay}\u79d2\uff0c\u52a8\u6001\u8c03\u6574\")\n\n        # \u521b\u5efa\u8fdb\u5ea6\u8ddf\u8e2a\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TimeElapsedColumn(),\n            )\n\n        def process_symbol(symbol: str) -&gt; Dict[str, Any]:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6 (\u589e\u5f3a\u7248)\"\"\"\n            result = {\n                \"symbol\": symbol,\n                \"success\": False,\n                \"records\": 0,\n                \"error\": None,\n            }\n\n            try:\n                data = self._fetch_symbol_data(\n                    symbol=symbol,\n                    start_ts=start_ts,\n                    end_ts=end_ts,\n                    interval=interval,\n                    retry_config=retry_config,\n                )\n\n                if data:\n                    if self.db is None:\n                        raise MarketDataFetchError(\"Database is not initialized\")\n\n                    self.db.store_data(data, interval)\n                    result.update(\n                        {\n                            \"success\": True,\n                            \"records\": len(data),\n                            \"time_range\": f\"{data[0].open_time} - {data[-1].open_time}\",\n                        }\n                    )\n                    logger.debug(f\"\u2705 {symbol}: {len(data)} \u6761\u8bb0\u5f55\")\n                    successful_symbols.append(symbol)\n                else:\n                    result[\"error\"] = \"\u65e0\u6570\u636e\"\n                    logger.debug(f\"\u26a0\ufe0f {symbol}: \u65e0\u6570\u636e\")\n                    missing_periods.append(\n                        {\n                            \"symbol\": symbol,\n                            \"period\": f\"{start_time} - {end_time}\",\n                            \"reason\": \"no_data\",\n                        }\n                    )\n\n            except InvalidSymbolError as e:\n                result[\"error\"] = f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\"\n                logger.warning(f\"\u26a0\ufe0f \u8df3\u8fc7\u65e0\u6548\u4ea4\u6613\u5bf9 {symbol}\")\n                failed_symbols.append(symbol)\n\n            except Exception as e:\n                result[\"error\"] = str(e)\n                logger.error(f\"\u274c {symbol} \u5931\u8d25: {e}\")\n                failed_symbols.append(symbol)\n                missing_periods.append(\n                    {\n                        \"symbol\": symbol,\n                        \"period\": f\"{start_time} - {end_time}\",\n                        \"reason\": str(e),\n                    }\n                )\n\n            return result\n\n        # \u6267\u884c\u5e76\u884c\u4e0b\u8f7d\n        results = []\n        with progress if progress is not None else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u4e0b\u8f7d\u4ea4\u6613\u5bf9\u6570\u636e\", total=len(symbols)) if progress else None\n\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                for future in as_completed(futures):\n                    try:\n                        result = future.result()\n                        results.append(result)\n\n                        if progress and overall_task is not None:\n                            progress.update(overall_task, advance=1)\n\n                    except Exception as e:\n                        logger.error(f\"\u274c \u5904\u7406\u5f02\u5e38: {e}\")\n\n        # \u751f\u6210\u7edf\u8ba1\u62a5\u544a\n        total_records = sum(r.get(\"records\", 0) for r in results)\n        success_rate = len(successful_symbols) / len(symbols) if symbols else 0\n\n        logger.info(\"\ud83d\udcca \u4e0b\u8f7d\u5b8c\u6210\u7edf\u8ba1:\")\n        logger.info(f\"   \u2705 \u6210\u529f: {len(successful_symbols)}/{len(symbols)} ({success_rate:.1%})\")\n        logger.info(f\"   \u274c \u5931\u8d25: {len(failed_symbols)} \u4e2a\")\n        logger.info(f\"   \ud83d\udcc8 \u603b\u8bb0\u5f55\u6570: {total_records:,} \u6761\")\n        logger.info(f\"   \ud83d\udcbe \u6570\u636e\u5e93: {db_file_path}\")\n\n        # \u6267\u884c\u5b8c\u6574\u6027\u68c0\u67e5\n        if enable_integrity_check and self.db:\n            integrity_report = self._create_integrity_report(\n                symbols=symbols,\n                successful_symbols=successful_symbols,\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                start_time=start_time,\n                end_time=end_time,\n                interval=interval,\n                db_file_path=db_file_path,\n            )\n        else:\n            # \u751f\u6210\u57fa\u7840\u62a5\u544a\n            data_quality_score = len(successful_symbols) / len(symbols) if symbols else 0\n            recommendations = []\n            if data_quality_score &lt; 0.8:\n                recommendations.append(\"\u6570\u636e\u6210\u529f\u7387\u8f83\u4f4e\uff0c\u5efa\u8bae\u68c0\u67e5\u7f51\u7edc\u548cAPI\u914d\u7f6e\")\n            if failed_symbols:\n                recommendations.append(f\"\u6709{len(failed_symbols)}\u4e2a\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5931\u8d25\uff0c\u5efa\u8bae\u5355\u72ec\u91cd\u8bd5\")\n\n            integrity_report = IntegrityReport(\n                total_symbols=len(symbols),\n                successful_symbols=len(successful_symbols),\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                data_quality_score=data_quality_score,\n                recommendations=recommendations,\n            )\n\n        return integrity_report\n\n    except Exception as e:\n        logger.error(f\"\u274c \u6570\u636e\u4e0b\u8f7d\u5931\u8d25: {e}\")\n        # \u5373\u4f7f\u5931\u8d25\u4e5f\u8981\u8fd4\u56de\u62a5\u544a\n        return IntegrityReport(\n            total_symbols=len(symbols),\n            successful_symbols=len(successful_symbols),\n            failed_symbols=failed_symbols,\n            missing_periods=missing_periods,\n            data_quality_score=0.0,\n            recommendations=[f\"\u4e0b\u8f7d\u5931\u8d25: {e}\", \"\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u548cAPI\u914d\u7f6e\"],\n        )\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u8f93\u51fa\u8def\u5f84\n        output_path_obj = self._validate_and_prepare_path(\n            output_path,\n            is_file=True,\n            file_name=(\n                f\"universe_{start_date}_{end_date}_{t1_months}_{t2_months}_{t3_months}_{top_k or top_ratio}.json\"\n            ),\n        )\n\n        # \u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f\n        start_date = self._standardize_date_format(start_date)\n        end_date = self._standardize_date_format(end_date)\n\n        # \u521b\u5efa\u914d\u7f6e\n        config = UniverseConfig(\n            start_date=start_date,\n            end_date=end_date,\n            t1_months=t1_months,\n            t2_months=t2_months,\n            t3_months=t3_months,\n            delay_days=delay_days,\n            quote_asset=quote_asset,\n            top_k=top_k,\n            top_ratio=top_ratio,\n        )\n\n        logger.info(f\"\u5f00\u59cb\u5b9a\u4e49universe: {start_date} \u5230 {end_date}\")\n        log_selection_criteria = f\"Top-K={top_k}\" if top_k else f\"Top-Ratio={top_ratio}\"\n        logger.info(f\"\u53c2\u6570: T1={t1_months}\u6708, T2={t2_months}\u6708, T3={t3_months}\u6708, {log_selection_criteria}\")\n\n        # \u751f\u6210\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u5e8f\u5217 (\u6bcfT2\u4e2a\u6708)\n        # \u4ece\u8d77\u59cb\u65e5\u671f\u5f00\u59cb\uff0c\u6bcf\u9694T2\u4e2a\u6708\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8868\u793auniverse\u91cd\u65b0\u9009\u62e9\u7684\u65f6\u95f4\u70b9\n        rebalance_dates = self._generate_rebalance_dates(start_date, end_date, t2_months)\n\n        logger.info(\"\u91cd\u5e73\u8861\u8ba1\u5212:\")\n        logger.info(f\"  - \u65f6\u95f4\u8303\u56f4: {start_date} \u5230 {end_date}\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u95f4\u9694: \u6bcf{t2_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u6570\u636e\u5ef6\u8fdf: {delay_days}\u5929\")\n        logger.info(f\"  - T1\u6570\u636e\u7a97\u53e3: {t1_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u65e5\u671f: {rebalance_dates}\")\n\n        if not rebalance_dates:\n            raise ValueError(\"\u65e0\u6cd5\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8bf7\u68c0\u67e5\u65f6\u95f4\u8303\u56f4\u548cT2\u53c2\u6570\")\n\n        # \u6536\u96c6\u6240\u6709\u5468\u671f\u7684snapshots\n        all_snapshots = []\n\n        # \u5728\u6bcf\u4e2a\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u8ba1\u7b97universe\n        for i, rebalance_date in enumerate(rebalance_dates):\n            logger.info(f\"\u5904\u7406\u65e5\u671f {i + 1}/{len(rebalance_dates)}: {rebalance_date}\")\n\n            # \u8ba1\u7b97\u57fa\u51c6\u65e5\u671f\uff08\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff09\n            base_date = pd.to_datetime(rebalance_date) - timedelta(days=delay_days)\n            calculated_t1_end = base_date.strftime(\"%Y-%m-%d\")\n\n            # \u8ba1\u7b97T1\u56de\u770b\u671f\u95f4\u7684\u5f00\u59cb\u65e5\u671f\uff08\u4ecebase_date\u5f80\u524d\u63a8T1\u4e2a\u6708\uff09\n            calculated_t1_start = self._subtract_months(calculated_t1_end, t1_months)\n\n            logger.info(\n                f\"\u5468\u671f {i + 1}: \u57fa\u51c6\u65e5\u671f={calculated_t1_end} (\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d{delay_days}\u5929), \"\n                f\"T1\u6570\u636e\u671f\u95f4={calculated_t1_start} \u5230 {calculated_t1_end}\"\n            )\n\n            # \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u548c\u5b83\u4eec\u7684mean daily amount\n            universe_symbols, mean_amounts = self._calculate_universe_for_date(\n                calculated_t1_start,\n                calculated_t1_end,\n                t3_months=t3_months,\n                top_k=top_k,\n                top_ratio=top_ratio,\n                api_delay_seconds=api_delay_seconds,\n                batch_delay_seconds=batch_delay_seconds,\n                batch_size=batch_size,\n                quote_asset=quote_asset,\n            )\n\n            # \u521b\u5efa\u8be5\u5468\u671f\u7684snapshot\n            snapshot = UniverseSnapshot.create_with_dates_and_timestamps(\n                usage_t1_start=rebalance_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n                usage_t1_end=min(\n                    end_date,\n                    (pd.to_datetime(rebalance_date) + pd.DateOffset(months=t1_months)).strftime(\"%Y-%m-%d\"),\n                ),  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n                calculated_t1_start=calculated_t1_start,  # \u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n                calculated_t1_end=calculated_t1_end,  # \u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u57fa\u51c6\u65e5\u671f\uff09\n                symbols=universe_symbols,\n                mean_daily_amounts=mean_amounts,\n                metadata={\n                    \"calculated_t1_start\": calculated_t1_start,\n                    \"calculated_t1_end\": calculated_t1_end,\n                    \"delay_days\": delay_days,\n                    \"quote_asset\": quote_asset,\n                    \"selected_symbols_count\": len(universe_symbols),\n                },\n            )\n\n            all_snapshots.append(snapshot)\n\n            logger.info(f\"\u2705 \u65e5\u671f {rebalance_date}: \u9009\u62e9\u4e86 {len(universe_symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\n        # \u521b\u5efa\u5b8c\u6574\u7684universe\u5b9a\u4e49\n        universe_def = UniverseDefinition(\n            config=config,\n            snapshots=all_snapshots,\n            creation_time=datetime.now(),\n            description=description,\n        )\n\n        # \u4fdd\u5b58\u6c47\u603b\u7684universe\u5b9a\u4e49\n        universe_def.save_to_file(output_path_obj)\n\n        logger.info(\"\ud83c\udf89 Universe\u5b9a\u4e49\u5b8c\u6210\uff01\")\n        logger.info(f\"\ud83d\udcc1 \u5305\u542b {len(all_snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\")\n        logger.info(f\"\ud83d\udccb \u6c47\u603b\u6587\u4ef6: {output_path_obj}\")\n\n        return universe_def\n\n    except Exception as e:\n        logger.error(f\"[red]\u5b9a\u4e49universe\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u5b9a\u4e49universe\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.m1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: RetryConfig | None = None, request_delay: float = 0.5, download_market_metrics: bool = True, metrics_interval: Freq = Freq.m5, long_short_ratio_period: Freq = Freq.m5, long_short_ratio_types: list[str] | None = None, use_binance_vision: bool = False) -&gt; None</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>download_funding_rate</code> <p>\u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> </p> <code>download_market_metrics</code> <p>\u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>metrics_interval</code> <p>\u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_types</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: RetryConfig | None = None,\n    request_delay: float = 0.5,  # \u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n    download_market_metrics: bool = True,  # \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n    metrics_interval: Freq = Freq.m5,  # \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n    long_short_ratio_period: Freq = Freq.m5,  # \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n    long_short_ratio_types: list[str] | None = None,  # \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n    use_binance_vision: bool = False,  # \u662f\u5426\u4f7f\u7528 Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\n) -&gt; None:\n    \"\"\"\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002\n\n    \u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)\n        interval: \u6570\u636e\u9891\u7387\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n        download_funding_rate: \u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        download_market_metrics: \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n        metrics_interval: \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n        long_short_ratio_period: \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n        long_short_ratio_types: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = self._validate_and_prepare_path(universe_file, is_file=True)\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n\n        # data_path\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u9a8c\u8bc1\n        data_path_obj = None\n        if data_path:\n            data_path_obj = self._validate_and_prepare_path(data_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        # \u8bbe\u7f6e\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u9ed8\u8ba4\u503c\n        if long_short_ratio_types is None:\n            long_short_ratio_types = [\"account\", \"position\"]\n\n        logger.info(\"\ud83d\udcca \u6309\u5468\u671f\u4e0b\u8f7d\u6570\u636e:\")\n        logger.info(f\"   - \u603b\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u6570\u636e\u9891\u7387: {interval.value}\")\n        logger.info(f\"   - \u5e76\u53d1\u7ebf\u7a0b: {max_workers}\")\n        logger.info(f\"   - \u8bf7\u6c42\u95f4\u9694: {request_delay}\u79d2\")\n        logger.info(f\"   - \u6570\u636e\u5e93\u8def\u5f84: {db_file_path}\")\n        logger.info(f\"   - \u4e0b\u8f7d\u5e02\u573a\u6307\u6807: {download_market_metrics}\")\n        if download_market_metrics:\n            logger.info(f\"   - \u6307\u6807\u6570\u636e\u95f4\u9694: {metrics_interval}\")\n            logger.info(f\"   - \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b: {long_short_ratio_types}\")\n        if data_path_obj:\n            logger.info(f\"   - \u6570\u636e\u6587\u4ef6\u8def\u5f84: {data_path_obj}\")\n\n        # \u4e3a\u6bcf\u4e2a\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"\ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            logger.info(f\"   - \u4ea4\u6613\u5bf9\u6570\u91cf: {len(snapshot.symbols)}\")\n            logger.info(\n                f\"   - \u8ba1\u7b97\u671f\u95f4: {snapshot.calculated_t1_start} \u5230 {snapshot.calculated_t1_end} (\u5b9a\u4e49universe)\"\n            )\n            logger.info(f\"   - \u4f7f\u7528\u671f\u95f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u5b9e\u9645\u4f7f\u7528)\")\n            logger.info(\n                f\"   - \u4e0b\u8f7d\u8303\u56f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u542b{include_buffer_days}\u5929\u7f13\u51b2)\"\n            )\n\n            # \u4e0b\u8f7dK\u7ebf\u6570\u636e\n            self.get_perpetual_data(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                db_path=db_file_path,\n                interval=interval,\n                max_workers=max_workers,\n                max_retries=max_retries,\n                retry_config=retry_config,\n                enable_integrity_check=True,\n                request_delay=request_delay,\n            )\n\n            # \u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\n            if download_market_metrics:\n                logger.info(\"   \ud83d\udcc8 \u5f00\u59cb\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e...\")\n                self._download_market_metrics_for_snapshot(\n                    snapshot=snapshot,\n                    db_path=db_file_path,\n                    interval=metrics_interval,\n                    period=long_short_ratio_period,\n                    long_short_ratio_types=long_short_ratio_types,\n                    request_delay=request_delay,\n                    use_binance_vision=use_binance_vision,\n                )\n\n            logger.info(f\"   \u2705 \u5feb\u7167 {snapshot.effective_date} \u4e0b\u8f7d\u5b8c\u6210\")\n\n        logger.info(\"\ud83c\udf89 \u6240\u6709universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210!\")\n        logger.info(f\"\ud83d\udcc1 \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {db_file_path}\")\n\n    except Exception as e:\n        logger.error(f\"[red]\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 100) -&gt; list[FundingRate]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> Note <ul> <li>\u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e</li> <li>\u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761</li> <li>\u6570\u636e\u6309\u5347\u5e8f\u6392\u5217</li> <li>\u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236</li> </ul> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 100,  # \u6539\u4e3aAPI\u9ed8\u8ba4\u503c\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Note:\n        - \u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e\n        - \u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761\n        - \u6570\u636e\u6309\u5347\u5e8f\u6392\u5217\n        - \u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n\n        # \u53c2\u6570\u9a8c\u8bc1\n        if limit &lt; 1 or limit &gt; 1000:\n            raise ValueError(f\"limit\u53c2\u6570\u5fc5\u987b\u57281-1000\u8303\u56f4\u5185\uff0c\u5f53\u524d\u503c: {limit}\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"limit\": limit,\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236 - Funding Rate API: 500\u8bf7\u6c42/5\u5206\u949f/IP (\u66f4\u4e25\u683c)\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API\n        data = self.client.futures_funding_rate(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aFundingRate\u5bf9\u8c61\n        funding_rates = [FundingRate.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(funding_rates)} \u6761\u8d44\u91d1\u8d39\u7387\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return funding_rates\n\n    except ValueError as e:\n        logger.error(f\"[red]\u53c2\u6570\u9a8c\u8bc1\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API - \u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u91cf\u6570\u636e\n        data = self.client.futures_open_interest_hist(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aOpenInterest\u5bf9\u8c61\n        open_interests = [OpenInterest.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(open_interests)} \u6761\u6301\u4ed3\u91cf\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return open_interests\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e (\u7c7b\u578b: {ratio_type})\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u6839\u636eratio_type\u9009\u62e9\u4e0d\u540c\u7684API\u7aef\u70b9\n        if ratio_type == \"account\":\n            data = self.client.futures_top_longshort_account_ratio(**params)\n        elif ratio_type == \"position\":\n            data = self.client.futures_top_longshort_position_ratio(**params)\n        elif ratio_type == \"global\":\n            data = self.client.futures_global_longshort_ratio(**params)\n        elif ratio_type == \"taker\":\n            data = self.client.futures_taker_longshort_ratio(**params)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684ratio_type: {ratio_type}\")\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aLongShortRatio\u5bf9\u8c61\n        long_short_ratios = [LongShortRatio.from_binance_response(item, ratio_type) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(long_short_ratios)} \u6761\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return long_short_ratios\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.download_binance_vision_metrics","title":"<code>download_binance_vision_metrics(symbols: list[str], start_date: str, end_date: str, data_types: list[str] | None = None, request_delay: float = 1.0) -&gt; None</code>","text":"<p>\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_types</code> <p>\u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_binance_vision_metrics(\n    self,\n    symbols: list[str],\n    start_date: str,\n    end_date: str,\n    data_types: list[str] | None = None,\n    request_delay: float = 1.0,\n) -&gt; None:\n    \"\"\"\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        data_types: \u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"\n        request_delay: \u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09\n    \"\"\"\n    if data_types is None:\n        data_types = [\"openInterest\", \"longShortRatio\"]\n\n    try:\n        logger.info(f\"\u5f00\u59cb\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e: {data_types}\")\n\n        if self.db is None:\n            raise ValueError(\"\u6570\u636e\u5e93\u672a\u521d\u59cb\u5316\")\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        for date in date_range:\n            date_str = date.strftime(\"%Y-%m-%d\")\n            logger.info(f\"\u5904\u7406\u65e5\u671f: {date_str}\")\n\n            # \u4e0b\u8f7d\u6307\u6807\u6570\u636e\uff08\u6240\u6709\u7c7b\u578b\u90fd\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff09\n            self._download_metrics_from_vision(symbols, date_str, request_delay)\n\n            # \u8bf7\u6c42\u5ef6\u8fdf\n            if request_delay &gt; 0:\n                time.sleep(request_delay)\n\n        logger.info(\"\u2705 Binance Vision \u6307\u6807\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_failed_downloads","title":"<code>get_failed_downloads() -&gt; dict[str, list[dict]]</code>","text":"<p>\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[dict]]</code> <p>\u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_failed_downloads(self) -&gt; dict[str, list[dict]]:\n    \"\"\"\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Returns:\n        \u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178\n    \"\"\"\n    return self.failed_downloads.copy()\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.clear_failed_downloads","title":"<code>clear_failed_downloads(symbol: str | None = None) -&gt; None</code>","text":"<p>\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def clear_failed_downloads(self, symbol: str | None = None) -&gt; None:\n    \"\"\"\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709\n    \"\"\"\n    if symbol:\n        self.failed_downloads.pop(symbol, None)\n    else:\n        self.failed_downloads.clear()\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.retry_failed_downloads","title":"<code>retry_failed_downloads(symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]</code>","text":"<p>\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>\u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def retry_failed_downloads(self, symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]:\n    \"\"\"\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n\n    Returns:\n        \u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1\n    \"\"\"\n    if not self.failed_downloads:\n        logger.info(\"\ud83d\udccb \u6ca1\u6709\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\")\n        return {\"total\": 0, \"success\": 0, \"failed\": 0}\n\n    symbols_to_retry = [symbol] if symbol else list(self.failed_downloads.keys())\n    total_attempts = 0\n    success_count = 0\n    failed_count = 0\n\n    for retry_symbol in symbols_to_retry:\n        if retry_symbol not in self.failed_downloads:\n            continue\n\n        failures = self.failed_downloads[retry_symbol].copy()\n\n        for failure in failures:\n            if failure[\"retry_count\"] &gt;= max_retries:\n                logger.debug(f\"\u23ed\ufe0f {retry_symbol}: \u8df3\u8fc7\uff0c\u5df2\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\")\n                continue\n\n            total_attempts += 1\n\n            try:\n                logger.info(f\"\ud83d\udd04 \u91cd\u8bd5\u4e0b\u8f7d {retry_symbol}: {failure['date']}\")\n\n                # \u5c1d\u8bd5\u91cd\u65b0\u4e0b\u8f7d\n                retry_config = RetryConfig(max_retries=2, base_delay=3.0)\n                metrics_data = self._download_and_parse_metrics_csv(failure[\"url\"], retry_symbol, retry_config)\n\n                if metrics_data and self.db:\n                    # \u5b58\u50a8\u6570\u636e\n                    if metrics_data.get(\"open_interest\"):\n                        self.db.store_open_interest(metrics_data[\"open_interest\"])\n                    if metrics_data.get(\"long_short_ratio\"):\n                        self.db.store_long_short_ratio(metrics_data[\"long_short_ratio\"])\n\n                    # \u4ece\u5931\u8d25\u5217\u8868\u4e2d\u79fb\u9664\n                    self.failed_downloads[retry_symbol].remove(failure)\n                    if not self.failed_downloads[retry_symbol]:\n                        del self.failed_downloads[retry_symbol]\n\n                    success_count += 1\n                    logger.info(f\"\u2705 {retry_symbol}: \u91cd\u8bd5\u6210\u529f\")\n\n                else:\n                    failure[\"retry_count\"] += 1\n                    failed_count += 1\n                    logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5931\u8d25\")\n\n            except Exception as e:\n                failure[\"retry_count\"] += 1\n                failed_count += 1\n                logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5f02\u5e38 - {e}\")\n\n            # \u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u91cd\u8bd5\n            time.sleep(1.0)\n\n    result: dict[str, Any] = {\n        \"total\": total_attempts,\n        \"success\": success_count,\n        \"failed\": failed_count,\n    }\n\n    logger.info(f\"\ud83d\udcca \u91cd\u8bd5\u7edf\u8ba1: \u603b\u8ba1 {total_attempts}, \u6210\u529f {success_count}, \u5931\u8d25 {failed_count}\")\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_symbol_categories","title":"<code>get_symbol_categories() -&gt; dict[str, list[str]]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[str]]</code> <p>\u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_symbol_categories() -&gt; dict[str, list[str]]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Returns:\n        \u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(\"\u83b7\u53d6 Binance \u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f...\")\n\n        # \u8c03\u7528 Binance \u5206\u7c7b API\n        url = \"https://www.binance.com/bapi/composite/v1/public/marketing/symbol/list\"\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n\n        if data.get(\"code\") != \"000000\":\n            raise ValueError(f\"API \u8fd4\u56de\u9519\u8bef: {data.get('message', 'Unknown error')}\")\n\n        # \u63d0\u53d6 symbol \u548c tags \u7684\u6620\u5c04\u5173\u7cfb\n        symbol_categories = {}\n        for item in data.get(\"data\", []):\n            symbol = item.get(\"symbol\", \"\")\n            tags = item.get(\"tags\", [])\n\n            # \u53ea\u4fdd\u7559 USDT \u4ea4\u6613\u5bf9\n            if symbol.endswith(\"USDT\"):\n                symbol_categories[symbol] = sorted(tags)  # \u5bf9\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {len(symbol_categories)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n        return symbol_categories\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_all_categories","title":"<code>get_all_categories() -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002</p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_all_categories() -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002\n\n    Returns:\n        \u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u6536\u96c6\u6240\u6709\u6807\u7b7e\n        all_tags = set()\n        for tags in symbol_categories.values():\n            all_tags.update(tags)\n\n        # \u6309\u5b57\u6bcd\u6392\u5e8f\n        return sorted(list(all_tags))\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u5206\u7c7b\u6807\u7b7e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.create_category_matrix","title":"<code>create_category_matrix(symbols: list[str], categories: list[str] | None = None) -&gt; tuple[list[str], list[str], list[list[int]]]</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u5143\u7ec4 (symbols, categories, matrix)</p> <code>list[str]</code> <ul> <li>symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</li> </ul> <code>list[list[int]]</code> <ul> <li>categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868</li> </ul> <code>tuple[list[str], list[str], list[list[int]]]</code> <ul> <li>matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]</li> </ul> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef create_category_matrix(\n    symbols: list[str], categories: list[str] | None = None\n) -&gt; tuple[list[str], list[str], list[list[int]]]:\n    \"\"\"\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n\n    Returns:\n        \u5143\u7ec4 (symbols, categories, matrix)\n        - symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n        - categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868\n        - matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5206\u7c7b\uff0c\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n        if categories is None:\n            categories = MarketDataService.get_all_categories()\n        else:\n            categories = sorted(categories)\n\n        # \u8fc7\u6ee4\u5e76\u6392\u5e8fsymbols\uff08\u53ea\u4fdd\u7559\u6709\u5206\u7c7b\u4fe1\u606f\u7684\uff09\n        valid_symbols = [s for s in symbols if s in symbol_categories]\n        valid_symbols.sort()\n\n        # \u521b\u5efa\u77e9\u9635\n        matrix = []\n        for symbol in valid_symbols:\n            symbol_tags = symbol_categories.get(symbol, [])\n            row = [1 if category in symbol_tags else 0 for category in categories]\n            matrix.append(row)\n\n        logger.info(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635: {len(valid_symbols)} symbols \u00d7 {len(categories)} categories\")\n\n        return valid_symbols, categories, matrix\n\n    except Exception as e:\n        logger.error(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.save_category_matrix_csv","title":"<code>save_category_matrix_csv(output_path: Path | str, symbols: list[str], date_str: str | None = None, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>date_str</code> <p>\u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef save_category_matrix_csv(\n    output_path: Path | str,\n    symbols: list[str],\n    date_str: str | None = None,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\u8def\u5f84\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        date_str: \u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        import csv\n        from datetime import datetime\n\n        output_path = Path(output_path)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65e5\u671f\uff0c\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        if date_str is None:\n            date_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u521b\u5efa\u5206\u7c7b\u77e9\u9635\n        valid_symbols, sorted_categories, matrix = MarketDataService.create_category_matrix(symbols, categories)\n\n        # \u6587\u4ef6\u540d\u683c\u5f0f: categories_YYYY-MM-DD.csv\n        filename = f\"categories_{date_str}.csv\"\n        file_path = output_path / filename\n\n        # \u5199\u5165 CSV \u6587\u4ef6\n        with open(file_path, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n            writer = csv.writer(csvfile)\n\n            # \u5199\u5165\u8868\u5934 (symbol, category1, category2, ...)\n            header = [\"symbol\"] + sorted_categories\n            writer.writerow(header)\n\n            # \u5199\u5165\u6570\u636e\u884c\n            for i, symbol in enumerate(valid_symbols):\n                row = [symbol] + matrix[i]\n                writer.writerow(row)\n\n        logger.info(f\"\u6210\u529f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5230: {file_path}\")\n        logger.info(f\"\u77e9\u9635\u5927\u5c0f: {len(valid_symbols)} symbols \u00d7 {len(sorted_categories)} categories\")\n\n    except Exception as e:\n        logger.error(f\"\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.download_and_save_categories_for_universe","title":"<code>download_and_save_categories_for_universe(universe_file: Path | str, output_path: Path | str, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe \u5b9a\u4e49\u6587\u4ef6</p> <p> TYPE: <code>Path | str</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef download_and_save_categories_for_universe(\n    universe_file: Path | str,\n    output_path: Path | str,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Args:\n        universe_file: universe \u5b9a\u4e49\u6587\u4ef6\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        from datetime import datetime\n\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = MarketDataService._validate_and_prepare_path(universe_file, is_file=True)\n        output_path_obj = MarketDataService._validate_and_prepare_path(output_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        logger.info(\"\ud83c\udff7\ufe0f \u5f00\u59cb\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f:\")\n        logger.info(f\"   - Universe\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u8f93\u51fa\u76ee\u5f55: {output_path_obj}\")\n\n        # \u6536\u96c6\u6240\u6709\u4ea4\u6613\u5bf9\n        all_symbols = set()\n        for snapshot in universe_def.snapshots:\n            all_symbols.update(snapshot.symbols)\n\n        all_symbols_list = sorted(list(all_symbols))\n        logger.info(f\"   - \u603b\u4ea4\u6613\u5bf9\u6570: {len(all_symbols_list)}\")\n\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u6240\u6709\u5386\u53f2\u6570\u636e\uff09\n        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n        logger.info(f\"   \ud83d\udcc5 \u83b7\u53d6 {current_date} \u7684\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u586b\u5145\u5386\u53f2\u6570\u636e\uff09\")\n\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u65e5\u671f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"   \ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            # \u4f7f\u7528\u5feb\u7167\u7684\u6709\u6548\u65e5\u671f\n            snapshot_date = snapshot.effective_date\n\n            # \u4fdd\u5b58\u8be5\u5feb\u7167\u7684\u5206\u7c7b\u77e9\u9635\n            MarketDataService.save_category_matrix_csv(\n                output_path=output_path_obj,\n                symbols=snapshot.symbols,\n                date_str=snapshot_date,\n                categories=categories,\n            )\n\n            logger.info(f\"       \u2705 \u4fdd\u5b58\u4e86 {len(snapshot.symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n\n        # \u4e5f\u4fdd\u5b58\u4e00\u4e2a\u5f53\u524d\u65e5\u671f\u7684\u5b8c\u6574\u77e9\u9635\uff08\u5305\u542b\u6240\u6709\u4ea4\u6613\u5bf9\uff09\n        logger.info(f\"   \ud83d\udcc5 \u4fdd\u5b58\u5f53\u524d\u65e5\u671f ({current_date}) \u7684\u5b8c\u6574\u5206\u7c7b\u77e9\u9635\")\n        MarketDataService.save_category_matrix_csv(\n            output_path=output_path_obj,\n            symbols=all_symbols_list,\n            date_str=current_date,\n            categories=categories,\n        )\n\n        logger.info(\"\u2705 \u6240\u6709\u5206\u7c7b\u4fe1\u606f\u4e0b\u8f7d\u548c\u4fdd\u5b58\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/","title":"cryptoservice.services.market_service","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service","title":"<code>cryptoservice.services.market_service</code>","text":"<p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u6a21\u5757\u3002</p> <p>\u63d0\u4f9b\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u83b7\u53d6\u3001\u5904\u7406\u548c\u5b58\u50a8\u529f\u80fd\u3002</p>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.RateLimitManager","title":"<code>RateLimitManager(base_delay: float = 0.5)</code>","text":"<p>API\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, base_delay: float = 0.5):\n    self.base_delay = base_delay\n    self.current_delay = base_delay\n    self.last_request_time = 0.0\n    self.request_count = 0\n    self.window_start_time = time.time()\n    self.consecutive_errors = 0\n    self.max_requests_per_minute = 1800  # \u4fdd\u5b88\u4f30\u8ba1\uff0c\u4f4e\u4e8eAPI\u9650\u5236\n    self.lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.RateLimitManager-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.RateLimitManager.wait_before_request","title":"<code>wait_before_request()</code>","text":"<p>\u5728\u8bf7\u6c42\u524d\u7b49\u5f85\u9002\u5f53\u7684\u65f6\u95f4</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def wait_before_request(self):\n    \"\"\"\u5728\u8bf7\u6c42\u524d\u7b49\u5f85\u9002\u5f53\u7684\u65f6\u95f4\"\"\"\n    with self.lock:\n        current_time = time.time()\n\n        # \u91cd\u7f6e\u8ba1\u6570\u7a97\u53e3\uff08\u6bcf\u5206\u949f\uff09\n        if current_time - self.window_start_time &gt;= 60:\n            self.request_count = 0\n            self.window_start_time = current_time\n            # \u5982\u679c\u957f\u65f6\u95f4\u6ca1\u6709\u9519\u8bef\uff0c\u9010\u6e10\u964d\u4f4e\u5ef6\u8fdf\n            if self.consecutive_errors == 0:\n                self.current_delay = max(self.base_delay, self.current_delay * 0.9)\n\n                # \u68c0\u67e5\u662f\u5426\u63a5\u8fd1\u9891\u7387\u9650\u5236\n        requests_this_minute = self.request_count\n\n        if requests_this_minute &gt;= self.max_requests_per_minute * 0.8:  # \u8fbe\u523080%\u9650\u5236\u65f6\u5f00\u59cb\u51cf\u901f\n            additional_delay = 2.0\n            logger.warning(f\"\u26a0\ufe0f \u63a5\u8fd1\u9891\u7387\u9650\u5236\uff0c\u589e\u52a0\u5ef6\u8fdf: {additional_delay}\u79d2\")\n        else:\n            additional_delay = 0\n\n        # \u8ba1\u7b97\u9700\u8981\u7b49\u5f85\u7684\u65f6\u95f4\n        time_since_last = current_time - self.last_request_time\n        total_delay = self.current_delay + additional_delay\n\n        if time_since_last &lt; total_delay:\n            wait_time = total_delay - time_since_last\n            if wait_time &gt; 0.1:  # \u53ea\u8bb0\u5f55\u8f83\u957f\u7684\u7b49\u5f85\u65f6\u95f4\n                logger.debug(f\"\u7b49\u5f85 {wait_time:.2f}\u79d2 (\u5f53\u524d\u5ef6\u8fdf: {self.current_delay:.2f}\u79d2)\")\n            time.sleep(wait_time)\n\n        self.last_request_time = time.time()\n        self.request_count += 1\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.RateLimitManager.handle_rate_limit_error","title":"<code>handle_rate_limit_error()</code>","text":"<p>\u5904\u7406\u9891\u7387\u9650\u5236\u9519\u8bef</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def handle_rate_limit_error(self):\n    \"\"\"\u5904\u7406\u9891\u7387\u9650\u5236\u9519\u8bef\"\"\"\n    with self.lock:\n        self.consecutive_errors += 1\n\n        # \u52a8\u6001\u589e\u52a0\u5ef6\u8fdf\n        if self.consecutive_errors &lt;= 3:\n            self.current_delay = min(10.0, self.current_delay * 2)\n            wait_time = 60  # \u7b49\u5f851\u5206\u949f\n        elif self.consecutive_errors &lt;= 6:\n            self.current_delay = min(15.0, self.current_delay * 1.5)\n            wait_time = 120  # \u7b49\u5f852\u5206\u949f\n        else:\n            self.current_delay = 20.0\n            wait_time = 300  # \u7b49\u5f855\u5206\u949f\n\n        logger.warning(\n            f\"\ud83d\udeab \u9891\u7387\u9650\u5236\u9519\u8bef #{self.consecutive_errors}\uff0c\u7b49\u5f85 {wait_time}\u79d2\uff0c\u8c03\u6574\u5ef6\u8fdf\u81f3 {self.current_delay:.2f}\u79d2\"\n        )\n\n        # \u91cd\u7f6e\u8bf7\u6c42\u8ba1\u6570\n        self.request_count = 0\n        self.window_start_time = time.time()\n\n        return wait_time\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.RateLimitManager.handle_success","title":"<code>handle_success()</code>","text":"<p>\u5904\u7406\u6210\u529f\u8bf7\u6c42</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def handle_success(self):\n    \"\"\"\u5904\u7406\u6210\u529f\u8bf7\u6c42\"\"\"\n    with self.lock:\n        if self.consecutive_errors &gt; 0:\n            self.consecutive_errors = max(0, self.consecutive_errors - 1)\n            if self.consecutive_errors == 0:\n                logger.info(f\"\u2705 \u6062\u590d\u6b63\u5e38\uff0c\u5f53\u524d\u5ef6\u8fdf: {self.current_delay:.2f}\u79d2\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.ExponentialBackoff","title":"<code>ExponentialBackoff(config: RetryConfig)</code>","text":"<p>\u6307\u6570\u9000\u907f\u5b9e\u73b0</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, config: RetryConfig):\n    self.config = config\n    self.attempt = 0\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.ExponentialBackoff-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.ExponentialBackoff.reset","title":"<code>reset()</code>","text":"<p>\u91cd\u7f6e\u91cd\u8bd5\u8ba1\u6570</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def reset(self):\n    \"\"\"\u91cd\u7f6e\u91cd\u8bd5\u8ba1\u6570\"\"\"\n    self.attempt = 0\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.ExponentialBackoff.wait","title":"<code>wait() -&gt; float</code>","text":"<p>\u8ba1\u7b97\u5e76\u6267\u884c\u7b49\u5f85\u65f6\u95f4</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def wait(self) -&gt; float:\n    \"\"\"\u8ba1\u7b97\u5e76\u6267\u884c\u7b49\u5f85\u65f6\u95f4\"\"\"\n    if self.attempt &gt;= self.config.max_retries:\n        raise Exception(f\"\u8d85\u8fc7\u6700\u5927\u91cd\u8bd5\u6b21\u6570: {self.config.max_retries}\")\n\n    # \u8ba1\u7b97\u57fa\u7840\u5ef6\u8fdf\n    delay = min(\n        self.config.base_delay * (self.config.backoff_multiplier**self.attempt),\n        self.config.max_delay,\n    )\n\n    # \u6dfb\u52a0\u6296\u52a8\u4ee5\u907f\u514d\u60ca\u7fa4\u6548\u5e94\n    if self.config.jitter:\n        delay *= 0.5 + random.random() * 0.5\n\n    self.attempt += 1\n\n    logger.debug(f\"\u6307\u6570\u9000\u907f: \u7b2c{self.attempt}\u6b21\u91cd\u8bd5, \u7b49\u5f85{delay:.2f}\u79d2\")\n    time.sleep(delay)\n\n    return delay\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler","title":"<code>EnhancedErrorHandler</code>","text":"<p>\u589e\u5f3a\u9519\u8bef\u5904\u7406\u5668</p>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler.classify_error","title":"<code>classify_error(error: Exception) -&gt; ErrorSeverity</code>  <code>staticmethod</code>","text":"<p>\u9519\u8bef\u5206\u7c7b</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef classify_error(error: Exception) -&gt; ErrorSeverity:\n    \"\"\"\u9519\u8bef\u5206\u7c7b\"\"\"\n    error_str = str(error).lower()\n\n    # API\u9891\u7387\u9650\u5236\n    if any(\n        keyword in error_str\n        for keyword in [\n            \"too many requests\",\n            \"rate limit\",\n            \"429\",\n            \"request limit\",\n            \"-1003\",\n        ]\n    ):\n        return ErrorSeverity.MEDIUM\n\n    # SSL\u76f8\u5173\u9519\u8bef - \u901a\u5e38\u662f\u7f51\u7edc\u4e0d\u7a33\u5b9a\uff0c\u53ef\u91cd\u8bd5\n    if any(\n        keyword in error_str\n        for keyword in [\n            \"ssl\",\n            \"sslerror\",\n            \"ssleoferror\",\n            \"unexpected_eof_while_reading\",\n            \"ssl: unexpected_eof_while_reading\",\n            \"certificate verify failed\",\n            \"handshake failure\",\n            \"ssl: handshake_failure\",\n            \"ssl: tlsv1_alert_protocol_version\",\n            \"ssl: wrong_version_number\",\n            \"ssl context\",\n            \"ssl: certificate_verify_failed\",\n            \"ssl: bad_record_mac\",\n            \"ssl: decryption_failed_or_bad_record_mac\",\n            \"ssl: sslv3_alert_handshake_failure\",\n            \"ssl: tlsv1_alert_internal_error\",\n            \"ssl: connection_lost\",\n            \"ssl: application_data_after_close_notify\",\n            \"ssl: bad_certificate\",\n            \"ssl: unsupported_certificate\",\n            \"ssl: certificate_required\",\n            \"ssl: no_shared_cipher\",\n            \"ssl: peer_did_not_return_a_certificate\",\n            \"ssl: certificate_unknown\",\n            \"ssl: illegal_parameter\",\n            \"ssl: unknown_ca\",\n            \"ssl: access_denied\",\n            \"ssl: decode_error\",\n            \"ssl: decrypt_error\",\n            \"ssl: export_restriction\",\n            \"ssl: protocol_version\",\n            \"ssl: insufficient_security\",\n            \"ssl: internal_error\",\n            \"ssl: user_cancelled\",\n            \"ssl: no_renegotiation\",\n            \"ssl: unsupported_extension\",\n            \"ssl: certificate_unobtainable\",\n            \"ssl: unrecognized_name\",\n            \"ssl: bad_certificate_status_response\",\n            \"ssl: bad_certificate_hash_value\",\n            \"ssl: unknown_psk_identity\",\n            \"eof occurred in violation of protocol\",\n            \"connection was interrupted\",\n            \"connection aborted\",\n            \"connection reset by peer\",\n            \"broken pipe\",\n            \"connection timed out\",\n            \"connection refused\",\n        ]\n    ):\n        return ErrorSeverity.MEDIUM\n\n    # \u7f51\u7edc\u76f8\u5173\u9519\u8bef\n    if any(keyword in error_str for keyword in [\"connection\", \"timeout\", \"network\", \"dns\", \"socket\"]):\n        return ErrorSeverity.MEDIUM\n\n    # \u65e0\u6548\u4ea4\u6613\u5bf9\n    if any(keyword in error_str for keyword in [\"invalid symbol\", \"symbol not found\", \"unknown symbol\"]):\n        return ErrorSeverity.LOW\n\n    # \u670d\u52a1\u5668\u9519\u8bef\n    if any(\n        keyword in error_str\n        for keyword in [\n            \"500\",\n            \"502\",\n            \"503\",\n            \"504\",\n            \"server error\",\n            \"internal error\",\n        ]\n    ):\n        return ErrorSeverity.HIGH\n\n    # \u8ba4\u8bc1\u9519\u8bef\n    if any(keyword in error_str for keyword in [\"unauthorized\", \"forbidden\", \"api key\", \"signature\"]):\n        return ErrorSeverity.CRITICAL\n\n    # \u9ed8\u8ba4\u4e3a\u4e2d\u7b49\u4e25\u91cd\u6027\n    return ErrorSeverity.MEDIUM\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler.should_retry","title":"<code>should_retry(error: Exception, attempt: int, max_retries: int) -&gt; bool</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u662f\u5426\u5e94\u8be5\u91cd\u8bd5</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef should_retry(error: Exception, attempt: int, max_retries: int) -&gt; bool:\n    \"\"\"\u5224\u65ad\u662f\u5426\u5e94\u8be5\u91cd\u8bd5\"\"\"\n    severity = EnhancedErrorHandler.classify_error(error)\n\n    if severity == ErrorSeverity.CRITICAL:\n        return False\n\n    if severity == ErrorSeverity.LOW and attempt &gt; 1:\n        return False\n\n    return attempt &lt; max_retries\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler.get_recommended_action","title":"<code>get_recommended_action(error: Exception) -&gt; str</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u63a8\u8350\u5904\u7406\u52a8\u4f5c</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_recommended_action(error: Exception) -&gt; str:\n    \"\"\"\u83b7\u53d6\u63a8\u8350\u5904\u7406\u52a8\u4f5c\"\"\"\n    severity = EnhancedErrorHandler.classify_error(error)\n    error_str = str(error).lower()\n\n    if severity == ErrorSeverity.CRITICAL:\n        return \"\u68c0\u67e5API\u5bc6\u94a5\u548c\u6743\u9650\u8bbe\u7f6e\"\n    elif \"rate limit\" in error_str or \"-1003\" in error_str:\n        return \"\u9891\u7387\u9650\u5236\uff0c\u81ea\u52a8\u8c03\u6574\u8bf7\u6c42\u95f4\u9694\"\n    elif any(\n        keyword in error_str\n        for keyword in [\n            \"ssl\",\n            \"sslerror\",\n            \"ssleoferror\",\n            \"unexpected_eof_while_reading\",\n        ]\n    ):\n        return \"SSL\u8fde\u63a5\u9519\u8bef\uff0c\u81ea\u52a8\u91cd\u8bd5\u5e76\u8003\u8651\u7f51\u7edc\u7a33\u5b9a\u6027\"\n    elif \"connection\" in error_str:\n        return \"\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\uff0c\u8003\u8651\u4f7f\u7528\u4ee3\u7406\"\n    elif \"invalid symbol\" in error_str:\n        return \"\u9a8c\u8bc1\u4ea4\u6613\u5bf9\u662f\u5426\u5b58\u5728\u548c\u53ef\u4ea4\u6613\"\n    else:\n        return \"\u68c0\u67e5API\u6587\u6863\u548c\u9519\u8bef\u8be6\u60c5\"\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.EnhancedErrorHandler.is_rate_limit_error","title":"<code>is_rate_limit_error(error: Exception) -&gt; bool</code>  <code>staticmethod</code>","text":"<p>\u5224\u65ad\u662f\u5426\u4e3a\u9891\u7387\u9650\u5236\u9519\u8bef</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef is_rate_limit_error(error: Exception) -&gt; bool:\n    \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u9891\u7387\u9650\u5236\u9519\u8bef\"\"\"\n    error_str = str(error).lower()\n    return any(keyword in error_str for keyword in [\"too many requests\", \"rate limit\", \"429\", \"-1003\"])\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: MarketDB | None = None\n    self.rate_limit_manager = RateLimitManager()\n    self.failed_downloads: dict[str, list[dict]] = {}  # \u8bb0\u5f55\u5931\u8d25\u7684\u4e0b\u8f7d\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | list[SymbolTicker]</code> <p>SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | list[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | list[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True, quote_asset: str = 'USDT') -&gt; list[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True, quote_asset: str = \"USDT\") -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u8fd4\u56de\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        list[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\uff08\u7b5b\u9009\u6761\u4ef6\uff1a{quote_asset}\u7ed3\u5c3e\uff09\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n            and symbol[\"symbol\"].endswith(quote_asset)\n        ]\n\n        logger.info(f\"\u627e\u5230 {len(perpetual_symbols)} \u4e2a{quote_asset}\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\")\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time, end_time = self._date_to_timestamp_range(date)\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol,\n            interval=\"1d\",\n            startTime=start_time,\n            endTime=end_time,\n            limit=1,\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; list[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[DailyMarketTicker]</code> <p>list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; list[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        list[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u3002\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers_result = self.get_symbol_ticker()\n        if isinstance(tickers_result, list):\n            tickers = [ticker.to_dict() for ticker in tickers_result]\n        else:\n            tickers = [tickers_result.to_dict()]\n        summary[\"data\"] = tickers\n\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; list[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>list[KlineMarketTicker]</code> <p>list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; list[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u5982\u679c\u4e3aNone\u5219\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: K\u7ebf\u7c7b\u578b\uff08\u73b0\u8d27\u6216\u671f\u8d27\uff09\n\n    Returns:\n        list[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        # \u5904\u7406\u65f6\u95f4\u683c\u5f0f\n        if isinstance(start_time, str):\n            start_time = datetime.fromisoformat(start_time)\n        if end_time is None:\n            end_time = datetime.now()\n        elif isinstance(end_time, str):\n            end_time = datetime.fromisoformat(end_time)\n\n        # \u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time.strftime(\"%Y-%m-%d\"))\n        end_ts = self._date_to_timestamp_end(end_time.strftime(\"%Y-%m-%d\"))\n\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u5386\u53f2\u6570\u636e ({interval.value})\")\n\n        # \u6839\u636eklines_type\u9009\u62e9API\n        if klines_type == HistoricalKlinesType.FUTURES:\n            klines = self.client.futures_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n        else:  # SPOT\n            klines = self.client.get_klines(\n                symbol=symbol,\n                interval=interval.value,\n                startTime=start_ts,\n                endTime=end_ts,\n                limit=1500,\n            )\n\n        data = list(klines)\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230\u4ea4\u6613\u5bf9 {symbol} \u5728\u6307\u5b9a\u65f6\u95f4\u6bb5\u5185\u7684\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aKlineMarketTicker\u5bf9\u8c61\n        return [\n            KlineMarketTicker(\n                symbol=symbol,\n                last_price=Decimal(str(kline[4])),  # \u6536\u76d8\u4ef7\u4f5c\u4e3a\u6700\u65b0\u4ef7\u683c\n                open_price=Decimal(str(kline[1])),\n                high_price=Decimal(str(kline[2])),\n                low_price=Decimal(str(kline[3])),\n                volume=Decimal(str(kline[5])),\n                close_time=kline[6],\n            )\n            for kline in data\n        ]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: list[str], start_time: str, db_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None, request_delay: float = 0.5, retry_config: Optional[RetryConfig] = None, enable_integrity_check: bool = True) -&gt; IntegrityReport</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>retry_config</code> <p>\u91cd\u8bd5\u914d\u7f6e</p> <p> TYPE: <code>Optional[RetryConfig]</code> DEFAULT: <code>None</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> <code>enable_integrity_check</code> <p>\u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> RETURNS DESCRIPTION <code>IntegrityReport</code> <p>\u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a</p> <p> TYPE: <code>IntegrityReport</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: list[str],\n    start_time: str,\n    db_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n    request_delay: float = 0.5,\n    # \u989d\u5916\u53c2\u6570\uff0c\u4fdd\u6301\u5411\u540e\u517c\u5bb9\n    retry_config: Optional[RetryConfig] = None,\n    enable_integrity_check: bool = True,\n) -&gt; IntegrityReport:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8 (\u589e\u5f3a\u7248).\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        retry_config: \u91cd\u8bd5\u914d\u7f6e\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n        enable_integrity_check: \u662f\u5426\u542f\u7528\u5b8c\u6574\u6027\u68c0\u67e5\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n\n    Returns:\n        IntegrityReport: \u6570\u636e\u5b8c\u6574\u6027\u62a5\u544a\n    \"\"\"\n    if retry_config is None:\n        retry_config = RetryConfig(max_retries=max_retries)\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u7edf\u8ba1\n    successful_symbols = []\n    failed_symbols = []\n    missing_periods = []\n\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\n        start_ts = self._date_to_timestamp_start(start_time)\n        end_ts = self._date_to_timestamp_end(end_time)\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\n        if self.db is None:\n            self.db = MarketDB(str(db_file_path))\n\n        # \u91cd\u65b0\u521d\u59cb\u5316\u9891\u7387\u9650\u5236\u7ba1\u7406\u5668\uff0c\u4f7f\u7528\u7528\u6237\u6307\u5b9a\u7684\u57fa\u7840\u5ef6\u8fdf\n        self.rate_limit_manager = RateLimitManager(base_delay=request_delay)\n\n        logger.info(f\"\ud83d\ude80 \u5f00\u59cb\u4e0b\u8f7d {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\")\n        logger.info(f\"\ud83d\udcc5 \u65f6\u95f4\u8303\u56f4: {start_time} \u5230 {end_time}\")\n        logger.info(f\"\u2699\ufe0f \u91cd\u8bd5\u914d\u7f6e: \u6700\u5927{retry_config.max_retries}\u6b21, \u57fa\u7840\u5ef6\u8fdf{retry_config.base_delay}\u79d2\")\n        logger.info(f\"\u23f1\ufe0f \u667a\u80fd\u9891\u7387\u63a7\u5236: \u57fa\u7840\u5ef6\u8fdf{request_delay}\u79d2\uff0c\u52a8\u6001\u8c03\u6574\")\n\n        # \u521b\u5efa\u8fdb\u5ea6\u8ddf\u8e2a\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TimeElapsedColumn(),\n            )\n\n        def process_symbol(symbol: str) -&gt; Dict[str, Any]:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6 (\u589e\u5f3a\u7248)\"\"\"\n            result = {\n                \"symbol\": symbol,\n                \"success\": False,\n                \"records\": 0,\n                \"error\": None,\n            }\n\n            try:\n                data = self._fetch_symbol_data(\n                    symbol=symbol,\n                    start_ts=start_ts,\n                    end_ts=end_ts,\n                    interval=interval,\n                    retry_config=retry_config,\n                )\n\n                if data:\n                    if self.db is None:\n                        raise MarketDataFetchError(\"Database is not initialized\")\n\n                    self.db.store_data(data, interval)\n                    result.update(\n                        {\n                            \"success\": True,\n                            \"records\": len(data),\n                            \"time_range\": f\"{data[0].open_time} - {data[-1].open_time}\",\n                        }\n                    )\n                    logger.debug(f\"\u2705 {symbol}: {len(data)} \u6761\u8bb0\u5f55\")\n                    successful_symbols.append(symbol)\n                else:\n                    result[\"error\"] = \"\u65e0\u6570\u636e\"\n                    logger.debug(f\"\u26a0\ufe0f {symbol}: \u65e0\u6570\u636e\")\n                    missing_periods.append(\n                        {\n                            \"symbol\": symbol,\n                            \"period\": f\"{start_time} - {end_time}\",\n                            \"reason\": \"no_data\",\n                        }\n                    )\n\n            except InvalidSymbolError as e:\n                result[\"error\"] = f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\"\n                logger.warning(f\"\u26a0\ufe0f \u8df3\u8fc7\u65e0\u6548\u4ea4\u6613\u5bf9 {symbol}\")\n                failed_symbols.append(symbol)\n\n            except Exception as e:\n                result[\"error\"] = str(e)\n                logger.error(f\"\u274c {symbol} \u5931\u8d25: {e}\")\n                failed_symbols.append(symbol)\n                missing_periods.append(\n                    {\n                        \"symbol\": symbol,\n                        \"period\": f\"{start_time} - {end_time}\",\n                        \"reason\": str(e),\n                    }\n                )\n\n            return result\n\n        # \u6267\u884c\u5e76\u884c\u4e0b\u8f7d\n        results = []\n        with progress if progress is not None else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u4e0b\u8f7d\u4ea4\u6613\u5bf9\u6570\u636e\", total=len(symbols)) if progress else None\n\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                for future in as_completed(futures):\n                    try:\n                        result = future.result()\n                        results.append(result)\n\n                        if progress and overall_task is not None:\n                            progress.update(overall_task, advance=1)\n\n                    except Exception as e:\n                        logger.error(f\"\u274c \u5904\u7406\u5f02\u5e38: {e}\")\n\n        # \u751f\u6210\u7edf\u8ba1\u62a5\u544a\n        total_records = sum(r.get(\"records\", 0) for r in results)\n        success_rate = len(successful_symbols) / len(symbols) if symbols else 0\n\n        logger.info(\"\ud83d\udcca \u4e0b\u8f7d\u5b8c\u6210\u7edf\u8ba1:\")\n        logger.info(f\"   \u2705 \u6210\u529f: {len(successful_symbols)}/{len(symbols)} ({success_rate:.1%})\")\n        logger.info(f\"   \u274c \u5931\u8d25: {len(failed_symbols)} \u4e2a\")\n        logger.info(f\"   \ud83d\udcc8 \u603b\u8bb0\u5f55\u6570: {total_records:,} \u6761\")\n        logger.info(f\"   \ud83d\udcbe \u6570\u636e\u5e93: {db_file_path}\")\n\n        # \u6267\u884c\u5b8c\u6574\u6027\u68c0\u67e5\n        if enable_integrity_check and self.db:\n            integrity_report = self._create_integrity_report(\n                symbols=symbols,\n                successful_symbols=successful_symbols,\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                start_time=start_time,\n                end_time=end_time,\n                interval=interval,\n                db_file_path=db_file_path,\n            )\n        else:\n            # \u751f\u6210\u57fa\u7840\u62a5\u544a\n            data_quality_score = len(successful_symbols) / len(symbols) if symbols else 0\n            recommendations = []\n            if data_quality_score &lt; 0.8:\n                recommendations.append(\"\u6570\u636e\u6210\u529f\u7387\u8f83\u4f4e\uff0c\u5efa\u8bae\u68c0\u67e5\u7f51\u7edc\u548cAPI\u914d\u7f6e\")\n            if failed_symbols:\n                recommendations.append(f\"\u6709{len(failed_symbols)}\u4e2a\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5931\u8d25\uff0c\u5efa\u8bae\u5355\u72ec\u91cd\u8bd5\")\n\n            integrity_report = IntegrityReport(\n                total_symbols=len(symbols),\n                successful_symbols=len(successful_symbols),\n                failed_symbols=failed_symbols,\n                missing_periods=missing_periods,\n                data_quality_score=data_quality_score,\n                recommendations=recommendations,\n            )\n\n        return integrity_report\n\n    except Exception as e:\n        logger.error(f\"\u274c \u6570\u636e\u4e0b\u8f7d\u5931\u8d25: {e}\")\n        # \u5373\u4f7f\u5931\u8d25\u4e5f\u8981\u8fd4\u56de\u62a5\u544a\n        return IntegrityReport(\n            total_symbols=len(symbols),\n            successful_symbols=len(successful_symbols),\n            failed_symbols=failed_symbols,\n            missing_periods=missing_periods,\n            data_quality_score=0.0,\n            recommendations=[f\"\u4e0b\u8f7d\u5931\u8d25: {e}\", \"\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u548cAPI\u914d\u7f6e\"],\n        )\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.define_universe","title":"<code>define_universe(start_date: str, end_date: str, t1_months: int, t2_months: int, t3_months: int, output_path: Path | str, top_k: int | None = None, top_ratio: float | None = None, description: str | None = None, delay_days: int = 7, api_delay_seconds: float = 1.0, batch_delay_seconds: float = 3.0, batch_size: int = 5, quote_asset: str = 'USDT') -&gt; UniverseDefinition</code>","text":"<p>\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>t1_months</code> <p>T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount</p> <p> TYPE: <code>int</code> </p> <code>t2_months</code> <p>T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387</p> <p> TYPE: <code>int</code> </p> <code>t3_months</code> <p>T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6</p> <p> TYPE: <code>int</code> </p> <code>output_path</code> <p>universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>top_k</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>top_ratio</code> <p>\u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>\u63cf\u8ff0\u4fe1\u606f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>delay_days</code> <p>\u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>api_delay_seconds</code> <p>\u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>batch_delay_seconds</code> <p>\u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>batch_size</code> <p>\u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> DEFAULT: <code>'USDT'</code> </p> RETURNS DESCRIPTION <code>UniverseDefinition</code> <p>\u5b9a\u4e49\u7684universe</p> <p> TYPE: <code>UniverseDefinition</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def define_universe(\n    self,\n    start_date: str,\n    end_date: str,\n    t1_months: int,\n    t2_months: int,\n    t3_months: int,\n    output_path: Path | str,\n    top_k: int | None = None,\n    top_ratio: float | None = None,\n    description: str | None = None,\n    delay_days: int = 7,\n    api_delay_seconds: float = 1.0,\n    batch_delay_seconds: float = 3.0,\n    batch_size: int = 5,\n    quote_asset: str = \"USDT\",\n) -&gt; UniverseDefinition:\n    \"\"\"\u5b9a\u4e49universe\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD \u6216 YYYYMMDD)\n        t1_months: T1\u65f6\u95f4\u7a97\u53e3\uff08\u6708\uff09\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\n        t2_months: T2\u6eda\u52a8\u9891\u7387\uff08\u6708\uff09\uff0cuniverse\u91cd\u65b0\u9009\u62e9\u7684\u9891\u7387\n        t3_months: T3\u5408\u7ea6\u6700\u5c0f\u521b\u5efa\u65f6\u95f4\uff08\u6708\uff09\uff0c\u7528\u4e8e\u7b5b\u9664\u65b0\u5408\u7ea6\n        output_path: universe\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        top_k: \u9009\u53d6\u7684top\u5408\u7ea6\u6570\u91cf (\u4e0e top_ratio \u4e8c\u9009\u4e00)\n        top_ratio: \u9009\u53d6\u7684top\u5408\u7ea6\u6bd4\u7387 (\u4e0e top_k \u4e8c\u9009\u4e00)\n        description: \u63cf\u8ff0\u4fe1\u606f\n        delay_days: \u5728\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d\u989d\u5916\u5f80\u524d\u63a8\u7684\u5929\u6570\uff0c\u9ed8\u8ba47\u5929\n        api_delay_seconds: \u6bcf\u4e2aAPI\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba41.0\u79d2\n        batch_delay_seconds: \u6bcf\u6279\u6b21\u8bf7\u6c42\u4e4b\u95f4\u7684\u5ef6\u8fdf\u79d2\u6570\uff0c\u9ed8\u8ba43.0\u79d2\n        batch_size: \u6bcf\u6279\u6b21\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u9ed8\u8ba45\u4e2a\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\uff0c\u9ed8\u8ba4\u4e3aUSDT\uff0c\u53ea\u7b5b\u9009\u4ee5\u8be5\u8d44\u4ea7\u7ed3\u5c3e\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        UniverseDefinition: \u5b9a\u4e49\u7684universe\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u5e76\u51c6\u5907\u8f93\u51fa\u8def\u5f84\n        output_path_obj = self._validate_and_prepare_path(\n            output_path,\n            is_file=True,\n            file_name=(\n                f\"universe_{start_date}_{end_date}_{t1_months}_{t2_months}_{t3_months}_{top_k or top_ratio}.json\"\n            ),\n        )\n\n        # \u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f\n        start_date = self._standardize_date_format(start_date)\n        end_date = self._standardize_date_format(end_date)\n\n        # \u521b\u5efa\u914d\u7f6e\n        config = UniverseConfig(\n            start_date=start_date,\n            end_date=end_date,\n            t1_months=t1_months,\n            t2_months=t2_months,\n            t3_months=t3_months,\n            delay_days=delay_days,\n            quote_asset=quote_asset,\n            top_k=top_k,\n            top_ratio=top_ratio,\n        )\n\n        logger.info(f\"\u5f00\u59cb\u5b9a\u4e49universe: {start_date} \u5230 {end_date}\")\n        log_selection_criteria = f\"Top-K={top_k}\" if top_k else f\"Top-Ratio={top_ratio}\"\n        logger.info(f\"\u53c2\u6570: T1={t1_months}\u6708, T2={t2_months}\u6708, T3={t3_months}\u6708, {log_selection_criteria}\")\n\n        # \u751f\u6210\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u5e8f\u5217 (\u6bcfT2\u4e2a\u6708)\n        # \u4ece\u8d77\u59cb\u65e5\u671f\u5f00\u59cb\uff0c\u6bcf\u9694T2\u4e2a\u6708\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8868\u793auniverse\u91cd\u65b0\u9009\u62e9\u7684\u65f6\u95f4\u70b9\n        rebalance_dates = self._generate_rebalance_dates(start_date, end_date, t2_months)\n\n        logger.info(\"\u91cd\u5e73\u8861\u8ba1\u5212:\")\n        logger.info(f\"  - \u65f6\u95f4\u8303\u56f4: {start_date} \u5230 {end_date}\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u95f4\u9694: \u6bcf{t2_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u6570\u636e\u5ef6\u8fdf: {delay_days}\u5929\")\n        logger.info(f\"  - T1\u6570\u636e\u7a97\u53e3: {t1_months}\u4e2a\u6708\")\n        logger.info(f\"  - \u91cd\u5e73\u8861\u65e5\u671f: {rebalance_dates}\")\n\n        if not rebalance_dates:\n            raise ValueError(\"\u65e0\u6cd5\u751f\u6210\u91cd\u5e73\u8861\u65e5\u671f\uff0c\u8bf7\u68c0\u67e5\u65f6\u95f4\u8303\u56f4\u548cT2\u53c2\u6570\")\n\n        # \u6536\u96c6\u6240\u6709\u5468\u671f\u7684snapshots\n        all_snapshots = []\n\n        # \u5728\u6bcf\u4e2a\u91cd\u65b0\u9009\u62e9\u65e5\u671f\u8ba1\u7b97universe\n        for i, rebalance_date in enumerate(rebalance_dates):\n            logger.info(f\"\u5904\u7406\u65e5\u671f {i + 1}/{len(rebalance_dates)}: {rebalance_date}\")\n\n            # \u8ba1\u7b97\u57fa\u51c6\u65e5\u671f\uff08\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff09\n            base_date = pd.to_datetime(rebalance_date) - timedelta(days=delay_days)\n            calculated_t1_end = base_date.strftime(\"%Y-%m-%d\")\n\n            # \u8ba1\u7b97T1\u56de\u770b\u671f\u95f4\u7684\u5f00\u59cb\u65e5\u671f\uff08\u4ecebase_date\u5f80\u524d\u63a8T1\u4e2a\u6708\uff09\n            calculated_t1_start = self._subtract_months(calculated_t1_end, t1_months)\n\n            logger.info(\n                f\"\u5468\u671f {i + 1}: \u57fa\u51c6\u65e5\u671f={calculated_t1_end} (\u91cd\u65b0\u5e73\u8861\u65e5\u671f\u524d{delay_days}\u5929), \"\n                f\"T1\u6570\u636e\u671f\u95f4={calculated_t1_start} \u5230 {calculated_t1_end}\"\n            )\n\n            # \u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u548c\u5b83\u4eec\u7684mean daily amount\n            universe_symbols, mean_amounts = self._calculate_universe_for_date(\n                calculated_t1_start,\n                calculated_t1_end,\n                t3_months=t3_months,\n                top_k=top_k,\n                top_ratio=top_ratio,\n                api_delay_seconds=api_delay_seconds,\n                batch_delay_seconds=batch_delay_seconds,\n                batch_size=batch_size,\n                quote_asset=quote_asset,\n            )\n\n            # \u521b\u5efa\u8be5\u5468\u671f\u7684snapshot\n            snapshot = UniverseSnapshot.create_with_dates_and_timestamps(\n                usage_t1_start=rebalance_date,  # \u5b9e\u9645\u4f7f\u7528\u5f00\u59cb\u65e5\u671f\n                usage_t1_end=min(\n                    end_date,\n                    (pd.to_datetime(rebalance_date) + pd.DateOffset(months=t1_months)).strftime(\"%Y-%m-%d\"),\n                ),  # \u5b9e\u9645\u4f7f\u7528\u7ed3\u675f\u65e5\u671f\n                calculated_t1_start=calculated_t1_start,  # \u8ba1\u7b97\u5468\u671f\u5f00\u59cb\u65e5\u671f\n                calculated_t1_end=calculated_t1_end,  # \u8ba1\u7b97\u5468\u671f\u7ed3\u675f\u65e5\u671f\uff08\u57fa\u51c6\u65e5\u671f\uff09\n                symbols=universe_symbols,\n                mean_daily_amounts=mean_amounts,\n                metadata={\n                    \"calculated_t1_start\": calculated_t1_start,\n                    \"calculated_t1_end\": calculated_t1_end,\n                    \"delay_days\": delay_days,\n                    \"quote_asset\": quote_asset,\n                    \"selected_symbols_count\": len(universe_symbols),\n                },\n            )\n\n            all_snapshots.append(snapshot)\n\n            logger.info(f\"\u2705 \u65e5\u671f {rebalance_date}: \u9009\u62e9\u4e86 {len(universe_symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\n        # \u521b\u5efa\u5b8c\u6574\u7684universe\u5b9a\u4e49\n        universe_def = UniverseDefinition(\n            config=config,\n            snapshots=all_snapshots,\n            creation_time=datetime.now(),\n            description=description,\n        )\n\n        # \u4fdd\u5b58\u6c47\u603b\u7684universe\u5b9a\u4e49\n        universe_def.save_to_file(output_path_obj)\n\n        logger.info(\"\ud83c\udf89 Universe\u5b9a\u4e49\u5b8c\u6210\uff01\")\n        logger.info(f\"\ud83d\udcc1 \u5305\u542b {len(all_snapshots)} \u4e2a\u91cd\u65b0\u5e73\u8861\u5468\u671f\")\n        logger.info(f\"\ud83d\udccb \u6c47\u603b\u6587\u4ef6: {output_path_obj}\")\n\n        return universe_def\n\n    except Exception as e:\n        logger.error(f\"[red]\u5b9a\u4e49universe\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u5b9a\u4e49universe\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.download_universe_data","title":"<code>download_universe_data(universe_file: Path | str, db_path: Path | str, data_path: Path | str | None = None, interval: Freq = Freq.m1, max_workers: int = 4, max_retries: int = 3, include_buffer_days: int = 7, retry_config: RetryConfig | None = None, request_delay: float = 0.5, download_market_metrics: bool = True, metrics_interval: Freq = Freq.m5, long_short_ratio_period: Freq = Freq.m5, long_short_ratio_types: list[str] | None = None, use_binance_vision: bool = False) -&gt; None</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)</p> <p> TYPE: <code>Path | str</code> </p> <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)</p> <p> TYPE: <code>Path | str</code> </p> <code>data_path</code> <p>\u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>include_buffer_days</code> <p>\u7f13\u51b2\u5929\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>7</code> </p> <code>request_delay</code> <p>\u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>download_funding_rate</code> <p>\u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e</p> <p> </p> <code>download_market_metrics</code> <p>\u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>metrics_interval</code> <p>\u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_period</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m5</code> </p> <code>long_short_ratio_types</code> <p>\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_universe_data(\n    self,\n    universe_file: Path | str,\n    db_path: Path | str,\n    data_path: Path | str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 4,\n    max_retries: int = 3,\n    include_buffer_days: int = 7,\n    retry_config: RetryConfig | None = None,\n    request_delay: float = 0.5,  # \u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\n    download_market_metrics: bool = True,  # \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n    metrics_interval: Freq = Freq.m5,  # \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n    long_short_ratio_period: Freq = Freq.m5,  # \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n    long_short_ratio_types: list[str] | None = None,  # \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\n    use_binance_vision: bool = False,  # \u662f\u5426\u4f7f\u7528 Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\n) -&gt; None:\n    \"\"\"\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7duniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u4e0b\u8f7d\u65b9\u5f0f\uff09\u3002\n\n    \u8fd9\u79cd\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\uff0c\u53ef\u4ee5\u907f\u514d\u4e0b\u8f7d\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u3002\n\n    Args:\n        universe_file: universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a)\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b\u6307\u5b9a\uff0c\u5982: /path/to/market.db)\n        data_path: \u6570\u636e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 (\u53ef\u9009\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u6587\u4ef6)\n        interval: \u6570\u636e\u9891\u7387\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        include_buffer_days: \u7f13\u51b2\u5929\u6570\n        request_delay: \u6bcf\u6b21\u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba40.5\u79d2\n        download_funding_rate: \u662f\u5426\u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u6570\u636e\n        download_market_metrics: \u662f\u5426\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u3001\u591a\u7a7a\u6bd4\u4f8b\uff09\n        metrics_interval: \u5e02\u573a\u6307\u6807\u6570\u636e\u7684\u65f6\u95f4\u95f4\u9694\n        long_short_ratio_period: \u591a\u7a7a\u6bd4\u4f8b\u7684\u65f6\u95f4\u5468\u671f\n        long_short_ratio_types: \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u5217\u8868\uff0c\u9ed8\u8ba4['account', 'position']\n    \"\"\"\n    try:\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = self._validate_and_prepare_path(universe_file, is_file=True)\n        db_file_path = self._validate_and_prepare_path(db_path, is_file=True)\n\n        # data_path\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u63d0\u4f9b\u5219\u9a8c\u8bc1\n        data_path_obj = None\n        if data_path:\n            data_path_obj = self._validate_and_prepare_path(data_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        # \u8bbe\u7f6e\u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b\u9ed8\u8ba4\u503c\n        if long_short_ratio_types is None:\n            long_short_ratio_types = [\"account\", \"position\"]\n\n        logger.info(\"\ud83d\udcca \u6309\u5468\u671f\u4e0b\u8f7d\u6570\u636e:\")\n        logger.info(f\"   - \u603b\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u6570\u636e\u9891\u7387: {interval.value}\")\n        logger.info(f\"   - \u5e76\u53d1\u7ebf\u7a0b: {max_workers}\")\n        logger.info(f\"   - \u8bf7\u6c42\u95f4\u9694: {request_delay}\u79d2\")\n        logger.info(f\"   - \u6570\u636e\u5e93\u8def\u5f84: {db_file_path}\")\n        logger.info(f\"   - \u4e0b\u8f7d\u5e02\u573a\u6307\u6807: {download_market_metrics}\")\n        if download_market_metrics:\n            logger.info(f\"   - \u6307\u6807\u6570\u636e\u95f4\u9694: {metrics_interval}\")\n            logger.info(f\"   - \u591a\u7a7a\u6bd4\u4f8b\u7c7b\u578b: {long_short_ratio_types}\")\n        if data_path_obj:\n            logger.info(f\"   - \u6570\u636e\u6587\u4ef6\u8def\u5f84: {data_path_obj}\")\n\n        # \u4e3a\u6bcf\u4e2a\u5468\u671f\u5355\u72ec\u4e0b\u8f7d\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"\ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            logger.info(f\"   - \u4ea4\u6613\u5bf9\u6570\u91cf: {len(snapshot.symbols)}\")\n            logger.info(\n                f\"   - \u8ba1\u7b97\u671f\u95f4: {snapshot.calculated_t1_start} \u5230 {snapshot.calculated_t1_end} (\u5b9a\u4e49universe)\"\n            )\n            logger.info(f\"   - \u4f7f\u7528\u671f\u95f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u5b9e\u9645\u4f7f\u7528)\")\n            logger.info(\n                f\"   - \u4e0b\u8f7d\u8303\u56f4: {snapshot.start_date} \u5230 {snapshot.end_date} (\u542b{include_buffer_days}\u5929\u7f13\u51b2)\"\n            )\n\n            # \u4e0b\u8f7dK\u7ebf\u6570\u636e\n            self.get_perpetual_data(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                db_path=db_file_path,\n                interval=interval,\n                max_workers=max_workers,\n                max_retries=max_retries,\n                retry_config=retry_config,\n                enable_integrity_check=True,\n                request_delay=request_delay,\n            )\n\n            # \u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e\n            if download_market_metrics:\n                logger.info(\"   \ud83d\udcc8 \u5f00\u59cb\u4e0b\u8f7d\u5e02\u573a\u6307\u6807\u6570\u636e...\")\n                self._download_market_metrics_for_snapshot(\n                    snapshot=snapshot,\n                    db_path=db_file_path,\n                    interval=metrics_interval,\n                    period=long_short_ratio_period,\n                    long_short_ratio_types=long_short_ratio_types,\n                    request_delay=request_delay,\n                    use_binance_vision=use_binance_vision,\n                )\n\n            logger.info(f\"   \u2705 \u5feb\u7167 {snapshot.effective_date} \u4e0b\u8f7d\u5b8c\u6210\")\n\n        logger.info(\"\ud83c\udf89 \u6240\u6709universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210!\")\n        logger.info(f\"\ud83d\udcc1 \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {db_file_path}\")\n\n    except Exception as e:\n        logger.error(f\"[red]\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u6309\u5468\u671f\u4e0b\u8f7duniverse\u6570\u636e\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_funding_rate","title":"<code>get_funding_rate(symbol: str, start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 100) -&gt; list[FundingRate]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>list[FundingRate]</code> <p>list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868</p> Note <ul> <li>\u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e</li> <li>\u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761</li> <li>\u6570\u636e\u6309\u5347\u5e8f\u6392\u5217</li> <li>\u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236</li> </ul> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_funding_rate(\n    self,\n    symbol: str,\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 100,  # \u6539\u4e3aAPI\u9ed8\u8ba4\u503c\n) -&gt; list[FundingRate]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u8d44\u91d1\u8d39\u7387\u5386\u53f2\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4100\uff0c\u6700\u59271000\n\n    Returns:\n        list[FundingRate]: \u8d44\u91d1\u8d39\u7387\u6570\u636e\u5217\u8868\n\n    Note:\n        - \u5982\u679c\u4e0d\u53d1\u9001startTime\u548cendTime\uff0c\u8fd4\u56de\u6700\u8fd1\u7684limit\u6761\u6570\u636e\n        - \u5982\u679c\u65f6\u95f4\u8303\u56f4\u5185\u6570\u636e\u8d85\u8fc7limit\uff0c\u4ecestartTime\u5f00\u59cb\u8fd4\u56delimit\u6761\n        - \u6570\u636e\u6309\u5347\u5e8f\u6392\u5217\n        - \u901f\u7387\u9650\u5236: \u4e0e/fapi/v1/fundingInfo\u5171\u4eab500/5\u5206\u949f/IP\u9650\u5236\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n\n        # \u53c2\u6570\u9a8c\u8bc1\n        if limit &lt; 1 or limit &gt; 1000:\n            raise ValueError(f\"limit\u53c2\u6570\u5fc5\u987b\u57281-1000\u8303\u56f4\u5185\uff0c\u5f53\u524d\u503c: {limit}\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"limit\": limit,\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236 - Funding Rate API: 500\u8bf7\u6c42/5\u5206\u949f/IP (\u66f4\u4e25\u683c)\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API\n        data = self.client.futures_funding_rate(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u8d44\u91d1\u8d39\u7387\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aFundingRate\u5bf9\u8c61\n        funding_rates = [FundingRate.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(funding_rates)} \u6761\u8d44\u91d1\u8d39\u7387\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return funding_rates\n\n    except ValueError as e:\n        logger.error(f\"[red]\u53c2\u6570\u9a8c\u8bc1\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u8d44\u91d1\u8d39\u7387\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_open_interest","title":"<code>get_open_interest(symbol: str, period: str = '5m', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[OpenInterest]</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[OpenInterest]</code> <p>list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_open_interest(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[OpenInterest]:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6301\u4ed3\u91cf\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[OpenInterest]: \u6301\u4ed3\u91cf\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u8c03\u7528Binance API - \u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u91cf\u6570\u636e\n        data = self.client.futures_open_interest_hist(**params)\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u6301\u4ed3\u91cf\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aOpenInterest\u5bf9\u8c61\n        open_interests = [OpenInterest.from_binance_response(item) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(open_interests)} \u6761\u6301\u4ed3\u91cf\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return open_interests\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6301\u4ed3\u91cf\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_long_short_ratio","title":"<code>get_long_short_ratio(symbol: str, period: str = '5m', ratio_type: str = 'account', start_time: str | datetime | None = None, end_time: str | datetime | None = None, limit: int = 500) -&gt; list[LongShortRatio]</code>","text":"<p>\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'</p> <p> TYPE: <code>str</code> </p> <code>period</code> <p>\u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>'5m'</code> </p> <code>ratio_type</code> <p>\u6bd4\u4f8b\u7c7b\u578b: - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4 - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4 - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4 - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4</p> <p> TYPE: <code>str</code> DEFAULT: <code>'account'</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>limit</code> <p>\u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500</p> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> RETURNS DESCRIPTION <code>list[LongShortRatio]</code> <p>list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868</p> RAISES DESCRIPTION <code>MarketDataFetchError</code> <p>\u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_long_short_ratio(\n    self,\n    symbol: str,\n    period: str = \"5m\",\n    ratio_type: str = \"account\",\n    start_time: str | datetime | None = None,\n    end_time: str | datetime | None = None,\n    limit: int = 500,\n) -&gt; list[LongShortRatio]:\n    \"\"\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u3002\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 'BTCUSDT'\n        period: \u65f6\u95f4\u5468\u671f\uff0c\u652f\u6301 \"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\"\n        ratio_type: \u6bd4\u4f8b\u7c7b\u578b:\n            - \"account\": \u9876\u7ea7\u4ea4\u6613\u8005\u8d26\u6237\u591a\u7a7a\u6bd4\n            - \"position\": \u9876\u7ea7\u4ea4\u6613\u8005\u6301\u4ed3\u591a\u7a7a\u6bd4\n            - \"global\": \u5168\u5c40\u591a\u7a7a\u6bd4\n            - \"taker\": \u5927\u989d\u4ea4\u6613\u8005\u591a\u7a7a\u6bd4\n        start_time: \u5f00\u59cb\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff08\u6beb\u79d2\u65f6\u95f4\u6233\u6216\u65e5\u671f\u5b57\u7b26\u4e32\uff09\n        limit: \u8fd4\u56de\u6570\u91cf\u9650\u5236\uff0c\u9ed8\u8ba4500\uff0c\u6700\u5927500\n\n    Returns:\n        list[LongShortRatio]: \u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\u5217\u8868\n\n    Raises:\n        MarketDataFetchError: \u83b7\u53d6\u6570\u636e\u5931\u8d25\u65f6\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e (\u7c7b\u578b: {ratio_type})\")\n\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\n        params = {\n            \"symbol\": symbol,\n            \"period\": period,\n            \"limit\": min(limit, 500),\n        }\n\n        # \u5904\u7406\u65f6\u95f4\u53c2\u6570\n        if start_time is not None:\n            if isinstance(start_time, str):\n                start_time_ts = self._date_to_timestamp_start(start_time)\n            elif isinstance(start_time, datetime):\n                start_time_ts = str(int(start_time.timestamp() * 1000))\n            else:\n                start_time_ts = str(start_time)\n            params[\"startTime\"] = start_time_ts\n\n        if end_time is not None:\n            if isinstance(end_time, str):\n                end_time_ts = self._date_to_timestamp_end(end_time)\n            elif isinstance(end_time, datetime):\n                end_time_ts = str(int(end_time.timestamp() * 1000))\n            else:\n                end_time_ts = str(end_time)\n            params[\"endTime\"] = end_time_ts\n\n        # \u9891\u7387\u9650\u5236\u63a7\u5236\n        self.rate_limit_manager.wait_before_request()\n\n        # \u6839\u636eratio_type\u9009\u62e9\u4e0d\u540c\u7684API\u7aef\u70b9\n        if ratio_type == \"account\":\n            data = self.client.futures_top_longshort_account_ratio(**params)\n        elif ratio_type == \"position\":\n            data = self.client.futures_top_longshort_position_ratio(**params)\n        elif ratio_type == \"global\":\n            data = self.client.futures_global_longshort_ratio(**params)\n        elif ratio_type == \"taker\":\n            data = self.client.futures_taker_longshort_ratio(**params)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684ratio_type: {ratio_type}\")\n\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230 {symbol} \u7684\u591a\u7a7a\u6bd4\u4f8b\u6570\u636e\")\n            return []\n\n        # \u8f6c\u6362\u4e3aLongShortRatio\u5bf9\u8c61\n        long_short_ratios = [LongShortRatio.from_binance_response(item, ratio_type) for item in data]\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {symbol} \u7684 {len(long_short_ratios)} \u6761\u591a\u7a7a\u6bd4\u4f8b\u8bb0\u5f55\")\n        self.rate_limit_manager.handle_success()\n\n        return long_short_ratios\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25 {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u591a\u7a7a\u6bd4\u4f8b\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.download_binance_vision_metrics","title":"<code>download_binance_vision_metrics(symbols: list[str], start_date: str, end_date: str, data_types: list[str] | None = None, request_delay: float = 1.0) -&gt; None</code>","text":"<p>\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_types</code> <p>\u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>request_delay</code> <p>\u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def download_binance_vision_metrics(\n    self,\n    symbols: list[str],\n    start_date: str,\n    end_date: str,\n    data_types: list[str] | None = None,\n    request_delay: float = 1.0,\n) -&gt; None:\n    \"\"\"\u4ece Binance Vision \u4e0b\u8f7d\u671f\u8d27\u6307\u6807\u6570\u636e (OI \u548c Long-Short Ratio)\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        data_types: \u6570\u636e\u7c7b\u578b\u5217\u8868\uff0c\u652f\u6301 \"openInterest\", \"longShortRatio\"\n        request_delay: \u8bf7\u6c42\u5ef6\u8fdf\uff08\u79d2\uff09\n    \"\"\"\n    if data_types is None:\n        data_types = [\"openInterest\", \"longShortRatio\"]\n\n    try:\n        logger.info(f\"\u5f00\u59cb\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e: {data_types}\")\n\n        if self.db is None:\n            raise ValueError(\"\u6570\u636e\u5e93\u672a\u521d\u59cb\u5316\")\n\n        # \u521b\u5efa\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        for date in date_range:\n            date_str = date.strftime(\"%Y-%m-%d\")\n            logger.info(f\"\u5904\u7406\u65e5\u671f: {date_str}\")\n\n            # \u4e0b\u8f7d\u6307\u6807\u6570\u636e\uff08\u6240\u6709\u7c7b\u578b\u90fd\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff09\n            self._download_metrics_from_vision(symbols, date_str, request_delay)\n\n            # \u8bf7\u6c42\u5ef6\u8fdf\n            if request_delay &gt; 0:\n                time.sleep(request_delay)\n\n        logger.info(\"\u2705 Binance Vision \u6307\u6807\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4ece Binance Vision \u4e0b\u8f7d\u6307\u6807\u6570\u636e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_failed_downloads","title":"<code>get_failed_downloads() -&gt; dict[str, list[dict]]</code>","text":"<p>\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[dict]]</code> <p>\u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_failed_downloads(self) -&gt; dict[str, list[dict]]:\n    \"\"\"\u83b7\u53d6\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Returns:\n        \u5931\u8d25\u4e0b\u8f7d\u8bb0\u5f55\u7684\u5b57\u5178\n    \"\"\"\n    return self.failed_downloads.copy()\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.clear_failed_downloads","title":"<code>clear_failed_downloads(symbol: str | None = None) -&gt; None</code>","text":"<p>\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def clear_failed_downloads(self, symbol: str | None = None) -&gt; None:\n    \"\"\"\u6e05\u9664\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u6e05\u9664\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u6e05\u9664\u6240\u6709\n    \"\"\"\n    if symbol:\n        self.failed_downloads.pop(symbol, None)\n    else:\n        self.failed_downloads.clear()\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.retry_failed_downloads","title":"<code>retry_failed_downloads(symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]</code>","text":"<p>\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>\u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def retry_failed_downloads(self, symbol: str | None = None, max_retries: int = 3) -&gt; dict[str, Any]:\n    \"\"\"\u91cd\u8bd5\u5931\u8d25\u7684\u4e0b\u8f7d\u3002\n\n    Args:\n        symbol: \u53ef\u9009\uff0c\u6307\u5b9a\u8981\u91cd\u8bd5\u7684\u4ea4\u6613\u5bf9\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u5219\u91cd\u8bd5\u6240\u6709\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n\n    Returns:\n        \u91cd\u8bd5\u7ed3\u679c\u7edf\u8ba1\n    \"\"\"\n    if not self.failed_downloads:\n        logger.info(\"\ud83d\udccb \u6ca1\u6709\u5931\u8d25\u7684\u4e0b\u8f7d\u8bb0\u5f55\")\n        return {\"total\": 0, \"success\": 0, \"failed\": 0}\n\n    symbols_to_retry = [symbol] if symbol else list(self.failed_downloads.keys())\n    total_attempts = 0\n    success_count = 0\n    failed_count = 0\n\n    for retry_symbol in symbols_to_retry:\n        if retry_symbol not in self.failed_downloads:\n            continue\n\n        failures = self.failed_downloads[retry_symbol].copy()\n\n        for failure in failures:\n            if failure[\"retry_count\"] &gt;= max_retries:\n                logger.debug(f\"\u23ed\ufe0f {retry_symbol}: \u8df3\u8fc7\uff0c\u5df2\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\")\n                continue\n\n            total_attempts += 1\n\n            try:\n                logger.info(f\"\ud83d\udd04 \u91cd\u8bd5\u4e0b\u8f7d {retry_symbol}: {failure['date']}\")\n\n                # \u5c1d\u8bd5\u91cd\u65b0\u4e0b\u8f7d\n                retry_config = RetryConfig(max_retries=2, base_delay=3.0)\n                metrics_data = self._download_and_parse_metrics_csv(failure[\"url\"], retry_symbol, retry_config)\n\n                if metrics_data and self.db:\n                    # \u5b58\u50a8\u6570\u636e\n                    if metrics_data.get(\"open_interest\"):\n                        self.db.store_open_interest(metrics_data[\"open_interest\"])\n                    if metrics_data.get(\"long_short_ratio\"):\n                        self.db.store_long_short_ratio(metrics_data[\"long_short_ratio\"])\n\n                    # \u4ece\u5931\u8d25\u5217\u8868\u4e2d\u79fb\u9664\n                    self.failed_downloads[retry_symbol].remove(failure)\n                    if not self.failed_downloads[retry_symbol]:\n                        del self.failed_downloads[retry_symbol]\n\n                    success_count += 1\n                    logger.info(f\"\u2705 {retry_symbol}: \u91cd\u8bd5\u6210\u529f\")\n\n                else:\n                    failure[\"retry_count\"] += 1\n                    failed_count += 1\n                    logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5931\u8d25\")\n\n            except Exception as e:\n                failure[\"retry_count\"] += 1\n                failed_count += 1\n                logger.warning(f\"\u274c {retry_symbol}: \u91cd\u8bd5\u5f02\u5e38 - {e}\")\n\n            # \u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u91cd\u8bd5\n            time.sleep(1.0)\n\n    result: dict[str, Any] = {\n        \"total\": total_attempts,\n        \"success\": success_count,\n        \"failed\": failed_count,\n    }\n\n    logger.info(f\"\ud83d\udcca \u91cd\u8bd5\u7edf\u8ba1: \u603b\u8ba1 {total_attempts}, \u6210\u529f {success_count}, \u5931\u8d25 {failed_count}\")\n    return result\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_categories","title":"<code>get_symbol_categories() -&gt; dict[str, list[str]]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002</p> RETURNS DESCRIPTION <code>dict[str, list[str]]</code> <p>\u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_symbol_categories() -&gt; dict[str, list[str]]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Returns:\n        \u5b57\u5178\uff0ckey\u4e3a\u4ea4\u6613\u5bf9symbol\uff0cvalue\u4e3a\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(\"\u83b7\u53d6 Binance \u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f...\")\n\n        # \u8c03\u7528 Binance \u5206\u7c7b API\n        url = \"https://www.binance.com/bapi/composite/v1/public/marketing/symbol/list\"\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n\n        if data.get(\"code\") != \"000000\":\n            raise ValueError(f\"API \u8fd4\u56de\u9519\u8bef: {data.get('message', 'Unknown error')}\")\n\n        # \u63d0\u53d6 symbol \u548c tags \u7684\u6620\u5c04\u5173\u7cfb\n        symbol_categories = {}\n        for item in data.get(\"data\", []):\n            symbol = item.get(\"symbol\", \"\")\n            tags = item.get(\"tags\", [])\n\n            # \u53ea\u4fdd\u7559 USDT \u4ea4\u6613\u5bf9\n            if symbol.endswith(\"USDT\"):\n                symbol_categories[symbol] = sorted(tags)  # \u5bf9\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f\n\n        logger.info(f\"\u6210\u529f\u83b7\u53d6 {len(symbol_categories)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n        return symbol_categories\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_all_categories","title":"<code>get_all_categories() -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002</p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef get_all_categories() -&gt; list[str]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u6807\u7b7e\u3002\n\n    Returns:\n        \u6309\u5b57\u6bcd\u6392\u5e8f\u7684\u5206\u7c7b\u6807\u7b7e\u5217\u8868\n    \"\"\"\n    try:\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u6536\u96c6\u6240\u6709\u6807\u7b7e\n        all_tags = set()\n        for tags in symbol_categories.values():\n            all_tags.update(tags)\n\n        # \u6309\u5b57\u6bcd\u6392\u5e8f\n        return sorted(list(all_tags))\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u5206\u7c7b\u6807\u7b7e\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.create_category_matrix","title":"<code>create_category_matrix(symbols: list[str], categories: list[str] | None = None) -&gt; tuple[list[str], list[str], list[list[int]]]</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>\u5143\u7ec4 (symbols, categories, matrix)</p> <code>list[str]</code> <ul> <li>symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</li> </ul> <code>list[list[int]]</code> <ul> <li>categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868</li> </ul> <code>tuple[list[str], list[str], list[list[int]]]</code> <ul> <li>matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]</li> </ul> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef create_category_matrix(\n    symbols: list[str], categories: list[str] | None = None\n) -&gt; tuple[list[str], list[str], list[list[int]]]:\n    \"\"\"\u521b\u5efa symbols \u548c categories \u7684\u5bf9\u5e94\u77e9\u9635\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n\n    Returns:\n        \u5143\u7ec4 (symbols, categories, matrix)\n        - symbols: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n        - categories: \u6392\u5e8f\u540e\u7684\u5206\u7c7b\u5217\u8868\n        - matrix: \u4e8c\u7ef4\u77e9\u9635\uff0cmatrix[i][j] = 1 \u8868\u793a symbols[i] \u5c5e\u4e8e categories[j]\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\n        symbol_categories = MarketDataService.get_symbol_categories()\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5206\u7c7b\uff0c\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n        if categories is None:\n            categories = MarketDataService.get_all_categories()\n        else:\n            categories = sorted(categories)\n\n        # \u8fc7\u6ee4\u5e76\u6392\u5e8fsymbols\uff08\u53ea\u4fdd\u7559\u6709\u5206\u7c7b\u4fe1\u606f\u7684\uff09\n        valid_symbols = [s for s in symbols if s in symbol_categories]\n        valid_symbols.sort()\n\n        # \u521b\u5efa\u77e9\u9635\n        matrix = []\n        for symbol in valid_symbols:\n            symbol_tags = symbol_categories.get(symbol, [])\n            row = [1 if category in symbol_tags else 0 for category in categories]\n            matrix.append(row)\n\n        logger.info(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635: {len(valid_symbols)} symbols \u00d7 {len(categories)} categories\")\n\n        return valid_symbols, categories, matrix\n\n    except Exception as e:\n        logger.error(f\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.save_category_matrix_csv","title":"<code>save_category_matrix_csv(output_path: Path | str, symbols: list[str], date_str: str | None = None, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>list[str]</code> </p> <code>date_str</code> <p>\u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef save_category_matrix_csv(\n    output_path: Path | str,\n    symbols: list[str],\n    date_str: str | None = None,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5c06\u5206\u7c7b\u77e9\u9635\u4fdd\u5b58\u4e3a CSV \u6587\u4ef6\u3002\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\u8def\u5f84\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        date_str: \u65e5\u671f\u5b57\u7b26\u4e32 (YYYY-MM-DD)\uff0cNone \u8868\u793a\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        import csv\n        from datetime import datetime\n\n        output_path = Path(output_path)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u65e5\u671f\uff0c\u4f7f\u7528\u5f53\u524d\u65e5\u671f\n        if date_str is None:\n            date_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n        # \u521b\u5efa\u5206\u7c7b\u77e9\u9635\n        valid_symbols, sorted_categories, matrix = MarketDataService.create_category_matrix(symbols, categories)\n\n        # \u6587\u4ef6\u540d\u683c\u5f0f: categories_YYYY-MM-DD.csv\n        filename = f\"categories_{date_str}.csv\"\n        file_path = output_path / filename\n\n        # \u5199\u5165 CSV \u6587\u4ef6\n        with open(file_path, \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:\n            writer = csv.writer(csvfile)\n\n            # \u5199\u5165\u8868\u5934 (symbol, category1, category2, ...)\n            header = [\"symbol\"] + sorted_categories\n            writer.writerow(header)\n\n            # \u5199\u5165\u6570\u636e\u884c\n            for i, symbol in enumerate(valid_symbols):\n                row = [symbol] + matrix[i]\n                writer.writerow(row)\n\n        logger.info(f\"\u6210\u529f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5230: {file_path}\")\n        logger.info(f\"\u77e9\u9635\u5927\u5c0f: {len(valid_symbols)} symbols \u00d7 {len(sorted_categories)} categories\")\n\n    except Exception as e:\n        logger.error(f\"\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.download_and_save_categories_for_universe","title":"<code>download_and_save_categories_for_universe(universe_file: Path | str, output_path: Path | str, categories: list[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002</p> PARAMETER DESCRIPTION <code>universe_file</code> <p>universe \u5b9a\u4e49\u6587\u4ef6</p> <p> TYPE: <code>Path | str</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>@staticmethod\ndef download_and_save_categories_for_universe(\n    universe_file: Path | str,\n    output_path: Path | str,\n    categories: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u4e3a universe \u4e2d\u7684\u6240\u6709\u4ea4\u6613\u5bf9\u4e0b\u8f7d\u5e76\u4fdd\u5b58\u5206\u7c7b\u4fe1\u606f\u3002\n\n    Args:\n        universe_file: universe \u5b9a\u4e49\u6587\u4ef6\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        categories: \u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u81ea\u52a8\u83b7\u53d6\u6240\u6709\u5206\u7c7b\n    \"\"\"\n    try:\n        from datetime import datetime\n\n        # \u9a8c\u8bc1\u8def\u5f84\n        universe_file_obj = MarketDataService._validate_and_prepare_path(universe_file, is_file=True)\n        output_path_obj = MarketDataService._validate_and_prepare_path(output_path, is_file=False)\n\n        # \u68c0\u67e5universe\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not universe_file_obj.exists():\n            raise FileNotFoundError(f\"Universe\u6587\u4ef6\u4e0d\u5b58\u5728: {universe_file_obj}\")\n\n        # \u52a0\u8f7duniverse\u5b9a\u4e49\n        universe_def = UniverseDefinition.load_from_file(universe_file_obj)\n\n        logger.info(\"\ud83c\udff7\ufe0f \u5f00\u59cb\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f:\")\n        logger.info(f\"   - Universe\u5feb\u7167\u6570: {len(universe_def.snapshots)}\")\n        logger.info(f\"   - \u8f93\u51fa\u76ee\u5f55: {output_path_obj}\")\n\n        # \u6536\u96c6\u6240\u6709\u4ea4\u6613\u5bf9\n        all_symbols = set()\n        for snapshot in universe_def.snapshots:\n            all_symbols.update(snapshot.symbols)\n\n        all_symbols_list = sorted(list(all_symbols))\n        logger.info(f\"   - \u603b\u4ea4\u6613\u5bf9\u6570: {len(all_symbols_list)}\")\n\n        # \u83b7\u53d6\u5f53\u524d\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u6240\u6709\u5386\u53f2\u6570\u636e\uff09\n        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n        logger.info(f\"   \ud83d\udcc5 \u83b7\u53d6 {current_date} \u7684\u5206\u7c7b\u4fe1\u606f\uff08\u7528\u4e8e\u586b\u5145\u5386\u53f2\u6570\u636e\uff09\")\n\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u65e5\u671f\u4fdd\u5b58\u5206\u7c7b\u77e9\u9635\n        for i, snapshot in enumerate(universe_def.snapshots):\n            logger.info(f\"   \ud83d\udcc5 \u5904\u7406\u5feb\u7167 {i + 1}/{len(universe_def.snapshots)}: {snapshot.effective_date}\")\n\n            # \u4f7f\u7528\u5feb\u7167\u7684\u6709\u6548\u65e5\u671f\n            snapshot_date = snapshot.effective_date\n\n            # \u4fdd\u5b58\u8be5\u5feb\u7167\u7684\u5206\u7c7b\u77e9\u9635\n            MarketDataService.save_category_matrix_csv(\n                output_path=output_path_obj,\n                symbols=snapshot.symbols,\n                date_str=snapshot_date,\n                categories=categories,\n            )\n\n            logger.info(f\"       \u2705 \u4fdd\u5b58\u4e86 {len(snapshot.symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u5206\u7c7b\u4fe1\u606f\")\n\n        # \u4e5f\u4fdd\u5b58\u4e00\u4e2a\u5f53\u524d\u65e5\u671f\u7684\u5b8c\u6574\u77e9\u9635\uff08\u5305\u542b\u6240\u6709\u4ea4\u6613\u5bf9\uff09\n        logger.info(f\"   \ud83d\udcc5 \u4fdd\u5b58\u5f53\u524d\u65e5\u671f ({current_date}) \u7684\u5b8c\u6574\u5206\u7c7b\u77e9\u9635\")\n        MarketDataService.save_category_matrix_csv(\n            output_path=output_path_obj,\n            symbols=all_symbols_list,\n            date_str=current_date,\n            categories=categories,\n        )\n\n        logger.info(\"\u2705 \u6240\u6709\u5206\u7c7b\u4fe1\u606f\u4e0b\u8f7d\u548c\u4fdd\u5b58\u5b8c\u6210\")\n\n    except Exception as e:\n        logger.error(f\"\u4e3a universe \u4e0b\u8f7d\u5206\u7c7b\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/","title":"cryptoservice.utils","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils","title":"<code>cryptoservice.utils</code>","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager","title":"<code>CacheManager(ttl_seconds: int = 60)</code>","text":"<p>\u7f13\u5b58\u7ba1\u7406\u5668.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def __init__(self, ttl_seconds: int = 60):\n    self._cache: Dict[str, Tuple[Any, datetime]] = {}\n    self._ttl = ttl_seconds\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.get","title":"<code>get(key: str) -&gt; Optional[Any]</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def get(self, key: str) -&gt; Optional[Any]:\n    \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        if key in self._cache:\n            data, timestamp = self._cache[key]\n            if datetime.now() - timestamp &lt; timedelta(seconds=self._ttl):\n                return data\n            del self._cache[key]\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.set","title":"<code>set(key: str, value: Any) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def set(self, key: str, value: Any) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        self._cache[key] = (value, datetime.now())\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.clear","title":"<code>clear() -&gt; None</code>","text":"<p>\u6e05\u9664\u6240\u6709\u7f13\u5b58.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u9664\u6240\u6709\u7f13\u5b58.\"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter","title":"<code>DataConverter</code>","text":"<p>\u6570\u636e\u8f6c\u6362\u5de5\u5177\u7c7b.</p>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.to_decimal","title":"<code>to_decimal(value: Union[str, float, int]) -&gt; Decimal</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef to_decimal(value: Union[str, float, int]) -&gt; Decimal:\n    \"\"\"\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.\"\"\"\n    return Decimal(str(value))\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.format_timestamp","title":"<code>format_timestamp(timestamp: Union[int, float]) -&gt; datetime</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_timestamp(timestamp: Union[int, float]) -&gt; datetime:\n    \"\"\"\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.\"\"\"\n    if isinstance(timestamp, (int, float)):\n        return datetime.fromtimestamp(timestamp / 1000)\n    return datetime.now()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.format_market_data","title":"<code>format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.\"\"\"\n    return {\n        \"price\": float(data.get(\"price\", 0)),\n        \"volume\": float(data.get(\"volume\", 0)),\n        \"change\": float(data.get(\"priceChangePercent\", 0)),\n        \"high\": float(data.get(\"highPrice\", 0)),\n        \"low\": float(data.get(\"lowPrice\", 0)),\n        \"timestamp\": datetime.now().isoformat(),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.print_table","title":"<code>print_table(data: list[Any], title: str | None = None, headers: list[str] | None = None) -&gt; None</code>","text":"<p>\u6253\u5370\u8868\u683c\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u8868\u683c\u6570\u636e</p> <p> TYPE: <code>list[Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>\u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6</p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_table(\n    data: list[Any],\n    title: str | None = None,\n    headers: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u8868\u683c\u6570\u636e.\n\n    Args:\n        data: \u8868\u683c\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n        headers: \u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210\n\n    Raises:\n        ValueError: \u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6\n    \"\"\"\n    try:\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u7a7a\n        if not data:\n            raise ValueError(\"Empty data provided\")\n\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u5217\u8868\n        if not isinstance(data, list):\n            raise ValueError(f\"Expected list, got {type(data).__name__}\")\n\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u5982\u679c\u6570\u636e\u662f\u5b57\u5178\u5217\u8868\n        if isinstance(data[0], dict):\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u662f\u5426\u90fd\u662f\u5b57\u5178\n            if not all(isinstance(row, dict) for row in data):\n                raise ValueError(\"Inconsistent row types in dictionary data\")\n\n            headers = headers or list(data[0].keys())\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                # \u68c0\u67e5\u662f\u5426\u6240\u6709\u5fc5\u9700\u7684\u952e\u90fd\u5b58\u5728\n                missing_keys = set(headers) - set(row.keys())\n                if missing_keys:\n                    print_error(f\"Missing keys in row: {missing_keys}\")\n                table.add_row(*[str(row.get(h, \"N/A\")) for h in headers])\n\n        # \u5982\u679c\u6570\u636e\u662f\u666e\u901a\u5217\u8868\n        else:\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u7684\u957f\u5ea6\u662f\u5426\u4e00\u81f4\n            row_lengths = {len(row) if isinstance(row, (list, tuple)) else 1 for row in data}\n            if len(row_lengths) &gt; 1:\n                raise ValueError(f\"Inconsistent row lengths: {row_lengths}\")\n\n            row_length = row_lengths.pop()\n            headers = headers or [f\"Column {i + 1}\" for i in range(row_length)]\n\n            # \u9a8c\u8bc1headers\u957f\u5ea6\u662f\u5426\u5339\u914d\u6570\u636e\n            if len(headers) != row_length:\n                raise ValueError(f\"Headers length ({len(headers)}) doesn't match data width ({row_length})\")\n\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                if not isinstance(row, (list, tuple)):\n                    row = [row]  # \u5355\u4e2a\u503c\u8f6c\u6362\u4e3a\u5217\u8868\n                table.add_row(*[str(x) for x in row])\n\n        if title:\n            console.print(f\"\\n[bold]{title}[/bold]\")\n        console.print(table)\n\n    except Exception as e:\n        print_error(f\"Failed to print table: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/","title":"cryptoservice.utils.cache_manager","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager","title":"<code>cryptoservice.utils.cache_manager</code>","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager","title":"<code>CacheManager(ttl_seconds: int = 60)</code>","text":"<p>\u7f13\u5b58\u7ba1\u7406\u5668.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def __init__(self, ttl_seconds: int = 60):\n    self._cache: Dict[str, Tuple[Any, datetime]] = {}\n    self._ttl = ttl_seconds\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.get","title":"<code>get(key: str) -&gt; Optional[Any]</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def get(self, key: str) -&gt; Optional[Any]:\n    \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        if key in self._cache:\n            data, timestamp = self._cache[key]\n            if datetime.now() - timestamp &lt; timedelta(seconds=self._ttl):\n                return data\n            del self._cache[key]\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.set","title":"<code>set(key: str, value: Any) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def set(self, key: str, value: Any) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        self._cache[key] = (value, datetime.now())\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.clear","title":"<code>clear() -&gt; None</code>","text":"<p>\u6e05\u9664\u6240\u6709\u7f13\u5b58.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u9664\u6240\u6709\u7f13\u5b58.\"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"reference/cryptoservice/utils/category_utils/","title":"cryptoservice.utils.category_utils","text":""},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils","title":"<code>cryptoservice.utils.category_utils</code>","text":"<p>\u4ea4\u6613\u5bf9\u5206\u7c7b\u6570\u636e\u5904\u7406\u5de5\u5177\u6a21\u5757</p> <p>\u63d0\u4f9b\u5206\u7c7b\u6570\u636e\u7684\u8bfb\u53d6\u3001\u5904\u7406\u548c\u5206\u6790\u529f\u80fd</p>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils","title":"<code>CategoryUtils</code>","text":"<p>\u5206\u7c7b\u6570\u636e\u5904\u7406\u5de5\u5177\u7c7b</p>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils.read_category_csv","title":"<code>read_category_csv(file_path: Path | str) -&gt; Tuple[List[str], List[str], np.ndarray]</code>  <code>staticmethod</code>","text":"<p>\u4ece CSV \u6587\u4ef6\u8bfb\u53d6\u5206\u7c7b\u77e9\u9635\u3002</p> PARAMETER DESCRIPTION <code>file_path</code> <p>CSV \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>\u5143\u7ec4 (symbols, categories, matrix)</p> <code>List[str]</code> <ul> <li>symbols: \u4ea4\u6613\u5bf9\u5217\u8868</li> </ul> <code>ndarray</code> <ul> <li>categories: \u5206\u7c7b\u5217\u8868</li> </ul> <code>Tuple[List[str], List[str], ndarray]</code> <ul> <li>matrix: \u5206\u7c7b\u77e9\u9635 (symbols x categories)</li> </ul> Source code in <code>src/cryptoservice/utils/category_utils.py</code> <pre><code>@staticmethod\ndef read_category_csv(\n    file_path: Path | str,\n) -&gt; Tuple[List[str], List[str], np.ndarray]:\n    \"\"\"\u4ece CSV \u6587\u4ef6\u8bfb\u53d6\u5206\u7c7b\u77e9\u9635\u3002\n\n    Args:\n        file_path: CSV \u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        \u5143\u7ec4 (symbols, categories, matrix)\n        - symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        - categories: \u5206\u7c7b\u5217\u8868\n        - matrix: \u5206\u7c7b\u77e9\u9635 (symbols x categories)\n    \"\"\"\n    try:\n        file_path = Path(file_path)\n\n        if not file_path.exists():\n            raise FileNotFoundError(f\"\u5206\u7c7b\u6587\u4ef6\u4e0d\u5b58\u5728: {file_path}\")\n\n        # \u8bfb\u53d6 CSV \u6587\u4ef6\n        df = pd.read_csv(file_path)\n\n        # \u7b2c\u4e00\u5217\u662f symbol\n        symbols = df.iloc[:, 0].tolist()\n\n        # \u5176\u4f59\u5217\u662f\u5206\u7c7b\n        categories = df.columns[1:].tolist()\n\n        # \u63d0\u53d6\u77e9\u9635\u6570\u636e\n        matrix = df.iloc[:, 1:].values.astype(int)\n\n        logger.info(f\"\u8bfb\u53d6\u5206\u7c7b\u77e9\u9635: {len(symbols)} symbols \u00d7 {len(categories)} categories\")\n\n        return symbols, categories, matrix\n\n    except Exception as e:\n        logger.error(f\"\u8bfb\u53d6\u5206\u7c7bCSV\u6587\u4ef6\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils.filter_symbols_by_category","title":"<code>filter_symbols_by_category(symbols: List[str], categories: List[str], matrix: np.ndarray, target_categories: List[str], require_all: bool = False) -&gt; List[str]</code>  <code>staticmethod</code>","text":"<p>\u6839\u636e\u5206\u7c7b\u7b5b\u9009\u4ea4\u6613\u5bf9\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>matrix</code> <p>\u5206\u7c7b\u77e9\u9635</p> <p> TYPE: <code>ndarray</code> </p> <code>target_categories</code> <p>\u76ee\u6807\u5206\u7c7b\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>require_all</code> <p>\u662f\u5426\u8981\u6c42\u5305\u542b\u6240\u6709\u76ee\u6807\u5206\u7c7b\uff08True\uff09\u8fd8\u662f\u4efb\u4e00\u5206\u7c7b\uff08False\uff09</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/utils/category_utils.py</code> <pre><code>@staticmethod\ndef filter_symbols_by_category(\n    symbols: List[str],\n    categories: List[str],\n    matrix: np.ndarray,\n    target_categories: List[str],\n    require_all: bool = False,\n) -&gt; List[str]:\n    \"\"\"\u6839\u636e\u5206\u7c7b\u7b5b\u9009\u4ea4\u6613\u5bf9\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\n        matrix: \u5206\u7c7b\u77e9\u9635\n        target_categories: \u76ee\u6807\u5206\u7c7b\u5217\u8868\n        require_all: \u662f\u5426\u8981\u6c42\u5305\u542b\u6240\u6709\u76ee\u6807\u5206\u7c7b\uff08True\uff09\u8fd8\u662f\u4efb\u4e00\u5206\u7c7b\uff08False\uff09\n\n    Returns:\n        \u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        # \u627e\u5230\u76ee\u6807\u5206\u7c7b\u7684\u7d22\u5f15\n        category_indices = []\n        for target_cat in target_categories:\n            if target_cat in categories:\n                category_indices.append(categories.index(target_cat))\n            else:\n                logger.warning(f\"\u5206\u7c7b '{target_cat}' \u4e0d\u5b58\u5728\")\n\n        if not category_indices:\n            return []\n\n        # \u7b5b\u9009\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\n        filtered_symbols = []\n        for i, symbol in enumerate(symbols):\n            symbol_categories = matrix[i, category_indices]\n\n            if require_all:\n                # \u8981\u6c42\u5305\u542b\u6240\u6709\u76ee\u6807\u5206\u7c7b\n                if np.all(symbol_categories == 1):\n                    filtered_symbols.append(symbol)\n            else:\n                # \u53ea\u8981\u5305\u542b\u4efb\u4e00\u76ee\u6807\u5206\u7c7b\n                if np.any(symbol_categories == 1):\n                    filtered_symbols.append(symbol)\n\n        logger.info(f\"\u6839\u636e\u5206\u7c7b\u7b5b\u9009: {len(filtered_symbols)}/{len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\u7b26\u5408\u6761\u4ef6\")\n\n        return filtered_symbols\n\n    except Exception as e:\n        logger.error(f\"\u6839\u636e\u5206\u7c7b\u7b5b\u9009\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils.get_category_statistics","title":"<code>get_category_statistics(symbols: List[str], categories: List[str], matrix: np.ndarray) -&gt; Dict[str, Dict[str, Any]]</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u5206\u7c7b\u7edf\u8ba1\u4fe1\u606f\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>categories</code> <p>\u5206\u7c7b\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>matrix</code> <p>\u5206\u7c7b\u77e9\u9635</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <code>Dict[str, Dict[str, Any]]</code> <p>\u5206\u7c7b\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178</p> Source code in <code>src/cryptoservice/utils/category_utils.py</code> <pre><code>@staticmethod\ndef get_category_statistics(\n    symbols: List[str], categories: List[str], matrix: np.ndarray\n) -&gt; Dict[str, Dict[str, Any]]:\n    \"\"\"\u83b7\u53d6\u5206\u7c7b\u7edf\u8ba1\u4fe1\u606f\u3002\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u5206\u7c7b\u5217\u8868\n        matrix: \u5206\u7c7b\u77e9\u9635\n\n    Returns:\n        \u5206\u7c7b\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n    \"\"\"\n    try:\n        stats = {}\n\n        # \u6bcf\u4e2a\u5206\u7c7b\u7684\u7edf\u8ba1\n        for i, category in enumerate(categories):\n            category_count = int(np.sum(matrix[:, i]))\n            category_percentage = (category_count / len(symbols)) * 100\n\n            # \u627e\u5230\u5c5e\u4e8e\u8be5\u5206\u7c7b\u7684\u4ea4\u6613\u5bf9\n            category_symbols = [symbols[j] for j in range(len(symbols)) if matrix[j, i] == 1]\n\n            stats[category] = {\n                \"count\": category_count,\n                \"percentage\": category_percentage,\n                \"symbols\": category_symbols,\n            }\n\n        # \u603b\u4f53\u7edf\u8ba1\n        total_categories = len(categories)\n        total_symbols = len(symbols)\n\n        # \u65e0\u5206\u7c7b\u7684\u4ea4\u6613\u5bf9\n        no_category_symbols = []\n        for i, symbol in enumerate(symbols):\n            if np.sum(matrix[i, :]) == 0:\n                no_category_symbols.append(symbol)\n\n        # \u591a\u5206\u7c7b\u7684\u4ea4\u6613\u5bf9\n        multi_category_symbols = []\n        for i, symbol in enumerate(symbols):\n            category_count = int(np.sum(matrix[i, :]))\n            if category_count &gt; 1:\n                symbol_categories = [categories[j] for j in range(len(categories)) if matrix[i, j] == 1]\n                multi_category_symbols.append(\n                    {\n                        \"symbol\": symbol,\n                        \"category_count\": category_count,\n                        \"categories\": symbol_categories,\n                    }\n                )\n\n        # \u6dfb\u52a0\u603b\u4f53\u7edf\u8ba1\n        stats[\"_summary\"] = {\n            \"total_categories\": total_categories,\n            \"total_symbols\": total_symbols,\n            \"no_category_count\": len(no_category_symbols),\n            \"no_category_symbols\": no_category_symbols,\n            \"multi_category_count\": len(multi_category_symbols),\n            \"multi_category_symbols\": multi_category_symbols,\n        }\n\n        return stats\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u5206\u7c7b\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils.create_category_subset_matrix","title":"<code>create_category_subset_matrix(symbols: List[str], categories: List[str], matrix: np.ndarray, target_symbols: List[str] | None = None, target_categories: List[str] | None = None) -&gt; Tuple[List[str], List[str], np.ndarray]</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u7684\u5b50\u96c6\u3002</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u539f\u59cb\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>categories</code> <p>\u539f\u59cb\u5206\u7c7b\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>matrix</code> <p>\u539f\u59cb\u5206\u7c7b\u77e9\u9635</p> <p> TYPE: <code>ndarray</code> </p> <code>target_symbols</code> <p>\u76ee\u6807\u4ea4\u6613\u5bf9\u5217\u8868\uff0cNone\u8868\u793a\u4fdd\u7559\u6240\u6709</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>target_categories</code> <p>\u76ee\u6807\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u4fdd\u7559\u6240\u6709</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Tuple[List[str], List[str], ndarray]</code> <p>\u5b50\u96c6\u7684 (symbols, categories, matrix)</p> Source code in <code>src/cryptoservice/utils/category_utils.py</code> <pre><code>@staticmethod\ndef create_category_subset_matrix(\n    symbols: List[str],\n    categories: List[str],\n    matrix: np.ndarray,\n    target_symbols: List[str] | None = None,\n    target_categories: List[str] | None = None,\n) -&gt; Tuple[List[str], List[str], np.ndarray]:\n    \"\"\"\u521b\u5efa\u5206\u7c7b\u77e9\u9635\u7684\u5b50\u96c6\u3002\n\n    Args:\n        symbols: \u539f\u59cb\u4ea4\u6613\u5bf9\u5217\u8868\n        categories: \u539f\u59cb\u5206\u7c7b\u5217\u8868\n        matrix: \u539f\u59cb\u5206\u7c7b\u77e9\u9635\n        target_symbols: \u76ee\u6807\u4ea4\u6613\u5bf9\u5217\u8868\uff0cNone\u8868\u793a\u4fdd\u7559\u6240\u6709\n        target_categories: \u76ee\u6807\u5206\u7c7b\u5217\u8868\uff0cNone\u8868\u793a\u4fdd\u7559\u6240\u6709\n\n    Returns:\n        \u5b50\u96c6\u7684 (symbols, categories, matrix)\n    \"\"\"\n    try:\n        # \u786e\u5b9a\u76ee\u6807\u4ea4\u6613\u5bf9\n        if target_symbols is None:\n            target_symbols = symbols.copy()\n\n        # \u786e\u5b9a\u76ee\u6807\u5206\u7c7b\n        if target_categories is None:\n            target_categories = categories.copy()\n\n        # \u627e\u5230\u5bf9\u5e94\u7684\u7d22\u5f15\n        symbol_indices = []\n        valid_target_symbols = []\n        for target_symbol in target_symbols:\n            if target_symbol in symbols:\n                symbol_indices.append(symbols.index(target_symbol))\n                valid_target_symbols.append(target_symbol)\n            else:\n                logger.warning(f\"\u4ea4\u6613\u5bf9 '{target_symbol}' \u4e0d\u5b58\u5728\")\n\n        category_indices = []\n        valid_target_categories = []\n        for target_category in target_categories:\n            if target_category in categories:\n                category_indices.append(categories.index(target_category))\n                valid_target_categories.append(target_category)\n            else:\n                logger.warning(f\"\u5206\u7c7b '{target_category}' \u4e0d\u5b58\u5728\")\n\n        # \u521b\u5efa\u5b50\u96c6\u77e9\u9635\n        if symbol_indices and category_indices:\n            subset_matrix = matrix[np.ix_(symbol_indices, category_indices)]\n        else:\n            subset_matrix = np.array([]).reshape(0, 0)\n\n        logger.info(\n            f\"\u521b\u5efa\u5b50\u96c6\u77e9\u9635: {len(valid_target_symbols)} symbols \u00d7 {len(valid_target_categories)} categories\"\n        )\n\n        return valid_target_symbols, valid_target_categories, subset_matrix\n\n    except Exception as e:\n        logger.error(f\"\u521b\u5efa\u5206\u7c7b\u5b50\u96c6\u77e9\u9635\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/category_utils/#cryptoservice.utils.category_utils.CategoryUtils.export_category_analysis","title":"<code>export_category_analysis(file_path: Path | str, output_path: Path | str, analysis_name: str = 'category_analysis') -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5bfc\u51fa\u5206\u7c7b\u5206\u6790\u62a5\u544a\u3002</p> PARAMETER DESCRIPTION <code>file_path</code> <p>\u8f93\u5165\u7684\u5206\u7c7bCSV\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>analysis_name</code> <p>\u5206\u6790\u62a5\u544a\u540d\u79f0</p> <p> TYPE: <code>str</code> DEFAULT: <code>'category_analysis'</code> </p> Source code in <code>src/cryptoservice/utils/category_utils.py</code> <pre><code>@staticmethod\ndef export_category_analysis(\n    file_path: Path | str,\n    output_path: Path | str,\n    analysis_name: str = \"category_analysis\",\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u5206\u7c7b\u5206\u6790\u62a5\u544a\u3002\n\n    Args:\n        file_path: \u8f93\u5165\u7684\u5206\u7c7bCSV\u6587\u4ef6\u8def\u5f84\n        output_path: \u8f93\u51fa\u76ee\u5f55\u8def\u5f84\n        analysis_name: \u5206\u6790\u62a5\u544a\u540d\u79f0\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        # \u8bfb\u53d6\u5206\u7c7b\u6570\u636e\n        symbols, categories, matrix = CategoryUtils.read_category_csv(file_path)\n\n        # \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\n        stats = CategoryUtils.get_category_statistics(symbols, categories, matrix)\n\n        # \u521b\u5efa\u5206\u6790\u62a5\u544a\n        report_file = output_path / f\"{analysis_name}.txt\"\n\n        with open(report_file, \"w\", encoding=\"utf-8\") as f:\n            f.write(\"\u5206\u7c7b\u5206\u6790\u62a5\u544a\\n\")\n            f.write(\"=\" * 50 + \"\\n\")\n            f.write(f\"\u6570\u636e\u6e90: {file_path}\\n\")\n            f.write(f\"\u751f\u6210\u65f6\u95f4: {pd.Timestamp.now()}\\n\\n\")\n\n            # \u603b\u4f53\u7edf\u8ba1\n            summary = stats[\"_summary\"]\n            f.write(\"\u603b\u4f53\u7edf\u8ba1:\\n\")\n            f.write(f\"  \u4ea4\u6613\u5bf9\u603b\u6570: {summary['total_symbols']}\\n\")\n            f.write(f\"  \u5206\u7c7b\u603b\u6570: {summary['total_categories']}\\n\")\n            f.write(f\"  \u65e0\u5206\u7c7b\u4ea4\u6613\u5bf9: {summary['no_category_count']}\\n\")\n            f.write(f\"  \u591a\u5206\u7c7b\u4ea4\u6613\u5bf9: {summary['multi_category_count']}\\n\\n\")\n\n            # \u5206\u7c7b\u6392\u884c\n            f.write(\"\u5206\u7c7b\u70ed\u5ea6\u6392\u884c:\\n\")\n            category_stats = [(cat, info) for cat, info in stats.items() if cat != \"_summary\"]\n            category_stats.sort(key=lambda x: x[1][\"count\"], reverse=True)\n\n            for i, (category, info) in enumerate(category_stats, 1):\n                f.write(f\"  {i:2d}. {category.ljust(20)} : {info['count']:3d} \u4e2a ({info['percentage']:.1f}%)\\n\")\n\n            # \u65e0\u5206\u7c7b\u4ea4\u6613\u5bf9\n            if summary[\"no_category_symbols\"]:\n                f.write(\"\\n\u65e0\u5206\u7c7b\u4ea4\u6613\u5bf9:\\n\")\n                for symbol in summary[\"no_category_symbols\"]:\n                    f.write(f\"  - {symbol}\\n\")\n\n            # \u591a\u5206\u7c7b\u4ea4\u6613\u5bf9\uff08Top 10\uff09\n            if summary[\"multi_category_symbols\"]:\n                f.write(\"\\n\u591a\u5206\u7c7b\u4ea4\u6613\u5bf9 (Top 10):\\n\")\n                multi_sorted = sorted(\n                    summary[\"multi_category_symbols\"],\n                    key=lambda x: x[\"category_count\"],\n                    reverse=True,\n                )\n                for item in multi_sorted[:10]:\n                    f.write(f\"  - {item['symbol']}: {item['category_count']} \u4e2a\u5206\u7c7b {item['categories']}\\n\")\n\n        # \u5bfc\u51fa\u8be6\u7ec6\u7684 Excel \u5206\u6790\uff08\u5982\u679c\u5b89\u88c5\u4e86 openpyxl\uff09\n        try:\n            import importlib.util\n\n            if importlib.util.find_spec(\"openpyxl\") is not None:\n                import openpyxl  # noqa: F401\n\n                excel_file = output_path / f\"{analysis_name}.xlsx\"\n            else:\n                raise ImportError(\"openpyxl not available\")\n\n            with pd.ExcelWriter(excel_file, engine=\"openpyxl\") as writer:\n                # \u539f\u59cb\u77e9\u9635\n                matrix_df = pd.DataFrame(matrix, index=symbols, columns=categories)\n                matrix_df.to_excel(writer, sheet_name=\"\u5206\u7c7b\u77e9\u9635\")\n\n                # \u5206\u7c7b\u7edf\u8ba1\n                category_stats_df = pd.DataFrame(\n                    [\n                        {\n                            \"\u5206\u7c7b\": cat,\n                            \"\u4ea4\u6613\u5bf9\u6570\u91cf\": info[\"count\"],\n                            \"\u5360\u6bd4(%)\": info[\"percentage\"],\n                        }\n                        for cat, info in stats.items()\n                        if cat != \"_summary\"\n                    ]\n                ).sort_values(\"\u4ea4\u6613\u5bf9\u6570\u91cf\", ascending=False)\n                category_stats_df.to_excel(writer, sheet_name=\"\u5206\u7c7b\u7edf\u8ba1\", index=False)\n\n                # \u4ea4\u6613\u5bf9\u5206\u7c7b\u8be6\u60c5\n                symbol_details = []\n                for i, symbol in enumerate(symbols):\n                    symbol_categories = [categories[j] for j in range(len(categories)) if matrix[i, j] == 1]\n                    symbol_details.append(\n                        {\n                            \"\u4ea4\u6613\u5bf9\": symbol,\n                            \"\u5206\u7c7b\u6570\u91cf\": len(symbol_categories),\n                            \"\u5206\u7c7b\u5217\u8868\": \", \".join(symbol_categories),\n                        }\n                    )\n\n                symbol_details_df = pd.DataFrame(symbol_details)\n                symbol_details_df.to_excel(writer, sheet_name=\"\u4ea4\u6613\u5bf9\u8be6\u60c5\", index=False)\n\n            logger.info(f\"Excel\u5206\u6790\u62a5\u544a\u5df2\u4fdd\u5b58: {excel_file}\")\n\n        except ImportError:\n            logger.info(\"\u672a\u5b89\u88c5 openpyxl\uff0c\u8df3\u8fc7 Excel \u62a5\u544a\u751f\u6210\")\n\n        logger.info(f\"\u5206\u7c7b\u5206\u6790\u62a5\u544a\u5df2\u4fdd\u5b58: {report_file}\")\n\n    except Exception as e:\n        logger.error(f\"\u5bfc\u51fa\u5206\u7c7b\u5206\u6790\u62a5\u544a\u5931\u8d25: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/","title":"cryptoservice.utils.data_converter","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter","title":"<code>cryptoservice.utils.data_converter</code>","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter","title":"<code>DataConverter</code>","text":"<p>\u6570\u636e\u8f6c\u6362\u5de5\u5177\u7c7b.</p>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.to_decimal","title":"<code>to_decimal(value: Union[str, float, int]) -&gt; Decimal</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef to_decimal(value: Union[str, float, int]) -&gt; Decimal:\n    \"\"\"\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.\"\"\"\n    return Decimal(str(value))\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.format_timestamp","title":"<code>format_timestamp(timestamp: Union[int, float]) -&gt; datetime</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_timestamp(timestamp: Union[int, float]) -&gt; datetime:\n    \"\"\"\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.\"\"\"\n    if isinstance(timestamp, (int, float)):\n        return datetime.fromtimestamp(timestamp / 1000)\n    return datetime.now()\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.format_market_data","title":"<code>format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.\"\"\"\n    return {\n        \"price\": float(data.get(\"price\", 0)),\n        \"volume\": float(data.get(\"volume\", 0)),\n        \"change\": float(data.get(\"priceChangePercent\", 0)),\n        \"high\": float(data.get(\"highPrice\", 0)),\n        \"low\": float(data.get(\"lowPrice\", 0)),\n        \"timestamp\": datetime.now().isoformat(),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/","title":"cryptoservice.utils.logger","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger","title":"<code>cryptoservice.utils.logger</code>","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_info","title":"<code>print_info(message: str, title: str | None = None, style: str = 'green') -&gt; None</code>","text":"<p>\u6253\u5370\u4fe1\u606f\u9762\u677f.</p> PARAMETER DESCRIPTION <code>message</code> <p>\u8981\u663e\u793a\u7684\u6d88\u606f</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>\u9762\u677f\u6807\u9898</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>\u6837\u5f0f\u989c\u8272</p> <p> TYPE: <code>str</code> DEFAULT: <code>'green'</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_info(\n    message: str,\n    title: str | None = None,\n    style: str = \"green\",\n) -&gt; None:\n    \"\"\"\u6253\u5370\u4fe1\u606f\u9762\u677f.\n\n    Args:\n        message: \u8981\u663e\u793a\u7684\u6d88\u606f\n        title: \u9762\u677f\u6807\u9898\n        style: \u6837\u5f0f\u989c\u8272\n    \"\"\"\n    panel = Panel(Text(message, style=style), title=title, border_style=style)\n    console.print(panel)\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_dict","title":"<code>print_dict(data: dict[str, Any], title: str | None = None) -&gt; None</code>","text":"<p>\u6253\u5370\u5b57\u5178\u6570\u636e\u4e3a\u8868\u683c.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5b57\u5178\u6570\u636e</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_dict(\n    data: dict[str, Any],\n    title: str | None = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u5b57\u5178\u6570\u636e\u4e3a\u8868\u683c.\n\n    Args:\n        data: \u5b57\u5178\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n    \"\"\"\n    table = Table(show_header=True, header_style=\"bold magenta\")\n    table.add_column(\"Key\", style=\"cyan\")\n    table.add_column(\"Value\", style=\"green\")\n\n    for key, value in data.items():\n        table.add_row(str(key), str(value))\n\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n    console.print(table)\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_table","title":"<code>print_table(data: list[Any], title: str | None = None, headers: list[str] | None = None) -&gt; None</code>","text":"<p>\u6253\u5370\u8868\u683c\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u8868\u683c\u6570\u636e</p> <p> TYPE: <code>list[Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>\u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6</p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_table(\n    data: list[Any],\n    title: str | None = None,\n    headers: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u8868\u683c\u6570\u636e.\n\n    Args:\n        data: \u8868\u683c\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n        headers: \u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210\n\n    Raises:\n        ValueError: \u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6\n    \"\"\"\n    try:\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u7a7a\n        if not data:\n            raise ValueError(\"Empty data provided\")\n\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u5217\u8868\n        if not isinstance(data, list):\n            raise ValueError(f\"Expected list, got {type(data).__name__}\")\n\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u5982\u679c\u6570\u636e\u662f\u5b57\u5178\u5217\u8868\n        if isinstance(data[0], dict):\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u662f\u5426\u90fd\u662f\u5b57\u5178\n            if not all(isinstance(row, dict) for row in data):\n                raise ValueError(\"Inconsistent row types in dictionary data\")\n\n            headers = headers or list(data[0].keys())\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                # \u68c0\u67e5\u662f\u5426\u6240\u6709\u5fc5\u9700\u7684\u952e\u90fd\u5b58\u5728\n                missing_keys = set(headers) - set(row.keys())\n                if missing_keys:\n                    print_error(f\"Missing keys in row: {missing_keys}\")\n                table.add_row(*[str(row.get(h, \"N/A\")) for h in headers])\n\n        # \u5982\u679c\u6570\u636e\u662f\u666e\u901a\u5217\u8868\n        else:\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u7684\u957f\u5ea6\u662f\u5426\u4e00\u81f4\n            row_lengths = {len(row) if isinstance(row, (list, tuple)) else 1 for row in data}\n            if len(row_lengths) &gt; 1:\n                raise ValueError(f\"Inconsistent row lengths: {row_lengths}\")\n\n            row_length = row_lengths.pop()\n            headers = headers or [f\"Column {i + 1}\" for i in range(row_length)]\n\n            # \u9a8c\u8bc1headers\u957f\u5ea6\u662f\u5426\u5339\u914d\u6570\u636e\n            if len(headers) != row_length:\n                raise ValueError(f\"Headers length ({len(headers)}) doesn't match data width ({row_length})\")\n\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                if not isinstance(row, (list, tuple)):\n                    row = [row]  # \u5355\u4e2a\u503c\u8f6c\u6362\u4e3a\u5217\u8868\n                table.add_row(*[str(x) for x in row])\n\n        if title:\n            console.print(f\"\\n[bold]{title}[/bold]\")\n        console.print(table)\n\n    except Exception as e:\n        print_error(f\"Failed to print table: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_error","title":"<code>print_error(error: str) -&gt; None</code>","text":"<p>\u6253\u5370\u9519\u8bef\u4fe1\u606f.</p> PARAMETER DESCRIPTION <code>error</code> <p>\u9519\u8bef\u6d88\u606f</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_error(error: str) -&gt; None:\n    \"\"\"\u6253\u5370\u9519\u8bef\u4fe1\u606f.\n\n    Args:\n        error: \u9519\u8bef\u6d88\u606f\n    \"\"\"\n    console.print(f\"[bold red]Error:[/bold red] {error}\")\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/","title":"cryptoservice.utils.tools","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools","title":"<code>cryptoservice.utils.tools</code>","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool","title":"<code>Tool</code>","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool.gen_sample_time","title":"<code>gen_sample_time(freq: Freq) -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>For CN: start time 9:15 end time 15:00 for CRYPTO: start time 9:15 end time 15:00</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>@staticmethod\ndef gen_sample_time(freq: Freq) -&gt; list[str]:\n    \"\"\"For CN: start time 9:15 end time 15:00\n    for CRYPTO: start time 9:15 end time 15:00\n    \"\"\"\n    mapping = {\n        Freq.s1: 1,\n        Freq.m1: 60,\n        Freq.m3: 180,\n        Freq.m5: 300,\n        Freq.m15: 900,\n        Freq.m30: 1800,\n        Freq.h1: 3600,\n        Freq.h4: 14400,\n    }\n    step = mapping[freq]\n\n    sample_time = [\n        (datetime(1, 1, 1) + timedelta(seconds=s)).strftime(\"%H:%M:%S.%f\")\n        for s in list(range(step, 2400 * 36 + step, step))\n    ][:-1] + [\"24:00:00.000000\"]\n    return sample_time\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool.get_sample_time","title":"<code>get_sample_time(freq: Freq = Freq.M1) -&gt; list[str]</code>  <code>staticmethod</code>","text":"<p>Get sample time</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>@staticmethod\ndef get_sample_time(freq: Freq = Freq.M1) -&gt; list[str]:\n    \"\"\"Get sample time\"\"\"\n    match freq:\n        case Freq.s1:\n            return Tool.gen_sample_time(Freq.s1)\n        case Freq.m1:\n            return Tool.gen_sample_time(Freq.m1)\n        case Freq.m3:\n            return Tool.gen_sample_time(Freq.m3)\n        case Freq.m5:\n            return Tool.gen_sample_time(Freq.m5)\n        case Freq.m15:\n            return Tool.gen_sample_time(Freq.m15)\n        case Freq.m30:\n            return Tool.gen_sample_time(Freq.m30)\n        case Freq.h1:\n            return Tool.gen_sample_time(Freq.h1)\n        case Freq.h4:\n            return Tool.gen_sample_time(Freq.h4)\n        case Freq.d1:\n            return [\"24:00:00.000000\"]\n    return []\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.setup_logging","title":"<code>setup_logging(level: int = logging.INFO) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u914d\u7f6e.</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>def setup_logging(level: int = logging.INFO) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u65e5\u5fd7\u914d\u7f6e.\"\"\"\n    logging.basicConfig(level=level, format=\"%(message)s\", handlers=[RichHandler(rich_tracebacks=True)])\n    return None\n</code></pre>"}]}