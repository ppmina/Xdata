{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"CryptoService","text":"<p>\u4e00\u4e2a\u4e13\u4e1a\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u670d\u52a1\u5e93\uff0c\u4e13\u6ce8\u4e8eBinance\u6570\u636e\u7684\u83b7\u53d6\u3001\u5b58\u50a8\u548c\u5206\u6790\u3002</p>"},{"location":"#_1","title":"\u2728 \u4e3b\u8981\u7279\u6027","text":"<ul> <li>\ud83d\udcb9 \u5f02\u6b65\u9ad8\u6027\u80fd: \u5168\u9762\u652f\u6301async/await\uff0c\u9ad8\u6548\u5904\u7406\u5927\u91cf\u6570\u636e</li> <li>\ud83d\udcca \u5b8c\u6574\u6570\u636e: \u73b0\u8d27\u3001\u6c38\u7eed\u5408\u7ea6\u3001\u5386\u53f2K\u7ebf\u3001\u5b9e\u65f6WebSocket</li> <li>\ud83c\udfaf Universe\u7b56\u7565: \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u548c\u91cd\u5e73\u8861</li> <li>\ud83d\udcbe \u667a\u80fd\u5b58\u50a8: SQLite\u6570\u636e\u5e93 + \u6587\u4ef6\u5bfc\u51fa\uff0c\u652f\u6301\u589e\u91cf\u66f4\u65b0</li> <li>\ud83d\udd27 \u5f00\u7bb1\u5373\u7528: \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a\u3001\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236</li> </ul>"},{"location":"#5","title":"\ud83d\ude80 5\u5206\u949f\u4e0a\u624b","text":""},{"location":"#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install cryptoservice python-dotenv\n</code></pre>"},{"location":"#_3","title":"\u914d\u7f6e","text":"<pre><code># .env \u6587\u4ef6\nBINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre>"},{"location":"#_4","title":"\u83b7\u53d6\u5b9e\u65f6\u4ef7\u683c","text":"<pre><code>import asyncio\nimport os\nfrom cryptoservice import MarketDataService\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"BTC\u4ef7\u683c: ${ticker.last_price}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"#_5","title":"\ud83d\udcd6 \u6838\u5fc3\u529f\u80fd","text":""},{"location":"#universe","title":"\ud83c\udfaf Universe\u7b56\u7565","text":"<p>\u52a8\u6001\u9009\u62e9\u4ea4\u6613\u5bf9\uff0c\u6839\u636e\u6210\u4ea4\u91cf\u7b49\u6307\u6807\u5b9a\u671f\u91cd\u5e73\u8861\u6295\u8d44\u7ec4\u5408\u3002</p>"},{"location":"#_6","title":"\ud83d\udce5 \u6570\u636e\u4e0b\u8f7d","text":"<p>\u6279\u91cf\u4e0b\u8f7d\u5386\u53f2K\u7ebf\u3001\u8d44\u91d1\u8d39\u7387\u3001\u6301\u4ed3\u91cf\u7b49\u5e02\u573a\u6307\u6807\u6570\u636e\u3002</p>"},{"location":"#_7","title":"\ud83d\udce4 \u6570\u636e\u5bfc\u51fa","text":"<p>\u5c06\u6570\u636e\u5bfc\u51fa\u4e3aNumPy\u3001CSV\u3001Parquet\u683c\u5f0f\uff0c\u4fbf\u4e8e\u5206\u6790\u548c\u673a\u5668\u5b66\u4e60\u3002</p>"},{"location":"#_8","title":"\ud83c\udf10 \u5b9e\u65f6\u6570\u636e","text":"<p>WebSocket\u63a5\u6536Binance\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u6d41\u3002</p>"},{"location":"#_9","title":"\ud83d\udd17 \u5feb\u901f\u5bfc\u822a","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb - 5\u5206\u949f\u4e0a\u624b\u6307\u5357</li> <li>Universe\u7b56\u7565 - \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9</li> <li>\u6570\u636e\u5bfc\u51fa - \u5bfc\u51fa\u6570\u636e\u8fdb\u884c\u5206\u6790</li> <li>\u5b9e\u65f6\u6570\u636e - WebSocket\u5b9e\u65f6\u884c\u60c5</li> </ul>"},{"location":"#_10","title":"\ud83d\udee0\ufe0f \u5f00\u53d1\u73af\u5883","text":"<pre><code># \u514b\u9686\u9879\u76ee\ngit clone https://github.com/ppmina/Xdata.git\ncd Xdata\n\n# \u5b89\u88c5\u4f9d\u8d56\nuv pip install -e \".[dev-all]\"\n\n# \u8fd0\u884c\u6d4b\u8bd5\npytest\n\n# \u6784\u5efa\u6587\u6863\nmkdocs serve\n</code></pre>"},{"location":"#_11","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>MIT License</p>"},{"location":"logging_guide/","title":"\u65e5\u5fd7\u7cfb\u7edf\u4f7f\u7528\u6307\u5357","text":""},{"location":"logging_guide/#_2","title":"\u6982\u8ff0","text":"<p>\u9879\u76ee\u4f7f\u7528 structlog \u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\uff0c\u652f\u6301\u5f00\u53d1\u548c\u751f\u4ea7\u73af\u5883\u7684\u4e0d\u540c\u8f93\u51fa\u683c\u5f0f\u3002</p>"},{"location":"logging_guide/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>from cryptoservice.config.logging import get_logger\n\nlogger = get_logger(__name__)\n\n# \u7b80\u5355\u4e8b\u4ef6\nlogger.info(\"operation_started\")\n\n# \u5e26\u7ed3\u6784\u5316\u5b57\u6bb5\nlogger.info(\"download_complete\",\n    symbol=\"BTCUSDT\",\n    records=1000,\n    duration_s=5.2)\n\n# \u9519\u8bef\u65e5\u5fd7\nlogger.error(\"api_failed\",\n    error=\"timeout\",\n    retry_count=3)\n</code></pre>"},{"location":"logging_guide/#_4","title":"\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f","text":""},{"location":"logging_guide/#_5","title":"\u5f00\u53d1\u73af\u5883\uff08\u9ed8\u8ba4\uff09","text":"<p>\u5e26\u989c\u8272\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\uff0c\u5305\u542b\u6587\u4ef6\u4f4d\u7f6e\uff1a</p> <pre><code>2025-10-19 02:36:51 | info     | application_started | version=1.14.3 | demo/test_new_logging.py:14\n</code></pre> <ul> <li>\u65f6\u95f4\u6233\uff1a\u7070\u8272</li> <li>\u7ea7\u522b\uff1a</li> <li>INFO\uff1a\u7eff\u8272</li> <li>WARNING\uff1a\u9ec4\u8272</li> <li>ERROR\uff1a\u7ea2\u8272</li> <li>CRITICAL\uff1a\u7c97\u4f53\u7ea2\u8272</li> <li>\u4e8b\u4ef6\u540d\uff1a\u7c97\u4f53\u767d\u8272</li> <li>\u5b57\u6bb5\uff1a\u952e\uff08\u9752\u8272\uff09=\u503c\uff08\u767d\u8272\uff09</li> <li>\u4f4d\u7f6e\uff1a\u7070\u8272\uff0c\u53ef\u5728\u7f16\u8f91\u5668\u4e2d\u70b9\u51fb\u8df3\u8f6c</li> </ul>"},{"location":"logging_guide/#_6","title":"\u751f\u4ea7\u73af\u5883","text":"<p>\u7eaf JSON \u683c\u5f0f\uff0c\u4fbf\u4e8e\u65e5\u5fd7\u7cfb\u7edf\u91c7\u96c6\uff1a</p> <pre><code>{\"version\": \"1.14.3\", \"event\": \"application_started\", \"level\": \"info\", \"timestamp\": \"2025-10-19 02:36:51\"}\n</code></pre>"},{"location":"logging_guide/#_7","title":"\u6d4b\u8bd5\u73af\u5883","text":"<p>\u7b80\u6d01\u683c\u5f0f\uff0c\u65e0\u989c\u8272\uff1a</p> <pre><code>2025-10-19 02:36:51 | info     | application_started | version=1.14.3\n</code></pre>"},{"location":"logging_guide/#_8","title":"\u914d\u7f6e","text":""},{"location":"logging_guide/#_9","title":"\u5168\u5c40\u914d\u7f6e\uff08\u81ea\u52a8\uff09","text":"<p>\u65e5\u5fd7\u7cfb\u7edf\u5728 <code>src/cryptoservice/config/__init__.py</code> \u4e2d\u81ea\u52a8\u521d\u59cb\u5316\uff0c\u4f7f\u7528\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> <ul> <li><code>LOG_ENVIRONMENT</code>: development/production/test</li> <li><code>LOG_LEVEL</code>: DEBUG/INFO/WARNING/ERROR/CRITICAL</li> <li><code>LOG_FILE</code>: \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff08\u53ef\u9009\uff09</li> <li><code>LOG_ENABLE_RICH</code>: \u662f\u5426\u542f\u7528\u989c\u8272\uff08\u5bf9\u5e94 <code>use_colors</code> \u53c2\u6570\uff09</li> </ul>"},{"location":"logging_guide/#_10","title":"\u624b\u52a8\u914d\u7f6e","text":"<pre><code>from cryptoservice.config.logging import setup_logging, Environment, LogLevel\n\n# \u5f00\u53d1\u73af\u5883\nsetup_logging(\n    environment=Environment.DEVELOPMENT,\n    log_level=LogLevel.DEBUG,\n    use_colors=True\n)\n\n# \u751f\u4ea7\u73af\u5883\nsetup_logging(\n    environment=Environment.PRODUCTION,\n    log_level=LogLevel.INFO,\n    log_file=\"logs/app.log\"\n)\n</code></pre>"},{"location":"logging_guide/#_11","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"logging_guide/#1","title":"1. \u4e8b\u4ef6\u547d\u540d","text":"<p>\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u7684\u5c0f\u5199\u540d\u79f0\uff0c\u63cf\u8ff0\u53d1\u751f\u7684\u4e8b\u4ef6\uff1a</p> <pre><code># \u2705 \u597d\u7684\u547d\u540d\nlogger.info(\"download_started\")\nlogger.info(\"api_request_complete\")\nlogger.error(\"database_connection_failed\")\n\n# \u274c \u907f\u514d\nlogger.info(\"Download Started\")  # \u4e0d\u8981\u7528\u7a7a\u683c\u548c\u5927\u5199\nlogger.info(\"download\")  # \u592a\u6a21\u7cca\n</code></pre>"},{"location":"logging_guide/#2","title":"2. \u7ed3\u6784\u5316\u5b57\u6bb5","text":"<p>\u5c06\u6240\u6709\u52a8\u6001\u4fe1\u606f\u4f5c\u4e3a\u952e\u503c\u5bf9\u53c2\u6570\uff1a</p> <pre><code># \u2705 \u7ed3\u6784\u5316\nlogger.info(\"download_complete\",\n    symbol=\"BTCUSDT\",\n    records=1000,\n    duration_s=5.2)\n\n# \u274c \u5b57\u7b26\u4e32\u62fc\u63a5\nlogger.info(f\"Downloaded {records} records for {symbol} in {duration_s}s\")\n</code></pre>"},{"location":"logging_guide/#3","title":"3. \u65e5\u5fd7\u7ea7\u522b\u9009\u62e9","text":"<ul> <li>DEBUG: \u8be6\u7ec6\u7684\u8c03\u8bd5\u4fe1\u606f\uff08\u5f00\u53d1\u73af\u5883\uff09</li> <li>INFO: \u6b63\u5e38\u7684\u4e1a\u52a1\u4e8b\u4ef6\uff08\u4e0b\u8f7d\u5b8c\u6210\u3001\u4efb\u52a1\u5f00\u59cb\u7b49\uff09</li> <li>WARNING: \u8b66\u544a\u4f46\u4e0d\u5f71\u54cd\u529f\u80fd\uff08\u91cd\u8bd5\u3001\u964d\u7ea7\u7b49\uff09</li> <li>ERROR: \u9519\u8bef\u4f46\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\uff08API \u5931\u8d25\u3001\u6570\u636e\u7f3a\u5931\u7b49\uff09</li> <li>CRITICAL: \u4e25\u91cd\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u80fd\u65e0\u6cd5\u7ee7\u7eed</li> </ul>"},{"location":"logging_guide/#4","title":"4. \u5f02\u5e38\u5904\u7406","text":"<pre><code>try:\n    result = await download_data()\nexcept Exception as e:\n    logger.exception(\"download_failed\",\n        symbol=symbol,\n        error=str(e))\n    # exception() \u4f1a\u81ea\u52a8\u5305\u542b\u5806\u6808\u4fe1\u606f\n</code></pre>"},{"location":"logging_guide/#_12","title":"\u6587\u4ef6\u4f4d\u7f6e\u8df3\u8f6c","text":"<p>\u65e5\u5fd7\u4e2d\u7684\u6587\u4ef6\u4f4d\u7f6e\uff08\u5982 <code>src/cryptoservice/config/__init__.py:8</code>\uff09\u53ef\u4ee5\u5728\u4ee5\u4e0b\u7f16\u8f91\u5668\u4e2d\u76f4\u63a5\u70b9\u51fb\u8df3\u8f6c\uff1a</p> <ul> <li>VS Code: Cmd+Click (Mac) \u6216 Ctrl+Click (Windows/Linux)</li> <li>PyCharm: Cmd+Click (Mac) \u6216 Ctrl+Click (Windows/Linux)</li> <li>Vim: \u4f7f\u7528 <code>:e +8 src/cryptoservice/config/__init__.py</code></li> </ul>"},{"location":"logging_guide/#_13","title":"\u6027\u80fd\u8003\u8651","text":"<p>structlog \u662f\u9ad8\u6027\u80fd\u7684\uff1a</p> <ul> <li>\u5ef6\u8fdf\u7ed1\u5b9a\uff1a\u5b57\u6bb5\u53ea\u5728\u9700\u8981\u8f93\u51fa\u65f6\u624d\u683c\u5f0f\u5316</li> <li>\u7f13\u5b58 logger\uff1a\u91cd\u590d\u83b7\u53d6\u540c\u4e00 logger \u4e0d\u4f1a\u521b\u5efa\u65b0\u5b9e\u4f8b</li> <li>\u65e0\u5168\u5c40\u9501\uff1a\u6bd4\u6807\u51c6\u5e93 logging \u66f4\u9002\u5408\u9ad8\u5e76\u53d1\u573a\u666f</li> </ul>"},{"location":"logging_guide/#_14","title":"\u8fc1\u79fb\u6307\u5357","text":""},{"location":"logging_guide/#struct_log","title":"\u4ece\u65e7\u7684 struct_log \u8fc1\u79fb","text":"<pre><code># \u65e7\u683c\u5f0f\nfrom cryptoservice.utils.logger import struct_log\nimport logging\n\nlogger = logging.getLogger(__name__)\nstruct_log(logger, logging.INFO, \"download.start\", symbol=\"BTCUSDT\")\n\n# \u65b0\u683c\u5f0f\nfrom cryptoservice.config.logging import get_logger\n\nlogger = get_logger(__name__)\nlogger.info(\"download_start\", symbol=\"BTCUSDT\")\n</code></pre>"},{"location":"logging_guide/#_15","title":"\u4ece\u5b57\u7b26\u4e32\u65e5\u5fd7\u8fc1\u79fb","text":"<pre><code># \u65e7\u683c\u5f0f\nlogger.info(f\"\u5f00\u59cb\u4e0b\u8f7d {symbol} \u6570\u636e\")\n\n# \u65b0\u683c\u5f0f\nlogger.info(\"download_start\", symbol=symbol)\n</code></pre>"},{"location":"logging_guide/#_16","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"logging_guide/#q","title":"Q: \u4e3a\u4ec0\u4e48\u6211\u7684\u65e5\u5fd7\u6ca1\u6709\u989c\u8272\uff1f","text":"<p>A: \u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a 1. \u786e\u4fdd <code>environment=Environment.DEVELOPMENT</code> 2. \u786e\u4fdd <code>use_colors=True</code> 3. \u786e\u4fdd\u7ec8\u7aef\u652f\u6301 ANSI \u989c\u8272</p>"},{"location":"logging_guide/#q_1","title":"Q: \u5982\u4f55\u7981\u7528\u6587\u4ef6\u4f4d\u7f6e\u4fe1\u606f\uff1f","text":"<p>A: \u6587\u4ef6\u4f4d\u7f6e\u4fe1\u606f\u662f\u8c03\u8bd5\u7684\u5173\u952e\uff0c\u5efa\u8bae\u4fdd\u7559\u3002\u5982\u9700\u7981\u7528\uff0c\u53ef\u4ee5\u5728 <code>_build_processors</code> \u4e2d\u79fb\u9664 <code>_add_caller_info</code>\u3002</p>"},{"location":"logging_guide/#q_2","title":"Q: \u751f\u4ea7\u73af\u5883\u5e94\u8be5\u7528\u4ec0\u4e48\u914d\u7f6e\uff1f","text":"<p>A: \u63a8\u8350\u914d\u7f6e\uff1a <pre><code>setup_logging(\n    environment=Environment.PRODUCTION,\n    log_level=LogLevel.INFO,  # \u4e0d\u8981\u7528 DEBUG\n    log_file=\"logs/app.log\",\n    use_colors=False  # JSON \u4e0d\u9700\u8981\u989c\u8272\n)\n</code></pre></p>"},{"location":"logging_guide/#_17","title":"\u53c2\u8003","text":"<ul> <li>structlog \u6587\u6863</li> <li>\u9879\u76ee\u914d\u7f6e\u6587\u4ef6</li> <li>\u793a\u4f8b\u4ee3\u7801</li> </ul>"},{"location":"advanced/concurrency_retry_analysis/","title":"\u591a\u534f\u7a0b\u673a\u5236\u4e0e\u91cd\u8bd5\u673a\u5236\u4ea4\u4e92\u5206\u6790\u62a5\u544a","text":""},{"location":"advanced/concurrency_retry_analysis/#_2","title":"\u6267\u884c\u6458\u8981","text":"<p>\u672c\u62a5\u544a\u6df1\u5165\u5206\u6790\u4e86 cryptoservice \u9879\u76ee\u4e2d\u591a\u534f\u7a0b\u5e76\u53d1\u673a\u5236\u4e0e\u91cd\u8bd5\u673a\u5236\u7684\u4ea4\u4e92\u4f5c\u7528\uff0c\u5305\u62ec\u5176\u8bbe\u8ba1\u67b6\u6784\u3001\u6027\u80fd\u5f71\u54cd\u3001\u6f5c\u5728\u95ee\u9898\u53ca\u4f18\u5316\u5efa\u8bae\u3002</p> <p>\u5173\u952e\u53d1\u73b0\uff1a - \u7cfb\u7edf\u91c7\u7528\u4e09\u5c42\u5e76\u53d1\u63a7\u5236\uff08Semaphore + RateLimiter + Retry\uff09 - \u6bcf\u4e2a\u4e0b\u8f7d\u5668\u5b9e\u4f8b\u62e5\u6709\u72ec\u7acb\u7684\u901f\u7387\u9650\u5236\u7ba1\u7406\u5668\uff08\u5171\u4eab\u72b6\u6001\u9694\u79bb\u95ee\u9898\uff09 - \u91cd\u8bd5\u673a\u5236\u4e0e\u5e76\u53d1\u63a7\u5236\u5b58\u5728\u4e58\u6cd5\u6548\u5e94 - \u8fde\u63a5\u6c60\u914d\u7f6e\u9700\u4e0e\u5e76\u53d1\u6570\u5339\u914d\u4ee5\u907f\u514d\u8d44\u6e90\u7ade\u4e89</p>"},{"location":"advanced/concurrency_retry_analysis/#1","title":"1. \u7cfb\u7edf\u67b6\u6784\u6982\u89c8","text":""},{"location":"advanced/concurrency_retry_analysis/#11","title":"1.1 \u5e76\u53d1\u63a7\u5236\u5c42\u6b21","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   \u5e94\u7528\u5c42\uff08\u4e1a\u52a1\u903b\u8f91\uff09                          \u2502\n\u2502                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 download_metrics_batch(symbols, max_workers=50)       \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              \u7b2c\u4e00\u5c42\uff1aSemaphore \u5e76\u53d1\u9650\u5236                       \u2502\n\u2502  semaphore = asyncio.Semaphore(max_workers)                  \u2502\n\u2502  - \u63a7\u5236\u540c\u65f6\u8fd0\u884c\u7684\u534f\u7a0b\u6570\u91cf                                     \u2502\n\u2502  - \u9650\u5236\uff1amax_workers (\u901a\u5e38 5-50)                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         \u7b2c\u4e8c\u5c42\uff1aAsyncRateLimitManager \u901f\u7387\u9650\u5236                \u2502\n\u2502  - \u5168\u5c40\u8bf7\u6c42\u8ba1\u6570\uff1a1800 req/min                                \u2502\n\u2502  - \u52a8\u6001\u5ef6\u8fdf\u8c03\u6574\uff1abase_delay * \u6307\u6570\u9012\u589e                       \u2502\n\u2502  - \u4f7f\u7528 asyncio.Lock() \u4fdd\u62a4\u5171\u4eab\u72b6\u6001                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          \u7b2c\u4e09\u5c42\uff1aAsyncExponentialBackoff \u91cd\u8bd5\u673a\u5236             \u2502\n\u2502  - \u91cd\u8bd5\u6b21\u6570\uff1amax_retries (\u9ed8\u8ba43\u6b21)                           \u2502\n\u2502  - \u9000\u907f\u7b56\u7565\uff1abase_delay * (2^attempt)                        \u2502\n\u2502  - \u6296\u52a8\uff1a\u00b150% \u968f\u673a\u5ef6\u8fdf                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              \u7f51\u7edc\u5c42\uff1aaiohttp ClientSession                    \u2502\n\u2502  TCPConnector(limit=max_workers, keepalive_timeout=30)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#2","title":"2. \u6838\u5fc3\u7ec4\u4ef6\u5206\u6790","text":""},{"location":"advanced/concurrency_retry_analysis/#21-asyncratelimitmanager","title":"2.1 AsyncRateLimitManager","text":"<p>\u8bbe\u8ba1\u6a21\u5f0f\uff1a <pre><code>class AsyncRateLimitManager:\n    def __init__(self, base_delay: float = 0.5):\n        self.lock = asyncio.Lock()  # \u534f\u7a0b\u5b89\u5168\u9501\n        self.max_requests_per_minute = 1800\n        self.current_delay = base_delay\n        self.consecutive_errors = 0\n</code></pre></p> <p>\u5de5\u4f5c\u673a\u5236\uff1a</p> <ol> <li> <p>\u8bf7\u6c42\u524d\u63a7\u5236 (wait_before_request) <pre><code>\u534f\u7a0bA                    \u534f\u7a0bB                    \u534f\u7a0bC\n  \u2502                        \u2502                        \u2502\n  \u251c\u2500\u2500\u25ba acquire lock        \u2502                        \u2502\n  \u2502    \u8ba1\u7b97\u7b49\u5f85\u65f6\u95f4         \u2502 (blocked)              \u2502 (blocked)\n  \u2502    await sleep(0.5s)   \u2502                        \u2502\n  \u2502    \u8bb0\u5f55\u65f6\u95f4\u6233           \u2502                        \u2502\n  \u251c\u2500\u2500\u25ba release lock        \u2502                        \u2502\n  \u2502                        \u251c\u2500\u2500\u25ba acquire lock        \u2502\n  \u2502                        \u2502    \u8ba1\u7b97\u7b49\u5f85\u65f6\u95f4         \u2502 (blocked)\n  \u2502                        \u2502    await sleep(0.5s)   \u2502\n  \u2502                        \u2502    \u8bb0\u5f55\u65f6\u95f4\u6233           \u2502\n  \u2502                        \u251c\u2500\u2500\u25ba release lock        \u2502\n  \u2502                        \u2502                        \u251c\u2500\u2500\u25ba acquire lock\n</code></pre></p> </li> <li> <p>\u52a8\u6001\u5ef6\u8fdf\u8c03\u6574</p> </li> <li>\u6210\u529f\u8bf7\u6c42\uff1a<code>consecutive_errors -= 1</code>\uff0c\u5ef6\u8fdf\u9010\u6e10\u964d\u4f4e\uff08\u6bcf\u5206\u949f \u00d7 0.9\uff09</li> <li>\u5931\u8d25\u8bf7\u6c42\uff1a<code>consecutive_errors += 1</code>\uff0c\u5ef6\u8fdf\u6307\u6570\u589e\u957f\uff08\u00d7 2\uff09</li> <li> <p>\u63a5\u8fd1\u9650\u5236\uff0880%\uff09\uff1a\u989d\u5916\u5ef6\u8fdf +2\u79d2</p> </li> <li> <p>\u65f6\u95f4\u7a97\u53e3\u7ba1\u7406 <pre><code>if current_time - window_start_time &gt;= 60:\n    request_count = 0  # \u6bcf\u5206\u949f\u91cd\u7f6e\n    window_start_time = current_time\n</code></pre></p> </li> </ol> <p>\u5173\u952e\u95ee\u9898\uff1a \u26a0\ufe0f \u6bcf\u4e2a\u4e0b\u8f7d\u5668\u5b9e\u4f8b\u62e5\u6709\u72ec\u7acb\u7684 RateLimitManager <pre><code># base_downloader.py\ndef __init__(self, client: AsyncClient, request_delay: float = 0.5):\n    self.async_rate_limit_manager = AsyncRateLimitManager(base_delay=request_delay)\n</code></pre></p> <p>\u8fd9\u610f\u5473\u7740\uff1a - <code>VisionDownloader</code> \u5b9e\u4f8b\u6709\u81ea\u5df1\u7684\u901f\u7387\u9650\u5236\u5668 - <code>MetricsDownloader</code> \u5b9e\u4f8b\u6709\u81ea\u5df1\u7684\u901f\u7387\u9650\u5236\u5668 - \u5b83\u4eec\u4e0d\u5171\u4eab\u8bf7\u6c42\u8ba1\u6570\uff0c\u53ef\u80fd\u5bfc\u81f4\u603b\u8bf7\u6c42\u901f\u7387\u8d85\u51fa API \u9650\u5236</p>"},{"location":"advanced/concurrency_retry_analysis/#22-asyncexponentialbackoff","title":"2.2 AsyncExponentialBackoff","text":"<p>\u9000\u907f\u7b56\u7565\uff1a <pre><code>delay = min(\n    base_delay * (backoff_multiplier ** attempt),  # \u6307\u6570\u589e\u957f\n    max_delay  # \u4e0a\u965060\u79d2\n)\n\nif jitter:\n    delay *= 0.5 + random(0.0, 0.5)  # \u6dfb\u52a0\u6296\u52a8\n</code></pre></p> <p>\u91cd\u8bd5\u6b21\u6570\u5f71\u54cd\uff1a <pre><code>\u9ed8\u8ba4\u914d\u7f6e (base_delay=1.0, multiplier=2.0, max_retries=3):\n  \u5c1d\u8bd5 1: \u7acb\u5373\u6267\u884c\n  \u5c1d\u8bd5 2: \u5ef6\u8fdf 0.5-1.5\u79d2  (1 * 2^0 * jitter)\n  \u5c1d\u8bd5 3: \u5ef6\u8fdf 1.0-3.0\u79d2  (1 * 2^1 * jitter)\n  \u5c1d\u8bd5 4: \u5ef6\u8fdf 2.0-6.0\u79d2  (1 * 2^2 * jitter)\n\n\u603b\u8017\u65f6: 3.5-10.5\u79d2\uff08\u4ec5\u91cd\u8bd5\u5ef6\u8fdf\uff09\n</code></pre></p> <p>VisionDownloader \u914d\u7f6e\uff1a <pre><code>retry_config = RetryConfig(max_retries=3, base_delay=0)\n</code></pre> - <code>base_delay=0</code> \u610f\u5473\u7740\u91cd\u8bd5\u65e0\u5ef6\u8fdf\uff08\u4ec5\u4f9d\u8d56 RateLimitManager \u63a7\u5236\uff09 - \u9002\u5408\u9ad8\u5e76\u53d1\u573a\u666f\uff0c\u4f46\u53ef\u80fd\u5bfc\u81f4\u9519\u8bef\u91cd\u8bd5\u98ce\u66b4</p>"},{"location":"advanced/concurrency_retry_analysis/#23-semaphore","title":"2.3 Semaphore \u5e76\u53d1\u63a7\u5236","text":"<p>VisionDownloader \u573a\u666f\uff1a <pre><code>semaphore = asyncio.Semaphore(max_workers)  # \u4f8b\u5982 50\n\nasync with semaphore:\n    # \u6700\u591a50\u4e2a\u534f\u7a0b\u540c\u65f6\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\n    metrics_data = await download_and_parse(...)\n</code></pre></p> <p>MetricsDownloader \u573a\u666f\uff1a <pre><code>semaphore = asyncio.Semaphore(max_workers)  # \u4f8b\u5982 5\n\nasync with semaphore:\n    funding_rates = await download_funding_rate(...)\n</code></pre></p> <p>\u5e76\u53d1\u6570\u9009\u62e9\u5f71\u54cd\uff1a - <code>max_workers=5</code>: \u4fdd\u5b88\uff0c\u9002\u5408API\u9650\u5236\u4e25\u683c\u7684\u573a\u666f - <code>max_workers=50</code>: \u6fc0\u8fdb\uff0c\u9002\u5408S3\u7b49\u9ad8\u541e\u5410\u573a\u666f - \u8fc7\u9ad8\uff1a\u53ef\u80fd\u8017\u5c3d\u8fde\u63a5\u6c60\u3001\u5185\u5b58\u3001\u6587\u4ef6\u53e5\u67c4 - \u8fc7\u4f4e\uff1a\u65e0\u6cd5\u5145\u5206\u5229\u7528\u7f51\u7edc\u5e26\u5bbd\u548cAPI\u914d\u989d</p>"},{"location":"advanced/concurrency_retry_analysis/#3","title":"3. \u4ea4\u4e92\u673a\u5236\u5206\u6790","text":""},{"location":"advanced/concurrency_retry_analysis/#31","title":"3.1 \u6b63\u5e38\u6d41\u7a0b\uff08\u65e0\u9519\u8bef\uff09","text":"<pre><code>\u65f6\u95f4\u8f74\uff08ms\uff09     \u534f\u7a0b1              \u534f\u7a0b2              \u534f\u7a0b3\n    0          acquire sem        acquire sem        blocked(sem)\n    0          wait_rate(50ms)    wait_rate(550ms)\n   50          HTTP request       \u2502\n  100          parse data         \u2502\n  100          release sem        \u2502                  acquire sem\n  100          [DONE]             \u2502                  wait_rate(50ms)\n  550                             HTTP request       \u2502\n  600                             parse data         \u2502\n  600                             release sem        HTTP request\n  600                             [DONE]             parse data\n  650                                                 [DONE]\n</code></pre> <p>\u5173\u952e\u89c2\u5bdf\uff1a - RateLimitManager \u7684\u9501\u4f7f\u5f97\u534f\u7a0b\u4e32\u884c\u5316\u8bf7\u6c42\uff08\u964d\u4f4e\u5e76\u53d1\u6548\u7387\uff09 - \u534f\u7a0b2 \u7b49\u5f85 550ms\uff0c\u56e0\u4e3a\u534f\u7a0b1 \u5728 50ms \u65f6\u521a\u53d1\u51fa\u8bf7\u6c42\uff08\u9700\u95f4\u9694 500ms\uff09</p>"},{"location":"advanced/concurrency_retry_analysis/#32","title":"3.2 \u9519\u8bef\u4e0e\u91cd\u8bd5\u6d41\u7a0b","text":"<p>\u573a\u666f\uff1a\u534f\u7a0b\u9047\u5230\u7f51\u7edc\u9519\u8bef</p> <pre><code>while True:\n    try:\n        await rate_limiter.wait_before_request()  # \u7b2c\u4e00\u5c42\u7b49\u5f85\n        result = await http_request()             # \u53d1\u51fa\u8bf7\u6c42\n        await rate_limiter.handle_success()       # \u6210\u529f\u5904\u7406\n        return result\n    except Exception as e:\n        if error_handler.is_rate_limit_error(e):\n            wait_time = await rate_limiter.handle_rate_limit_error()  # 60-300\u79d2\n            await asyncio.sleep(wait_time)\n            continue  # \u91cd\u8bd5\uff0c\u4e0d\u6d88\u8017 backoff \u6b21\u6570\n\n        if not error_handler.should_retry(e, attempt, max_retries):\n            raise e  # \u4e0d\u53ef\u91cd\u8bd5\u9519\u8bef\uff0c\u76f4\u63a5\u629b\u51fa\n\n        await backoff.wait()  # \u7b2c\u4e8c\u5c42\u7b49\u5f85\uff1a\u6307\u6570\u9000\u907f\n</code></pre> <p>\u65f6\u95f4\u6210\u672c\u5206\u89e3\uff1a</p> <ol> <li> <p>\u6b63\u5e38\u91cd\u8bd5\uff08\u7f51\u7edc\u9519\u8bef\uff09 <pre><code>\u5c1d\u8bd51: rate_wait(0.5s) + request(1.0s) + FAIL\n\u5c1d\u8bd52: rate_wait(0.5s) + backoff(1.5s) + request(1.0s) + FAIL\n\u5c1d\u8bd53: rate_wait(0.5s) + backoff(3.0s) + request(1.0s) + SUCCESS\n\u603b\u8017\u65f6: 8.5\u79d2 (3\u6b21\u8bf7\u6c42 + 5\u79d2\u91cd\u8bd5\u5ef6\u8fdf)\n</code></pre></p> </li> <li> <p>\u9891\u7387\u9650\u5236\u9519\u8bef <pre><code>\u5c1d\u8bd51: rate_wait(0.5s) + request(0.1s) + 429 ERROR\n       handle_rate_limit_error() \u2192 sleep(60s)\n\u5c1d\u8bd52: rate_wait(0.5s) + request(0.1s) + SUCCESS\n\u603b\u8017\u65f6: 61.2\u79d2 (\u9891\u7387\u9650\u5236\u60e9\u7f5a)\n</code></pre></p> </li> </ol>"},{"location":"advanced/concurrency_retry_analysis/#33","title":"3.3 \u5e76\u53d1\u4e58\u6cd5\u6548\u5e94","text":"<p>\u95ee\u9898\uff1a \u5f53\u591a\u4e2a\u534f\u7a0b\u540c\u65f6\u5931\u8d25\u5e76\u91cd\u8bd5\u65f6\uff0c\u7cfb\u7edf\u8d1f\u8f7d\u6fc0\u589e</p> <p>\u6848\u4f8b\u5206\u6790\uff1a <pre><code>\u573a\u666f\uff1a50\u4e2a\u534f\u7a0b\u540c\u65f6\u4e0b\u8f7d\uff0c10\u4e2a\u9047\u5230\u7f51\u7edc\u9519\u8bef\n\n\u521d\u59cb\u72b6\u6001\uff1a\n  - 40\u4e2a\u534f\u7a0b\u6b63\u5e38\u5b8c\u6210\n  - 10\u4e2a\u534f\u7a0b\u8fdb\u5165\u91cd\u8bd5\n\n\u91cd\u8bd5\u7b2c1\u8f6e\uff08+1.5\u79d2\u540e\uff09\uff1a\n  - 10\u4e2a\u534f\u7a0b\u540c\u65f6\u53d1\u8d77\u91cd\u8bd5\u8bf7\u6c42\n  - RateLimitManager \u88ab10\u4e2a\u534f\u7a0b\u4f9d\u6b21\u9501\u5b9a\n  - \u603b\u8bf7\u6c42\u65f6\u95f4\uff1a10 * 0.5s = 5\u79d2\uff08\u4e32\u884c\u7b49\u5f85\uff09\n\n\u91cd\u8bd5\u7b2c2\u8f6e\uff08+3\u79d2\u540e\uff09\uff1a\n  - \u5982\u679c\u4ecd\u67095\u4e2a\u5931\u8d25\uff0c\u518d\u6b21\u4e32\u884c\u91cd\u8bd5\n  - \u603b\u8bf7\u6c42\u65f6\u95f4\uff1a5 * 0.5s = 2.5\u79d2\n\n\u7d2f\u8ba1\u5f71\u54cd\uff1a\n  - \u539f\u672c50\u4e2a\u5e76\u53d1\u4efb\u52a1\u53ef\u5728 ~2\u79d2\u5b8c\u6210\uff08\u7406\u60f3\u60c5\u51b5\uff09\n  - \u5b9e\u9645\u8017\u65f6\uff1a2s + 1.5s + 5s + 3s + 2.5s = 14\u79d2\n</code></pre></p> <p>\u96ea\u5d29\u98ce\u9669\uff1a <pre><code>\u9ad8\u5e76\u53d1(50) \u00d7 \u9ad8\u91cd\u8bd5(3) \u00d7 \u9ad8\u5ef6\u8fdf(rate_limit) = \u7cfb\u7edf\u963b\u585e\n</code></pre></p>"},{"location":"advanced/concurrency_retry_analysis/#4","title":"4. \u5b9e\u9645\u6027\u80fd\u6d4b\u8bd5\u6570\u636e","text":""},{"location":"advanced/concurrency_retry_analysis/#41-visiondownloader","title":"4.1 VisionDownloader \u6027\u80fd\u7279\u5f81","text":"<p>\u914d\u7f6e\uff1a - \u5e76\u53d1\u6570\uff1a50 - \u4efb\u52a1\u6570\uff1a100 symbols \u00d7 31 days = 3100 tasks - \u91cd\u8bd5\u914d\u7f6e\uff1amax_retries=3, base_delay=0</p> <p>\u5b9e\u6d4b\u6570\u636e\uff08\u53c2\u8003\uff09\uff1a <pre><code>\u603b\u8017\u65f6: 150\u79d2\n\u4e0b\u8f7d\u65f6\u95f4: 45\u79d2 (30%)\n\u89e3\u6790\u65f6\u95f4: 30\u79d2 (20%)\n\u6570\u636e\u5e93\u65f6\u95f4: 15\u79d2 (10%)\n\u5176\u4ed6(\u7b49\u5f85/\u91cd\u8bd5): 60\u79d2 (40%)\n</code></pre></p> <p>\u74f6\u9888\u5206\u6790\uff1a 1. RateLimitManager \u9501\u7ade\u4e89 (~20\u79d2)    - 50\u4e2a\u534f\u7a0b\u7ade\u4e89 <code>asyncio.Lock()</code>    - \u6bcf\u6b21\u9501\u6301\u6709\u65f6\u95f4\uff1a~10-50ms    - \u7d2f\u8ba1\u4e32\u884c\u5316\u65f6\u95f4\uff1a50 \u00d7 10ms \u00d7 40 iterations \u2248 20\u79d2</p> <ol> <li>\u91cd\u8bd5\u5ef6\u8fdf (~20\u79d2)</li> <li>\u5047\u8bbe5%\u4efb\u52a1\u5931\u8d25\u5e76\u91cd\u8bd51\u6b21</li> <li> <p>155 tasks \u00d7 1.5s backoff \u2248 23\u79d2</p> </li> <li> <p>\u7f51\u7edc\u5ef6\u8fdf\u53d8\u5f02 (~20\u79d2)</p> </li> <li>\u90e8\u5206\u8bf7\u6c42\u8017\u65f6 &gt;2\u79d2\uff08\u957f\u5c3e\u5ef6\u8fdf\uff09</li> </ol>"},{"location":"advanced/concurrency_retry_analysis/#42-metricsdownloader","title":"4.2 MetricsDownloader \u6027\u80fd\u7279\u5f81","text":"<p>\u914d\u7f6e\uff1a - \u5e76\u53d1\u6570\uff1a5 - \u4efb\u52a1\u6570\uff1a100 symbols - \u91cd\u8bd5\u914d\u7f6e\uff1a\u9ed8\u8ba4 (max_retries=3, base_delay=1.0)</p> <p>\u5b9e\u6d4b\u6570\u636e\uff08\u53c2\u8003\uff09\uff1a <pre><code>\u603b\u8017\u65f6: 120\u79d2\n\u5e73\u5747\u6bcfsymbol: 1.2\u79d2\n\u6210\u529f\u7387: 95%\n</code></pre></p> <p>\u4f4e\u5e76\u53d1\u4f18\u52bf\uff1a - \u9501\u7ade\u4e89\u5c11\uff1a5\u4e2a\u534f\u7a0b\u4e89\u62a2\uff0c\u5f00\u9500\u53ef\u5ffd\u7565 - \u91cd\u8bd5\u6210\u672c\u5206\u644a\uff1a\u5931\u8d25\u4efb\u52a1\u4e0d\u4f1a\u963b\u585e\u5927\u91cf\u534f\u7a0b - API\u53cb\u597d\uff1a\u4e0d\u6613\u89e6\u53d1\u9891\u7387\u9650\u5236</p>"},{"location":"advanced/concurrency_retry_analysis/#5","title":"5. \u6f5c\u5728\u95ee\u9898\u4e0e\u98ce\u9669","text":""},{"location":"advanced/concurrency_retry_analysis/#51","title":"5.1 \u5171\u4eab\u72b6\u6001\u9694\u79bb\u95ee\u9898 \ud83d\udd34 \u9ad8\u98ce\u9669","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a <pre><code># \u573a\u666f\uff1a\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u4e0b\u8f7d\u5668\nvision_downloader = VisionDownloader(client, request_delay=0)\nmetrics_downloader = MetricsDownloader(client, request_delay=0.5)\n\n# \u5b83\u4eec\u5404\u81ea\u62e5\u6709\u72ec\u7acb\u7684 RateLimitManager\n# \u65e0\u6cd5\u611f\u77e5\u5f7c\u6b64\u7684\u8bf7\u6c42\u901f\u7387\n# \u53ef\u80fd\u5bfc\u81f4\u603b\u8bf7\u6c42\u901f\u7387\u8d85\u8fc7 1800/min \u9650\u5236\n</code></pre></p> <p>\u5f71\u54cd\uff1a - \u89e6\u53d1 API \u9891\u7387\u9650\u5236\uff08HTTP 429\uff09 - \u5bfc\u81f4\u6240\u6709\u4e0b\u8f7d\u5668\u540c\u65f6\u964d\u901f\uff0860-300\u79d2\u60e9\u7f5a\uff09 - \u8fde\u9501\u53cd\u5e94\uff1a\u4e00\u4e2a\u4e0b\u8f7d\u5668\u7684\u9519\u8bef\u5f71\u54cd\u5176\u4ed6\u4e0b\u8f7d\u5668</p> <p>\u89e3\u51b3\u65b9\u6848\uff1a <pre><code># \u65b9\u68481\uff1a\u5168\u5c40\u5355\u4f8b RateLimitManager\nclass GlobalRateLimitManager:\n    _instance = None\n\n    @classmethod\n    def get_instance(cls):\n        if cls._instance is None:\n            cls._instance = AsyncRateLimitManager(base_delay=0.5)\n        return cls._instance\n\n# \u65b9\u68482\uff1a\u5728\u521d\u59cb\u5316\u65f6\u5171\u4eab\u5b9e\u4f8b\nshared_rate_limiter = AsyncRateLimitManager(base_delay=0.5)\nvision_downloader = VisionDownloader(client, rate_limiter=shared_rate_limiter)\nmetrics_downloader = MetricsDownloader(client, rate_limiter=shared_rate_limiter)\n</code></pre></p>"},{"location":"advanced/concurrency_retry_analysis/#52","title":"5.2 \u8fde\u63a5\u6c60\u8017\u5c3d \ud83d\udfe1 \u4e2d\u98ce\u9669","text":"<p>\u95ee\u9898\uff1a <pre><code># vision_downloader.py\nconnector = aiohttp.TCPConnector(\n    limit=max_workers,  # \u5982\u679c max_workers=50\n    limit_per_host=max_workers,\n)\n</code></pre></p> <p>\u573a\u666f\uff1a - 50\u4e2a\u534f\u7a0b\u540c\u65f6\u4e0b\u8f7d - \u6bcf\u4e2a\u534f\u7a0b\u91cd\u8bd53\u6b21 - \u6700\u574f\u60c5\u51b5\uff1a50 \u00d7 3 = 150 \u4e2a\u8fde\u63a5\u9700\u6c42\uff08\u8d85\u8fc7\u6c60\u5927\u5c0f\uff09</p> <p>\u75c7\u72b6\uff1a <pre><code>Connector is closed\nConnection pool is exhausted\n</code></pre></p> <p>\u5f53\u524d\u89e3\u51b3\u65b9\u6848\uff1a \u2705 \u5df2\u4fee\u590d - <code>force_close=False</code> + <code>keepalive_timeout=30</code> - \u5141\u8bb8\u8fde\u63a5\u590d\u7528\uff0c\u964d\u4f4e\u5cf0\u503c\u9700\u6c42</p>"},{"location":"advanced/concurrency_retry_analysis/#53","title":"5.3 \u5185\u5b58\u6cc4\u6f0f\u98ce\u9669 \ud83d\udfe1 \u4e2d\u98ce\u9669","text":"<p>\u95ee\u9898\uff1a <pre><code>self.failed_downloads: dict[str, list[dict]] = {}\n</code></pre></p> <p>\u573a\u666f\uff1a - \u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4e0b\u8f7d\u4efb\u52a1 - \u5927\u91cf\u5931\u8d25\u8bb0\u5f55\u7d2f\u79ef - \u6bcf\u4e2a\u5931\u8d25\u8bb0\u5f55\u5305\u542b metadata\uff08\u53ef\u80fd\u5305\u542b\u5927\u5bf9\u8c61\uff09</p> <p>\u5f71\u54cd\uff1a - \u5185\u5b58\u5360\u7528\u6301\u7eed\u589e\u957f - GC\u538b\u529b\u589e\u52a0</p> <p>\u5efa\u8bae\uff1a <pre><code># \u9650\u5236\u5931\u8d25\u8bb0\u5f55\u6570\u91cf\nMAX_FAILED_RECORDS = 1000\n\ndef _record_failed_download(self, symbol: str, error: str, metadata: dict):\n    if len(self.failed_downloads) &gt;= MAX_FAILED_RECORDS:\n        # \u79fb\u9664\u6700\u65e9\u7684\u8bb0\u5f55\n        oldest_symbol = next(iter(self.failed_downloads))\n        del self.failed_downloads[oldest_symbol]\n    # ... \u6dfb\u52a0\u65b0\u8bb0\u5f55\n</code></pre></p>"},{"location":"advanced/concurrency_retry_analysis/#54","title":"5.4 \u6b7b\u9501\u98ce\u9669 \ud83d\udfe2 \u4f4e\u98ce\u9669","text":"<p>\u573a\u666f\uff1a \u7406\u8bba\u4e0a\u53ef\u80fd\uff0c\u5b9e\u9645\u672a\u89c2\u5bdf\u5230</p> <pre><code># \u5d4c\u5957\u9501\u987a\u5e8f\u4e0d\u4e00\u81f4\u53ef\u80fd\u5bfc\u81f4\u6b7b\u9501\nasync with session_lock:\n    async with rate_limiter.lock:  # \u9501\u987a\u5e8f1\n        ...\n\nasync with rate_limiter.lock:  # \u9501\u987a\u5e8f2\n    async with session_lock:\n        ...\n</code></pre> <p>\u5f53\u524d\u72b6\u6001\uff1a \u2705 \u5b89\u5168 - \u9501\u4f7f\u7528\u660e\u786e\u5206\u79bb - <code>session_lock</code> \u4ec5\u5728 <code>_get_session()</code> \u548c <code>_close_session()</code> - <code>rate_limiter.lock</code> \u4ec5\u5728\u901f\u7387\u63a7\u5236\u65b9\u6cd5\u5185\u90e8</p>"},{"location":"advanced/concurrency_retry_analysis/#6","title":"6. \u4f18\u5316\u5efa\u8bae","text":""},{"location":"advanced/concurrency_retry_analysis/#61","title":"6.1 \u77ed\u671f\u4f18\u5316\uff08\u4f4e\u6210\u672c\uff09","text":""},{"location":"advanced/concurrency_retry_analysis/#611","title":"6.1.1 \u542f\u7528\u5168\u5c40\u901f\u7387\u9650\u5236\u7ba1\u7406\u5668","text":"<pre><code># src/cryptoservice/services/downloaders/__init__.py\n_global_rate_limiter = None\n\ndef get_shared_rate_limiter():\n    global _global_rate_limiter\n    if _global_rate_limiter is None:\n        _global_rate_limiter = AsyncRateLimitManager(base_delay=0.5)\n    return _global_rate_limiter\n\n# base_downloader.py\nclass BaseDownloader(ABC):\n    def __init__(self, client: AsyncClient, request_delay: float = 0.5,\n                 shared_rate_limiter: AsyncRateLimitManager | None = None):\n        if shared_rate_limiter:\n            self.async_rate_limit_manager = shared_rate_limiter\n        else:\n            self.async_rate_limit_manager = AsyncRateLimitManager(base_delay=request_delay)\n</code></pre> <p>\u6536\u76ca\uff1a - \u9632\u6b62\u591a\u4e2a\u4e0b\u8f7d\u5668\u540c\u65f6\u89e6\u53d1\u9891\u7387\u9650\u5236 - \u66f4\u51c6\u786e\u7684\u5168\u5c40\u8bf7\u6c42\u901f\u7387\u63a7\u5236</p>"},{"location":"advanced/concurrency_retry_analysis/#612","title":"6.1.2 \u6dfb\u52a0\u5931\u8d25\u8bb0\u5f55\u4e0a\u9650","text":"<pre><code>MAX_FAILED_RECORDS_PER_SYMBOL = 10\n\ndef _record_failed_download(self, symbol: str, error: str, metadata: dict):\n    if symbol not in self.failed_downloads:\n        self.failed_downloads[symbol] = []\n\n    # \u9650\u5236\u6bcf\u4e2asymbol\u7684\u5931\u8d25\u8bb0\u5f55\u6570\u91cf\n    if len(self.failed_downloads[symbol]) &gt;= MAX_FAILED_RECORDS_PER_SYMBOL:\n        self.failed_downloads[symbol].pop(0)  # \u79fb\u9664\u6700\u65e9\u7684\u8bb0\u5f55\n\n    self.failed_downloads[symbol].append({...})\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#613","title":"6.1.3 \u4f18\u5316\u91cd\u8bd5\u914d\u7f6e","text":"<pre><code># vision_downloader.py - \u9002\u5408\u9ad8\u5e76\u53d1\u4f4e\u5ef6\u8fdf\nretry_config = RetryConfig(\n    max_retries=2,          # \u964d\u4f4e\u52302\u6b21\uff08\u51cf\u5c11\u91cd\u8bd5\u98ce\u66b4\uff09\n    base_delay=0.1,         # \u6dfb\u52a0\u5c0f\u5ef6\u8fdf\uff08\u907f\u514d\u7acb\u5373\u91cd\u8bd5\uff09\n    backoff_multiplier=1.5, # \u964d\u4f4e\u500d\u6570\uff08\u51cf\u5c11\u540e\u671f\u5ef6\u8fdf\uff09\n    jitter=True\n)\n\n# metrics_downloader.py - \u9002\u5408\u4f4e\u5e76\u53d1\u9ad8\u53ef\u9760\nretry_config = RetryConfig(\n    max_retries=3,\n    base_delay=1.0,\n    backoff_multiplier=2.0,\n    jitter=True\n)\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#62","title":"6.2 \u4e2d\u671f\u4f18\u5316\uff08\u4e2d\u7b49\u6210\u672c\uff09","text":""},{"location":"advanced/concurrency_retry_analysis/#621","title":"6.2.1 \u5b9e\u73b0\u81ea\u9002\u5e94\u5e76\u53d1\u63a7\u5236","text":"<pre><code>class AdaptiveSemaphore:\n    \"\"\"\u6839\u636e\u9519\u8bef\u7387\u52a8\u6001\u8c03\u6574\u5e76\u53d1\u6570\"\"\"\n\n    def __init__(self, initial_limit: int, min_limit: int = 5, max_limit: int = 100):\n        self.current_limit = initial_limit\n        self.min_limit = min_limit\n        self.max_limit = max_limit\n        self.semaphore = asyncio.Semaphore(initial_limit)\n        self.error_rate = 0.0\n        self.success_count = 0\n        self.error_count = 0\n\n    async def acquire(self):\n        await self.semaphore.acquire()\n\n    def release(self, success: bool):\n        self.semaphore.release()\n\n        if success:\n            self.success_count += 1\n        else:\n            self.error_count += 1\n\n        # \u6bcf100\u4e2a\u8bf7\u6c42\u8c03\u6574\u4e00\u6b21\n        if (self.success_count + self.error_count) % 100 == 0:\n            self.adjust_limit()\n\n    def adjust_limit(self):\n        total = self.success_count + self.error_count\n        self.error_rate = self.error_count / total if total &gt; 0 else 0\n\n        if self.error_rate &gt; 0.1:  # \u9519\u8bef\u7387 &gt;10%\n            new_limit = max(self.min_limit, int(self.current_limit * 0.8))\n            logger.info(f\"\u964d\u4f4e\u5e76\u53d1\u6570: {self.current_limit} -&gt; {new_limit}\")\n        elif self.error_rate &lt; 0.02:  # \u9519\u8bef\u7387 &lt;2%\n            new_limit = min(self.max_limit, int(self.current_limit * 1.2))\n            logger.info(f\"\u63d0\u9ad8\u5e76\u53d1\u6570: {self.current_limit} -&gt; {new_limit}\")\n        else:\n            return\n\n        self.current_limit = new_limit\n        self._rebuild_semaphore()\n\n        # \u91cd\u7f6e\u8ba1\u6570\n        self.success_count = 0\n        self.error_count = 0\n</code></pre> <p>\u6536\u76ca\uff1a - \u81ea\u52a8\u9002\u5e94\u7f51\u7edc\u6761\u4ef6 - \u9519\u8bef\u7387\u9ad8\u65f6\u964d\u4f4e\u5e76\u53d1\uff08\u4fdd\u62a4\u7cfb\u7edf\uff09 - \u9519\u8bef\u7387\u4f4e\u65f6\u63d0\u9ad8\u5e76\u53d1\uff08\u63d0\u5347\u541e\u5410\u91cf\uff09</p>"},{"location":"advanced/concurrency_retry_analysis/#622","title":"6.2.2 \u5b9e\u73b0\u8bf7\u6c42\u961f\u5217\u4f18\u5148\u7ea7","text":"<pre><code>class PriorityRateLimiter:\n    \"\"\"\u652f\u6301\u4f18\u5148\u7ea7\u7684\u901f\u7387\u9650\u5236\u5668\"\"\"\n\n    def __init__(self, base_delay: float = 0.5):\n        self.base_delay = base_delay\n        self.high_priority_queue = asyncio.Queue()\n        self.normal_priority_queue = asyncio.Queue()\n        self.worker_task = None\n\n    async def start(self):\n        self.worker_task = asyncio.create_task(self._worker())\n\n    async def _worker(self):\n        while True:\n            # \u4f18\u5148\u5904\u7406\u9ad8\u4f18\u5148\u7ea7\u8bf7\u6c42\n            try:\n                request = self.high_priority_queue.get_nowait()\n            except asyncio.QueueEmpty:\n                try:\n                    request = await asyncio.wait_for(\n                        self.normal_priority_queue.get(),\n                        timeout=0.1\n                    )\n                except asyncio.TimeoutError:\n                    continue\n\n            await asyncio.sleep(self.base_delay)\n            request.set()  # \u901a\u77e5\u8bf7\u6c42\u53ef\u4ee5\u6267\u884c\n\n    async def wait_before_request(self, priority: str = \"normal\"):\n        event = asyncio.Event()\n        if priority == \"high\":\n            await self.high_priority_queue.put(event)\n        else:\n            await self.normal_priority_queue.put(event)\n        await event.wait()\n</code></pre> <p>\u5e94\u7528\u573a\u666f\uff1a - \u5173\u952e\u6570\u636e\uff08\u8d44\u91d1\u8d39\u7387\uff09\u9ad8\u4f18\u5148\u7ea7 - \u5386\u53f2\u6570\u636e\uff08Vision\u4e0b\u8f7d\uff09\u666e\u901a\u4f18\u5148\u7ea7 - \u8865\u5145\u6570\u636e\uff08\u957f\u5c3esymbol\uff09\u4f4e\u4f18\u5148\u7ea7</p>"},{"location":"advanced/concurrency_retry_analysis/#63","title":"6.3 \u957f\u671f\u4f18\u5316\uff08\u9ad8\u6210\u672c\uff09","text":""},{"location":"advanced/concurrency_retry_analysis/#631","title":"6.3.1 \u5206\u5e03\u5f0f\u901f\u7387\u9650\u5236","text":"<pre><code># \u4f7f\u7528 Redis \u5b9e\u73b0\u8de8\u8fdb\u7a0b\u901f\u7387\u9650\u5236\nclass DistributedRateLimiter:\n    def __init__(self, redis_url: str, key_prefix: str = \"rate_limit\"):\n        self.redis = aioredis.from_url(redis_url)\n        self.key_prefix = key_prefix\n\n    async def wait_before_request(self):\n        key = f\"{self.key_prefix}:request_count\"\n        pipe = self.redis.pipeline()\n\n        # \u539f\u5b50\u64cd\u4f5c\uff1a\u9012\u589e\u8ba1\u6570\u5e76\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n        pipe.incr(key)\n        pipe.expire(key, 60)  # 60\u79d2\u7a97\u53e3\n\n        count, _ = await pipe.execute()\n\n        if count &gt; 1800:  # \u8d85\u8fc7\u9650\u5236\n            wait_time = 60 - (time.time() % 60)  # \u7b49\u5f85\u5230\u4e0b\u4e00\u4e2a\u7a97\u53e3\n            await asyncio.sleep(wait_time)\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#632","title":"6.3.2 \u65ad\u8def\u5668\u6a21\u5f0f","text":"<pre><code>class CircuitBreaker:\n    \"\"\"\u9632\u6b62\u96ea\u5d29\u7684\u65ad\u8def\u5668\"\"\"\n\n    def __init__(self, failure_threshold: int = 5, timeout: float = 60):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.failures = 0\n        self.state = \"CLOSED\"  # CLOSED, OPEN, HALF_OPEN\n        self.last_failure_time = 0\n\n    async def call(self, func, *args, **kwargs):\n        if self.state == \"OPEN\":\n            if time.time() - self.last_failure_time &gt; self.timeout:\n                self.state = \"HALF_OPEN\"\n                logger.info(\"\u65ad\u8def\u5668\u8fdb\u5165\u534a\u5f00\u72b6\u6001\uff0c\u5c1d\u8bd5\u8bf7\u6c42\")\n            else:\n                raise CircuitBreakerOpenError(\"\u65ad\u8def\u5668\u5f00\u542f\uff0c\u62d2\u7edd\u8bf7\u6c42\")\n\n        try:\n            result = await func(*args, **kwargs)\n            self._on_success()\n            return result\n        except Exception as e:\n            self._on_failure()\n            raise e\n\n    def _on_success(self):\n        if self.state == \"HALF_OPEN\":\n            self.state = \"CLOSED\"\n            logger.info(\"\u65ad\u8def\u5668\u5173\u95ed\uff0c\u6062\u590d\u6b63\u5e38\")\n        self.failures = 0\n\n    def _on_failure(self):\n        self.failures += 1\n        self.last_failure_time = time.time()\n\n        if self.failures &gt;= self.failure_threshold:\n            self.state = \"OPEN\"\n            logger.warning(f\"\u65ad\u8def\u5668\u5f00\u542f\uff0c\u8fde\u7eed\u5931\u8d25{self.failures}\u6b21\")\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#7","title":"7. \u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":""},{"location":"advanced/concurrency_retry_analysis/#71","title":"7.1 \u5e76\u53d1\u6570\u9009\u62e9\u6307\u5357","text":"\u573a\u666f \u63a8\u8350\u5e76\u53d1\u6570 \u7406\u7531 Vision S3 \u4e0b\u8f7d 30-50 \u9ad8\u5e26\u5bbd\uff0c\u4f4e\u5ef6\u8fdf\uff0c\u65e0\u4e25\u683c\u9650\u5236 Binance API\uff08\u8ba4\u8bc1\uff09 3-5 \u4e25\u683c\u9650\u5236\uff0c\u91cd\u8bd5\u6210\u672c\u9ad8 Binance API\uff08\u516c\u5f00\uff09 10-20 \u4e2d\u7b49\u9650\u5236\uff0c\u5e73\u8861\u6548\u7387\u4e0e\u7a33\u5b9a\u6027 \u6570\u636e\u5e93\u5199\u5165 10-15 \u907f\u514d\u9501\u7ade\u4e89\uff0c\u4fdd\u62a4\u78c1\u76d8IO"},{"location":"advanced/concurrency_retry_analysis/#72","title":"7.2 \u91cd\u8bd5\u914d\u7f6e\u6307\u5357","text":"\u6570\u636e\u7c7b\u578b max_retries base_delay \u7406\u7531 \u5173\u952e\u5b9e\u65f6\u6570\u636e 5 2.0s \u9ad8\u53ef\u9760\u6027\u8981\u6c42\uff0c\u5141\u8bb8\u957f\u65f6\u95f4\u91cd\u8bd5 \u5386\u53f2\u6570\u636e 2 0.5s \u53ef\u5bb9\u5fcd\u90e8\u5206\u5931\u8d25\uff0c\u5feb\u901f\u5931\u8d25 \u8865\u5145\u6570\u636e 1 0.1s \u4f4e\u4f18\u5148\u7ea7\uff0c\u5931\u8d25\u5373\u653e\u5f03"},{"location":"advanced/concurrency_retry_analysis/#73","title":"7.3 \u76d1\u63a7\u6307\u6807","text":"<p>\u5fc5\u987b\u76d1\u63a7\uff1a 1. \u5e76\u53d1\u534f\u7a0b\u6570\u91cf\uff08\u5b9e\u65f6\uff09 2. \u901f\u7387\u9650\u5236\u89e6\u53d1\u6b21\u6570\uff08\u6bcf\u5c0f\u65f6\uff09 3. \u91cd\u8bd5\u6b21\u6570\u5206\u5e03\uff08P50, P95, P99\uff09 4. \u8bf7\u6c42\u5ef6\u8fdf\u5206\u5e03 5. \u5931\u8d25\u7387\uff08\u6309\u9519\u8bef\u7c7b\u578b\u5206\u7c7b\uff09 6. \u8fde\u63a5\u6c60\u4f7f\u7528\u7387</p> <p>\u544a\u8b66\u9608\u503c\uff1a - \u901f\u7387\u9650\u5236\u89e6\u53d1 &gt;3\u6b21/\u5c0f\u65f6 \u2192 \u964d\u4f4e\u5e76\u53d1\u6216\u589e\u52a0\u5ef6\u8fdf - \u91cd\u8bd5\u7387 &gt;10% \u2192 \u68c0\u67e5\u7f51\u7edc\u6216API\u72b6\u6001 - \u8fde\u63a5\u6c60\u4f7f\u7528\u7387 &gt;90% \u2192 \u589e\u52a0\u8fde\u63a5\u6c60\u5927\u5c0f\u6216\u964d\u4f4e\u5e76\u53d1</p>"},{"location":"advanced/concurrency_retry_analysis/#8","title":"8. \u7ed3\u8bba","text":""},{"location":"advanced/concurrency_retry_analysis/#81","title":"8.1 \u7cfb\u7edf\u4f18\u52bf","text":"<ol> <li>\u2705 \u591a\u5c42\u9632\u62a4\uff1aSemaphore + RateLimiter + Retry \u63d0\u4f9b\u5168\u9762\u7684\u6d41\u91cf\u63a7\u5236</li> <li>\u2705 \u81ea\u9002\u5e94\u8c03\u6574\uff1a\u52a8\u6001\u5ef6\u8fdf\u548c\u9000\u907f\u7b56\u7565\u80fd\u5e94\u5bf9API\u9650\u5236\u53d8\u5316</li> <li>\u2705 \u9519\u8bef\u5206\u7c7b\uff1a\u667a\u80fd\u8bc6\u522b\u53ef\u91cd\u8bd5\u9519\u8bef\uff0c\u907f\u514d\u65e0\u6548\u91cd\u8bd5</li> <li>\u2705 \u534f\u7a0b\u53cb\u597d\uff1a\u4f7f\u7528 <code>asyncio.Lock()</code> \u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168</li> </ol>"},{"location":"advanced/concurrency_retry_analysis/#82","title":"8.2 \u4e3b\u8981\u98ce\u9669","text":"<ol> <li>\ud83d\udd34 \u901f\u7387\u9650\u5236\u7ba1\u7406\u5668\u9694\u79bb\uff1a\u591a\u4e2a\u4e0b\u8f7d\u5668\u5b9e\u4f8b\u65e0\u6cd5\u5171\u4eab\u72b6\u6001</li> <li>\ud83d\udfe1 \u91cd\u8bd5\u4e58\u6cd5\u6548\u5e94\uff1a\u9ad8\u5e76\u53d1 \u00d7 \u9ad8\u91cd\u8bd5\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u963b\u585e</li> <li>\ud83d\udfe1 \u5185\u5b58\u6cc4\u6f0f\u98ce\u9669\uff1a\u5931\u8d25\u8bb0\u5f55\u65e0\u9650\u7d2f\u79ef</li> </ol>"},{"location":"advanced/concurrency_retry_analysis/#83","title":"8.3 \u4f18\u5148\u6539\u8fdb\u9879","text":"<p>P0\uff08\u7acb\u5373\uff09\uff1a - \u5b9e\u73b0\u5168\u5c40\u5355\u4f8b RateLimitManager - \u6dfb\u52a0\u5931\u8d25\u8bb0\u5f55\u4e0a\u9650</p> <p>P1\uff08\u672c\u5468\uff09\uff1a - \u4f18\u5316 VisionDownloader \u91cd\u8bd5\u914d\u7f6e\uff08\u964d\u4f4e max_retries\uff09 - \u6dfb\u52a0\u5e76\u53d1\u6570\u548c\u91cd\u8bd5\u76d1\u63a7\u6307\u6807</p> <p>P2\uff08\u672c\u6708\uff09\uff1a - \u5b9e\u73b0\u81ea\u9002\u5e94\u5e76\u53d1\u63a7\u5236 - \u6dfb\u52a0\u65ad\u8def\u5668\u6a21\u5f0f</p>"},{"location":"advanced/concurrency_retry_analysis/#84","title":"8.4 \u6027\u80fd\u9884\u671f","text":"<p>\u4f18\u5316\u524d\uff1a - 3100 tasks, 50 workers: ~150\u79d2 - \u6210\u529f\u7387: 95% - \u91cd\u8bd5\u7387: 5%</p> <p>\u4f18\u5316\u540e\uff08\u9884\u671f\uff09\uff1a - 3100 tasks, \u81ea\u9002\u5e94 30-50 workers: ~100\u79d2 - \u6210\u529f\u7387: 98% - \u91cd\u8bd5\u7387: 2% - \u901f\u7387\u9650\u5236\u89e6\u53d1: 0\u6b21/\u5c0f\u65f6</p>"},{"location":"advanced/concurrency_retry_analysis/#_3","title":"\u9644\u5f55","text":""},{"location":"advanced/concurrency_retry_analysis/#a","title":"A. \u5173\u952e\u4ee3\u7801\u8def\u5f84","text":"<pre><code>\u8bf7\u6c42\u6d41\u7a0b\uff1a\n1. download_metrics_batch()\n   \u2192 \u521b\u5efa semaphore \u548c tasks\n2. asyncio.gather(*tasks)\n   \u2192 \u5e76\u53d1\u6267\u884c\u6240\u6709\u4efb\u52a1\n3. _download_and_process_symbol_for_date()\n   \u2192 async with semaphore\uff08\u83b7\u53d6\u5e76\u53d1\u69fd\u4f4d\uff09\n4. _download_and_parse_metrics_csv()\n   \u2192 \u8c03\u7528 _handle_async_request_with_retry()\n5. _handle_async_request_with_retry()\n   \u2192 await rate_limiter.wait_before_request()\n   \u2192 await request_func()\n   \u2192 \u9519\u8bef\u5904\u7406 + \u91cd\u8bd5\u903b\u8f91\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#b","title":"B. \u914d\u7f6e\u53c2\u6570\u901f\u67e5","text":"<pre><code># RetryConfig\nmax_retries: int = 3          # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\nbase_delay: float = 1.0       # \u57fa\u7840\u5ef6\u8fdf\uff08\u79d2\uff09\nmax_delay: float = 60.0       # \u6700\u5927\u5ef6\u8fdf\uff08\u79d2\uff09\nbackoff_multiplier: float = 2.0  # \u9000\u907f\u500d\u6570\njitter: bool = True           # \u662f\u5426\u6dfb\u52a0\u6296\u52a8\n\n# AsyncRateLimitManager\nbase_delay: float = 0.5       # \u8bf7\u6c42\u95f4\u9694\uff08\u79d2\uff09\nmax_requests_per_minute: int = 1800  # \u8bf7\u6c42\u901f\u7387\u4e0a\u9650\n\n# Semaphore\nmax_workers: int              # \u6700\u5927\u5e76\u53d1\u6570\uff08\u53ef\u53d8\uff09\n\n# TCPConnector\nlimit: int                    # \u5168\u5c40\u8fde\u63a5\u6c60\u5927\u5c0f\nlimit_per_host: int           # \u5355\u4e3b\u673a\u8fde\u63a5\u6570\nkeepalive_timeout: int = 30   # \u8fde\u63a5\u4fdd\u6d3b\u65f6\u95f4\uff08\u79d2\uff09\nforce_close: bool = False     # \u662f\u5426\u5f3a\u5236\u5173\u95ed\u8fde\u63a5\n</code></pre>"},{"location":"advanced/concurrency_retry_analysis/#c","title":"C. \u6545\u969c\u6392\u67e5\u68c0\u67e5\u6e05\u5355","text":"<p>\u95ee\u9898\uff1a\u9891\u7e41\u89e6\u53d1\u901f\u7387\u9650\u5236 - [ ] \u68c0\u67e5\u662f\u5426\u591a\u4e2a\u4e0b\u8f7d\u5668\u5b9e\u4f8b\u540c\u65f6\u8fd0\u884c - [ ] \u68c0\u67e5 <code>base_delay</code> \u662f\u5426\u8db3\u591f\u5927\uff08\u5efa\u8bae \u22650.5\u79d2\uff09 - [ ] \u68c0\u67e5\u5e76\u53d1\u6570\u662f\u5426\u8fc7\u9ad8 - [ ] \u68c0\u67e5\u91cd\u8bd5\u914d\u7f6e\u662f\u5426\u5bfc\u81f4\u8bf7\u6c42\u98ce\u66b4</p> <p>\u95ee\u9898\uff1a\u5927\u91cf\u8fde\u63a5\u9519\u8bef - [ ] \u68c0\u67e5 <code>force_close</code> \u8bbe\u7f6e\uff08\u5e94\u4e3a False\uff09 - [ ] \u68c0\u67e5\u8fde\u63a5\u6c60\u5927\u5c0f\u662f\u5426\u5339\u914d\u5e76\u53d1\u6570 - [ ] \u68c0\u67e5 <code>keepalive_timeout</code> \u8bbe\u7f6e - [ ] \u68c0\u67e5\u7f51\u7edc\u7a33\u5b9a\u6027</p> <p>\u95ee\u9898\uff1a\u5185\u5b58\u6301\u7eed\u589e\u957f - [ ] \u68c0\u67e5 <code>failed_downloads</code> \u5927\u5c0f - [ ] \u68c0\u67e5\u662f\u5426\u6709\u534f\u7a0b\u6cc4\u6f0f\uff08\u672a\u6b63\u786e\u91ca\u653e\uff09 - [ ] \u68c0\u67e5\u5927\u5bf9\u8c61\u662f\u5426\u6b63\u786e\u91ca\u653e</p> <p>\u62a5\u544a\u751f\u6210\u65f6\u95f4\uff1a 2025-10-18 \u5206\u6790\u7248\u672c\uff1a v1.14.2 \u5206\u6790\u4eba\u5458\uff1a Claude (AI Assistant)</p>"},{"location":"advanced/refactoring_time_utils/","title":"\u65f6\u95f4\u5904\u7406\u51fd\u6570\u7edf\u4e00\u91cd\u6784\u6587\u6863","text":""},{"location":"advanced/refactoring_time_utils/#_2","title":"\ud83c\udfaf \u91cd\u6784\u76ee\u6807","text":"<p>\u5c06\u6240\u6709\u5206\u6563\u5728\u5404\u4e2a\u6587\u4ef6\u4e2d\u7684\u65f6\u95f4\u5904\u7406\u51fd\u6570\u7edf\u4e00\u5230 <code>utils/time_utils.py</code>\uff0c\u5b9e\u73b0\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u786e\u4fdd\u6240\u6709\u65f6\u95f4\u5904\u7406\u903b\u8f91\u6709\u7edf\u4e00\u7684\u7ef4\u62a4\u70b9\u3002</p>"},{"location":"advanced/refactoring_time_utils/#_3","title":"\ud83d\udccb \u91cd\u6784\u524d\u7684\u95ee\u9898","text":""},{"location":"advanced/refactoring_time_utils/#1","title":"1. \u4ee3\u7801\u91cd\u590d","text":"<p>\u5728\u81f3\u5c11 5 \u4e2a\u6587\u4ef6\u4e2d\u5b58\u5728\u76f8\u540c\u7684\u65f6\u95f4\u8f6c\u6362\u903b\u8f91\uff1a - <code>services/market_service.py</code> - <code>services/downloaders/base_downloader.py</code> - <code>services/downloaders/kline_downloader.py</code> - <code>services/downloaders/metrics_downloader.py</code> - <code>models/universe.py</code></p>"},{"location":"advanced/refactoring_time_utils/#2","title":"2. \u7ef4\u62a4\u56f0\u96be","text":"<p>\u5982\u679c\u9700\u8981\u4fee\u6539\u65f6\u95f4\u5904\u7406\u903b\u8f91\uff08\u5982\u65f6\u533a\u95ee\u9898\uff09\uff0c\u9700\u8981\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u540c\u6b65\u4fee\u6539\u3002</p>"},{"location":"advanced/refactoring_time_utils/#3","title":"3. \u6d4b\u8bd5\u5197\u4f59","text":"<p>\u9700\u8981\u5728\u591a\u4e2a\u5730\u65b9\u6d4b\u8bd5\u76f8\u540c\u7684\u65f6\u95f4\u8f6c\u6362\u903b\u8f91\u3002</p>"},{"location":"advanced/refactoring_time_utils/#_4","title":"\u2705 \u91cd\u6784\u65b9\u6848","text":""},{"location":"advanced/refactoring_time_utils/#_5","title":"\u521b\u5efa\u7edf\u4e00\u7684\u65f6\u95f4\u5de5\u5177\u5e93","text":"<p>\u4f4d\u7f6e: <code>src/cryptoservice/utils/time_utils.py</code></p> <p>\u63d0\u4f9b\u7684\u6838\u5fc3\u51fd\u6570: <pre><code>def date_to_timestamp_start(date: str) -&gt; int\ndef date_to_timestamp_end(date: str) -&gt; int\ndef datetime_str_to_timestamp(datetime_str: str, fmt: str = \"%Y-%m-%d %H:%M:%S\") -&gt; int\ndef timestamp_to_datetime(timestamp: int | str, unit: str = \"ms\") -&gt; datetime\ndef timestamp_to_date_str(timestamp: int | str, unit: str = \"ms\") -&gt; str\ndef parse_date_safe(date_str: str) -&gt; pd.Timestamp\ndef now_utc() -&gt; datetime\ndef now_utc_timestamp() -&gt; int\ndef generate_date_range(start_date: str, end_date: str, freq: str = \"D\") -&gt; pd.DatetimeIndex\ndef is_timezone_aware(dt: datetime) -&gt; bool\n</code></pre></p>"},{"location":"advanced/refactoring_time_utils/#_6","title":"\ud83d\udd04 \u91cd\u6784\u8be6\u60c5","text":""},{"location":"advanced/refactoring_time_utils/#1-market_servicepy","title":"1. market_service.py","text":"<p>\u4e4b\u524d (18 \u884c): <pre><code>def _date_to_timestamp_start(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5f53\u5929\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    from datetime import UTC\n\n    timestamp = int(\n        datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\")\n        .replace(tzinfo=UTC).timestamp() * 1000\n    )\n    return str(timestamp)\n\ndef _date_to_timestamp_end(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6b21\u65e5\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    import pandas as pd\n\n    timestamp = int(\n        (pd.Timestamp(date, tz=\"UTC\") + pd.Timedelta(days=1))\n        .timestamp() * 1000\n    )\n    return str(timestamp)\n</code></pre></p> <p>\u4e4b\u540e (10 \u884c): <pre><code>def _date_to_timestamp_start(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5f53\u5929\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_start\n    return str(date_to_timestamp_start(date))\n\ndef _date_to_timestamp_end(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6b21\u65e5\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_end\n    return str(date_to_timestamp_end(date))\n</code></pre></p> <p>\u4ee3\u7801\u7b80\u5316: 44% (18\u884c -&gt; 10\u884c)</p>"},{"location":"advanced/refactoring_time_utils/#2-base_downloaderpy","title":"2. base_downloader.py","text":"<p>\u4e4b\u524d (24 \u884c\uff0c\u5305\u542b\u8be6\u7ec6\u6ce8\u91ca): <pre><code>def _date_to_timestamp_start(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5f53\u5929\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    from datetime import UTC, datetime\n\n    # \u4f7f\u7528 UTC \u65f6\u533a\uff0c\u786e\u4fdd\u4e0e\u589e\u91cf\u68c0\u6d4b\u903b\u8f91\u4e00\u81f4\n    timestamp = int(\n        datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\")\n        .replace(tzinfo=UTC).timestamp() * 1000\n    )\n    return str(timestamp)\n\ndef _date_to_timestamp_end(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6b21\u65e5\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\n\n    \u4f7f\u7528\u6b21\u65e5 00:00:00 \u800c\u4e0d\u662f\u5f53\u5929 23:59:59\uff0c\u4ee5\u786e\u4fdd\uff1a\n    1. \u5305\u542b\u5f53\u5929\u6700\u540e\u4e00\u4e2a\u5b8c\u6574\u7684K\u7ebf\u5468\u671f\uff08\u4f8b\u5982 23:55:00 \u76845\u5206\u949fK\u7ebf\uff09\n    2. \u4e0e\u589e\u91cf\u4e0b\u8f7d\u68c0\u6d4b\u7684\u65f6\u95f4\u8303\u56f4\u4fdd\u6301\u4e00\u81f4\n    \"\"\"\n    from datetime import UTC, datetime, timedelta\n\n    # \u89e3\u6790\u65e5\u671f\u5e76\u52a01\u5929\uff0c\u4f7f\u7528 UTC \u65f6\u533a\n    date_obj = datetime.strptime(date, \"%Y-%m-%d\").replace(tzinfo=UTC)\n    next_day = date_obj + timedelta(days=1)\n    timestamp = int(next_day.timestamp() * 1000)\n    return str(timestamp)\n</code></pre></p> <p>\u4e4b\u540e (14 \u884c): <pre><code>def _date_to_timestamp_start(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5f53\u5929\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_start\n    return str(date_to_timestamp_start(date))\n\ndef _date_to_timestamp_end(self, date: str) -&gt; str:\n    \"\"\"\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6b21\u65e5\u5f00\u59cb\u7684\u65f6\u95f4\u6233\uff08UTC\uff09.\n\n    \u4f7f\u7528\u6b21\u65e5 00:00:00 \u800c\u4e0d\u662f\u5f53\u5929 23:59:59\uff0c\u786e\u4fdd\u4e0e\u589e\u91cf\u4e0b\u8f7d\u903b\u8f91\u4e00\u81f4\u3002\n    \"\"\"\n    from cryptoservice.utils import date_to_timestamp_end\n    return str(date_to_timestamp_end(date))\n</code></pre></p> <p>\u4ee3\u7801\u7b80\u5316: 42% (24\u884c -&gt; 14\u884c)</p>"},{"location":"advanced/refactoring_time_utils/#3-kline_downloaderpy","title":"3. kline_downloader.py","text":"<p>\u91cd\u6784\u6a21\u5f0f\u4e0e <code>base_downloader.py</code> \u76f8\u540c\u3002</p>"},{"location":"advanced/refactoring_time_utils/#4-metrics_downloaderpy","title":"4. metrics_downloader.py","text":"<p>\u91cd\u6784\u6a21\u5f0f\u4e0e <code>base_downloader.py</code> \u76f8\u540c\u3002</p>"},{"location":"advanced/refactoring_time_utils/#5-modelsuniversepy","title":"5. models/universe.py","text":"<p>\u4e4b\u524d: <pre><code>@staticmethod\ndef _calculate_timestamp(date_str: str, time_str: str = \"00:00:00\") -&gt; str:\n    \"\"\"\u8ba1\u7b97\u65e5\u671f\u7684\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09.\"\"\"\n    from datetime import UTC, datetime\n\n    return str(\n        int(datetime.strptime(f\"{date_str} {time_str}\", \"%Y-%m-%d %H:%M:%S\")\n        .replace(tzinfo=UTC).timestamp() * 1000)\n    )\n\n@staticmethod\ndef _calculate_end_timestamp(date_str: str) -&gt; str:\n    \"\"\"\u8ba1\u7b97\u65e5\u671f\u7ed3\u675f\u65f6\u95f4\u6233\uff08\u6b21\u65e500:00:00\u7684\u6beb\u79d2\u65f6\u95f4\u6233\uff09.\"\"\"\n    import pandas as pd\n\n    # \u4f7f\u7528 UTC \u65f6\u533a\uff0c\u6b21\u65e500:00:00\n    return str(\n        int((pd.Timestamp(date_str, tz=\"UTC\") + pd.Timedelta(days=1))\n        .timestamp() * 1000)\n    )\n</code></pre></p> <p>\u4e4b\u540e: <pre><code>@staticmethod\ndef _calculate_timestamp(date_str: str, time_str: str = \"00:00:00\") -&gt; str:\n    \"\"\"\u8ba1\u7b97\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_start, datetime_str_to_timestamp\n\n    if time_str == \"00:00:00\":\n        return str(date_to_timestamp_start(date_str))\n    return str(datetime_str_to_timestamp(f\"{date_str} {time_str}\"))\n\n@staticmethod\ndef _calculate_end_timestamp(date_str: str) -&gt; str:\n    \"\"\"\u8ba1\u7b97\u65e5\u671f\u7ed3\u675f\u65f6\u95f4\u6233\uff08\u6b21\u65e500:00:00\u7684\u6beb\u79d2\u65f6\u95f4\u6233\uff09.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_end\n    return str(date_to_timestamp_end(date_str))\n</code></pre></p>"},{"location":"advanced/refactoring_time_utils/#_7","title":"\ud83d\udcca \u91cd\u6784\u7edf\u8ba1","text":"\u6307\u6807 \u6570\u503c \u91cd\u6784\u6587\u4ef6\u6570 5 \u4e2a \u5220\u9664\u91cd\u590d\u4ee3\u7801 ~60 \u884c \u5e73\u5747\u4ee3\u7801\u7b80\u5316 40-50% \u65b0\u589e\u5de5\u5177\u51fd\u6570 10 \u4e2a \u7edf\u4e00\u8c03\u7528\u70b9 1 \u4e2a (time_utils.py)"},{"location":"advanced/refactoring_time_utils/#_8","title":"\ud83c\udf81 \u91cd\u6784\u5e26\u6765\u7684\u597d\u5904","text":""},{"location":"advanced/refactoring_time_utils/#1_1","title":"1. \u5355\u4e00\u804c\u8d23\u539f\u5219","text":"<ul> <li>\u2705 \u6240\u6709\u65f6\u95f4\u5904\u7406\u903b\u8f91\u96c6\u4e2d\u5728 <code>time_utils.py</code></li> <li>\u2705 \u6bcf\u4e2a\u7c7b/\u6a21\u5757\u53ea\u8d1f\u8d23\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91</li> <li>\u2705 \u65f6\u95f4\u5904\u7406\u6210\u4e3a\u72ec\u7acb\u7684\u5de5\u5177\u6a21\u5757</li> </ul>"},{"location":"advanced/refactoring_time_utils/#2_1","title":"2. \u6613\u4e8e\u7ef4\u62a4","text":"<ul> <li>\u2705 \u53ea\u9700\u4fee\u6539\u4e00\u5904\uff0c\u6240\u6709\u5730\u65b9\u751f\u6548</li> <li>\u2705 \u51cf\u5c11\u4e86 bug \u7684\u53ef\u80fd\u6027</li> <li>\u2705 \u964d\u4f4e\u4e86\u7ef4\u62a4\u6210\u672c</li> </ul>"},{"location":"advanced/refactoring_time_utils/#3_1","title":"3. \u4ee3\u7801\u7b80\u6d01","text":"<ul> <li>\u2705 \u6bcf\u4e2a\u65b9\u6cd5\u4ece 10-20 \u884c\u51cf\u5c11\u5230 3-5 \u884c</li> <li>\u2705 \u6d88\u9664\u4e86\u91cd\u590d\u4ee3\u7801</li> <li>\u2705 \u63d0\u9ad8\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027</li> </ul>"},{"location":"advanced/refactoring_time_utils/#4","title":"4. \u7c7b\u578b\u5b89\u5168","text":"<ul> <li>\u2705 \u7edf\u4e00\u7684\u7c7b\u578b\u8f6c\u6362\uff08int -&gt; str\uff09</li> <li>\u2705 \u6e05\u6670\u7684\u51fd\u6570\u7b7e\u540d</li> <li>\u2705 \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a</li> </ul>"},{"location":"advanced/refactoring_time_utils/#5","title":"5. \u6d4b\u8bd5\u96c6\u4e2d","text":"<ul> <li>\u2705 \u53ea\u9700\u6d4b\u8bd5 <code>time_utils</code> \u4e2d\u7684\u51fd\u6570</li> <li>\u2705 \u51cf\u5c11\u4e86\u6d4b\u8bd5\u5197\u4f59</li> <li>\u2705 \u63d0\u9ad8\u4e86\u6d4b\u8bd5\u8986\u76d6\u7387</li> </ul>"},{"location":"advanced/refactoring_time_utils/#6","title":"6. \u6587\u6863\u5b8c\u5584","text":"<ul> <li>\u2705 \u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u8be6\u7ec6\u7684\u6587\u6863</li> <li>\u2705 \u5305\u542b\u4f7f\u7528\u793a\u4f8b</li> <li>\u2705 \u8bf4\u660e\u4e86\u8bbe\u8ba1\u51b3\u7b56\uff08\u5982\u4f7f\u7528\u6b21\u65e5 00:00:00\uff09</li> </ul>"},{"location":"advanced/refactoring_time_utils/#_9","title":"\ud83d\udd0d \u9a8c\u8bc1\u91cd\u6784\u7ed3\u679c","text":""},{"location":"advanced/refactoring_time_utils/#_10","title":"\u68c0\u67e5\u6ca1\u6709\u9057\u7559\u7684\u91cd\u590d\u5b9e\u73b0","text":"<pre><code># \u5728 services/ \u548c models/ \u4e2d\u5e94\u8be5\u53ea\u6709\u7b80\u5355\u7684\u8c03\u7528\ngrep -r 'datetime.strptime.*timestamp' --include='*.py' src/cryptoservice/services/\ngrep -r 'datetime.strptime.*timestamp' --include='*.py' src/cryptoservice/models/\n\n# \u5e94\u8be5\u53ea\u5728 time_utils.py \u4e2d\u627e\u5230\u5b9e\u73b0\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#_11","title":"\u8fd0\u884c\u6d4b\u8bd5\u786e\u4fdd\u529f\u80fd\u6b63\u786e","text":"<pre><code>pytest tests/ -v\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#utc","title":"\u68c0\u67e5\u6240\u6709\u65f6\u95f4\u5904\u7406\u90fd\u4f7f\u7528 UTC","text":"<pre><code># \u67e5\u627e\u53ef\u80fd\u7684\u65f6\u533a\u95ee\u9898\ngrep -r \"pd\\.to_datetime\" src/cryptoservice/ | grep -v \"utc=True\"\ngrep -r \"pd\\.Timestamp\" src/cryptoservice/ | grep -v 'tz='\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#_12","title":"\ud83d\udcdd \u4f7f\u7528\u793a\u4f8b","text":""},{"location":"advanced/refactoring_time_utils/#_13","title":"\u5728\u65b0\u4ee3\u7801\u4e2d\u4f7f\u7528\u65f6\u95f4\u5de5\u5177","text":"<pre><code>from cryptoservice.utils import (\n    date_to_timestamp_start,\n    date_to_timestamp_end,\n    timestamp_to_datetime,\n)\n\n# \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\nstart_ts = date_to_timestamp_start(\"2024-10-31\")  # \u8fd4\u56de int\nend_ts = date_to_timestamp_end(\"2024-10-31\")      # \u8fd4\u56de int\n\n# \u5c06\u65f6\u95f4\u6233\u8f6c\u6362\u4e3a datetime\ndt = timestamp_to_datetime(start_ts)\nprint(dt)  # 2024-10-31 00:00:00+00:00\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#_14","title":"\u65e7\u65b9\u6cd5\u4ecd\u7136\u53ef\u7528\uff08\u5411\u540e\u517c\u5bb9\uff09","text":"<pre><code># \u5404\u4e2a\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u5185\u90e8\u8c03\u7528 time_utils\nservice = MarketDataService(...)\nstart_ts_str = service._date_to_timestamp_start(\"2024-10-31\")  # \u8fd4\u56de str\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#_15","title":"\ud83c\udf93 \u6700\u4f73\u5b9e\u8df5\u5efa\u8bae","text":""},{"location":"advanced/refactoring_time_utils/#1-time_utils","title":"1. \u4f18\u5148\u4f7f\u7528 time_utils","text":"<p>\u5728\u65b0\u4ee3\u7801\u4e2d\uff0c\u76f4\u63a5\u4f7f\u7528 <code>time_utils</code> \u4e2d\u7684\u51fd\u6570\uff1a</p> <pre><code># \u2705 \u63a8\u8350\nfrom cryptoservice.utils import date_to_timestamp_start\ntimestamp = date_to_timestamp_start(date)\n\n# \u274c \u4e0d\u63a8\u8350\uff08\u9664\u975e\u5728\u7c7b\u65b9\u6cd5\u5185\u90e8\u9700\u8981\u4fdd\u6301\u63a5\u53e3\u4e00\u81f4\u6027\uff09\ntimestamp = self._date_to_timestamp_start(date)\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#2_2","title":"2. \u4fdd\u6301\u7b80\u6d01","text":"<p>\u5982\u679c\u7c7b\u65b9\u6cd5\u53ea\u662f\u7b80\u5355\u7684\u5305\u88c5\uff0c\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u5de5\u5177\u51fd\u6570\uff1a</p> <pre><code># \u53ef\u4ee5\u8003\u8651\u5728\u672a\u6765\u79fb\u9664\u8fd9\u4e9b\u5305\u88c5\u65b9\u6cd5\n# \u76f4\u63a5\u4f7f\u7528 time_utils.date_to_timestamp_start()\n</code></pre>"},{"location":"advanced/refactoring_time_utils/#3_2","title":"3. \u6587\u6863\u5f15\u7528","text":"<p>\u5728\u6587\u6863\u4e2d\u5f15\u7528 <code>time_utils</code> \u4f5c\u4e3a\u6807\u51c6\u65f6\u95f4\u5904\u7406\u65b9\u5f0f\u3002</p>"},{"location":"advanced/refactoring_time_utils/#_16","title":"\ud83d\ude80 \u672a\u6765\u6539\u8fdb","text":""},{"location":"advanced/refactoring_time_utils/#_17","title":"\u77ed\u671f","text":"<ul> <li>[ ] \u4e3a <code>time_utils</code> \u7f16\u5199\u5b8c\u6574\u7684\u5355\u5143\u6d4b\u8bd5</li> <li>[ ] \u5728\u6587\u6863\u4e2d\u6dfb\u52a0\u65f6\u95f4\u5904\u7406\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"advanced/refactoring_time_utils/#_18","title":"\u4e2d\u671f","text":"<ul> <li>[ ] \u8003\u8651\u79fb\u9664\u5404\u4e2a\u7c7b\u4e2d\u7684\u5305\u88c5\u65b9\u6cd5\uff0c\u76f4\u63a5\u4f7f\u7528 <code>time_utils</code></li> <li>[ ] \u6dfb\u52a0\u66f4\u591a\u65f6\u95f4\u5904\u7406\u5de5\u5177\u51fd\u6570\uff08\u5982\u65f6\u533a\u8f6c\u6362\uff09</li> </ul>"},{"location":"advanced/refactoring_time_utils/#_19","title":"\u957f\u671f","text":"<ul> <li>[ ] \u8003\u8651\u4f7f\u7528 Python \u7684 <code>zoneinfo</code> \u66ff\u4ee3 <code>UTC</code> \u5e38\u91cf</li> <li>[ ] \u652f\u6301\u66f4\u591a\u65f6\u95f4\u683c\u5f0f\u548c\u65f6\u533a</li> </ul>"},{"location":"advanced/refactoring_time_utils/#_20","title":"\ud83d\udcda \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u65f6\u533a\u5904\u7406\u6700\u4f73\u5b9e\u8df5</li> <li>API \u6587\u6863 - time_utils</li> </ul> <p>\u91cd\u6784\u5b8c\u6210\u65e5\u671f: 2024-10-08 \u91cd\u6784\u539f\u5219: \u5355\u4e00\u804c\u8d23\u3001\u907f\u514d\u91cd\u590d\u3001\u6613\u4e8e\u7ef4\u62a4</p>"},{"location":"advanced/timezone_best_practices/","title":"\u65f6\u533a\u5904\u7406\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"advanced/timezone_best_practices/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u539f\u5219","text":"<p>\u7edf\u4e00\u4f7f\u7528 UTC \u65f6\u533a\uff0c\u907f\u514d\u672c\u5730\u65f6\u533a\u5e26\u6765\u7684\u4e0d\u4e00\u81f4\u95ee\u9898\u3002</p>"},{"location":"advanced/timezone_best_practices/#_3","title":"\u2705 \u5df2\u5b8c\u6210\u7684\u4fee\u590d","text":""},{"location":"advanced/timezone_best_practices/#1","title":"1. \u6240\u6709\u5173\u952e\u6587\u4ef6\u7684\u65f6\u533a\u7edf\u4e00","text":"\u6587\u4ef6 \u4fee\u590d\u5185\u5bb9 <code>models/universe.py</code> \u2705 \u65b0\u589e <code>_calculate_end_timestamp()</code> \u65b9\u6cd5\uff0c\u4f7f\u7528 UTC\uff0c\u6539\u7528\u6b21\u65e5 00:00:00 <code>services/processors/universe_manager.py</code> \u2705 \u6240\u6709 <code>pd.to_datetime()</code> \u90fd\u6307\u5b9a <code>utc=True</code> <code>services/market_service.py</code> \u2705 <code>_date_to_timestamp_*()</code> \u4f7f\u7528 UTC\uff0c\u6539\u7528\u6b21\u65e5 00:00:00 <code>services/downloaders/base_downloader.py</code> \u2705 \u4f7f\u7528 <code>datetime.UTC</code>\uff0c\u6539\u7528\u6b21\u65e5 00:00:00 <code>services/downloaders/kline_downloader.py</code> \u2705 \u4f7f\u7528 <code>datetime.UTC</code>\uff0c\u6539\u7528\u6b21\u65e5 00:00:00 <code>services/downloaders/metrics_downloader.py</code> \u2705 \u4f7f\u7528 <code>datetime.UTC</code>\uff0c\u6539\u7528\u6b21\u65e5 00:00:00 <code>services/downloaders/vision_downloader.py</code> \u2705 \u89e3\u6790 Binance API \u65f6\u95f4\u65f6\u4f7f\u7528 UTC <code>storage/incremental.py</code> \u2705 \u6240\u6709\u65f6\u95f4\u6233\u8ba1\u7b97\u4f7f\u7528 UTC <code>storage/queries/builder.py</code> \u2705 <code>build_time_filter()</code> \u4f7f\u7528 UTC <code>storage/queries/kline_query.py</code> \u2705 <code>pd.date_range()</code> \u6307\u5b9a <code>tz=\"UTC\"</code> <code>storage/queries/metrics_query.py</code> \u2705 <code>pd.date_range()</code> \u6307\u5b9a <code>tz=\"UTC\"</code>"},{"location":"advanced/timezone_best_practices/#2","title":"2. \u521b\u5efa\u7edf\u4e00\u7684\u65f6\u95f4\u5de5\u5177\u51fd\u6570","text":"<p>\u65b0\u589e <code>utils/time_utils.py</code>\uff0c\u63d0\u4f9b\uff1a</p> <pre><code>from cryptoservice.utils import (\n    date_to_timestamp_start,      # \u65e5\u671f -&gt; \u5f00\u59cb\u65f6\u95f4\u6233\uff0800:00:00 UTC\uff09\n    date_to_timestamp_end,         # \u65e5\u671f -&gt; \u7ed3\u675f\u65f6\u95f4\u6233\uff08\u6b21\u65e5 00:00:00 UTC\uff09\n    datetime_str_to_timestamp,     # \u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32 -&gt; \u65f6\u95f4\u6233\n    timestamp_to_datetime,         # \u65f6\u95f4\u6233 -&gt; datetime\n    timestamp_to_date_str,         # \u65f6\u95f4\u6233 -&gt; \u65e5\u671f\u5b57\u7b26\u4e32\n    parse_date_safe,               # \u5b89\u5168\u89e3\u6790\u65e5\u671f\u4e3a UTC Timestamp\n    now_utc,                       # \u83b7\u53d6\u5f53\u524d UTC \u65f6\u95f4\n    now_utc_timestamp,             # \u83b7\u53d6\u5f53\u524d UTC \u65f6\u95f4\u6233\n    generate_date_range,           # \u751f\u6210 UTC \u65e5\u671f\u8303\u56f4\n    is_timezone_aware,             # \u68c0\u67e5\u662f\u5426\u5305\u542b\u65f6\u533a\u4fe1\u606f\n)\n</code></pre>"},{"location":"advanced/timezone_best_practices/#_4","title":"\ud83d\udcdd \u7f16\u7801\u89c4\u8303","text":""},{"location":"advanced/timezone_best_practices/#1-pandas","title":"1. \u4f7f\u7528 pandas \u89e3\u6790\u65e5\u671f\u65f6","text":"<p>\u274c \u9519\u8bef\uff1a <pre><code>dt = pd.to_datetime(date_str)  # \u4f7f\u7528\u672c\u5730\u65f6\u533a\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff1a <pre><code>dt = pd.to_datetime(date_str, utc=True)  # \u660e\u786e\u6307\u5b9a UTC\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#2-pandastimestamp","title":"2. \u4f7f\u7528 pandas.Timestamp \u65f6","text":"<p>\u274c \u9519\u8bef\uff1a <pre><code>ts = pd.Timestamp(date_str)  # \u4f7f\u7528\u672c\u5730\u65f6\u533a\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff1a <pre><code>ts = pd.Timestamp(date_str, tz=\"UTC\")  # \u660e\u786e\u6307\u5b9a UTC\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#3-datetimestrptime","title":"3. \u4f7f\u7528 datetime.strptime \u65f6","text":"<p>\u274c \u9519\u8bef\uff1a <pre><code>dt = datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")  # naive datetime\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff1a <pre><code>from datetime import UTC\ndt = datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=UTC)\n</code></pre></p> <p>\u66f4\u597d\u7684\u65b9\u5f0f\uff08\u63a8\u8350\uff09\uff1a <pre><code>from cryptoservice.utils import datetime_str_to_timestamp\ntimestamp = datetime_str_to_timestamp(date_str)\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#4-pddate_range","title":"4. \u4f7f\u7528 pd.date_range \u65f6","text":"<p>\u274c \u9519\u8bef\uff1a <pre><code>date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff1a <pre><code>date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\", tz=\"UTC\")\n</code></pre></p> <p>\u66f4\u597d\u7684\u65b9\u5f0f\uff08\u63a8\u8350\uff09\uff1a <pre><code>from cryptoservice.utils import generate_date_range\ndate_range = generate_date_range(start_date, end_date, freq=\"D\")\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#5","title":"5. \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u65f6","text":"<p>\u274c \u9519\u8bef\uff1a <pre><code>from datetime import datetime\nnow = datetime.now()  # \u672c\u5730\u65f6\u533a\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff1a <pre><code>from datetime import UTC, datetime\nnow = datetime.now(tz=UTC)\n</code></pre></p> <p>\u66f4\u597d\u7684\u65b9\u5f0f\uff08\u63a8\u8350\uff09\uff1a <pre><code>from cryptoservice.utils import now_utc\nnow = now_utc()\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#6","title":"6. \u8ba1\u7b97\u65e5\u671f\u8303\u56f4\u7ed3\u675f\u65f6\u95f4\u6233","text":"<p>\u274c \u9519\u8bef\uff08\u65e7\u65b9\u5f0f\uff09\uff1a <pre><code># \u4f7f\u7528 23:59:59 \u4f1a\u5bfc\u81f4\u65f6\u95f4\u6233\u4e0d\u4e00\u81f4\nend_ts = int(datetime.strptime(f\"{date} 23:59:59\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000)\n</code></pre></p> <p>\u2705 \u6b63\u786e\uff08\u65b0\u65b9\u5f0f\uff09\uff1a <pre><code># \u4f7f\u7528\u6b21\u65e5 00:00:00\uff0c\u4e0e\u589e\u91cf\u68c0\u6d4b\u903b\u8f91\u4e00\u81f4\nend_ts = int((pd.Timestamp(date, tz=\"UTC\") + pd.Timedelta(days=1)).timestamp() * 1000)\n</code></pre></p> <p>\u66f4\u597d\u7684\u65b9\u5f0f\uff08\u63a8\u8350\uff09\uff1a <pre><code>from cryptoservice.utils import date_to_timestamp_end\nend_ts = date_to_timestamp_end(date)\n</code></pre></p>"},{"location":"advanced/timezone_best_practices/#_5","title":"\ud83d\udee1\ufe0f \u9884\u9632\u63aa\u65bd","text":""},{"location":"advanced/timezone_best_practices/#1_1","title":"1. \u4f7f\u7528\u7edf\u4e00\u7684\u5de5\u5177\u51fd\u6570","text":"<p>\u4f18\u5148\u4f7f\u7528 <code>cryptoservice.utils.time_utils</code> \u4e2d\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528 <code>datetime</code> \u6216 <code>pandas</code>\u3002</p>"},{"location":"advanced/timezone_best_practices/#2-code-review","title":"2. Code Review \u68c0\u67e5\u6e05\u5355","text":"<p>\u5728\u4ee3\u7801\u5ba1\u67e5\u65f6\uff0c\u68c0\u67e5\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>[ ] \u6240\u6709 <code>pd.to_datetime()</code> \u90fd\u6307\u5b9a\u4e86 <code>utc=True</code></li> <li>[ ] \u6240\u6709 <code>pd.Timestamp()</code> \u90fd\u6307\u5b9a\u4e86 <code>tz=\"UTC\"</code></li> <li>[ ] \u6240\u6709 <code>pd.date_range()</code> \u90fd\u6307\u5b9a\u4e86 <code>tz=\"UTC\"</code></li> <li>[ ] \u6240\u6709 <code>datetime.strptime()</code> \u540e\u90fd\u8c03\u7528\u4e86 <code>.replace(tzinfo=UTC)</code></li> <li>[ ] \u4e0d\u518d\u4f7f\u7528 \"23:59:59\" \u4f5c\u4e3a\u7ed3\u675f\u65f6\u95f4\uff0c\u6539\u7528\u6b21\u65e5 \"00:00:00\"</li> <li>[ ] \u4f18\u5148\u4f7f\u7528 <code>time_utils</code> \u4e2d\u7684\u5de5\u5177\u51fd\u6570</li> </ul>"},{"location":"advanced/timezone_best_practices/#3-linter","title":"3. \u6dfb\u52a0 Linter \u89c4\u5219\uff08\u53ef\u9009\uff09","text":"<p>\u53ef\u4ee5\u8003\u8651\u5728 <code>ruff</code> \u914d\u7f6e\u4e2d\u6dfb\u52a0\u89c4\u5219\uff0c\u68c0\u6d4b\u4e0d\u5b89\u5168\u7684\u65f6\u95f4\u5904\u7406\uff1a</p> <pre><code>[tool.ruff.lint]\n# \u68c0\u6d4b\u65f6\u533a\u76f8\u5173\u7684\u6f5c\u5728\u95ee\u9898\nselect = [\"DTZ\"]  # flake8-datetimez\n</code></pre>"},{"location":"advanced/timezone_best_practices/#4","title":"4. \u5355\u5143\u6d4b\u8bd5","text":"<p>\u4e3a\u65f6\u95f4\u5904\u7406\u76f8\u5173\u7684\u51fd\u6570\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\uff0c\u786e\u4fdd\u8de8\u65f6\u533a\u4e00\u81f4\u6027\uff1a</p> <pre><code>def test_timestamp_consistency():\n    \"\"\"\u6d4b\u8bd5\u65f6\u95f4\u6233\u8ba1\u7b97\u7684\u4e00\u81f4\u6027.\"\"\"\n    from cryptoservice.utils import date_to_timestamp_start, date_to_timestamp_end\n\n    date = \"2024-10-31\"\n    start_ts = date_to_timestamp_start(date)\n    end_ts = date_to_timestamp_end(date)\n\n    # \u9a8c\u8bc1\u662f UTC \u65f6\u95f4\n    assert start_ts == 1730332800000  # 2024-10-31 00:00:00 UTC\n    assert end_ts == 1730419200000    # 2024-11-01 00:00:00 UTC\n\n    # \u9a8c\u8bc1\u65f6\u95f4\u5dee\u662f 24 \u5c0f\u65f6\n    assert end_ts - start_ts == 86400000\n</code></pre>"},{"location":"advanced/timezone_best_practices/#_6","title":"\ud83d\udd0d \u5982\u4f55\u68c0\u67e5\u73b0\u6709\u4ee3\u7801","text":"<p>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u627e\u6f5c\u5728\u7684\u65f6\u533a\u95ee\u9898\uff1a</p> <pre><code># \u67e5\u627e\u672a\u6307\u5b9a utc \u7684 pd.to_datetime\ngrep -r \"pd\\.to_datetime\" --include=\"*.py\" src/ | grep -v \"utc=True\"\n\n# \u67e5\u627e\u672a\u6307\u5b9a tz \u7684 pd.Timestamp\ngrep -r \"pd\\.Timestamp\" --include=\"*.py\" src/ | grep -v \"tz=\"\n\n# \u67e5\u627e\u4f7f\u7528 23:59:59 \u7684\u4ee3\u7801\ngrep -r \"23:59:59\" --include=\"*.py\" src/\n\n# \u67e5\u627e datetime.now() \u672a\u6307\u5b9a\u65f6\u533a\ngrep -r \"datetime\\.now()\" --include=\"*.py\" src/ | grep -v \"tz=\"\n</code></pre>"},{"location":"advanced/timezone_best_practices/#_7","title":"\ud83d\udcda \u76f8\u5173\u8d44\u6e90","text":"<ul> <li>Python datetime \u5b98\u65b9\u6587\u6863</li> <li>Pandas \u65f6\u533a\u5904\u7406\u6587\u6863</li> <li>PEP 615 \u2013 Support for the IANA Time Zone Database</li> </ul>"},{"location":"advanced/timezone_best_practices/#_8","title":"\ud83c\udf93 \u603b\u7ed3","text":"<p>\u6838\u5fc3\u539f\u5219\uff1a\u65f6\u95f4\u5904\u7406\u52a1\u5fc5\u660e\u786e\u6307\u5b9a UTC \u65f6\u533a</p> <ol> <li>\u2705 \u4f7f\u7528 <code>cryptoservice.utils.time_utils</code> \u63d0\u4f9b\u7684\u5de5\u5177\u51fd\u6570</li> <li>\u2705 \u6240\u6709 pandas \u65f6\u95f4\u5904\u7406\u90fd\u6307\u5b9a <code>utc=True</code> \u6216 <code>tz=\"UTC\"</code></li> <li>\u2705 \u6240\u6709 datetime \u5904\u7406\u90fd\u4f7f\u7528 <code>datetime.UTC</code></li> <li>\u2705 \u7ed3\u675f\u65f6\u95f4\u6233\u4f7f\u7528\u6b21\u65e5 00:00:00\uff0c\u800c\u4e0d\u662f\u5f53\u5929 23:59:59</li> <li>\u2705 \u5728 Code Review \u65f6\u68c0\u67e5\u65f6\u533a\u5904\u7406</li> <li>\u2705 \u7f16\u5199\u6d4b\u8bd5\u9a8c\u8bc1\u65f6\u95f4\u6233\u4e00\u81f4\u6027</li> </ol> <p>\u9075\u5faa\u8fd9\u4e9b\u539f\u5219\uff0c\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\u56e0\u65f6\u533a\u4e0d\u4e00\u81f4\u5bfc\u81f4\u7684 bug\u3002</p>"},{"location":"api/data/storage_db/","title":"\u6570\u636e\u5e93\u7ba1\u7406","text":""},{"location":"api/data/storage_db/#cryptoservice.storage.Database","title":"<code>cryptoservice.storage.Database(db_path: str | Path, **options)</code>","text":"<p>\u6570\u636e\u5e93\u4e3b\u5165\u53e3\u7c7b.</p> <p>\u7ec4\u5408\u5404\u4e2a\u4e13\u95e8\u7684\u5b58\u50a8\u5668\u548c\u67e5\u8be2\u5668\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u63a5\u53e3.</p> <p>\u521d\u59cb\u5316\u6570\u636e\u5e93.</p> \u53c2\u6570 \u63cf\u8ff0 <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> \u7c7b\u578b\uff1a <code>str | Path</code> </p> <code>**options</code> <p>\u8fde\u63a5\u6c60\u9009\u9879</p> <p> \u9ed8\u8ba4\uff1a <code>{}</code> </p> Source code in <code>src/cryptoservice/storage/database.py</code> <pre><code>def __init__(self, db_path: str | Path, **options):\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        **options: \u8fde\u63a5\u6c60\u9009\u9879\n    \"\"\"\n    self.db_path = Path(db_path)\n\n    # \u57fa\u7840\u8bbe\u65bd\n    self.pool = ConnectionPool(db_path, **options)\n    self.schema = DatabaseSchema()\n\n    # \u5b58\u50a8\u5c42\n    self.kline_store = KlineStore(self.pool)\n    self.funding_store = FundingStore(self.pool)\n    self.interest_store = InterestStore(self.pool)\n    self.ratio_store = RatioStore(self.pool)\n\n    # \u67e5\u8be2\u5c42\n    self.kline_query = KlineQuery(self.pool)\n    self.metrics_query = MetricsQuery(self.pool)\n\n    # \u529f\u80fd\u7ec4\u4ef6\n    self.incremental = IncrementalManager(self.kline_query, self.metrics_query)\n    self.resampler = DataResampler()\n\n    # \u5bfc\u51fa\u5668\n    self.numpy_exporter = NumpyExporter(self.kline_query, self.resampler, self.metrics_query)\n    self.csv_exporter = CsvExporter(self.kline_query)\n    self.parquet_exporter = ParquetExporter(self.kline_query)\n\n    self._initialized = False\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database-functions","title":"Functions","text":""},{"location":"api/data/storage_db/#cryptoservice.storage.Database.insert_klines","title":"<code>insert_klines(klines: list[PerpetualMarketTicker], freq: Freq, batch_size: int = 1000) -&gt; int</code>  <code>async</code>","text":"<p>\u63d2\u5165K\u7ebf\u6570\u636e.</p> \u53c2\u6570 \u63cf\u8ff0 <code>klines</code> <p>K\u7ebf\u6570\u636e\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[PerpetualMarketTicker]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>batch_size</code> <p>\u6279\u91cf\u5927\u5c0f</p> <p> \u7c7b\u578b\uff1a <code>int</code> \u9ed8\u8ba4\uff1a <code>1000</code> </p> \u8fd4\u56de \u63cf\u8ff0 <code>int</code> <p>\u63d2\u5165\u7684\u8bb0\u5f55\u6570</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def insert_klines(self, klines: list[PerpetualMarketTicker], freq: Freq, batch_size: int = 1000) -&gt; int:\n    \"\"\"\u63d2\u5165K\u7ebf\u6570\u636e.\n\n    Args:\n        klines: K\u7ebf\u6570\u636e\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n        batch_size: \u6279\u91cf\u5927\u5c0f\n\n    Returns:\n        \u63d2\u5165\u7684\u8bb0\u5f55\u6570\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.kline_store.insert(klines, freq, batch_size)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.select_klines","title":"<code>select_klines(symbols: list[str], start_time: str, end_time: str, freq: Freq, columns: list[str] | None = None) -&gt; pd.DataFrame</code>  <code>async</code>","text":"<p>\u67e5\u8be2K\u7ebf\u6570\u636e.</p> \u53c2\u6570 \u63cf\u8ff0 <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>columns</code> <p>\u9700\u8981\u67e5\u8be2\u7684\u5217</p> <p> \u7c7b\u578b\uff1a <code>list[str] | None</code> \u9ed8\u8ba4\uff1a <code>None</code> </p> \u8fd4\u56de \u63cf\u8ff0 <code>DataFrame</code> <p>K\u7ebf\u6570\u636eDataFrame</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def select_klines(\n    self, symbols: list[str], start_time: str, end_time: str, freq: Freq, columns: list[str] | None = None\n) -&gt; pd.DataFrame:\n    \"\"\"\u67e5\u8be2K\u7ebf\u6570\u636e.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        columns: \u9700\u8981\u67e5\u8be2\u7684\u5217\n\n    Returns:\n        K\u7ebf\u6570\u636eDataFrame\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.kline_query.select_by_time_range(symbols, start_time, end_time, freq, columns)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_numpy","title":"<code>export_to_numpy(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, target_freq: Freq, chunk_days: int = 30) -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aNumPy\u683c\u5f0f.</p> \u53c2\u6570 \u63cf\u8ff0 <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> \u7c7b\u578b\uff1a <code>Path</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>chunk_days</code> <p>\u5206\u5757\u5929\u6570</p> <p> \u7c7b\u578b\uff1a <code>int</code> \u9ed8\u8ba4\uff1a <code>30</code> </p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_numpy(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    target_freq: Freq,\n    chunk_days: int = 30,\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aNumPy\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        target_freq: \u76ee\u6807\u9891\u7387\n        chunk_days: \u5206\u5757\u5929\u6570\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.numpy_exporter.export_klines(\n        symbols, start_time, end_time, freq, output_path, target_freq, chunk_days\n    )\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_csv","title":"<code>export_to_csv(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, chunk_size: int = 100000) -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aCSV\u683c\u5f0f.</p> \u53c2\u6570 \u63cf\u8ff0 <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> \u7c7b\u578b\uff1a <code>Path</code> </p> <code>chunk_size</code> <p>\u5206\u5757\u5927\u5c0f</p> <p> \u7c7b\u578b\uff1a <code>int</code> \u9ed8\u8ba4\uff1a <code>100000</code> </p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_csv(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    chunk_size: int = 100000,\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aCSV\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        chunk_size: \u5206\u5757\u5927\u5c0f\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.csv_exporter.export_klines(symbols, start_time, end_time, freq, output_path, chunk_size)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.export_to_parquet","title":"<code>export_to_parquet(symbols: list[str], start_time: str, end_time: str, freq: Freq, output_path: Path, compression: Literal['snappy', 'gzip', 'brotli', 'lz4', 'zstd'] = 'snappy') -&gt; None</code>  <code>async</code>","text":"<p>\u5bfc\u51fa\u6570\u636e\u4e3aParquet\u683c\u5f0f.</p> \u53c2\u6570 \u63cf\u8ff0 <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> <code>output_path</code> <p>\u8f93\u51fa\u8def\u5f84</p> <p> \u7c7b\u578b\uff1a <code>Path</code> </p> <code>compression</code> <p>\u538b\u7f29\u65b9\u5f0f</p> <p> \u7c7b\u578b\uff1a <code>Literal['snappy', 'gzip', 'brotli', 'lz4', 'zstd']</code> \u9ed8\u8ba4\uff1a <code>'snappy'</code> </p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def export_to_parquet(\n    self,\n    symbols: list[str],\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    output_path: Path,\n    compression: Literal[\"snappy\", \"gzip\", \"brotli\", \"lz4\", \"zstd\"] = \"snappy\",\n) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u6570\u636e\u4e3aParquet\u683c\u5f0f.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        freq: \u6570\u636e\u9891\u7387\n        output_path: \u8f93\u51fa\u8def\u5f84\n        compression: \u538b\u7f29\u65b9\u5f0f\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    await self.parquet_exporter.export_klines(symbols, start_time, end_time, freq, output_path, compression)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.plan_kline_download","title":"<code>plan_kline_download(symbols: list[str], start_date: str, end_date: str, freq: Freq) -&gt; dict[str, dict[str, int | str]]</code>  <code>async</code>","text":"<p>\u5236\u5b9aK\u7ebf\u6570\u636e\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212.</p> \u53c2\u6570 \u63cf\u8ff0 <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> \u7c7b\u578b\uff1a <code>list[str]</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f</p> <p> \u7c7b\u578b\uff1a <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> \u7c7b\u578b\uff1a <code>Freq</code> </p> \u8fd4\u56de \u63cf\u8ff0 <code>dict[str, dict[str, int | str]]</code> <p>\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def plan_kline_download(\n    self, symbols: list[str], start_date: str, end_date: str, freq: Freq\n) -&gt; dict[str, dict[str, int | str]]:\n    \"\"\"\u5236\u5b9aK\u7ebf\u6570\u636e\u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_date: \u5f00\u59cb\u65e5\u671f\n        end_date: \u7ed3\u675f\u65e5\u671f\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        \u589e\u91cf\u4e0b\u8f7d\u8ba1\u5212\n    \"\"\"\n    if not self._initialized:\n        await self.initialize()\n    return await self.incremental.plan_kline_download(symbols, start_date, end_date, freq)\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.storage.Database.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/cryptoservice/storage/database.py</code> <pre><code>async def close(self):\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93.\"\"\"\n    await self.pool.close()\n    self._initialized = False\n    logger.info(\"database_closed\")\n</code></pre>"},{"location":"api/services/market_service/","title":"MarketDataService API \u53c2\u8003","text":"<p>MarketDataService \u662f CryptoService \u7684\u6838\u5fc3\u670d\u52a1\u7c7b\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684\u52a0\u5bc6\u8d27\u5e01\u5e02\u573a\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u529f\u80fd\u3002</p>"},{"location":"api/services/market_service/#_1","title":"\ud83d\udccb \u7c7b\u521d\u59cb\u5316","text":""},{"location":"api/services/market_service/#marketdataserviceapi_key-api_secret","title":"<code>MarketDataService(api_key, api_secret)</code>","text":"<p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\u3002</p> <p>\u53c2\u6570: - <code>api_key</code> (str): Binance API \u5bc6\u94a5 - <code>api_secret</code> (str): Binance API \u5bc6\u94a5</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.services import MarketDataService\n\nservice = MarketDataService(\n    api_key=\"your_api_key\",\n    api_secret=\"your_api_secret\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#_2","title":"\ud83d\udcca \u5b9e\u65f6\u884c\u60c5\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_symbol_tickersymbolnone","title":"<code>get_symbol_ticker(symbol=None)</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str, optional): \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982 \"BTCUSDT\"\u3002\u4e3a None \u65f6\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9</p> <p>\u8fd4\u56de\u503c: - <code>SymbolTicker</code> \u6216 <code>list[SymbolTicker]</code>: \u884c\u60c5\u6570\u636e</p> <p>\u793a\u4f8b: <pre><code># \u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"\u4ef7\u683c: {ticker.last_price}\")\n\n# \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\nall_tickers = service.get_symbol_ticker()\nprint(f\"\u603b\u8ba1: {len(all_tickers)} \u4e2a\u4ea4\u6613\u5bf9\")\n</code></pre></p>"},{"location":"api/services/market_service/#get_top_coinslimit50-sort_bysortbyquote_volume-quote_assetnone","title":"<code>get_top_coins(limit=50, sort_by=SortBy.QUOTE_VOLUME, quote_asset=None)</code>","text":"<p>\u83b7\u53d6\u70ed\u95e8\u4ea4\u6613\u5bf9\u6392\u884c\u699c\u3002</p> <p>\u53c2\u6570: - <code>limit</code> (int): \u8fd4\u56de\u6570\u91cf\uff0c\u9ed8\u8ba4 50 - <code>sort_by</code> (SortBy): \u6392\u5e8f\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u6309\u6210\u4ea4\u91cf - <code>quote_asset</code> (str, optional): \u57fa\u51c6\u8d44\u4ea7\u8fc7\u6ee4\uff0c\u5982 \"USDT\"</p> <p>\u8fd4\u56de\u503c: - <code>list[DailyMarketTicker]</code>: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u524d10\u7684USDT\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_market_summaryintervalfreqd1","title":"<code>get_market_summary(interval=Freq.d1)</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u4fe1\u606f\u3002</p> <p>\u53c2\u6570: - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba4\u65e5\u7ebf</p> <p>\u8fd4\u56de\u503c: - <code>dict</code>: \u5305\u542b\u5feb\u7167\u65f6\u95f4\u548c\u5e02\u573a\u6570\u636e\u7684\u5b57\u5178</p> <p>\u793a\u4f8b: <pre><code>summary = service.get_market_summary()\nprint(f\"\u5feb\u7167\u65f6\u95f4: {summary['snapshot_time']}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_3","title":"\ud83d\udcc8 \u5386\u53f2\u6570\u636e\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_historical_klinessymbol-start_time-end_timenone-intervalfreqh1-klines_typehistoricalklinestypespot","title":"<code>get_historical_klines(symbol, start_time, end_time=None, interval=Freq.h1, klines_type=HistoricalKlinesType.SPOT)</code>","text":"<p>\u83b7\u53d6K\u7ebf\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>symbol</code> (str): \u4ea4\u6613\u5bf9\u540d\u79f0 - <code>start_time</code> (str | datetime): \u5f00\u59cb\u65f6\u95f4 - <code>end_time</code> (str | datetime, optional): \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4 - <code>interval</code> (Freq): \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>klines_type</code> (HistoricalKlinesType): K\u7ebf\u7c7b\u578b\uff0c\u73b0\u8d27\u6216\u671f\u8d27</p> <p>\u8fd4\u56de\u503c: - <code>list[KlineMarketTicker]</code>: K\u7ebf\u6570\u636e\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.models import Freq, HistoricalKlinesType\n\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_perpetual_datasymbols-start_time-db_path-end_timenone-intervalfreqm1-max_workers1-max_retries3-progressnone","title":"<code>get_perpetual_data(symbols, start_time, db_path, end_time=None, interval=Freq.m1, max_workers=1, max_retries=3, progress=None)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u3002</p> <p>\u53c2\u6570: - <code>symbols</code> (list[str]): \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>end_time</code> (str, optional): \u7ed3\u675f\u65e5\u671f - <code>interval</code> (Freq): \u6570\u636e\u95f4\u9694\uff0c\u9ed8\u8ba41\u5206\u949f - <code>max_workers</code> (int): \u6700\u5927\u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba41 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>progress</code> (Progress, optional): \u8fdb\u5ea6\u663e\u793a\u5668</p> <p>\u793a\u4f8b: <pre><code>service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    db_path=\"./data/market.db\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    max_workers=4\n)\n</code></pre></p>"},{"location":"api/services/market_service/#universe","title":"\ud83c\udfaf Universe \u65b9\u6cd5","text":""},{"location":"api/services/market_service/#define_universestart_date-end_date-t1_months-t2_months-t3_months-top_k-output_path-descriptionnone-strict_date_rangefalse","title":"<code>define_universe(start_date, end_date, t1_months, t2_months, t3_months, top_k, output_path, description=None, strict_date_range=False)</code>","text":"<p>\u5b9a\u4e49\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\u3002</p> <p>\u53c2\u6570: - <code>start_date</code> (str): \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>end_date</code> (str): \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) - <code>t1_months</code> (int): \u6570\u636e\u56de\u770b\u671f(\u6708) - <code>t2_months</code> (int): \u91cd\u5e73\u8861\u9891\u7387(\u6708) - <code>t3_months</code> (int): \u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4(\u6708) - <code>top_k</code> (int): \u9009\u62e9\u4ea4\u6613\u5bf9\u6570\u91cf - <code>output_path</code> (Path | str): \u8f93\u51fa\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>description</code> (str, optional): \u63cf\u8ff0\u4fe1\u606f - <code>strict_date_range</code> (bool): \u662f\u5426\u4e25\u683c\u9650\u5236\u65e5\u671f\u8303\u56f4\uff0c\u9ed8\u8ba4 False</p> <p>\u8fd4\u56de\u503c: - <code>UniverseDefinition</code>: Universe\u5b9a\u4e49\u5bf9\u8c61</p> <p>\u793a\u4f8b: <pre><code>universe_def = service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-12-31\",\n    t1_months=1,      # \u57fa\u4e8e1\u4e2a\u6708\u6570\u636e\n    t2_months=1,      # \u6bcf\u6708\u91cd\u5e73\u8861\n    t3_months=3,      # \u6392\u96643\u4e2a\u6708\u5185\u65b0\u5e01\n    top_k=10,         # \u9009\u62e9\u524d10\u4e2a\n    output_path=\"./universe.json\",\n    description=\"Top 10 crypto universe\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_datauniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7-extend_to_presenttrue","title":"<code>download_universe_data(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7, extend_to_present=True)</code>","text":"<p>\u6839\u636eUniverse\u5b9a\u4e49\u4e0b\u8f7d\u5386\u53f2\u6570\u636e\u3002</p> <p>\u53c2\u6570: - <code>universe_file</code> (Path | str): Universe\u5b9a\u4e49\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>db_path</code> (Path | str): \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84 (\u5fc5\u987b) - <code>data_path</code> (Path | str, optional): \u989d\u5916\u6570\u636e\u6587\u4ef6\u8def\u5f84 - <code>interval</code> (Freq): \u6570\u636e\u9891\u7387\uff0c\u9ed8\u8ba41\u5c0f\u65f6 - <code>max_workers</code> (int): \u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba44 - <code>max_retries</code> (int): \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba43 - <code>include_buffer_days</code> (int): \u7f13\u51b2\u5929\u6570\uff0c\u9ed8\u8ba47 - <code>extend_to_present</code> (bool): \u662f\u5426\u5ef6\u4f38\u5230\u5f53\u524d\uff0c\u9ed8\u8ba4 True</p> <p>\u793a\u4f8b: <pre><code>service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./data/market.db\",\n    interval=Freq.h1,\n    max_workers=4,\n    include_buffer_days=7,\n    extend_to_present=False\n)\n</code></pre></p>"},{"location":"api/services/market_service/#download_universe_data_by_periodsuniverse_file-db_path-data_pathnone-intervalfreqh1-max_workers4-max_retries3-include_buffer_days7","title":"<code>download_universe_data_by_periods(universe_file, db_path, data_path=None, interval=Freq.h1, max_workers=4, max_retries=3, include_buffer_days=7)</code>","text":"<p>\u6309\u5468\u671f\u5206\u522b\u4e0b\u8f7dUniverse\u6570\u636e\uff08\u66f4\u7cbe\u786e\u7684\u65b9\u5f0f\uff09\u3002</p> <p>\u53c2\u6570\u4e0e <code>download_universe_data</code> \u7c7b\u4f3c\uff0c\u4f46\u6309\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u5206\u522b\u4e0b\u8f7d\u3002</p>"},{"location":"api/services/market_service/#_4","title":"\ud83d\udd0d \u8f85\u52a9\u65b9\u6cd5","text":""},{"location":"api/services/market_service/#get_perpetual_symbolsonly_tradingtrue","title":"<code>get_perpetual_symbols(only_trading=True)</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\u3002</p> <p>\u53c2\u6570: - <code>only_trading</code> (bool): \u662f\u5426\u53ea\u8fd4\u56de\u53ef\u4ea4\u6613\u7684\uff0c\u9ed8\u8ba4 True</p> <p>\u8fd4\u56de\u503c: - <code>list[str]</code>: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>symbols = service.get_perpetual_symbols(only_trading=True)\nprint(f\"\u5f53\u524d\u53ef\u4ea4\u6613\u6c38\u7eed\u5408\u7ea6: {len(symbols)} \u4e2a\")\n</code></pre></p>"},{"location":"api/services/market_service/#_5","title":"\u26a0\ufe0f \u5f02\u5e38\u5904\u7406","text":""},{"location":"api/services/market_service/#_6","title":"\u5e38\u89c1\u5f02\u5e38\u7c7b\u578b","text":"<ul> <li><code>MarketDataFetchError</code>: \u6570\u636e\u83b7\u53d6\u5931\u8d25</li> <li><code>InvalidSymbolError</code>: \u65e0\u6548\u7684\u4ea4\u6613\u5bf9</li> <li><code>RateLimitError</code>: \u8bf7\u6c42\u9891\u7387\u9650\u5236</li> </ul> <p>\u793a\u4f8b: <pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u5931\u8d25: {e}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_7","title":"\ud83d\udcdd \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"api/services/market_service/#1-api","title":"1. API \u9891\u7387\u9650\u5236","text":"<ul> <li>\u5efa\u8bae\u4f7f\u7528\u5408\u7406\u7684 <code>max_workers</code> \u53c2\u6570</li> <li>\u907f\u514d\u8fc7\u4e8e\u9891\u7e41\u7684\u8bf7\u6c42</li> <li>\u9047\u5230\u9891\u7387\u9650\u5236\u65f6\u4f1a\u81ea\u52a8\u91cd\u8bd5</li> </ul>"},{"location":"api/services/market_service/#2","title":"2. \u8def\u5f84\u53c2\u6570","text":"<ul> <li><code>db_path</code> \u548c <code>output_path</code> \u5fc5\u987b\u660e\u786e\u6307\u5b9a</li> <li>\u8def\u5f84\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u521b\u5efa\u5fc5\u8981\u7684\u76ee\u5f55</li> </ul>"},{"location":"api/services/market_service/#3","title":"3. \u6570\u636e\u5b8c\u6574\u6027","text":"<ul> <li>\u65b0\u4e0a\u5e02\u7684\u4ea4\u6613\u5bf9\u53ef\u80fd\u7f3a\u5c11\u5386\u53f2\u6570\u636e</li> <li>\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u5904\u7406\u6570\u636e\u7f3a\u5931\u60c5\u51b5</li> <li>\u5efa\u8bae\u8bbe\u7f6e\u5408\u7406\u7684\u7f13\u51b2\u5929\u6570</li> </ul>"},{"location":"api/services/market_service/#4","title":"4. \u5185\u5b58\u4f7f\u7528","text":"<ul> <li>\u5927\u6279\u91cf\u6570\u636e\u4e0b\u8f7d\u4f1a\u5360\u7528\u8f83\u591a\u5185\u5b58</li> <li>\u5efa\u8bae\u5206\u6279\u5904\u7406\u5927\u91cf\u4ea4\u6613\u5bf9</li> <li>\u53ca\u65f6\u91ca\u653e\u4e0d\u9700\u8981\u7684\u6570\u636e</li> </ul>"},{"location":"api/services/market_service/#_8","title":"\ud83d\udd17 \u76f8\u5173\u6587\u6863","text":"<ul> <li>\u57fa\u7840\u7528\u6cd5\u6307\u5357</li> <li>Universe\u5b9a\u4e49\u6307\u5357</li> <li>\u5b8c\u6574\u793a\u4f8b</li> <li>\u6570\u636e\u6a21\u578b\u53c2\u8003</li> </ul>"},{"location":"guides/configuration/","title":"\u914d\u7f6e\u6307\u5357","text":""},{"location":"guides/configuration/#_2","title":"\u6982\u8ff0","text":"<p><code>cryptoservice</code> \u4f7f\u7528 Pydantic Settings \u8fdb\u884c\u914d\u7f6e\u7ba1\u7406\uff0c\u652f\u6301\u4ece\u73af\u5883\u53d8\u91cf\u548c <code>.env</code> \u6587\u4ef6\u8bfb\u53d6\u914d\u7f6e\u3002</p>"},{"location":"guides/configuration/#_3","title":"\u914d\u7f6e\u65b9\u5f0f","text":""},{"location":"guides/configuration/#1","title":"1. \u73af\u5883\u53d8\u91cf","text":"<p>\u76f4\u63a5\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code># Linux/macOS\nexport LOG_LEVEL=DEBUG\nexport LOG_ENVIRONMENT=production\nexport LOG_FILE=logs/app.log\nexport BINANCE_API_KEY=your_key\nexport BINANCE_API_SECRET=your_secret\n\n# Windows (PowerShell)\n$env:LOG_LEVEL=\"DEBUG\"\n$env:LOG_ENVIRONMENT=\"production\"\n</code></pre>"},{"location":"guides/configuration/#2-env","title":"2. .env \u6587\u4ef6\uff08\u63a8\u8350\uff09","text":"<p>\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa <code>.env</code> \u6587\u4ef6\uff1a</p> <pre><code># Binance API\u914d\u7f6e\nBINANCE_API_KEY=your_api_key_here\nBINANCE_API_SECRET=your_api_secret_here\n\n# \u7f51\u7edc\u4ee3\u7406\u914d\u7f6e\uff08\u53ef\u9009\uff09\nHTTP_PROXY=http://127.0.0.1:7890\nHTTPS_PROXY=http://127.0.0.1:7890\n\n# \u65e5\u5fd7\u914d\u7f6e\nLOG_LEVEL=INFO\nLOG_ENVIRONMENT=development\nLOG_FILE=\nLOG_ENABLE_RICH=true\n</code></pre>"},{"location":"guides/configuration/#_4","title":"\u65e5\u5fd7\u914d\u7f6e\u8be6\u89e3","text":""},{"location":"guides/configuration/#log_level","title":"LOG_LEVEL","text":"<p>\u65e5\u5fd7\u7ea7\u522b\uff0c\u53ef\u9009\u503c\uff1a</p> <ul> <li><code>DEBUG</code>: \u8c03\u8bd5\u4fe1\u606f\uff0c\u6700\u8be6\u7ec6</li> <li><code>INFO</code>: \u5e38\u89c4\u4fe1\u606f\uff08\u9ed8\u8ba4\uff09</li> <li><code>WARNING</code>: \u8b66\u544a\u4fe1\u606f</li> <li><code>ERROR</code>: \u9519\u8bef\u4fe1\u606f</li> <li><code>CRITICAL</code>: \u4e25\u91cd\u9519\u8bef</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>LOG_LEVEL=DEBUG  # \u5f00\u53d1\u73af\u5883\uff0c\u67e5\u770b\u8be6\u7ec6\u4fe1\u606f\nLOG_LEVEL=INFO   # \u751f\u4ea7\u73af\u5883\uff0c\u8bb0\u5f55\u5e38\u89c4\u64cd\u4f5c\nLOG_LEVEL=ERROR  # \u751f\u4ea7\u73af\u5883\uff0c\u4ec5\u8bb0\u5f55\u9519\u8bef\n</code></pre></p>"},{"location":"guides/configuration/#log_environment","title":"LOG_ENVIRONMENT","text":"<p>\u8fd0\u884c\u73af\u5883\uff0c\u53ef\u9009\u503c\uff1a</p> <ul> <li><code>development</code>: \u5f00\u53d1\u73af\u5883\uff08\u9ed8\u8ba4\uff09</li> <li>\u542f\u7528 Rich \u683c\u5f0f\u5316</li> <li>\u663e\u793a\u8be6\u7ec6\u7684\u5806\u6808\u8ddf\u8e2a</li> <li> <p>\u663e\u793a\u6587\u4ef6\u8def\u5f84\u548c\u884c\u53f7</p> </li> <li> <p><code>production</code>: \u751f\u4ea7\u73af\u5883</p> </li> <li>\u4f7f\u7528\u6807\u51c6\u683c\u5f0f</li> <li>\u5efa\u8bae\u914d\u7f6e LOG_FILE</li> <li> <p>\u7b2c\u4e09\u65b9\u5e93\u65e5\u5fd7\u7ea7\u522b\u81ea\u52a8\u964d\u4f4e</p> </li> <li> <p><code>test</code>: \u6d4b\u8bd5\u73af\u5883</p> </li> <li>\u6700\u7b80\u683c\u5f0f</li> <li>\u9002\u5408CI/CD\u73af\u5883</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code># \u5f00\u53d1\u73af\u5883\nLOG_ENVIRONMENT=development\nLOG_ENABLE_RICH=true\n\n# \u751f\u4ea7\u73af\u5883\nLOG_ENVIRONMENT=production\nLOG_FILE=logs/cryptoservice.log\nLOG_ENABLE_RICH=false\n</code></pre></p>"},{"location":"guides/configuration/#log_file","title":"LOG_FILE","text":"<p>\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff08\u53ef\u9009\uff09\uff1a</p> <ul> <li>\u4e3a\u7a7a\u65f6\uff1a\u4ec5\u8f93\u51fa\u5230\u63a7\u5236\u53f0</li> <li>\u6307\u5b9a\u8def\u5f84\uff1a\u540c\u65f6\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0</li> <li>\u751f\u4ea7\u73af\u5883\u5f3a\u70c8\u5efa\u8bae\u914d\u7f6e</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>LOG_FILE=logs/cryptoservice.log           # \u76f8\u5bf9\u8def\u5f84\nLOG_FILE=/var/log/cryptoservice/app.log  # \u7edd\u5bf9\u8def\u5f84\n</code></pre></p>"},{"location":"guides/configuration/#log_enable_rich","title":"LOG_ENABLE_RICH","text":"<p>\u662f\u5426\u542f\u7528 Rich \u683c\u5f0f\u5316\uff1a</p> <ul> <li><code>true</code> / <code>1</code> / <code>yes</code>: \u542f\u7528\uff08\u9ed8\u8ba4\uff0c\u5f00\u53d1\u73af\u5883\u63a8\u8350\uff09</li> <li><code>false</code> / <code>0</code> / <code>no</code>: \u7981\u7528\uff08\u751f\u4ea7\u73af\u5883\u63a8\u8350\uff09</li> </ul> <p>Rich \u683c\u5f0f\u5316\u63d0\u4f9b\uff1a - \u5f69\u8272\u8f93\u51fa - \u8bed\u6cd5\u9ad8\u4eae - \u66f4\u7f8e\u89c2\u7684\u8868\u683c\u548c\u9762\u677f - \u652f\u6301 markup \u6807\u8bb0\uff08\u5982 <code>[red]\u9519\u8bef[/red]</code>\uff09</p>"},{"location":"guides/configuration/#_5","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"guides/configuration/#_6","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from cryptoservice import get_logger\n\n# \u83b7\u53d6logger\u5b9e\u4f8b\uff08\u63a8\u8350\u5728\u6a21\u5757\u9876\u90e8\uff09\nlogger = get_logger(__name__)\n\n# \u8bb0\u5f55\u65e5\u5fd7\nlogger.debug(\"\u8c03\u8bd5\u4fe1\u606f\")\nlogger.info(\"\u64cd\u4f5c\u6210\u529f\")\nlogger.warning(\"\u8b66\u544a\u6d88\u606f\")\nlogger.error(\"\u9519\u8bef\u53d1\u751f\")\nlogger.critical(\"\u4e25\u91cd\u9519\u8bef\")\n</code></pre>"},{"location":"guides/configuration/#rich-markup","title":"\u4f7f\u7528 Rich Markup\uff08\u5f00\u53d1\u73af\u5883\uff09","text":"<pre><code>logger.info(\"[green]\u6210\u529f:[/green] \u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\nlogger.warning(\"[yellow]\u8b66\u544a:[/yellow] \u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\")\nlogger.error(\"[red]\u9519\u8bef:[/red] \u6570\u636e\u5e93\u8fde\u63a5\u5931\u8d25\")\nlogger.debug(\"[dim]\u8c03\u8bd5:[/dim] \u53d8\u91cf\u503c = {value}\")\n</code></pre>"},{"location":"guides/configuration/#_7","title":"\u624b\u52a8\u914d\u7f6e\u65e5\u5fd7\u7cfb\u7edf","text":"<pre><code>from cryptoservice import setup_logging, Environment, LogLevel\n\n# \u91cd\u65b0\u914d\u7f6e\u65e5\u5fd7\u7cfb\u7edf\nsetup_logging(\n    environment=Environment.PRODUCTION,\n    log_level=LogLevel.INFO,\n    log_file=\"logs/app.log\",\n    enable_rich=False,\n)\n</code></pre>"},{"location":"guides/configuration/#_8","title":"\u4e0d\u540c\u73af\u5883\u7684\u63a8\u8350\u914d\u7f6e","text":""},{"location":"guides/configuration/#_9","title":"\u5f00\u53d1\u73af\u5883","text":"<pre><code>LOG_LEVEL=DEBUG\nLOG_ENVIRONMENT=development\nLOG_ENABLE_RICH=true\n</code></pre> <p>\u4f18\u52bf\uff1a - \u8be6\u7ec6\u7684\u8c03\u8bd5\u4fe1\u606f - \u7f8e\u89c2\u7684\u5f69\u8272\u8f93\u51fa - \u4fbf\u4e8e\u95ee\u9898\u6392\u67e5</p>"},{"location":"guides/configuration/#_10","title":"\u751f\u4ea7\u73af\u5883","text":"<pre><code>LOG_LEVEL=INFO\nLOG_ENVIRONMENT=production\nLOG_FILE=logs/cryptoservice.log\nLOG_ENABLE_RICH=false\n</code></pre> <p>\u4f18\u52bf\uff1a - \u6807\u51c6\u683c\u5f0f\u6613\u4e8e\u89e3\u6790 - \u65e5\u5fd7\u6587\u4ef6\u6301\u4e45\u5316 - \u51cf\u5c11\u6027\u80fd\u5f00\u9500</p>"},{"location":"guides/configuration/#_11","title":"\u6d4b\u8bd5\u73af\u5883","text":"<pre><code>LOG_LEVEL=WARNING\nLOG_ENVIRONMENT=test\nLOG_ENABLE_RICH=false\n</code></pre> <p>\u4f18\u52bf\uff1a - \u7b80\u6d01\u7684\u8f93\u51fa - \u4ec5\u663e\u793a\u91cd\u8981\u4fe1\u606f - \u9002\u5408 CI/CD \u6d41\u6c34\u7ebf</p>"},{"location":"guides/configuration/#_12","title":"\u914d\u7f6e\u4f18\u5148\u7ea7","text":"<p>\u914d\u7f6e\u8bfb\u53d6\u4f18\u5148\u7ea7\uff08\u4ece\u9ad8\u5230\u4f4e\uff09\uff1a</p> <ol> <li>\u73af\u5883\u53d8\u91cf</li> <li><code>.env</code> \u6587\u4ef6</li> <li>\u4ee3\u7801\u4e2d\u7684\u9ed8\u8ba4\u503c</li> </ol> <p>\u793a\u4f8b\uff1a <pre><code># \u5982\u679c\u540c\u65f6\u5b58\u5728\uff1a\n# \u73af\u5883\u53d8\u91cf: LOG_LEVEL=ERROR\n# .env\u6587\u4ef6: LOG_LEVEL=INFO\n# \u9ed8\u8ba4\u503c: LOG_LEVEL=DEBUG\n\n# \u5b9e\u9645\u4f7f\u7528: ERROR\uff08\u73af\u5883\u53d8\u91cf\u4f18\u5148\uff09\n</code></pre></p>"},{"location":"guides/configuration/#_13","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"guides/configuration/#1_1","title":"1. \u65e5\u5fd7\u6ca1\u6709\u5f69\u8272\u8f93\u51fa","text":"<p>\u539f\u56e0\uff1a - <code>LOG_ENABLE_RICH=false</code> - \u6216 <code>LOG_ENVIRONMENT=production</code></p> <p>\u89e3\u51b3\uff1a <pre><code>LOG_ENABLE_RICH=true\nLOG_ENVIRONMENT=development\n</code></pre></p>"},{"location":"guides/configuration/#2","title":"2. \u65e5\u5fd7\u7ea7\u522b\u592a\u4f4e/\u592a\u9ad8","text":"<p>\u539f\u56e0\uff1a\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e0d\u6b63\u786e</p> <p>\u68c0\u67e5\uff1a <pre><code>from cryptoservice.config import settings\nprint(f\"\u5f53\u524d\u65e5\u5fd7\u7ea7\u522b: {settings.LOG_LEVEL}\")\n</code></pre></p>"},{"location":"guides/configuration/#3","title":"3. \u65e5\u5fd7\u6587\u4ef6\u6ca1\u6709\u521b\u5efa","text":"<p>\u539f\u56e0\uff1a - \u76ee\u5f55\u4e0d\u5b58\u5728 - \u6ca1\u6709\u5199\u5165\u6743\u9650</p> <p>\u89e3\u51b3\uff1a <pre><code># \u521b\u5efa\u65e5\u5fd7\u76ee\u5f55\nmkdir -p logs\nchmod 755 logs\n</code></pre></p>"},{"location":"guides/configuration/#4","title":"4. \u60f3\u8981\u4e34\u65f6\u4fee\u6539\u65e5\u5fd7\u7ea7\u522b","text":"<p>\u65b9\u6cd51\uff1a\u4e34\u65f6\u73af\u5883\u53d8\u91cf <pre><code>LOG_LEVEL=DEBUG python demo/download_data.py\n</code></pre></p> <p>\u65b9\u6cd52\uff1a\u4ee3\u7801\u4e2d\u4fee\u6539 <pre><code>from cryptoservice import setup_logging, LogLevel\n\nsetup_logging(log_level=LogLevel.DEBUG)\n</code></pre></p>"},{"location":"guides/configuration/#_14","title":"\u7b2c\u4e09\u65b9\u5e93\u65e5\u5fd7","text":"<p>\u7cfb\u7edf\u4f1a\u81ea\u52a8\u7ba1\u7406\u7b2c\u4e09\u65b9\u5e93\u7684\u65e5\u5fd7\u7ea7\u522b\uff1a</p> <ul> <li>\u751f\u4ea7\u73af\u5883\uff1a\u81ea\u52a8\u8bbe\u7f6e\u4e3a WARNING</li> <li>\u5f00\u53d1\u73af\u5883\uff1a\u4fdd\u6301 INFO</li> </ul> <p>\u53d7\u7ba1\u7406\u7684\u5e93\uff1a - <code>urllib3</code> - <code>aiohttp</code> - <code>asyncio</code> - <code>binance</code> - <code>websockets</code></p> <p>\u5982\u9700\u81ea\u5b9a\u4e49\uff1a <pre><code>import logging\n\n# \u5355\u72ec\u8bbe\u7f6e\u67d0\u4e2a\u5e93\u7684\u65e5\u5fd7\u7ea7\u522b\nlogging.getLogger(\"binance\").setLevel(logging.DEBUG)\n</code></pre></p>"},{"location":"guides/configuration/#_15","title":"\u5b89\u5168\u5efa\u8bae","text":"<p>\u26a0\ufe0f \u91cd\u8981\uff1a</p> <ol> <li> <p>\u4e0d\u8981\u63d0\u4ea4 <code>.env</code> \u6587\u4ef6\u5230\u7248\u672c\u63a7\u5236 <pre><code># .gitignore\n.env\n</code></pre></p> </li> <li> <p>API\u5bc6\u94a5\u5fc5\u987b\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6216 .env \u6587\u4ef6\u914d\u7f6e <pre><code>BINANCE_API_KEY=your_key\nBINANCE_API_SECRET=your_secret\n</code></pre></p> </li> <li> <p>\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u4e25\u683c\u7684\u65e5\u5fd7\u7ea7\u522b <pre><code>LOG_LEVEL=WARNING  # \u907f\u514d\u654f\u611f\u4fe1\u606f\u6cc4\u9732\n</code></pre></p> </li> <li> <p>\u4fdd\u62a4\u65e5\u5fd7\u6587\u4ef6\u6743\u9650 <pre><code>chmod 600 logs/*.log  # \u4ec5\u6240\u6709\u8005\u53ef\u8bfb\u5199\n</code></pre></p> </li> </ol>"},{"location":"guides/export/","title":"\u6570\u636e\u5bfc\u51fa","text":"<p>\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5bfc\u51fa\u4e3a\u5206\u6790\u53cb\u597d\u7684\u683c\u5f0f\u3002</p>"},{"location":"guides/export/#_2","title":"\ud83d\udce4 \u57fa\u672c\u5bfc\u51fa","text":"<p>\u57fa\u4e8e <code>demo/export_data.py</code>\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import Freq\n\nasync def export_data():\n    async with Database(\"./universe.db\") as db:\n        # \u5bfc\u51fa\u4e3aNumPy\u683c\u5f0f\uff08\u63a8\u8350\uff09\n        await db.export_to_numpy(\n            symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1,\n            output_path=\"./exports\"\n        )\n\n        # \u5bfc\u51fa\u4e3aCSV\u683c\u5f0f\n        await db.export_to_csv(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1,\n            output_path=\"./data.csv\"\n        )\n\n        print(\"\u2705 \u5bfc\u51fa\u5b8c\u6210\")\n\nasyncio.run(export_data())\n</code></pre>"},{"location":"guides/export/#_3","title":"\ud83d\udcca \u5bfc\u51fa\u683c\u5f0f\u8bf4\u660e","text":""},{"location":"guides/export/#numpy","title":"NumPy\u683c\u5f0f","text":"<ul> <li>\u9002\u5408\u673a\u5668\u5b66\u4e60\u548c\u6570\u503c\u8ba1\u7b97</li> <li>\u6587\u4ef6\u5c0f\uff0c\u52a0\u8f7d\u5feb</li> <li>\u4fdd\u6301\u6570\u636e\u7c7b\u578b\u7cbe\u5ea6</li> </ul>"},{"location":"guides/export/#csv","title":"CSV\u683c\u5f0f","text":"<ul> <li>\u901a\u7528\u683c\u5f0f\uff0cExcel\u53ef\u6253\u5f00</li> <li>\u6613\u4e8e\u67e5\u770b\u548c\u8c03\u8bd5</li> <li>\u9002\u5408\u5c0f\u6570\u636e\u91cf</li> </ul>"},{"location":"guides/export/#parquet","title":"Parquet\u683c\u5f0f","text":"<ul> <li>\u5217\u5f0f\u5b58\u50a8\uff0c\u538b\u7f29\u7387\u9ad8</li> <li>\u9002\u5408\u5927\u6570\u636e\u5206\u6790</li> <li>Pandas\u539f\u751f\u652f\u6301</li> </ul> <pre><code># \u5bfc\u51fa\u4e3aParquet\nawait db.export_to_parquet(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    output_path=\"./data.parquet\"\n)\n</code></pre>"},{"location":"guides/export/#_4","title":"\ud83d\udd0d \u6570\u636e\u5b57\u6bb5","text":""},{"location":"guides/export/#k","title":"K\u7ebf\u6570\u636e","text":"<ul> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>high_price</code>: \u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: \u6700\u4f4e\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>volume</code>: \u6210\u4ea4\u91cf</li> <li><code>quote_volume</code>: \u6210\u4ea4\u989d</li> </ul>"},{"location":"guides/export/#_5","title":"\u5e02\u573a\u6307\u6807","text":"<ul> <li><code>funding_rate</code>: \u8d44\u91d1\u8d39\u7387</li> <li><code>open_interest</code>: \u6301\u4ed3\u91cf</li> <li><code>long_short_ratio</code>: \u591a\u7a7a\u6bd4\u4f8b</li> </ul>"},{"location":"guides/export/#_6","title":"\ud83d\udcc1 \u5bfc\u51fa\u6587\u4ef6\u7ed3\u6784","text":"<pre><code>./exports/\n\u251c\u2500\u2500 BTCUSDT_klines.npy      # BTC K\u7ebf\u6570\u636e\n\u251c\u2500\u2500 BTCUSDT_funding.npy     # BTC \u8d44\u91d1\u8d39\u7387\n\u251c\u2500\u2500 ETHUSDT_klines.npy      # ETH K\u7ebf\u6570\u636e\n\u2514\u2500\u2500 metadata.json           # \u5143\u6570\u636e\u4fe1\u606f\n</code></pre>"},{"location":"guides/export/#_7","title":"\ud83d\udcbb \u4f7f\u7528\u5bfc\u51fa\u6570\u636e","text":""},{"location":"guides/export/#numpy_1","title":"\u52a0\u8f7dNumPy\u6570\u636e","text":"<pre><code>import numpy as np\nimport pandas as pd\n\n# \u52a0\u8f7dK\u7ebf\u6570\u636e\nklines = np.load(\"./exports/BTCUSDT_klines.npy\")\nprint(f\"\u6570\u636e\u5f62\u72b6: {klines.shape}\")\n\n# \u8f6c\u6362\u4e3aDataFrame\ndf = pd.DataFrame(klines, columns=[\n    'timestamp', 'open_price', 'high_price', 'low_price',\n    'close_price', 'volume', 'quote_volume'\n])\n\n# \u8f6c\u6362\u65f6\u95f4\u6233\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\nprint(df.head())\n</code></pre>"},{"location":"guides/export/#csv_1","title":"\u52a0\u8f7dCSV\u6570\u636e","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"./data.csv\")\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\nprint(df.head())\n</code></pre>"},{"location":"guides/export/#universe","title":"\ud83d\udd27 \u6309Universe\u5bfc\u51fa","text":"<p>\u6309Universe\u5feb\u7167\u5206\u522b\u5bfc\u51fa\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import UniverseDefinition, Freq\n\nasync def export_by_universe():\n    # \u52a0\u8f7dUniverse\n    universe_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n    async with Database(\"./universe.db\") as db:\n        # \u4e3a\u6bcf\u4e2a\u5feb\u7167\u5bfc\u51fa\u6570\u636e\n        for i, snapshot in enumerate(universe_def.snapshots):\n            print(f\"\u5bfc\u51fa\u5feb\u7167 {i+1}: {snapshot.effective_date}\")\n\n            await db.export_to_numpy(\n                symbols=snapshot.symbols,\n                start_time=snapshot.start_date,\n                end_time=snapshot.end_date,\n                freq=Freq.h1,\n                output_path=f\"./exports/snapshot_{snapshot.effective_date}\"\n            )\n\n    print(\"\u2705 \u6309Universe\u5bfc\u51fa\u5b8c\u6210\")\n\nasyncio.run(export_by_universe())\n</code></pre>"},{"location":"guides/export/#_8","title":"\ud83d\udcc8 \u7b80\u5355\u5206\u6790\u793a\u4f8b","text":"<pre><code>import pandas as pd\nimport numpy as np\n\n# \u52a0\u8f7d\u6570\u636e\ndf = pd.read_csv(\"./data.csv\")\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')\n\n# \u57fa\u672c\u7edf\u8ba1\nprint(\"\ud83d\udcca \u57fa\u672c\u7edf\u8ba1:\")\nprint(f\"   \u6570\u636e\u884c\u6570: {len(df)}\")\nprint(f\"   \u4ef7\u683c\u8303\u56f4: ${df['low_price'].min():.2f} - ${df['high_price'].max():.2f}\")\nprint(f\"   \u5e73\u5747\u6210\u4ea4\u91cf: {df['volume'].mean():.2f}\")\n\n# \u8ba1\u7b97\u6536\u76ca\u7387\ndf['returns'] = df['close_price'].pct_change()\nprint(f\"   \u5e73\u5747\u6536\u76ca\u7387: {df['returns'].mean():.4f}\")\nprint(f\"   \u6536\u76ca\u7387\u6807\u51c6\u5dee: {df['returns'].std():.4f}\")\n\n# \u79fb\u52a8\u5e73\u5747\u7ebf\ndf['ma_20'] = df['close_price'].rolling(20).mean()\ndf['signal'] = np.where(df['close_price'] &gt; df['ma_20'], 1, -1)\n\nprint(\"\ud83d\udcc8 \u6280\u672f\u6307\u6807:\")\nprint(f\"   \u5f53\u524d\u4ef7\u683c: ${df['close_price'].iloc[-1]:.2f}\")\nprint(f\"   MA20: ${df['ma_20'].iloc[-1]:.2f}\")\nprint(f\"   \u4ea4\u6613\u4fe1\u53f7: {'\u4e70\u5165' if df['signal'].iloc[-1] == 1 else '\u5356\u51fa'}\")\n</code></pre>"},{"location":"guides/iterators/","title":"\u5f02\u6b65\u8fed\u4ee3\u5668\u4f7f\u7528\u6307\u5357","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd <code>Database</code> \u7c7b\u63d0\u4f9b\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u8ba9\u60a8\u53ef\u4ee5\u9ad8\u6548\u5730\u5904\u7406\u5927\u91cf\u6570\u636e\u3002</p>"},{"location":"guides/iterators/#_2","title":"\u6982\u8ff0","text":"<p><code>Database</code> \u7c7b\u63d0\u4f9b\u4e86\u4e09\u4e2a\u4e3b\u8981\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u65b9\u6cd5\uff1a</p> <ol> <li><code>iter_symbols()</code> - \u8fed\u4ee3\u6240\u6709\u4ea4\u6613\u5bf9\u7b26\u53f7</li> <li><code>iter_klines_by_symbol()</code> - \u6309\u4ea4\u6613\u5bf9\u9010\u4e2a\u8fd4\u56deK\u7ebf\u6570\u636e</li> <li><code>iter_klines_chunked()</code> - \u5206\u5757\u8fed\u4ee3K\u7ebf\u6570\u636e\uff0c\u9002\u5408\u5927\u6570\u636e\u96c6</li> </ol>"},{"location":"guides/iterators/#_3","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\uff1f","text":"<p>\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u4e3b\u8981\u4f18\u52bf\uff1a</p> <ul> <li>\u5185\u5b58\u6548\u7387: \u9010\u4e2a\u5904\u7406\u6570\u636e\uff0c\u907f\u514d\u4e00\u6b21\u6027\u52a0\u8f7d\u6240\u6709\u6570\u636e\u5230\u5185\u5b58</li> <li>\u6d41\u5f0f\u5904\u7406: \u53ef\u4ee5\u8fb9\u83b7\u53d6\u6570\u636e\u8fb9\u5904\u7406\uff0c\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6</li> <li>\u4ee3\u7801\u7b80\u6d01: \u4f7f\u7528 <code>async for</code> \u8bed\u6cd5\uff0c\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u6613\u8bfb</li> <li>\u7075\u6d3b\u6027: \u53ef\u4ee5\u968f\u65f6\u4e2d\u65ad\u8fed\u4ee3\uff0c\u6839\u636e\u9700\u8981\u53ea\u5904\u7406\u90e8\u5206\u6570\u636e</li> </ul>"},{"location":"guides/iterators/#_4","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"guides/iterators/#1","title":"1. \u8fed\u4ee3\u4ea4\u6613\u5bf9\u7b26\u53f7","text":"<pre><code>from cryptoservice.models import Freq\nfrom cryptoservice.storage import Database\n\nasync def list_symbols():\n    db = Database(\"data/database/market.db\")\n\n    # \u8fed\u4ee3\u6240\u6709 1\u5c0f\u65f6 \u9891\u7387\u7684\u4ea4\u6613\u5bf9\n    async for symbol in db.iter_symbols(freq=Freq.h1):\n        print(symbol)\n\n    await db.close()\n</code></pre> <p>\u4f7f\u7528\u573a\u666f\uff1a - \u904d\u5386\u6240\u6709\u4ea4\u6613\u5bf9\u8fdb\u884c\u6279\u91cf\u64cd\u4f5c - \u52a8\u6001\u7b5b\u9009\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9 - \u5b9e\u65f6\u76d1\u63a7\u6570\u636e\u5e93\u4e2d\u7684\u4ea4\u6613\u5bf9</p>"},{"location":"guides/iterators/#2-k","title":"2. \u6309\u4ea4\u6613\u5bf9\u8fed\u4ee3K\u7ebf\u6570\u636e","text":"<pre><code>from cryptoservice.models import Freq\nfrom cryptoservice.storage import Database\n\nasync def process_by_symbol():\n    db = Database(\"data/database/market.db\")\n\n    symbols = await db.get_symbols(freq=Freq.h1)\n\n    # \u9010\u4e2a\u5904\u7406\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\n    async for symbol, df in db.iter_klines_by_symbol(\n        symbols,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-12-31\",\n        freq=Freq.h1\n    ):\n        # \u5bf9\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u8fdb\u884c\u72ec\u7acb\u5904\u7406\n        print(f\"\u5904\u7406 {symbol}: {len(df)} \u6761\u8bb0\u5f55\")\n\n        # \u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n        mean_volume = df[\"volume\"].mean()\n        max_price = df[\"high_price\"].max()\n\n        print(f\"  \u5e73\u5747\u6210\u4ea4\u91cf: {mean_volume}\")\n        print(f\"  \u6700\u9ad8\u4ef7: {max_price}\")\n\n    await db.close()\n</code></pre> <p>\u4f7f\u7528\u573a\u666f\uff1a - \u5bf9\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u8fdb\u884c\u72ec\u7acb\u7684\u5206\u6790 - \u751f\u6210\u6bcf\u4e2a\u4ea4\u6613\u5bf9\u7684\u62a5\u544a - \u6309\u4ea4\u6613\u5bf9\u5206\u522b\u5bfc\u51fa\u6570\u636e</p>"},{"location":"guides/iterators/#3-k","title":"3. \u5206\u5757\u8fed\u4ee3K\u7ebf\u6570\u636e","text":"<pre><code>from cryptoservice.models import Freq\nfrom cryptoservice.storage import Database\n\nasync def process_in_chunks():\n    db = Database(\"data/database/market.db\")\n\n    symbols = await db.get_symbols(freq=Freq.m5)\n\n    # \u5206\u5757\u5904\u7406\u6570\u636e\uff0c\u6bcf\u6b211000\u884c\n    chunk_num = 0\n    async for chunk_df in db.iter_klines_chunked(\n        symbols,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-12-31\",\n        freq=Freq.m5,\n        chunk_size=1000\n    ):\n        chunk_num += 1\n\n        # \u5904\u7406\u5f53\u524d\u5757\n        print(f\"\u5904\u7406\u5757 {chunk_num}: {len(chunk_df)} \u884c\")\n\n        # \u793a\u4f8b\uff1a\u4fdd\u5b58\u5230\u6587\u4ef6\n        # chunk_df.to_csv(f\"chunk_{chunk_num}.csv\")\n\n        # \u793a\u4f8b\uff1a\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f\n        # stats = chunk_df.describe()\n\n    print(f\"\u603b\u5171\u5904\u7406\u4e86 {chunk_num} \u4e2a\u5757\")\n\n    await db.close()\n</code></pre> <p>\u4f7f\u7528\u573a\u666f\uff1a - \u5904\u7406\u8d85\u5927\u6570\u636e\u96c6\uff0c\u907f\u514d\u5185\u5b58\u6ea2\u51fa - \u6d41\u5f0f\u6570\u636e\u5904\u7406\u548c\u8f6c\u6362 - \u589e\u91cf\u5f0f\u6570\u636e\u5bfc\u51fa</p>"},{"location":"guides/iterators/#_5","title":"\u6027\u80fd\u5bf9\u6bd4","text":""},{"location":"guides/iterators/#_6","title":"\u4f20\u7edf\u65b9\u5f0f\uff08\u4e00\u6b21\u6027\u52a0\u8f7d\uff09","text":"<pre><code># \u274c \u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\ndf = await db.select_klines(symbols, start_time, end_time, freq)\n# \u5185\u5b58\u5360\u7528\uff1a\u5168\u90e8\u6570\u636e\nfor i in range(len(df)):\n    process_row(df.iloc[i])\n</code></pre>"},{"location":"guides/iterators/#_7","title":"\u4f7f\u7528\u8fed\u4ee3\u5668\uff08\u6d41\u5f0f\u5904\u7406\uff09","text":"<pre><code># \u2705 \u5185\u5b58\u9ad8\u6548\nasync for chunk_df in db.iter_klines_chunked(symbols, start_time, end_time, freq, chunk_size=1000):\n    # \u5185\u5b58\u5360\u7528\uff1a\u4ec5\u5f53\u524d\u5757\n    for i in range(len(chunk_df)):\n        process_row(chunk_df.iloc[i])\n</code></pre>"},{"location":"guides/iterators/#_8","title":"\u9ad8\u7ea7\u7528\u6cd5","text":""},{"location":"guides/iterators/#_9","title":"\u6761\u4ef6\u4e2d\u65ad\u8fed\u4ee3","text":"<pre><code>async def find_first_high_volume_symbol():\n    db = Database(\"data/database/market.db\")\n\n    async for symbol, df in db.iter_klines_by_symbol(\n        symbols,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-12-31\",\n        freq=Freq.h1\n    ):\n        avg_volume = df[\"volume\"].mean()\n\n        # \u627e\u5230\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\u5bf9\u5c31\u505c\u6b62\n        if avg_volume &gt; 1000000:\n            print(f\"\u627e\u5230\u9ad8\u6210\u4ea4\u91cf\u4ea4\u6613\u5bf9: {symbol}\")\n            break\n\n    await db.close()\n</code></pre>"},{"location":"guides/iterators/#_10","title":"\u5e76\u884c\u5904\u7406","text":"<pre><code>import asyncio\n\nasync def process_symbol(symbol: str, df):\n    \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\"\"\"\n    # \u4f60\u7684\u5904\u7406\u903b\u8f91\n    pass\n\nasync def parallel_process():\n    db = Database(\"data/database/market.db\")\n\n    tasks = []\n\n    # \u6536\u96c6\u4efb\u52a1\n    async for symbol, df in db.iter_klines_by_symbol(\n        symbols,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-12-31\",\n        freq=Freq.h1\n    ):\n        # \u521b\u5efa\u5e76\u884c\u4efb\u52a1\n        task = asyncio.create_task(process_symbol(symbol, df))\n        tasks.append(task)\n\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    await asyncio.gather(*tasks)\n\n    await db.close()\n</code></pre>"},{"location":"guides/iterators/#_11","title":"\u7ed3\u5408\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<pre><code>from cryptoservice.models import Freq\nfrom cryptoservice.storage import Database\n\nasync def process_with_context():\n    # \u4f7f\u7528 async with \u81ea\u52a8\u7ba1\u7406\u8fde\u63a5\n    async with Database(\"data/database/market.db\") as db:\n        async for symbol in db.iter_symbols(freq=Freq.h1):\n            print(symbol)\n\n        # \u6570\u636e\u5e93\u4f1a\u5728\u9000\u51fa with \u5757\u65f6\u81ea\u52a8\u5173\u95ed\n</code></pre>"},{"location":"guides/iterators/#_12","title":"\u5b8c\u6574\u793a\u4f8b\u811a\u672c","text":"<p>\u67e5\u770b <code>demo/iterator_examples.py</code> \u83b7\u53d6\u5b8c\u6574\u7684\u5de5\u4f5c\u793a\u4f8b\u3002</p> <p>\u8fd0\u884c\u793a\u4f8b\uff1a</p> <pre><code>python demo/iterator_examples.py\n</code></pre>"},{"location":"guides/iterators/#api","title":"API \u53c2\u8003","text":""},{"location":"guides/iterators/#iter_symbolsfreq-freq-none-none","title":"<code>iter_symbols(freq: Freq | None = None)</code>","text":"<p>\u8fed\u4ee3\u6240\u6709\u4ea4\u6613\u5bf9\u7b26\u53f7\u3002</p> <p>\u53c2\u6570\uff1a - <code>freq</code>: \u6570\u636e\u9891\u7387\u8fc7\u6ee4\uff0c<code>None</code> \u8868\u793a\u6240\u6709\u9891\u7387</p> <p>\u8fd4\u56de\uff1a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u4ea4\u6613\u5bf9\u7b26\u53f7\uff08\u5b57\u7b26\u4e32\uff09</p>"},{"location":"guides/iterators/#iter_klines_by_symbolsymbols-start_time-end_time-freq-columnsnone","title":"<code>iter_klines_by_symbol(symbols, start_time, end_time, freq, columns=None)</code>","text":"<p>\u6309\u4ea4\u6613\u5bf9\u8fed\u4ee3K\u7ebf\u6570\u636e\u3002</p> <p>\u53c2\u6570\uff1a - <code>symbols</code>: \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code>: \u5f00\u59cb\u65f6\u95f4 - <code>end_time</code>: \u7ed3\u675f\u65f6\u95f4 - <code>freq</code>: \u6570\u636e\u9891\u7387 - <code>columns</code>: \u9700\u8981\u67e5\u8be2\u7684\u5217\uff08\u53ef\u9009\uff09</p> <p>\u8fd4\u56de\uff1a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6bcf\u6b21\u8fd4\u56de <code>(symbol, dataframe)</code> \u5143\u7ec4</p>"},{"location":"guides/iterators/#iter_klines_chunkedsymbols-start_time-end_time-freq-chunk_size10000-columnsnone","title":"<code>iter_klines_chunked(symbols, start_time, end_time, freq, chunk_size=10000, columns=None)</code>","text":"<p>\u5206\u5757\u8fed\u4ee3K\u7ebf\u6570\u636e\u3002</p> <p>\u53c2\u6570\uff1a - <code>symbols</code>: \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code>: \u5f00\u59cb\u65f6\u95f4 - <code>end_time</code>: \u7ed3\u675f\u65f6\u95f4 - <code>freq</code>: \u6570\u636e\u9891\u7387 - <code>chunk_size</code>: \u6bcf\u5757\u7684\u884c\u6570\uff08\u9ed8\u8ba410000\uff09 - <code>columns</code>: \u9700\u8981\u67e5\u8be2\u7684\u5217\uff08\u53ef\u9009\uff09</p> <p>\u8fd4\u56de\uff1a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a DataFrame \u5757</p>"},{"location":"guides/iterators/#_13","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5f02\u6b65\u4e0a\u4e0b\u6587: \u6240\u6709\u8fed\u4ee3\u5668\u65b9\u6cd5\u5fc5\u987b\u5728\u5f02\u6b65\u51fd\u6570\u4e2d\u4f7f\u7528</li> <li>\u8fde\u63a5\u7ba1\u7406: \u4f7f\u7528 <code>async with</code> \u6216\u8bb0\u5f97\u8c03\u7528 <code>await db.close()</code></li> <li>\u5185\u5b58\u7ba1\u7406: \u5bf9\u4e8e\u5927\u6570\u636e\u96c6\uff0c\u4f18\u5148\u4f7f\u7528 <code>iter_klines_chunked()</code></li> <li>\u6027\u80fd\u4f18\u5316: \u5408\u7406\u8bbe\u7f6e <code>chunk_size</code> \u4ee5\u5e73\u8861\u5185\u5b58\u548c\u901f\u5ea6</li> </ol>"},{"location":"guides/iterators/#_14","title":"\u76f8\u5173\u6587\u6863","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u5bfc\u51fa\u529f\u80fd</li> <li>API\u6587\u6863 - Database</li> </ul>"},{"location":"guides/quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"guides/quickstart/#_2","title":"\ud83d\udce6 \u5b89\u88c5","text":"<pre><code>pip install cryptoservice python-dotenv\n</code></pre>"},{"location":"guides/quickstart/#api","title":"\ud83d\udd11 \u914d\u7f6eAPI\u5bc6\u94a5","text":"<p>\u521b\u5efa <code>.env</code> \u6587\u4ef6\uff1a</p> <pre><code>BINANCE_API_KEY=your_binance_api_key\nBINANCE_API_SECRET=your_binance_api_secret\n</code></pre>"},{"location":"guides/quickstart/#5","title":"\ud83d\ude80 5\u5206\u949f\u4e0a\u624b","text":""},{"location":"guides/quickstart/#1","title":"1. \u83b7\u53d6\u5b9e\u65f6\u884c\u60c5","text":"<pre><code>import asyncio\nimport os\nfrom cryptoservice import MarketDataService\nfrom dotenv import load_dotenv\n\nasync def get_prices():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        # \u83b7\u53d6BTC\u4ef7\u683c\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"BTC: ${ticker.last_price}\")\n\nasyncio.run(get_prices())\n</code></pre>"},{"location":"guides/quickstart/#2","title":"2. \u4e0b\u8f7d\u5386\u53f2\u6570\u636e","text":"<pre><code>import asyncio\nfrom cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nasync def download_data():\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        # \u4e0b\u8f7d1\u5929\u7684\u5c0f\u65f6\u6570\u636e\n        report = await service.get_perpetual_data(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            db_path=\"./market.db\",\n            interval=Freq.h1\n        )\n\n        print(f\"\u4e0b\u8f7d\u5b8c\u6210: {report.successful_downloads} \u4e2a\u6587\u4ef6\")\n\nasyncio.run(download_data())\n</code></pre>"},{"location":"guides/quickstart/#3","title":"3. \u67e5\u8be2\u6570\u636e","text":"<pre><code>import asyncio\nfrom cryptoservice.storage import Database\nfrom cryptoservice.models import Freq\n\nasync def query_data():\n    async with Database(\"./market.db\") as db:\n        df = await db.select_klines(\n            symbols=[\"BTCUSDT\"],\n            start_time=\"2024-01-01\",\n            end_time=\"2024-01-02\",\n            freq=Freq.h1\n        )\n\n        print(f\"\u67e5\u8be2\u5230 {len(df)} \u6761\u6570\u636e\")\n        print(df.head())\n\nasyncio.run(query_data())\n</code></pre>"},{"location":"guides/quickstart/#_3","title":"\u2705 \u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>import asyncio\nfrom cryptoservice import MarketDataService\n\nasync def test():\n    # \u6d4b\u8bd5API\u8fde\u63a5\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        ticker = await service.get_symbol_ticker(\"BTCUSDT\")\n        print(f\"\u2705 \u8fde\u63a5\u6210\u529f! BTC\u4ef7\u683c: ${ticker.last_price}\")\n\nasyncio.run(test())\n</code></pre>"},{"location":"guides/quickstart/#_4","title":"\ud83d\udd17 \u4e0b\u4e00\u6b65","text":"<ul> <li>Universe\u7b56\u7565 - \u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9</li> <li>\u6570\u636e\u5bfc\u51fa - \u5bfc\u51fa\u6570\u636e\u8fdb\u884c\u5206\u6790</li> <li>\u5b9e\u65f6\u6570\u636e - WebSocket\u5b9e\u65f6\u884c\u60c5</li> </ul>"},{"location":"guides/universe/","title":"Universe\u7b56\u7565","text":"<p>Universe\u662f\u52a8\u6001\u4ea4\u6613\u5bf9\u9009\u62e9\u7b56\u7565\uff0c\u6839\u636e\u6210\u4ea4\u91cf\u7b49\u6307\u6807\u5b9a\u671f\u91cd\u65b0\u9009\u62e9\u4ea4\u6613\u5bf9\u3002</p>"},{"location":"guides/universe/#_1","title":"\ud83c\udfd7\ufe0f \u67b6\u6784\u8bbe\u8ba1","text":""},{"location":"guides/universe/#_2","title":"\u6838\u5fc3\u7ec4\u4ef6","text":"<pre><code>graph TB\n    A[MarketDataService] --&gt; B[UniverseManager]\n    B --&gt; C[Binance API Client]\n    B --&gt; D[TimeRangeProcessor]\n    B --&gt; E[RateLimitManager]\n\n    F[UniverseDefinition] --&gt; G[UniverseSnapshot[]]\n    F --&gt; H[UniverseConfig]\n\n    B --&gt; F\n    G --&gt; I[JSON File]\n\n    subgraph \"\u6570\u636e\u6a21\u578b\"\n        F\n        G\n        H\n    end\n\n    subgraph \"\u5904\u7406\u5668\"\n        B\n        D\n        E\n    end\n</code></pre>"},{"location":"guides/universe/#_3","title":"\u6570\u636e\u6d41\u67b6\u6784","text":"<ol> <li>\u914d\u7f6e\u9636\u6bb5: \u9a8c\u8bc1\u53c2\u6570\uff0c\u6807\u51c6\u5316\u65e5\u671f\u683c\u5f0f</li> <li>\u91cd\u5e73\u8861\u8ba1\u5212: \u6839\u636eT2\u53c2\u6570\u751f\u6210\u5b9a\u671f\u91cd\u9009\u7684\u65f6\u95f4\u5e8f\u5217</li> <li>\u4ea4\u6613\u5bf9\u7b5b\u9009: \u6bcf\u4e2a\u91cd\u5e73\u8861\u65e5\u671f\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</li> <li>\u83b7\u53d6\u53ef\u7528\u6c38\u7eed\u5408\u7ea6\uff08\u6309quote_asset\u8fc7\u6ee4\uff09</li> <li>\u5e94\u7528T3\u8fc7\u6ee4\uff08\u6392\u9664\u65b0\u4e0a\u5e02\u5408\u7ea6\uff09</li> <li>\u8ba1\u7b97T1\u7a97\u53e3\u5185\u7684mean daily amount</li> <li>\u6309\u6210\u4ea4\u91cf\u6392\u5e8f\uff0c\u5e94\u7528top_k/top_ratio\u9009\u62e9</li> <li>\u5feb\u7167\u751f\u6210: \u4e3a\u6bcf\u4e2a\u91cd\u5e73\u8861\u70b9\u521b\u5efaUniverseSnapshot</li> <li>\u6301\u4e45\u5316: \u5e8f\u5217\u5316\u5b8c\u6574\u7684UniverseDefinition\u5230JSON\u6587\u4ef6</li> </ol>"},{"location":"guides/universe/#_4","title":"\u5173\u952e\u7b97\u6cd5","text":""},{"location":"guides/universe/#_5","title":"\u65f6\u95f4\u7a97\u53e3\u8ba1\u7b97","text":"<ul> <li>\u57fa\u51c6\u65e5\u671f: \u91cd\u5e73\u8861\u65e5\u671f\u524ddelay_days\u5929\uff08\u907f\u514d\u4f7f\u7528\u6700\u65b0\u6570\u636e\uff09</li> <li>T1\u8ba1\u7b97\u7a97\u53e3: [\u57fa\u51c6\u65e5\u671f-T1\u6708, \u57fa\u51c6\u65e5\u671f]</li> <li>T3\u8fc7\u6ee4\u65e5\u671f: \u57fa\u51c6\u65e5\u671f\u524dT3\u4e2a\u6708</li> </ul>"},{"location":"guides/universe/#_6","title":"\u4ea4\u6613\u5bf9\u9009\u62e9","text":"<pre><code># 1. \u83b7\u53d6\u5386\u53f2\u6210\u4ea4\u91cf\u6570\u636e\nmean_amounts = await fetch_24hr_ticker_data(symbols, t1_window)\n\n# 2. \u6309\u6210\u4ea4\u91cf\u6392\u5e8f\nsorted_symbols = sorted(mean_amounts.items(), key=lambda x: x[1], reverse=True)\n\n# 3. \u5e94\u7528\u9009\u62e9\u7b56\u7565\nif top_ratio:\n    selected_count = int(len(sorted_symbols) * top_ratio)\nelse:\n    selected_count = top_k\n\nuniverse_symbols = [symbol for symbol, _ in sorted_symbols[:selected_count]]\n</code></pre>"},{"location":"guides/universe/#_7","title":"\u5b9e\u73b0\u7ec6\u8282","text":""},{"location":"guides/universe/#_8","title":"\u6838\u5fc3\u7c7b\u7ed3\u6784","text":"<ul> <li><code>UniverseManager</code>: \u6838\u5fc3\u5904\u7406\u5668\uff0c\u534f\u8c03\u6574\u4e2a\u5b9a\u4e49\u6d41\u7a0b</li> <li><code>UniverseDefinition</code>: \u5b8c\u6574universe\u5b9a\u4e49\u7684\u6570\u636e\u5bb9\u5668</li> <li><code>UniverseSnapshot</code>: \u5355\u4e2a\u91cd\u5e73\u8861\u65f6\u70b9\u7684\u5feb\u7167\u6570\u636e</li> <li><code>UniverseConfig</code>: \u53c2\u6570\u914d\u7f6e\u7684\u9a8c\u8bc1\u548c\u5b58\u50a8</li> </ul>"},{"location":"guides/universe/#_9","title":"\u5173\u952e\u65b9\u6cd5\u8c03\u7528\u94fe","text":"<pre><code>MarketDataService.define_universe()\n    \u2514\u2500\u2500 UniverseManager.define_universe()\n        \u251c\u2500\u2500 _generate_rebalance_dates()      # \u751f\u6210\u91cd\u5e73\u8861\u65f6\u95f4\u5e8f\u5217\n        \u2514\u2500\u2500 _calculate_universe_for_date()   # \u4e3a\u6bcf\u4e2a\u65f6\u70b9\u8ba1\u7b97universe\n            \u251c\u2500\u2500 _get_available_symbols_for_period()  # \u83b7\u53d6\u53ef\u7528\u4ea4\u6613\u5bf9\n            \u251c\u2500\u2500 _symbol_exists_before_date()         # T3\u8fc7\u6ee4\n            \u251c\u2500\u2500 _fetch_and_calculate_mean_amounts()  # \u83b7\u53d6\u6210\u4ea4\u91cf\u6570\u636e\n            \u2514\u2500\u2500 _select_top_symbols()               # \u5e94\u7528\u9009\u62e9\u7b56\u7565\n</code></pre>"},{"location":"guides/universe/#_10","title":"\u65f6\u95f4\u5904\u7406\u903b\u8f91","text":"<p>\u6bcf\u4e2a\u91cd\u5e73\u8861\u5468\u671f\u7684\u65f6\u95f4\u8ba1\u7b97\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a - \u91cd\u5e73\u8861\u65e5\u671f: \u6839\u636estart_date\u548cT2\u95f4\u9694\u751f\u6210 - \u6570\u636e\u8ba1\u7b97\u57fa\u51c6: \u91cd\u5e73\u8861\u65e5\u671f - delay_days - T1\u6570\u636e\u7a97\u53e3: [\u57fa\u51c6\u65e5\u671f-T1\u6708, \u57fa\u51c6\u65e5\u671f] - T3\u8fc7\u6ee4\u622a\u6b62: \u57fa\u51c6\u65e5\u671f - T3\u6708</p>"},{"location":"guides/universe/#_11","title":"\ud83c\udfaf \u53c2\u6570\u8be6\u89e3","text":"<ul> <li>t1_months: \u56de\u770b\u671f\uff0c\u7528\u4e8e\u8ba1\u7b97mean daily amount\u7684\u5386\u53f2\u6570\u636e\u7a97\u53e3</li> <li>t2_months: \u91cd\u5e73\u8861\u9891\u7387\uff0c\u63a7\u5236universe\u66f4\u65b0\u95f4\u9694</li> <li>t3_months: \u6700\u5c0f\u5b58\u5728\u65f6\u95f4\uff0c\u6392\u9664\u4e0a\u5e02\u65f6\u95f4\u77ed\u4e8eT3\u7684\u65b0\u5408\u7ea6</li> <li>top_ratio: \u9009\u62e9\u6bd4\u4f8b\uff08\u59820.1\u8868\u793a\u524d10%\uff09\uff0c\u4e0etop_k\u4e92\u65a5</li> <li>top_k: \u56fa\u5b9a\u9009\u62e9\u6570\u91cf\uff0c\u4e0etop_ratio\u4e92\u65a5</li> <li>delay_days: \u6570\u636e\u5ef6\u8fdf\u5929\u6570\uff0c\u907f\u514d\u4f7f\u7528\u6700\u65b0\u4e0d\u7a33\u5b9a\u6570\u636e</li> <li>quote_asset: \u8ba1\u4ef7\u5e01\u79cd\u7b5b\u9009\uff08\u5982\"USDT\"\uff09</li> </ul>"},{"location":"guides/universe/#universe_1","title":"\ud83d\udcca \u5b9a\u4e49Universe","text":"<p>\u57fa\u4e8e <code>demo/define_universe.py</code> \u7684\u5b8c\u6574\u914d\u7f6e\uff1a</p> <pre><code>import asyncio\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nfrom cryptoservice import MarketDataService\n\nasync def create_universe():\n    load_dotenv()\n    api_key = os.getenv(\"BINANCE_API_KEY\")\n    api_secret = os.getenv(\"BINANCE_API_SECRET\")\n\n    # \u521b\u5efa\u670d\u52a1\n    service = await MarketDataService.create(api_key=api_key, api_secret=api_secret)\n\n    try:\n        # \u5b9a\u4e49Universe\uff08\u5305\u542b\u6240\u6709\u67b6\u6784\u53c2\u6570\uff09\n        universe_def = await service.define_universe(\n            start_date=\"2024-10-01\",\n            end_date=\"2024-10-07\",\n            t1_months=1,                # T1: 1\u4e2a\u6708\u56de\u770b\u671f\u8ba1\u7b97mean daily amount\n            t2_months=1,                # T2: 1\u4e2a\u6708\u91cd\u5e73\u8861\u9891\u7387\n            t3_months=1,                # T3: 1\u4e2a\u6708\u6700\u5c0f\u5408\u7ea6\u5b58\u5728\u65f6\u95f4\n            top_ratio=0.1,              # \u9009\u62e9\u524d10%\u4ea4\u6613\u5bf9\uff08\u4e0etop_k\u4e92\u65a5\uff09\n            output_path=\"./data/universe.json\",\n            description=f\"Universe demonstration\",\n            delay_days=7,               # \u6570\u636e\u5ef6\u8fdf7\u5929\u907f\u514d\u4e0d\u7a33\u5b9a\u6570\u636e\n            api_delay_seconds=1.0,      # API\u8bf7\u6c42\u95f4\u9694\n            batch_delay_seconds=3.0,    # \u6279\u6b21\u95f4\u5ef6\u8fdf\n            batch_size=10,              # \u6279\u5904\u7406\u5927\u5c0f\n            quote_asset=\"USDT\"          # \u53ea\u5904\u7406USDT\u6c38\u7eed\u5408\u7ea6\n        )\n\n        print(f\"\u2705 Universe\u521b\u5efa\u5b8c\u6210:\")\n        print(f\"   - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\n        print(f\"   - \u914d\u7f6e: T1={universe_def.config.t1_months}\u6708, \"\n              f\"T2={universe_def.config.t2_months}\u6708, T3={universe_def.config.t3_months}\u6708\")\n        print(f\"   - \u9009\u62e9\u7b56\u7565: Top {universe_def.config.top_ratio*100}%\")\n\n    except Exception as e:\n        print(f\"\u274c Universe\u5b9a\u4e49\u5931\u8d25: {e}\")\n\nasyncio.run(create_universe())\n</code></pre>"},{"location":"guides/universe/#_12","title":"\u914d\u7f6e\u8bf4\u660e","text":"<p>\u4ee5\u4e0a\u793a\u4f8b\u5c55\u793a\u4e86\u5b8c\u6574\u7684\u67b6\u6784\u53c2\u6570\u914d\u7f6e\uff1a</p> <ul> <li>\u65f6\u95f4\u53c2\u6570: T1/T2/T3\u63a7\u5236\u6570\u636e\u7a97\u53e3\u548c\u91cd\u5e73\u8861\u9891\u7387</li> <li>\u9009\u62e9\u7b56\u7565: top_ratio=0.1\u9009\u62e9\u6210\u4ea4\u91cf\u524d10%\u7684\u4ea4\u6613\u5bf9</li> <li>API\u63a7\u5236: \u901a\u8fc7delay\u548cbatch\u53c2\u6570\u63a7\u5236\u8bf7\u6c42\u9891\u7387\uff0c\u907f\u514d\u9650\u6d41</li> <li>\u8f93\u51fa\u63a7\u5236: \u6307\u5b9aJSON\u6587\u4ef6\u8def\u5f84\u548c\u63cf\u8ff0\u4fe1\u606f</li> </ul>"},{"location":"guides/universe/#universe_2","title":"\ud83d\udce5 \u4e0b\u8f7dUniverse\u6570\u636e","text":"<p>\u57fa\u4e8e <code>demo/download_data.py</code>\uff1a</p> <pre><code>import asyncio\nfrom cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nasync def download_universe_data():\n    async with await MarketDataService.create(api_key, api_secret) as service:\n        await service.download_universe_data(\n            universe_file=\"./universe.json\",\n            db_path=\"./universe.db\",\n            interval=Freq.h1,\n            max_workers=2,\n            download_market_metrics=True,  # \u4e0b\u8f7d\u8d44\u91d1\u8d39\u7387\u7b49\u6307\u6807\n            incremental=True               # \u589e\u91cf\u4e0b\u8f7d\n        )\n\n    print(\"\u2705 Universe\u6570\u636e\u4e0b\u8f7d\u5b8c\u6210\")\n\nasyncio.run(download_universe_data())\n</code></pre>"},{"location":"guides/universe/#universe_3","title":"\ud83d\udd0d \u67e5\u770bUniverse\u5185\u5bb9","text":"<pre><code>import asyncio\nfrom cryptoservice.storage import AsyncMarketDB\nfrom cryptoservice.models import UniverseDefinition\n\nasync def explore_universe():\n    # \u52a0\u8f7dUniverse\u5b9a\u4e49\n    universe_def = UniverseDefinition.load_from_file(\"./universe.json\")\n\n    print(f\"\ud83d\udcca Universe\u6982\u51b5:\")\n    print(f\"   - \u65f6\u95f4\u8303\u56f4: {universe_def.config.start_date} ~ {universe_def.config.end_date}\")\n    print(f\"   - \u5feb\u7167\u6570\u91cf: {len(universe_def.snapshots)}\")\n\n    # \u663e\u793a\u5404\u5feb\u7167\u7684\u4ea4\u6613\u5bf9\n    for i, snapshot in enumerate(universe_def.snapshots[:3]):  # \u524d3\u4e2a\n        print(f\"   \ud83d\udcc5 \u5feb\u7167{i+1} ({snapshot.effective_date}): {snapshot.symbols}\")\n\n    # \u67e5\u770b\u6570\u636e\u5e93\u4e2d\u7684\u5b9e\u9645\u6570\u636e\n    async with AsyncMarketDB(\"./universe.db\") as db:\n        symbols = await db.get_symbols()\n        print(f\"   \ud83d\udcbe \u6570\u636e\u5e93\u4e2d\u6709 {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9\")\n\nasyncio.run(explore_universe())\n</code></pre>"},{"location":"guides/universe/#_13","title":"\ud83d\udca1 \u4f7f\u7528\u6280\u5de7","text":""},{"location":"guides/universe/#1","title":"1. \u5c0f\u89c4\u6a21\u6d4b\u8bd5","text":"<pre><code># \u5c0f\u65f6\u95f4\u8303\u56f4\uff0c\u5c11\u91cf\u4ea4\u6613\u5bf9\nuniverse_def = await service.define_universe(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-03\",  # \u53ea\u6d4b\u8bd52\u5929\n    top_ratio=0.05,         # \u53ea\u9009\u524d5%\n    # ...\n)\n</code></pre>"},{"location":"guides/universe/#2","title":"2. \u589e\u91cf\u4e0b\u8f7d","text":"<pre><code># \u91cd\u590d\u8fd0\u884c\u53ea\u4e0b\u8f7d\u7f3a\u5931\u6570\u636e\nawait service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./universe.db\",\n    incremental=True,  # \u5173\u952e\u53c2\u6570\n    # ...\n)\n</code></pre>"},{"location":"guides/universe/#3","title":"3. \u6279\u91cf\u5904\u7406","text":"<pre><code># \u63a7\u5236\u5e76\u53d1\u548c\u5ef6\u8fdf\nawait service.download_universe_data(\n    universe_file=\"./universe.json\",\n    db_path=\"./universe.db\",\n    max_workers=1,      # \u964d\u4f4e\u5e76\u53d1\n    request_delay=2.0,  # \u589e\u52a0\u5ef6\u8fdf\n    # ...\n)\n</code></pre>"},{"location":"guides/universe/#_14","title":"\ud83d\udccb \u8fd0\u884c\u987a\u5e8f","text":"<pre><code># 1. \u5b9a\u4e49Universe\npython -c \"import asyncio; asyncio.run(create_universe())\"\n\n# 2. \u4e0b\u8f7d\u6570\u636e\npython -c \"import asyncio; asyncio.run(download_universe_data())\"\n\n# 3. \u67e5\u770b\u7ed3\u679c\npython -c \"import asyncio; asyncio.run(explore_universe())\"\n</code></pre>"},{"location":"guides/websocket/","title":"\u5b9e\u65f6\u6570\u636e","text":"<p>\u4f7f\u7528WebSocket\u63a5\u6536Binance\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u3002</p>"},{"location":"guides/websocket/#websocket","title":"\ud83c\udf10 \u57fa\u672cWebSocket\u8fde\u63a5","text":"<p>\u57fa\u4e8e <code>demo/websocket.py</code>\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\nfrom rich.console import Console\n\nconsole = Console()\n\nasync def simple_websocket():\n    \"\"\"\u7b80\u5355\u7684\u5b9e\u65f6\u4ef7\u683c\u76d1\u63a7\"\"\"\n\n    symbol = \"btcusdt\"\n    url = f\"wss://stream.binance.com:9443/ws/{symbol}@ticker\"\n\n    console.print(f\"\ud83c\udf10 \u8fde\u63a5\u5230 {symbol.upper()} \u5b9e\u65f6\u4ef7\u683c\u6d41...\")\n\n    try:\n        async with aiohttp.ClientSession() as session:\n            async with session.ws_connect(url) as ws:\n                console.print(\"\u2705 \u8fde\u63a5\u6210\u529f!\")\n\n                message_count = 0\n                async for msg in ws:\n                    if msg.type == aiohttp.WSMsgType.TEXT:\n                        data = json.loads(msg.data)\n                        message_count += 1\n\n                        # \u89e3\u6790\u4ef7\u683c\u6570\u636e\n                        symbol = data.get('s', 'Unknown')\n                        price = float(data.get('c', 0))\n                        change = float(data.get('P', 0))\n\n                        trend = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n\n                        console.print(\n                            f\"{trend} {symbol}: ${price:,.2f} ({change:+.2f}%)\"\n                        )\n\n                        # \u6f14\u793a\u7528\uff0c10\u6761\u540e\u9000\u51fa\n                        if message_count &gt;= 10:\n                            break\n\n    except Exception as e:\n        console.print(f\"\u274c \u8fde\u63a5\u5931\u8d25: {e}\")\n\n# \u8fd0\u884c\nasyncio.run(simple_websocket())\n</code></pre>"},{"location":"guides/websocket/#k","title":"\ud83d\udcca K\u7ebf\u6570\u636e\u6d41","text":"<p>\u63a5\u6536\u5b9e\u65f6K\u7ebf\u6570\u636e\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\n\nasync def kline_stream():\n    \"\"\"\u63a5\u6536\u5b9e\u65f6K\u7ebf\u6570\u636e\"\"\"\n\n    symbol = \"btcusdt\"\n    url = f\"wss://stream.binance.com:9443/ws/{symbol}@kline_1m\"\n\n    print(f\"\ud83d\udcca \u63a5\u6536 {symbol.upper()} 1\u5206\u949fK\u7ebf\u6570\u636e...\")\n\n    async with aiohttp.ClientSession() as session:\n        async with session.ws_connect(url) as ws:\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n\n                    # \u89e3\u6790K\u7ebf\u6570\u636e\n                    if 'k' in data:\n                        kline = data['k']\n                        symbol = kline['s']\n                        open_price = float(kline['o'])\n                        high_price = float(kline['h'])\n                        low_price = float(kline['l'])\n                        close_price = float(kline['c'])\n                        volume = float(kline['v'])\n                        is_closed = kline['x']  # K\u7ebf\u662f\u5426\u5b8c\u6210\n\n                        status = \"\u2705 \u5b8c\u6210\" if is_closed else \"\ud83d\udd04 \u8fdb\u884c\u4e2d\"\n\n                        print(f\"{symbol} K\u7ebf {status}\")\n                        print(f\"  OHLC: {open_price:.2f} {high_price:.2f} {low_price:.2f} {close_price:.2f}\")\n                        print(f\"  \u6210\u4ea4\u91cf: {volume:.2f}\")\n                        print(\"-\" * 40)\n\nasyncio.run(kline_stream())\n</code></pre>"},{"location":"guides/websocket/#_2","title":"\ud83d\udce1 \u591a\u4ea4\u6613\u5bf9\u76d1\u63a7","text":"<p>\u540c\u65f6\u76d1\u63a7\u591a\u4e2a\u4ea4\u6613\u5bf9\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\n\nasync def multi_symbol_stream():\n    \"\"\"\u591a\u4ea4\u6613\u5bf9\u5b9e\u65f6\u76d1\u63a7\"\"\"\n\n    symbols = [\"btcusdt\", \"ethusdt\", \"bnbusdt\"]\n    streams = [f\"{symbol}@ticker\" for symbol in symbols]\n    stream_string = \"/\".join(streams)\n    url = f\"wss://stream.binance.com:9443/stream?streams={stream_string}\"\n\n    print(f\"\ud83d\udcca \u76d1\u63a7 {len(symbols)} \u4e2a\u4ea4\u6613\u5bf9...\")\n\n    async with aiohttp.ClientSession() as session:\n        async with session.ws_connect(url) as ws:\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n\n                    if 'data' in data:\n                        ticker_data = data['data']\n                        symbol = ticker_data.get('s', '').upper()\n                        price = float(ticker_data.get('c', 0))\n                        change = float(ticker_data.get('P', 0))\n\n                        trend = \"\ud83d\udcc8\" if change &gt; 0 else \"\ud83d\udcc9\" if change &lt; 0 else \"\u27a1\ufe0f\"\n                        print(f\"{trend} {symbol}: ${price:,.4f} ({change:+.2f}%)\")\n\nasyncio.run(multi_symbol_stream())\n</code></pre>"},{"location":"guides/websocket/#_3","title":"\ud83d\udd27 \u8fde\u63a5\u914d\u7f6e","text":""},{"location":"guides/websocket/#_4","title":"\u4f7f\u7528\u4ee3\u7406","text":"<p>\u5982\u679c\u9700\u8981\u4ee3\u7406\u8fde\u63a5\uff1a</p> <pre><code>async def websocket_with_proxy():\n    \"\"\"\u4f7f\u7528\u4ee3\u7406\u7684WebSocket\u8fde\u63a5\"\"\"\n\n    url = \"wss://stream.binance.com:9443/ws/btcusdt@ticker\"\n    proxy = \"http://127.0.0.1:6152\"  # \u66ff\u6362\u4e3a\u4f60\u7684\u4ee3\u7406\u5730\u5740\n\n    connector = aiohttp.TCPConnector(ssl=False)\n\n    async with aiohttp.ClientSession(connector=connector) as session:\n        async with session.ws_connect(\n            url,\n            proxy=proxy,\n            proxy_headers={\"User-Agent\": \"Mozilla/5.0\"}\n        ) as ws:\n            print(\"\u2705 \u901a\u8fc7\u4ee3\u7406\u8fde\u63a5\u6210\u529f\")\n\n            async for msg in ws:\n                if msg.type == aiohttp.WSMsgType.TEXT:\n                    data = json.loads(msg.data)\n                    # \u5904\u7406\u6570\u636e...\n\nasyncio.run(websocket_with_proxy())\n</code></pre>"},{"location":"guides/websocket/#_5","title":"\u81ea\u52a8\u91cd\u8fde","text":"<pre><code>async def auto_reconnect_websocket():\n    \"\"\"\u5e26\u81ea\u52a8\u91cd\u8fde\u7684WebSocket\"\"\"\n\n    url = \"wss://stream.binance.com:9443/ws/btcusdt@ticker\"\n\n    while True:\n        try:\n            async with aiohttp.ClientSession() as session:\n                async with session.ws_connect(url) as ws:\n                    print(\"\u2705 WebSocket\u8fde\u63a5\u6210\u529f\")\n\n                    async for msg in ws:\n                        if msg.type == aiohttp.WSMsgType.TEXT:\n                            data = json.loads(msg.data)\n                            # \u5904\u7406\u6570\u636e...\n\n                        elif msg.type == aiohttp.WSMsgType.ERROR:\n                            print(\"\u274c WebSocket\u9519\u8bef\")\n                            break\n\n        except Exception as e:\n            print(f\"\u26a0\ufe0f \u8fde\u63a5\u65ad\u5f00: {e}\")\n            print(\"\ud83d\udd04 5\u79d2\u540e\u91cd\u8fde...\")\n            await asyncio.sleep(5)\n\n# \u8fd0\u884c\uff08Ctrl+C\u505c\u6b62\uff09\nasyncio.run(auto_reconnect_websocket())\n</code></pre>"},{"location":"guides/websocket/#_6","title":"\ud83d\udcbe \u4fdd\u5b58\u5b9e\u65f6\u6570\u636e","text":"<p>\u5c06\u5b9e\u65f6\u6570\u636e\u4fdd\u5b58\u5230\u6587\u4ef6\uff1a</p> <pre><code>import asyncio\nimport json\nimport aiohttp\nimport pandas as pd\nfrom datetime import datetime\n\nclass RealTimeDataCollector:\n    def __init__(self):\n        self.data = []\n\n    async def collect_tickers(self, symbols, duration_minutes=5):\n        \"\"\"\u6536\u96c6\u6307\u5b9a\u65f6\u95f4\u7684ticker\u6570\u636e\"\"\"\n\n        streams = [f\"{symbol.lower()}@ticker\" for symbol in symbols]\n        stream_string = \"/\".join(streams)\n        url = f\"wss://stream.binance.com:9443/stream?streams={stream_string}\"\n\n        start_time = datetime.now()\n\n        async with aiohttp.ClientSession() as session:\n            async with session.ws_connect(url) as ws:\n                print(f\"\ud83d\udcca \u5f00\u59cb\u6536\u96c6 {duration_minutes} \u5206\u949f\u6570\u636e...\")\n\n                async for msg in ws:\n                    if msg.type == aiohttp.WSMsgType.TEXT:\n                        data = json.loads(msg.data)\n\n                        if 'data' in data:\n                            ticker_data = data['data']\n\n                            # \u4fdd\u5b58\u6570\u636e\n                            self.data.append({\n                                'timestamp': datetime.now(),\n                                'symbol': ticker_data.get('s'),\n                                'price': float(ticker_data.get('c', 0)),\n                                'change': float(ticker_data.get('P', 0)),\n                                'volume': float(ticker_data.get('v', 0))\n                            })\n\n                            # \u68c0\u67e5\u65f6\u95f4\n                            elapsed = (datetime.now() - start_time).seconds / 60\n                            if elapsed &gt;= duration_minutes:\n                                break\n\n        # \u4fdd\u5b58\u4e3aCSV\n        df = pd.DataFrame(self.data)\n        filename = f\"realtime_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n        df.to_csv(filename, index=False)\n        print(f\"\ud83d\udcbe \u6570\u636e\u5df2\u4fdd\u5b58\u5230: {filename}\")\n        print(f\"\ud83d\udcca \u6536\u96c6\u5230 {len(self.data)} \u6761\u6570\u636e\")\n\n# \u4f7f\u7528\u793a\u4f8b\nasync def collect_data():\n    collector = RealTimeDataCollector()\n    await collector.collect_tickers([\"BTCUSDT\", \"ETHUSDT\"], duration_minutes=2)\n\nasyncio.run(collect_data())\n</code></pre>"},{"location":"guides/websocket/#_7","title":"\ud83d\udccb \u5e38\u7528\u6570\u636e\u6d41","text":"\u6570\u636e\u6d41 URL\u683c\u5f0f \u8bf4\u660e 24hr\u4ef7\u683c\u7edf\u8ba1 <code>{symbol}@ticker</code> \u6700\u5e38\u7528\u7684\u4ef7\u683c\u4fe1\u606f K\u7ebf\u6570\u636e <code>{symbol}@kline_{interval}</code> \u5b9e\u65f6K\u7ebf\uff0cinterval\u59821m,5m,1h \u6df1\u5ea6\u6570\u636e <code>{symbol}@depth{levels}</code> \u8ba2\u5355\u7c3f\u6df1\u5ea6 \u6210\u4ea4\u6570\u636e <code>{symbol}@trade</code> \u5b9e\u65f6\u6210\u4ea4\u8bb0\u5f55 \u805a\u5408\u6210\u4ea4 <code>{symbol}@aggTrade</code> \u805a\u5408\u7684\u6210\u4ea4\u6570\u636e"},{"location":"guides/websocket/#_8","title":"\u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u8fde\u63a5\u9650\u5236: \u5355\u4e2a\u8fde\u63a5\u6700\u591a1024\u4e2a\u6570\u636e\u6d41</li> <li>\u901f\u7387\u9650\u5236: \u6bcf\u79d2\u6700\u591a5\u4e2a\u8fde\u63a5\u8bf7\u6c42</li> <li>\u5fc3\u8df3\u68c0\u6d4b: 24\u5c0f\u65f6\u65e0\u6570\u636e\u4f1a\u81ea\u52a8\u65ad\u5f00</li> <li>\u9519\u8bef\u5904\u7406: \u5fc5\u987b\u5904\u7406\u8fde\u63a5\u65ad\u5f00\u548c\u91cd\u8fde</li> <li>\u8d44\u6e90\u7ba1\u7406: \u53ca\u65f6\u5173\u95ed\u4e0d\u7528\u7684\u8fde\u63a5</li> </ol>"}]}