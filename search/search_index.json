{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"CryptoService","text":"<p>CryptoService \u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u52a0\u5bc6\u8d27\u5e01\u4ea4\u6613\u6570\u636e\u670d\u52a1\u5e93\uff0c\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u9ad8\u6548\u3001\u53ef\u9760\u7684\u5e02\u573a\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u529f\u80fd\u3002</p>"},{"location":"#_1","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1</p> <ul> <li>\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u83b7\u53d6</li> <li>\u5386\u53f2K\u7ebf\u6570\u636e\u4e0b\u8f7d</li> <li>\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u652f\u6301</li> <li>WebSocket\u5b9e\u65f6\u6570\u636e\u6d41</li> </ul> </li> <li> <p>\u6570\u636e\u5b58\u50a8\u4e0e\u5904\u7406</p> <ul> <li>SQLite\u6570\u636e\u5e93\u5b58\u50a8</li> <li>KDTV\u683c\u5f0f\u6570\u636e\u652f\u6301</li> <li>\u9ad8\u6548\u7684\u6570\u636e\u5904\u7406\u5de5\u5177</li> <li>\u7075\u6d3b\u7684\u6570\u636e\u5bfc\u51fa\u529f\u80fd</li> </ul> </li> <li> <p>\u53ef\u89c6\u5316\u4e0e\u5206\u6790</p> <ul> <li>\u4e30\u5bcc\u7684\u6570\u636e\u53ef\u89c6\u5316\u5de5\u5177</li> <li>\u5b9e\u65f6\u5e02\u573a\u5206\u6790</li> <li>\u6027\u80fd\u4f18\u5316\u7684\u6570\u636e\u5904\u7406</li> </ul> </li> </ul>"},{"location":"#_2","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>pip install cryptoservice\n</code></pre> <p>\u57fa\u672c\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6\u5b9e\u65f6\u884c\u60c5\nbtc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"BTC\u5f53\u524d\u4ef7\u683c: {btc_ticker.last_price}\")\n\n# \u83b7\u53d6\u5386\u53f2\u6570\u636e\nhistorical_data = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1\n)\n</code></pre>"},{"location":"#_3","title":"\u6587\u6863\u5bfc\u822a","text":"<ul> <li>\u5b89\u88c5\u6307\u5357 - \u8be6\u7ec6\u7684\u5b89\u88c5\u8bf4\u660e</li> <li>\u57fa\u7840\u7528\u6cd5 - \u5feb\u901f\u5165\u95e8\u6307\u5357</li> <li>API\u6587\u6863 - \u5b8c\u6574\u7684API\u53c2\u8003</li> <li>\u793a\u4f8b\u4ee3\u7801 - \u4e30\u5bcc\u7684\u4f7f\u7528\u793a\u4f8b</li> </ul>"},{"location":"#_4","title":"\u8d21\u732e","text":"<p>\u6b22\u8fce\u63d0\u4ea4 Issue \u548c Pull Request\uff01\u8be6\u89c1\u8d21\u732e\u6307\u5357\u3002</p>"},{"location":"#_5","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1 - \u67e5\u770b LICENSE \u6587\u4ef6\u4e86\u89e3\u8be6\u60c5\u3002</p>"},{"location":"#_6","title":"\u5e02\u573a\u884c\u60c5\u6a21\u578b","text":""},{"location":"#_7","title":"\u57fa\u7840\u6a21\u578b","text":""},{"location":"#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>cryptoservice.models.market_ticker.BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"#_8","title":"\u73b0\u8d27\u884c\u60c5","text":""},{"location":"#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>cryptoservice.models.market_ticker.SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"#24","title":"24\u5c0f\u65f6\u884c\u60c5","text":""},{"location":"#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>cryptoservice.models.market_ticker.DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"#k","title":"K\u7ebf\u884c\u60c5","text":""},{"location":"#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>cryptoservice.models.market_ticker.KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"#_9","title":"\u6c38\u7eed\u5408\u7ea6\u884c\u60c5","text":""},{"location":"#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>cryptoservice.models.market_ticker.PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"api/market_service/","title":"\u5e02\u573a\u6570\u636e\u670d\u52a1","text":""},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService","title":"<code>cryptoservice.services.market_service.MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: Optional[MarketDB] = None\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService-functions","title":"Functions","text":""},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>| List[symbol]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <p>SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol | List[symbol]: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\")\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n        ]\n\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time = int(\n            datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n        end_time = int(\n            datetime.strptime(f\"{date} 23:59:59\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol, interval=\"1d\", startTime=start_time, endTime=end_time, limit=1\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; List[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[DailyMarketTicker]</code> <p>List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; List[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\")\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: Dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers = [ticker.to_dict() for ticker in self.get_symbol_ticker()]\n        summary[\"data\"] = tickers\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\")\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; List[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        if isinstance(start_time, str):\n            start_time = datetime.strptime(start_time, \"%Y%m%d\")\n        if isinstance(end_time, str):\n            end_time = datetime.strptime(end_time, \"%Y%m%d\")\n        end_time = end_time or datetime.now()\n\n        klines = self.client.get_historical_klines(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_time.strftime(\"%Y-%m-%d\"),\n            end_str=end_time.strftime(\"%Y-%m-%d\"),\n            limit=1000,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        return [KlineMarketTicker.from_binance_kline(k) for k in klines]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\")\n</code></pre>"},{"location":"api/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.m1, max_workers: int = 1, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        data_path: \u6570\u636e\u5b58\u50a8\u8def\u5f84\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n    \"\"\"\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        data_path = Path(data_path)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n        db_path = data_path / \"market.db\"\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        if self.db is None:\n            self.db = MarketDB(db_path, use_pool=True, max_connections=max_workers)\n\n        # \u8fdb\u5ea6\u663e\u793a\u5668\u8bbe\u7f6e\n        should_close_progress = False\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n                TimeElapsedColumn(),\n            )\n            should_close_progress = True\n\n        def process_symbol(symbol: str) -&gt; None:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6\"\"\"\n            retry_count = 0\n            while retry_count &lt; max_retries:\n                try:\n                    data = self._fetch_symbol_data(\n                        symbol=symbol,\n                        start_ts=start_time,\n                        end_ts=end_time,\n                        interval=interval,\n                        klines_type=HistoricalKlinesType.FUTURES,\n                    )\n\n                    if data:\n                        # \u786e\u4fdd db_pool \u4e0d\u4e3a None\n                        assert self.db is not None, \"Database pool is not initialized\"\n                        self.db.store_data(data, interval)  # \u76f4\u63a5\u4f20\u9012 data\uff0c\u4e0d\u9700\u8981\u5305\u88c5\u6210\u5217\u8868\n                        return\n                    else:\n                        logger.warning(f\"No data available for {symbol}\")\n                        return\n\n                except InvalidSymbolError as e:\n                    # \u5bf9\u4e8e\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u4fe1\u606f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\n                    logger.warning(f\"\u8df3\u8fc7\u4ea4\u6613\u5bf9 {symbol}: {e}\")\n                    return\n                except RateLimitError:\n                    wait_time = min(2**retry_count + 1, 30)\n                    time.sleep(wait_time)\n                    retry_count += 1\n                except Exception as e:\n                    if retry_count &lt; max_retries - 1:\n                        retry_count += 1\n                        logger.warning(f\"\u91cd\u8bd5 {retry_count}/{max_retries} - {symbol}: {str(e)}\")\n                        time.sleep(1)\n                    else:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25 - {symbol}: {str(e)}\")\n                        break\n\n        with progress if should_close_progress else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u5904\u7406\u6240\u6709\u4ea4\u6613\u5bf9\", total=len(symbols))\n\n            # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                # \u8ddf\u8e2a\u5b8c\u6210\u8fdb\u5ea6\n                for future in as_completed(futures):\n                    try:\n                        future.result()\n                        progress.update(overall_task, advance=1)\n                    except Exception as e:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25: {e}\")\n\n    except Exception as e:\n        logger.error(f\"Failed to fetch perpetual data: {e}\")\n        raise MarketDataFetchError(f\"Failed to fetch perpetual data: {e}\")\n    finally:\n        if self.db:\n            self.db.close()\n</code></pre>"},{"location":"api/models/","title":"\u6570\u636e\u6a21\u578b","text":""},{"location":"api/models/#cryptoservice.models.market_ticker","title":"<code>cryptoservice.models.market_ticker</code>","text":""},{"location":"api/models/#cryptoservice.models.market_ticker-classes","title":"Classes","text":""},{"location":"api/models/#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/#cryptoservice.models.market_ticker.KlineIndex","title":"<code>KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"api/models/#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"api/models/#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"api/models/#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"api/data/storage_db/","title":"\u6570\u636e\u5e93\u7ba1\u7406","text":""},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB","title":"<code>cryptoservice.data.storage_db.MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB-functions","title":"Functions","text":""},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB._init_db","title":"<code>_init_db() -&gt; None</code>","text":"<p>\u521d\u59cb\u5316\u6570\u636e\u5e93\u8868\u7ed3\u6784</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def _init_db(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\u8868\u7ed3\u6784\"\"\"\n    with sqlite3.connect(self.db_path) as conn:\n        conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS market_data (\n                symbol TEXT,\n                timestamp INTEGER,\n                freq TEXT,\n                open_price REAL,\n                high_price REAL,\n                low_price REAL,\n                close_price REAL,\n                volume REAL,\n                quote_volume REAL,\n                trades_count INTEGER,\n                taker_buy_volume REAL,\n                taker_buy_quote_volume REAL,\n                taker_sell_volume REAL,\n                taker_sell_quote_volume REAL,\n                PRIMARY KEY (symbol, timestamp, freq)\n            )\n        \"\"\"\n        )\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_symbol ON market_data(symbol)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_timestamp ON market_data(timestamp)\")\n        conn.execute(\"CREATE INDEX IF NOT EXISTS idx_freq ON market_data(freq)\")\n        conn.execute(\n            \"\"\"\n            CREATE INDEX IF NOT EXISTS idx_symbol_freq_timestamp\n            ON market_data(symbol, freq, timestamp)\n            \"\"\"\n        )\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_data","title":"<code>store_data(data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self, data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[List[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(data_list: Any) -&gt; TypeGuard[List[List[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(\n                f\"Successfully stored {len(records)} records for {symbol} \"\n                f\"with frequency {freq.value}\"\n            )\n\n    except Exception as e:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: List[str], features: Optional[List[str]] = None) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: List[str],\n    features: Optional[List[str]] = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        # \u6784\u5efa\u67e5\u8be2\n        if features is None:\n            features = [\n                \"open_price\",\n                \"high_price\",\n                \"low_price\",\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n        columns = \", \".join(features)\n        query = f\"\"\"\n            SELECT symbol, timestamp, {columns}\n            FROM market_data\n            WHERE timestamp BETWEEN ? AND ?\n            AND freq = ?\n            AND symbol IN ({','.join('?' * len(symbols))})\n            ORDER BY symbol, timestamp\n        \"\"\"\n        params = [start_ts, end_ts, freq.value] + symbols\n\n        # \u6267\u884c\u67e5\u8be2\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            raise ValueError(\"No data found for the specified criteria\")\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception as e:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception as e:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: List[str], target_freq: Optional[Freq] = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Optional[Freq]</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: List[str],\n    target_freq: Optional[Freq] = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u8ba1\u7b97\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        # \u6309chunk_days\u5206\u5757\u5904\u7406\n        for chunk_start in range(0, len(date_range), chunk_days):\n            chunk_end = min(chunk_start + chunk_days, len(date_range))\n            chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n            chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n            logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n            # \u8bfb\u53d6\u6570\u636e\u5757\n            df = self.read_data(chunk_start_date, chunk_end_date, freq, symbols)\n            if df.empty:\n                logger.warning(\n                    f\"No data found for period {chunk_start_date} to {chunk_end_date}\"\n                )\n                continue\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5b9a\u4e49\u9700\u8981\u5bfc\u51fa\u7684\u7279\u5f81\n            features = [\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"high_price\",\n                \"low_price\",\n                \"open_price\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n            # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\u4e2d\u7684\u6bcf\u4e00\u5929\n            chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n            for date in chunk_dates:\n                date_str = date.strftime(\"%Y%m%d\")\n                # \u4fdd\u5b58\u4ea4\u6613\u5bf9\u987a\u5e8f\n                symbols_path = output_path / freq.value / date_str / \"universe_token.pkl\"\n                symbols_path.parent.mkdir(parents=True, exist_ok=True)\n                pd.Series(df.index.get_level_values(\"symbol\").unique()).to_pickle(symbols_path)\n\n                # \u83b7\u53d6\u5f53\u5929\u6570\u636e\n                timestamps = df.index.get_level_values(\"timestamp\")\n                # \u5c06timestamps\u8f6c\u6362\u4e3adatetime\u7c7b\u578b\n                datetime_timestamps = pd.to_datetime(timestamps)\n                # \u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u5730\u8bbf\u95eedate\u5c5e\u6027\n                dates = [ts.date() for ts in datetime_timestamps]\n\n                # \u6216\u8005\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\n                from datetime import datetime\n\n                # \u663e\u5f0f\u8f6c\u6362\u4e3adatetime\u5bf9\u8c61\u5217\u8868\n                datetime_list = [pd.Timestamp(ts).to_pydatetime() for ts in timestamps]\n                # \u7136\u540e\u8bbf\u95eedate\u5c5e\u6027\n                day_data = df[\n                    df.index.get_level_values(\"timestamp\").isin(\n                        [ts for ts in timestamps if pd.Timestamp(ts).date() == date.date()]\n                    )\n                ]\n                if day_data.empty:\n                    continue\n\n                # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u521b\u5efa\u5e76\u5b58\u50a8\u6570\u636e\n                for feature in features:\n                    # \u91cd\u5851\u6570\u636e\u4e3a K x T \u77e9\u9635\n                    pivot_data = day_data[feature].unstack(level=\"timestamp\")\n                    array = pivot_data.values\n\n                    # \u521b\u5efa\u5b58\u50a8\u8def\u5f84\n                    save_path = output_path / freq.value / date_str / feature\n                    save_path.mkdir(parents=True, exist_ok=True)\n\n                    # \u4fdd\u5b58\u4e3anpy\u683c\u5f0f\n                    np.save(save_path / f\"{date_str}.npy\", array)\n\n            # \u6e05\u7406\u5185\u5b58\n            del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[Tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(\n                f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\"\n            )\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_db/#cryptoservice.data.storage_db.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"api/data/storage_utils/","title":"\u6570\u636e\u5b58\u50a8\u5de5\u5177","text":""},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils","title":"<code>cryptoservice.data.storage_utils.StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils-functions","title":"Functions","text":""},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils._resolve_path","title":"<code>_resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path</code>  <code>staticmethod</code>","text":"<p>\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84.</p> PARAMETER DESCRIPTION <code>data_path</code> <p>\u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>base_dir</code> <p>\u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>\u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84</p> <p> TYPE: <code>Path</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef _resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path:\n    \"\"\"\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84.\n\n    Args:\n        data_path: \u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84\n        base_dir: \u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55\n\n    Returns:\n        Path: \u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84\n    \"\"\"\n    try:\n        path = Path(data_path)\n        if not path.is_absolute():\n            base = Path(base_dir) if base_dir else Path.cwd()\n            path = base / path\n        return path.resolve()\n    except Exception as e:\n        raise ValueError(f\"Failed to resolve path '{data_path}': {str(e)}\")\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = (\n            date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n        )\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception as e:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] = ['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume'], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume']</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        dates = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in dates]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(\n                    start=pd.Timestamp(date), periods=array.shape[1], freq=freq\n                )\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                df = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                df.name = feature\n                date_data.append(df)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for (symbol, time), row in df.iterrows():\n                values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(str(time), symbol, *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(\n                f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\"\n            )\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(\n                f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\"\n            )\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\n                \"[yellow]Warning: Index length is less than data length[/]\"\n            )\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"api/data/storage_utils/#_2","title":"\u8def\u5f84\u89e3\u6790","text":""},{"location":"api/data/storage_utils/#_resolve_path","title":"_resolve_path","text":"<p>\u89e3\u6790\u8def\u5f84\uff0c\u5c06\u76f8\u5bf9\u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84\u3002</p> <pre><code>@staticmethod\ndef _resolve_path(data_path: Path | str, base_dir: Path | str | None = None) -&gt; Path\n</code></pre> <p>\u53c2\u6570: - <code>data_path</code>: \u8f93\u5165\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u6216\u7edd\u5bf9\u8def\u5f84 - <code>base_dir</code>: \u57fa\u51c6\u76ee\u5f55\uff0c\u7528\u4e8e\u89e3\u6790\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u4e3a None\uff0c\u5219\u4f7f\u7528\u5f53\u524d\u76ee\u5f55</p> <p>\u8fd4\u56de: - <code>Path</code>: \u89e3\u6790\u540e\u7684\u7edd\u5bf9\u8def\u5f84</p> <p>\u793a\u4f8b: <pre><code>from cryptoservice.data import StorageUtils\n\n# \u89e3\u6790\u76f8\u5bf9\u8def\u5f84\npath = StorageUtils._resolve_path(\"./data\")\nprint(f\"\u7edd\u5bf9\u8def\u5f84: {path}\")\n</code></pre></p>"},{"location":"api/data/storage_utils/#_3","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"api/data/storage_utils/#store_kdtv_data","title":"store_kdtv_data","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>data</code>: \u5e02\u573a\u6570\u636e\u5217\u8868 - <code>date</code>: \u65e5\u671f (YYYYMMDD) - <code>freq</code>: \u9891\u7387 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u793a\u4f8b: <pre><code># \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#store_universe","title":"store_universe","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\u3002</p> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>symbols</code>: \u4ea4\u6613\u5bf9\u5217\u8868 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u793a\u4f8b: <pre><code># \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_4","title":"\u6570\u636e\u8bfb\u53d6","text":""},{"location":"api/data/storage_utils/#read_kdtv_data","title":"read_kdtv_data","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame\n</code></pre> <p>\u53c2\u6570: - <code>start_date</code>: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD) - <code>end_date</code>: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD) - <code>freq</code>: \u9891\u7387 - <code>features</code>: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p>\u8fd4\u56de: - <code>pd.DataFrame</code>: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> <p>\u793a\u4f8b: <pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\ndata = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\"close_price\", \"volume\"],\n    data_path=\"./data\"\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_5","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"api/data/storage_utils/#read_and_visualize_kdtv","title":"read_and_visualize_kdtv","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>date</code>: \u65e5\u671f (YYYY-MM-DD) - <code>freq</code>: \u9891\u7387 - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55 - <code>max_rows</code>: \u6700\u5927\u663e\u793a\u884c\u6570 - <code>max_symbols</code>: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p>\u793a\u4f8b: <pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=3\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#visualize_npy_data","title":"visualize_npy_data","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e\u3002</p> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>file_path</code>: npy \u6587\u4ef6\u8def\u5f84 - <code>max_rows</code>: \u6700\u5927\u663e\u793a\u884c\u6570 - <code>headers</code>: \u5217\u6807\u9898 - <code>index</code>: \u884c\u7d22\u5f15</p> <p>\u793a\u4f8b: <pre><code># \u53ef\u89c6\u5316NPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"09:00\", \"10:00\", \"11:00\"],\n    index=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n)\n</code></pre></p>"},{"location":"api/data/storage_utils/#_6","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u6240\u6709\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u4ee5\u4e0b\u5f02\u5e38\uff1a</p> <ul> <li><code>FileNotFoundError</code>: \u6587\u4ef6\u4e0d\u5b58\u5728</li> <li><code>ValueError</code>: \u6570\u636e\u683c\u5f0f\u9519\u8bef\u6216\u53c2\u6570\u65e0\u6548</li> <li><code>Exception</code>: \u5176\u4ed6\u9519\u8bef</li> </ul>"},{"location":"api/data/storage_utils/#_7","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li> <p>\u8def\u5f84\u7ba1\u7406 <pre><code># \u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\ndata_path = StorageUtils._resolve_path(\"./data\")\n\n# \u5b58\u50a8\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=data,\n    date=date,\n    freq=freq,\n    data_path=data_path\n)\n</code></pre></p> </li> <li> <p>\u9519\u8bef\u5904\u7406 <pre><code>try:\n    data = StorageUtils.read_kdtv_data(...)\nexcept FileNotFoundError as e:\n    logger.error(f\"\u6587\u4ef6\u4e0d\u5b58\u5728: {e}\")\nexcept ValueError as e:\n    logger.error(f\"\u6570\u636e\u683c\u5f0f\u9519\u8bef: {e}\")\n</code></pre></p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1 <pre><code># \u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\nif data.empty:\n    raise ValueError(\"No data available\")\n\n# \u68c0\u67e5\u6570\u636e\u7c7b\u578b\nif not isinstance(data, pd.DataFrame):\n    raise TypeError(\"Expected DataFrame\")\n</code></pre></p> </li> </ol>"},{"location":"api/data/storage_utils/#_8","title":"\u76f8\u5173\u94fe\u63a5","text":"<ul> <li>KDTV\u683c\u5f0f\u6307\u5357</li> <li>\u6570\u636e\u53ef\u89c6\u5316\u6307\u5357</li> <li>\u6570\u636e\u5b58\u50a8\u6307\u5357</li> </ul>"},{"location":"api/models/enums/","title":"\u679a\u4e3e\u7c7b\u578b","text":""},{"location":"api/models/enums/#_2","title":"\u9891\u7387\u679a\u4e3e","text":""},{"location":"api/models/enums/#cryptoservice.models.Freq","title":"<code>cryptoservice.models.Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"api/models/enums/#cryptoservice.models.Freq-functions","title":"Functions","text":""},{"location":"api/models/enums/#cryptoservice.models.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"api/models/enums/#_3","title":"\u6392\u5e8f\u65b9\u5f0f","text":""},{"location":"api/models/enums/#cryptoservice.models.SortBy","title":"<code>cryptoservice.models.SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"api/models/enums/#k","title":"K\u7ebf\u7c7b\u578b","text":""},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType","title":"<code>cryptoservice.models.HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"api/models/enums/#cryptoservice.models.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"api/models/market_ticker/","title":"\u5e02\u573a\u6570\u636e\u6a21\u578b","text":""},{"location":"api/models/market_ticker/#_2","title":"\u57fa\u7840\u6a21\u578b","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>cryptoservice.models.market_ticker.BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/market_ticker/#_3","title":"\u73b0\u8d27\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>cryptoservice.models.market_ticker.SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"api/models/market_ticker/#24","title":"24\u5c0f\u65f6\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>cryptoservice.models.market_ticker.DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/market_ticker/#k","title":"K\u7ebf\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>cryptoservice.models.market_ticker.KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"api/models/market_ticker/#k_1","title":"K\u7ebf\u6570\u636e\u7d22\u5f15","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.KlineIndex","title":"<code>cryptoservice.models.market_ticker.KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"api/models/market_ticker/#_4","title":"\u6c38\u7eed\u5408\u7ea6\u884c\u60c5","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>cryptoservice.models.market_ticker.PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"api/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"api/services/market_service/","title":"\u5e02\u573a\u6570\u636e\u670d\u52a1","text":""},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService","title":"<code>cryptoservice.services.market_service.MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: Optional[MarketDB] = None\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService-functions","title":"Functions","text":""},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>| List[symbol]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <p>SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol | List[symbol]: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\")\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; List[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[DailyMarketTicker]</code> <p>List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; List[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\")\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: Dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers = [ticker.to_dict() for ticker in self.get_symbol_ticker()]\n        summary[\"data\"] = tickers\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\")\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; List[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        if isinstance(start_time, str):\n            start_time = datetime.strptime(start_time, \"%Y%m%d\")\n        if isinstance(end_time, str):\n            end_time = datetime.strptime(end_time, \"%Y%m%d\")\n        end_time = end_time or datetime.now()\n\n        klines = self.client.get_historical_klines(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_time.strftime(\"%Y-%m-%d\"),\n            end_str=end_time.strftime(\"%Y-%m-%d\"),\n            limit=1000,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        return [KlineMarketTicker.from_binance_kline(k) for k in klines]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\")\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.m1, max_workers: int = 1, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        data_path: \u6570\u636e\u5b58\u50a8\u8def\u5f84\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n    \"\"\"\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        data_path = Path(data_path)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n        db_path = data_path / \"market.db\"\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        if self.db is None:\n            self.db = MarketDB(db_path, use_pool=True, max_connections=max_workers)\n\n        # \u8fdb\u5ea6\u663e\u793a\u5668\u8bbe\u7f6e\n        should_close_progress = False\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n                TimeElapsedColumn(),\n            )\n            should_close_progress = True\n\n        def process_symbol(symbol: str) -&gt; None:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6\"\"\"\n            retry_count = 0\n            while retry_count &lt; max_retries:\n                try:\n                    data = self._fetch_symbol_data(\n                        symbol=symbol,\n                        start_ts=start_time,\n                        end_ts=end_time,\n                        interval=interval,\n                        klines_type=HistoricalKlinesType.FUTURES,\n                    )\n\n                    if data:\n                        # \u786e\u4fdd db_pool \u4e0d\u4e3a None\n                        assert self.db is not None, \"Database pool is not initialized\"\n                        self.db.store_data(data, interval)  # \u76f4\u63a5\u4f20\u9012 data\uff0c\u4e0d\u9700\u8981\u5305\u88c5\u6210\u5217\u8868\n                        return\n                    else:\n                        logger.warning(f\"No data available for {symbol}\")\n                        return\n\n                except InvalidSymbolError as e:\n                    # \u5bf9\u4e8e\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u4fe1\u606f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\n                    logger.warning(f\"\u8df3\u8fc7\u4ea4\u6613\u5bf9 {symbol}: {e}\")\n                    return\n                except RateLimitError:\n                    wait_time = min(2**retry_count + 1, 30)\n                    time.sleep(wait_time)\n                    retry_count += 1\n                except Exception as e:\n                    if retry_count &lt; max_retries - 1:\n                        retry_count += 1\n                        logger.warning(f\"\u91cd\u8bd5 {retry_count}/{max_retries} - {symbol}: {str(e)}\")\n                        time.sleep(1)\n                    else:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25 - {symbol}: {str(e)}\")\n                        break\n\n        with progress if should_close_progress else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u5904\u7406\u6240\u6709\u4ea4\u6613\u5bf9\", total=len(symbols))\n\n            # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                # \u8ddf\u8e2a\u5b8c\u6210\u8fdb\u5ea6\n                for future in as_completed(futures):\n                    try:\n                        future.result()\n                        progress.update(overall_task, advance=1)\n                    except Exception as e:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25: {e}\")\n\n    except Exception as e:\n        logger.error(f\"Failed to fetch perpetual data: {e}\")\n        raise MarketDataFetchError(f\"Failed to fetch perpetual data: {e}\")\n    finally:\n        if self.db:\n            self.db.close()\n</code></pre>"},{"location":"api/services/market_service/#cryptoservice.services.market_service.MarketDataService._fetch_symbol_data","title":"<code>_fetch_symbol_data(symbol: str, start_ts: str, end_ts: str, interval: Freq, klines_type: HistoricalKlinesType = HistoricalKlinesType.FUTURES) -&gt; List[PerpetualMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_ts</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_ts</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>FUTURES</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def _fetch_symbol_data(\n    self,\n    symbol: str,\n    start_ts: str,\n    end_ts: str,\n    interval: Freq,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.FUTURES,\n) -&gt; List[PerpetualMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_ts: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_ts: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n    \"\"\"\n    try:\n\n        # \u68c0\u67e5\u5f00\u59cb\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\uff0c\u4f46\u4ec5\u8bb0\u5f55\u8b66\u544a\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38\n        if klines_type == HistoricalKlinesType.FUTURES:\n            start_date = start_ts.split(\" \")[0] if \" \" in start_ts else start_ts\n            if not self.check_symbol_exists_on_date(symbol, start_date):\n                logger.warning(\n                    f\"\u4ea4\u6613\u5bf9 {symbol} \u5728\u5f00\u59cb\u65e5\u671f {start_date} \u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u4ea4\u6613\u6570\u636e\uff0c\u5c1d\u8bd5\u83b7\u53d6\u53ef\u7528\u6570\u636e\"\n                )\n                # \u4e0d\u518d\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u7ee7\u7eed\u6267\u884c\uff0c\u8ba9API\u8fd4\u56de\u6709\u6548\u7684\u6570\u636e\u8303\u56f4\n\n        klines = self.client.get_historical_klines_generator(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_ts,\n            end_str=end_ts,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        # \u5904\u7406\u7a7a\u6570\u636e\u60c5\u51b5\n        data = list(klines)\n        if not data:\n            logger.warning(f\"\u672a\u627e\u5230\u4ea4\u6613\u5bf9 {symbol} \u5728 {start_ts} \u5230 {end_ts} \u4e4b\u95f4\u7684\u6570\u636e\")\n            return []  # \u8fd4\u56de\u7a7a\u5217\u8868\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\n\n        # \u5904\u7406\u6709\u6570\u636e\u7684\u60c5\u51b5\n        return [\n            PerpetualMarketTicker(\n                symbol=symbol, open_time=kline[0], raw_data=kline  # \u4fdd\u5b58\u539f\u59cb\u6570\u636e\n            )\n            for kline in data\n        ]\n\n    except Exception as e:\n        logger.error(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9 {symbol} \u6570\u636e\u5931\u8d25: {e}\")\n        if isinstance(e, InvalidSymbolError):\n            # \u5bf9\u4e8e\u65e0\u6548\u4ea4\u6613\u5bf9\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u540e\u8fd4\u56de\u7a7a\u5217\u8868\n            return []\n        else:\n            # \u5bf9\u4e8e\u5176\u4ed6\u5f02\u5e38\uff0c\u4ecd\u7136\u629b\u51fa\u4ee5\u4fbf\u4e0a\u5c42\u5904\u7406\n            raise MarketDataFetchError(f\"\u83b7\u53d6\u4ea4\u6613\u5bf9 {symbol} \u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"api/services/market_service/#_2","title":"\u521d\u59cb\u5316","text":"<pre><code>from cryptoservice import MarketDataService\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n</code></pre>"},{"location":"api/services/market_service/#_3","title":"\u5b9e\u65f6\u884c\u60c5","text":""},{"location":"api/services/market_service/#get_symbol_ticker","title":"get_symbol_ticker","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\u6570\u636e\u3002</p> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]\n</code></pre> <p>\u53c2\u6570: - <code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5</p> <p>\u8fd4\u56de: - \u5355\u4e2a\u4ea4\u6613\u5bf9\u8fd4\u56de <code>SymbolTicker</code> \u5bf9\u8c61 - \u6240\u6709\u4ea4\u6613\u5bf9\u8fd4\u56de <code>List[SymbolTicker]</code></p> <p>\u793a\u4f8b: <pre><code># \u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\nbtc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"BTC\u4ef7\u683c: {btc_ticker.last_price}\")\n\n# \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\nall_tickers = service.get_symbol_ticker()\nfor ticker in all_tickers[:5]:\n    print(f\"{ticker.symbol}: {ticker.last_price}\")\n</code></pre></p>"},{"location":"api/services/market_service/#get_top_coins","title":"get_top_coins","text":"<p>\u83b7\u53d6\u6309\u6307\u5b9a\u6761\u4ef6\u6392\u5e8f\u7684\u524dN\u4e2a\u4ea4\u6613\u5bf9\u3002</p> <pre><code>def get_top_coins(\n    self,\n    limit: int = 10,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None\n) -&gt; List[DailyMarketTicker]\n</code></pre> <p>\u53c2\u6570: - <code>limit</code>: \u8fd4\u56de\u7684\u4ea4\u6613\u5bf9\u6570\u91cf - <code>sort_by</code>: \u6392\u5e8f\u65b9\u5f0f\uff0c\u652f\u6301 <code>SortBy</code> \u679a\u4e3e\u4e2d\u7684\u9009\u9879 - <code>quote_asset</code>: \u57fa\u51c6\u8d44\u4ea7\uff0c\u5982 \"USDT\"</p> <p>\u8fd4\u56de: - <code>List[DailyMarketTicker]</code>: \u6392\u5e8f\u540e\u7684\u4ea4\u6613\u5bf9\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code># \u83b7\u53d6USDT\u4ea4\u6613\u5bf9\u4e2d\u6210\u4ea4\u91cf\u6700\u5927\u768410\u4e2a\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n</code></pre></p>"},{"location":"api/services/market_service/#get_market_summary","title":"get_market_summary","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8\u6570\u636e\u3002</p> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]\n</code></pre> <p>\u53c2\u6570: - <code>interval</code>: \u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba4\u4e3a\u65e5\u7ebf\u6570\u636e</p> <p>\u8fd4\u56de: - \u5305\u542b\u5e02\u573a\u6982\u89c8\u6570\u636e\u7684\u5b57\u5178</p> <p>\u793a\u4f8b: <pre><code>summary = service.get_market_summary(interval=Freq.h1)\nprint(f\"\u6570\u636e\u65f6\u95f4: {summary['snapshot_time']}\")\n</code></pre></p>"},{"location":"api/services/market_service/#_4","title":"\u5386\u53f2\u6570\u636e","text":""},{"location":"api/services/market_service/#get_historical_klines","title":"get_historical_klines","text":"<p>\u83b7\u53d6\u5386\u53f2K\u7ebf\u6570\u636e\u3002</p> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT\n) -&gt; List[KlineMarketTicker]\n</code></pre> <p>\u53c2\u6570: - <code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0 - <code>start_time</code>: \u5f00\u59cb\u65f6\u95f4\uff0c\u652f\u6301\u5b57\u7b26\u4e32\u6216datetime\u5bf9\u8c61 - <code>end_time</code>: \u7ed3\u675f\u65f6\u95f4\uff0c\u652f\u6301\u5b57\u7b26\u4e32\u6216datetime\u5bf9\u8c61 - <code>interval</code>: \u65f6\u95f4\u95f4\u9694 - <code>klines_type</code>: K\u7ebf\u7c7b\u578b\uff0c\u652f\u6301\u73b0\u8d27\u3001\u6c38\u7eed\u5408\u7ea6\u7b49</p> <p>\u8fd4\u56de: - <code>List[KlineMarketTicker]</code>: K\u7ebf\u6570\u636e\u5217\u8868</p> <p>\u793a\u4f8b: <pre><code>klines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n</code></pre></p>"},{"location":"api/services/market_service/#_5","title":"\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":""},{"location":"api/services/market_service/#get_perpetual_data","title":"get_perpetual_data","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8\u3002</p> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None\n) -&gt; None\n</code></pre> <p>\u53c2\u6570: - <code>symbols</code>: \u4ea4\u6613\u5bf9\u5217\u8868 - <code>start_time</code>: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD) - <code>data_path</code>: \u6570\u636e\u5b58\u50a8\u8def\u5f84 - <code>end_time</code>: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD) - <code>interval</code>: \u65f6\u95f4\u95f4\u9694 - <code>max_workers</code>: \u6700\u5927\u7ebf\u7a0b\u6570 - <code>max_retries</code>: \u6700\u5927\u91cd\u8bd5\u6b21\u6570 - <code>progress</code>: \u8fdb\u5ea6\u663e\u793a\u5668</p> <p>\u793a\u4f8b: <pre><code>service.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    data_path=\"./data\",\n    interval=Freq.h1,\n    max_workers=4\n)\n</code></pre></p>"},{"location":"api/services/market_service/#_6","title":"\u5185\u90e8\u51fd\u6570","text":""},{"location":"api/services/market_service/#_fetch_symbol_data","title":"_fetch_symbol_data","text":"<p>\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u3002</p> <pre><code>def _fetch_symbol_data(\n    self,\n    symbol: str,\n    start_ts: str,\n    end_ts: str,\n    interval: Freq,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT\n) -&gt; List[PerpetualMarketTicker]\n</code></pre> <p>\u53c2\u6570: - <code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0 - <code>start_ts</code>: \u5f00\u59cb\u65f6\u95f4\u6233 - <code>end_ts</code>: \u7ed3\u675f\u65f6\u95f4\u6233 - <code>interval</code>: \u65f6\u95f4\u95f4\u9694 - <code>klines_type</code>: K\u7ebf\u7c7b\u578b</p> <p>\u8fd4\u56de: - <code>List[PerpetualMarketTicker]</code>: \u5e02\u573a\u6570\u636e\u5217\u8868</p>"},{"location":"api/services/market_service/#_7","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u6240\u6709\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u4ee5\u4e0b\u5f02\u5e38\uff1a</p> <ul> <li><code>MarketDataFetchError</code>: \u83b7\u53d6\u6570\u636e\u5931\u8d25</li> <li><code>InvalidSymbolError</code>: \u65e0\u6548\u7684\u4ea4\u6613\u5bf9</li> <li><code>RateLimitError</code>: API\u8bf7\u6c42\u901f\u7387\u9650\u5236</li> <li><code>MarketDataParseError</code>: \u6570\u636e\u89e3\u6790\u9519\u8bef</li> </ul>"},{"location":"api/services/market_service/#_8","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li> <p>\u9519\u8bef\u5904\u7406 <pre><code>try:\n    data = service.get_historical_klines(...)\nexcept MarketDataFetchError as e:\n    logger.error(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\nexcept InvalidSymbolError as e:\n    logger.error(f\"\u65e0\u6548\u7684\u4ea4\u6613\u5bf9: {e}\")\n</code></pre></p> </li> <li> <p>\u5e76\u884c\u5904\u7406 <pre><code>service.get_perpetual_data(\n    symbols=symbols,\n    start_time=start_time,\n    end_time=end_time,\n    max_workers=4  # \u4f7f\u75284\u4e2a\u7ebf\u7a0b\u5e76\u884c\u5904\u7406\n)\n</code></pre></p> </li> <li> <p>\u8fdb\u5ea6\u663e\u793a <pre><code>from rich.progress import Progress\n\nwith Progress() as progress:\n    service.get_perpetual_data(\n        symbols=symbols,\n        start_time=start_time,\n        end_time=end_time,\n        progress=progress\n    )\n</code></pre></p> </li> </ol>"},{"location":"api/services/market_service/#_9","title":"\u76f8\u5173\u94fe\u63a5","text":"<ul> <li>\u5b9e\u65f6\u884c\u60c5\u6307\u5357</li> <li>\u5386\u53f2\u6570\u636e\u6307\u5357</li> <li>\u6c38\u7eed\u5408\u7ea6\u6307\u5357</li> <li>\u6570\u636e\u5b58\u50a8\u6307\u5357</li> </ul>"},{"location":"getting-started/basic-usage/","title":"\u57fa\u7840\u7528\u6cd5","text":"<p>\u672c\u6307\u5357\u5c06\u4ecb\u7ecd CryptoService \u7684\u57fa\u672c\u529f\u80fd\u548c\u4f7f\u7528\u65b9\u6cd5\u3002</p>"},{"location":"getting-started/basic-usage/#_2","title":"\u521d\u59cb\u5316\u670d\u52a1","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq, HistoricalKlinesType\n\n# \u4f7f\u7528API\u5bc6\u94a5\u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(\n    api_key=\"your_api_key\",\n    api_secret=\"your_api_secret\"\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_3","title":"\u83b7\u53d6\u5b9e\u65f6\u884c\u60c5","text":""},{"location":"getting-started/basic-usage/#_4","title":"\u5355\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5","text":"<pre><code># \u83b7\u53d6BTC/USDT\u7684\u5b9e\u65f6\u884c\u60c5\nbtc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"BTC\u4ef7\u683c: {btc_ticker.last_price}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_5","title":"\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u884c\u60c5","text":"<pre><code># \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\nall_tickers = service.get_symbol_ticker()\nfor ticker in all_tickers[:5]:  # \u663e\u793a\u524d5\u4e2a\n    print(f\"{ticker.symbol}: {ticker.last_price}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_6","title":"\u83b7\u53d6\u5386\u53f2\u6570\u636e","text":""},{"location":"getting-started/basic-usage/#k","title":"K\u7ebf\u6570\u636e","text":"<pre><code># \u83b7\u53d61\u5c0f\u65f6K\u7ebf\u6570\u636e\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\nfor kline in klines[:5]:\n    print(f\"\u65f6\u95f4: {kline.open_time}, \u5f00\u76d8\u4ef7: {kline.open_price}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_7","title":"\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":"<pre><code># \u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_8","title":"\u6570\u636e\u5b58\u50a8\u548c\u8bfb\u53d6","text":""},{"location":"getting-started/basic-usage/#_9","title":"\u4ece\u6570\u636e\u5e93\u8bfb\u53d6","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\ndb = MarketDB(\"./data/market.db\")\n\n# \u8bfb\u53d6\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n\nprint(data.head())\n</code></pre>"},{"location":"getting-started/basic-usage/#kdtv","title":"\u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n\nprint(kdtv_data.head())\n</code></pre>"},{"location":"getting-started/basic-usage/#_10","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"getting-started/basic-usage/#_11","title":"\u53ef\u89c6\u5316\u6570\u636e\u5e93\u6570\u636e","text":"<pre><code># \u53ef\u89c6\u5316\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#kdtv_1","title":"\u53ef\u89c6\u5316KDTV\u6570\u636e","text":"<pre><code># \u53ef\u89c6\u5316KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=3\n)\n</code></pre>"},{"location":"getting-started/basic-usage/#_12","title":"\u9519\u8bef\u5904\u7406","text":"<pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u7684\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"getting-started/basic-usage/#_13","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b\u5e02\u573a\u6570\u636e\u6307\u5357\u4e86\u89e3\u66f4\u591a\u5e02\u573a\u6570\u636e\u529f\u80fd</li> <li>\u4e86\u89e3\u6570\u636e\u5904\u7406\u7684\u9ad8\u7ea7\u7528\u6cd5</li> <li>\u53c2\u8003API\u6587\u6863\u83b7\u53d6\u8be6\u7ec6\u63a5\u53e3\u4fe1\u606f</li> </ul>"},{"location":"getting-started/configuration/","title":"\u914d\u7f6e\u8bf4\u660e","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u8bf4\u660e\u4e86 CryptoService \u7684\u6240\u6709\u914d\u7f6e\u9009\u9879\u3002</p>"},{"location":"getting-started/configuration/#_2","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_3","title":"\u5fc5\u9700\u7684\u73af\u5883\u53d8\u91cf","text":"<pre><code># Binance API \u914d\u7f6e\nBINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre>"},{"location":"getting-started/configuration/#_4","title":"\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf","text":"<pre><code># \u4ee3\u7406\u8bbe\u7f6e\nHTTP_PROXY=http://proxy.example.com:8080\nHTTPS_PROXY=http://proxy.example.com:8080\n\n# \u65e5\u5fd7\u7ea7\u522b\nLOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n\n# \u6570\u636e\u5b58\u50a8\u8def\u5f84\nDATA_STORAGE_PATH=./data\n</code></pre>"},{"location":"getting-started/configuration/#_5","title":"\u6570\u636e\u5b58\u50a8\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_6","title":"\u6570\u636e\u5e93\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u8def\u5f84\ndb = MarketDB(\"./custom/path/market.db\")\n</code></pre>"},{"location":"getting-started/configuration/#kdtv","title":"KDTV\u683c\u5f0f\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u81ea\u5b9a\u4e49\u5b58\u50a8\u8def\u5f84\nStorageUtils.store_kdtv_data(\n    data=data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./custom/path\"\n)\n</code></pre>"},{"location":"getting-started/configuration/#_7","title":"\u9891\u7387\u8bbe\u7f6e","text":"<p>\u652f\u6301\u7684\u65f6\u95f4\u9891\u7387\uff1a</p> <pre><code>from cryptoservice.models import Freq\n\n# \u5206\u949f\u7ea7\u522b\nFreq.m1  # 1\u5206\u949f\nFreq.m3  # 3\u5206\u949f\nFreq.m5  # 5\u5206\u949f\nFreq.m15 # 15\u5206\u949f\nFreq.m30 # 30\u5206\u949f\n\n# \u5c0f\u65f6\u7ea7\u522b\nFreq.h1  # 1\u5c0f\u65f6\nFreq.h2  # 2\u5c0f\u65f6\nFreq.h4  # 4\u5c0f\u65f6\nFreq.h6  # 6\u5c0f\u65f6\nFreq.h8  # 8\u5c0f\u65f6\nFreq.h12 # 12\u5c0f\u65f6\n\n# \u65e5\u7ea7\u522b\nFreq.d1  # 1\u5929\n</code></pre>"},{"location":"getting-started/configuration/#_8","title":"\u5e02\u573a\u7c7b\u578b\u8bbe\u7f6e","text":"<p>\u652f\u6301\u7684\u5e02\u573a\u7c7b\u578b\uff1a</p> <pre><code>from cryptoservice.models import HistoricalKlinesType\n\n# \u73b0\u8d27\u5e02\u573a\nHistoricalKlinesType.SPOT\n\n# \u6c38\u7eed\u5408\u7ea6\u5e02\u573a\nHistoricalKlinesType.FUTURES\n\n# \u5e01\u672c\u4f4d\u5408\u7ea6\u5e02\u573a\nHistoricalKlinesType.FUTURES_COIN\n</code></pre>"},{"location":"getting-started/configuration/#_9","title":"\u6027\u80fd\u4f18\u5316\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_10","title":"\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u914d\u7f6e","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u914d\u7f6e\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5  # \u6700\u5927\u8fde\u63a5\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_11","title":"\u5e76\u884c\u5904\u7406\u914d\u7f6e","text":"<pre><code># \u914d\u7f6e\u6570\u636e\u83b7\u53d6\u7684\u5e76\u884c\u5ea6\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_workers=4  # \u5e76\u884c\u7ebf\u7a0b\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_12","title":"\u9519\u8bef\u5904\u7406\u914d\u7f6e","text":""},{"location":"getting-started/configuration/#_13","title":"\u91cd\u8bd5\u914d\u7f6e","text":"<pre><code># \u914d\u7f6e\u6700\u5927\u91cd\u8bd5\u6b21\u6570\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"getting-started/configuration/#_14","title":"\u65e5\u5fd7\u914d\u7f6e","text":"<pre><code>import logging\nfrom rich.logging import RichHandler\n\n# \u914d\u7f6e\u65e5\u5fd7\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(message)s\",\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(rich_tracebacks=True)]\n)\n</code></pre>"},{"location":"getting-started/configuration/#_15","title":"\u914d\u7f6e\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u73af\u5883\u53d8\u91cf\u7ba1\u7406</li> <li>\u4f7f\u7528 <code>.env</code> \u6587\u4ef6\u7ba1\u7406\u654f\u611f\u4fe1\u606f</li> <li> <p>\u4e0d\u8981\u5728\u4ee3\u7801\u4e2d\u786c\u7f16\u7801 API \u5bc6\u94a5</p> </li> <li> <p>\u6570\u636e\u5b58\u50a8\u4f18\u5316</p> </li> <li>\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u4f7f\u7528\u4e0d\u540c\u7684\u5b58\u50a8\u8def\u5f84</li> <li> <p>\u5b9a\u671f\u6e05\u7406\u4e34\u65f6\u6570\u636e</p> </li> <li> <p>\u6027\u80fd\u8c03\u4f18</p> </li> <li>\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\u5e76\u884c\u5ea6</li> <li> <p>\u9002\u5f53\u914d\u7f6e\u8fde\u63a5\u6c60\u5927\u5c0f</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u8bbe\u7f6e\u5408\u7406\u7684\u91cd\u8bd5\u6b21\u6570</li> <li>\u5b9e\u73b0\u9002\u5f53\u7684\u9519\u8bef\u65e5\u5fd7\u8bb0\u5f55</li> </ol>"},{"location":"getting-started/configuration/#_16","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770bAPI\u6587\u6863\u4e86\u89e3\u66f4\u591a\u63a5\u53e3\u7ec6\u8282</li> <li>\u53c2\u8003\u793a\u4f8b\u4ee3\u7801\u83b7\u53d6\u5b9e\u8df5\u6307\u5bfc</li> <li>\u4e86\u89e3\u6570\u636e\u5904\u7406\u7684\u9ad8\u7ea7\u914d\u7f6e</li> </ul>"},{"location":"getting-started/installation/","title":"\u5b89\u88c5\u6307\u5357","text":""},{"location":"getting-started/installation/#_2","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python 3.10 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>pip \u5305\u7ba1\u7406\u5668</li> </ul>"},{"location":"getting-started/installation/#_3","title":"\u5b89\u88c5\u6b65\u9aa4","text":""},{"location":"getting-started/installation/#1-pip","title":"1. \u4f7f\u7528 pip \u5b89\u88c5","text":"<pre><code>pip install cryptoservice\n</code></pre>"},{"location":"getting-started/installation/#2","title":"2. \u4ece\u6e90\u4ee3\u7801\u5b89\u88c5","text":"<pre><code>git clone https://github.com/Mrzai/cryptoservice.git\ncd cryptoservice\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#_4","title":"\u4f9d\u8d56\u9879","text":"<p>\u4e3b\u8981\u4f9d\u8d56\u5305\u62ec\uff1a</p> <ul> <li>python-binance&gt;=1.0.19</li> <li>pandas&gt;=2.0.0</li> <li>numpy&gt;=1.24.0</li> <li>rich&gt;=13.0.0</li> <li>aiohttp&gt;=3.8.0</li> </ul>"},{"location":"getting-started/installation/#_5","title":"\u914d\u7f6e","text":""},{"location":"getting-started/installation/#1","title":"1. \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e","text":"<p>\u521b\u5efa <code>.env</code> \u6587\u4ef6\u5e76\u8bbe\u7f6e\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> <pre><code>BINANCE_API_KEY=your_api_key\nBINANCE_API_SECRET=your_api_secret\n</code></pre> <p>\u6216\u8005\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8bbe\u7f6e\uff1a</p> <pre><code>from cryptoservice import MarketDataService\n\nservice = MarketDataService(\n    api_key=\"your_api_key\",\n    api_secret=\"your_api_secret\"\n)\n</code></pre>"},{"location":"getting-started/installation/#2_1","title":"2. \u4ee3\u7406\u8bbe\u7f6e\uff08\u53ef\u9009\uff09","text":"<p>\u5982\u679c\u9700\u8981\u4f7f\u7528\u4ee3\u7406\uff0c\u53ef\u4ee5\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\uff1a</p> <pre><code>HTTP_PROXY=http://proxy.example.com:8080\nHTTPS_PROXY=http://proxy.example.com:8080\n</code></pre>"},{"location":"getting-started/installation/#_6","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<p>\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u9a8c\u8bc1\u5b89\u88c5\u662f\u5426\u6210\u529f\uff1a</p> <pre><code>from cryptoservice import MarketDataService\n\n# \u521d\u59cb\u5316\u670d\u52a1\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u6d4b\u8bd5\u8fde\u63a5\nticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"BTC\u5f53\u524d\u4ef7\u683c: {ticker.last_price}\")\n</code></pre>"},{"location":"getting-started/installation/#_7","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"getting-started/installation/#1_1","title":"1. \u5b89\u88c5\u5931\u8d25","text":"<ul> <li>\u68c0\u67e5 Python \u7248\u672c\u662f\u5426\u6ee1\u8db3\u8981\u6c42</li> <li>\u786e\u4fdd pip \u662f\u6700\u65b0\u7248\u672c</li> <li>\u68c0\u67e5\u662f\u5426\u6709\u7f51\u7edc\u8fde\u63a5\u95ee\u9898</li> </ul>"},{"location":"getting-started/installation/#2_2","title":"2. \u5bfc\u5165\u9519\u8bef","text":"<ul> <li>\u786e\u4fdd\u6240\u6709\u4f9d\u8d56\u5305\u90fd\u5df2\u6b63\u786e\u5b89\u88c5</li> <li>\u68c0\u67e5 Python \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e</li> </ul>"},{"location":"getting-started/installation/#3-api","title":"3. API \u8fde\u63a5\u95ee\u9898","text":"<ul> <li>\u9a8c\u8bc1 API \u5bc6\u94a5\u662f\u5426\u6b63\u786e</li> <li>\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5</li> <li>\u786e\u8ba4\u662f\u5426\u9700\u8981\u914d\u7f6e\u4ee3\u7406</li> </ul>"},{"location":"getting-started/installation/#_8","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b\u57fa\u7840\u7528\u6cd5\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4e3b\u8981\u529f\u80fd</li> <li>\u53c2\u8003\u914d\u7f6e\u8bf4\u660e\u4e86\u89e3\u66f4\u591a\u914d\u7f6e\u9009\u9879</li> <li>\u6d4f\u89c8\u793a\u4f8b\u4ee3\u7801\u83b7\u53d6\u5b9e\u8df5\u6307\u5bfc</li> </ul>"},{"location":"guides/data-processing/database/","title":"\u6570\u636e\u5e93\u64cd\u4f5c","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u7684\u6570\u636e\u5e93\u529f\u80fd\u8fdb\u884c\u6570\u636e\u7ba1\u7406\u548c\u5904\u7406\u3002</p>"},{"location":"guides/data-processing/database/#_2","title":"\u6570\u636e\u5e93\u6982\u8ff0","text":"<p>CryptoService \u4f7f\u7528 SQLite \u4f5c\u4e3a\u6570\u636e\u5b58\u50a8\u5f15\u64ce\uff0c\u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u9ad8\u6548\u5b58\u50a8</li> <li>\u4f18\u5316\u7684\u8868\u7ed3\u6784</li> <li>\u7d22\u5f15\u52a0\u901f\u67e5\u8be2</li> <li> <p>\u652f\u6301\u5e76\u53d1\u8bbf\u95ee</p> </li> <li> <p>\u7075\u6d3b\u67e5\u8be2</p> </li> <li>\u591a\u7ef4\u5ea6\u8fc7\u6ee4</li> <li>\u65f6\u95f4\u8303\u56f4\u67e5\u8be2</li> <li> <p>\u7279\u5f81\u9009\u62e9</p> </li> <li> <p>\u6570\u636e\u7ba1\u7406</p> </li> <li>\u8fde\u63a5\u6c60\u7ba1\u7406</li> <li>\u81ea\u52a8\u5907\u4efd</li> <li>\u6570\u636e\u5bfc\u51fa</li> </ol>"},{"location":"guides/data-processing/database/#_3","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":""},{"location":"guides/data-processing/database/#_4","title":"\u8868\u7ed3\u6784","text":"<pre><code>CREATE TABLE market_data (\n    symbol TEXT,\n    timestamp INTEGER,\n    freq TEXT,\n    open_price REAL,\n    high_price REAL,\n    low_price REAL,\n    close_price REAL,\n    volume REAL,\n    quote_volume REAL,\n    trades_count INTEGER,\n    taker_buy_volume REAL,\n    taker_buy_quote_volume REAL,\n    taker_sell_volume REAL,\n    taker_sell_quote_volume REAL,\n    PRIMARY KEY (symbol, timestamp, freq)\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_5","title":"\u7d22\u5f15","text":"<pre><code>CREATE INDEX idx_symbol ON market_data(symbol);\nCREATE INDEX idx_timestamp ON market_data(timestamp);\nCREATE INDEX idx_freq ON market_data(freq);\n</code></pre>"},{"location":"guides/data-processing/database/#_6","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"guides/data-processing/database/#_7","title":"\u521d\u59cb\u5316\u6570\u636e\u5e93","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\ndb = MarketDB(\"./data/market.db\")\n</code></pre>"},{"location":"guides/data-processing/database/#_8","title":"\u8bfb\u53d6\u6570\u636e","text":"<pre><code># \u57fa\u672c\u8bfb\u53d6\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n\n# \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_9","title":"\u67e5\u8be2\u53ef\u7528\u65e5\u671f","text":"<pre><code># \u83b7\u53d6\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\ndates = db.get_available_dates(\n    symbol=\"BTCUSDT\",\n    freq=Freq.h1\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_10","title":"\u6570\u636e\u5bfc\u51fa","text":""},{"location":"guides/data-processing/database/#_11","title":"\u5bfc\u51fa\u4e3a\u6587\u4ef6","text":"<pre><code># \u5bfc\u51fa\u6570\u636e\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1,  # \u53ef\u9009\u7684\u964d\u91c7\u6837\n    chunk_days=30  # \u5206\u5757\u5904\u7406\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_12","title":"\u6570\u636e\u964d\u91c7\u6837","text":"<pre><code># \u964d\u91c7\u6837\u89c4\u5219\nfreq_map = {\n    Freq.m1: \"1T\",\n    Freq.m3: \"3T\",\n    Freq.m5: \"5T\",\n    Freq.m15: \"15T\",\n    Freq.m30: \"30T\",\n    Freq.h1: \"1h\",\n    Freq.h2: \"2h\",\n    Freq.h4: \"4h\",\n    Freq.h6: \"6h\",\n    Freq.h8: \"8h\",\n    Freq.h12: \"12h\",\n    Freq.d1: \"1D\",\n}\n\n# \u805a\u5408\u89c4\u5219\nagg_rules = {\n    \"open_price\": \"first\",\n    \"high_price\": \"max\",\n    \"low_price\": \"min\",\n    \"close_price\": \"last\",\n    \"volume\": \"sum\",\n    \"quote_volume\": \"sum\",\n    \"trades_count\": \"sum\",\n    \"taker_buy_volume\": \"sum\",\n    \"taker_buy_quote_volume\": \"sum\",\n    \"taker_sell_volume\": \"sum\",\n    \"taker_sell_quote_volume\": \"sum\",\n}\n</code></pre>"},{"location":"guides/data-processing/database/#_13","title":"\u8fde\u63a5\u6c60\u7ba1\u7406","text":""},{"location":"guides/data-processing/database/#_14","title":"\u521b\u5efa\u8fde\u63a5\u6c60","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u521d\u59cb\u5316\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_15","title":"\u4f7f\u7528\u8fde\u63a5\u6c60","text":"<pre><code># \u4f7f\u7528\u8fde\u63a5\u6c60\u83b7\u53d6\u8fde\u63a5\nwith pool.get_connection() as db:\n    data = db.read_data(\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        freq=Freq.h1,\n        symbols=[\"BTCUSDT\"]\n    )\n</code></pre>"},{"location":"guides/data-processing/database/#_16","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/database/#_17","title":"\u57fa\u672c\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/data-processing/database/#_18","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"guides/data-processing/database/#_19","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code>def process_in_chunks(db, symbols, start_date, end_date, chunk_size=100):\n    \"\"\"\u5206\u6279\u5904\u7406\u6570\u636e\"\"\"\n    for i in range(0, len(symbols), chunk_size):\n        symbol_chunk = symbols[i:i + chunk_size]\n        data = db.read_data(\n            start_time=start_date,\n            end_time=end_date,\n            freq=Freq.h1,\n            symbols=symbol_chunk\n        )\n        # \u5904\u7406\u6570\u636e\u5757\n</code></pre>"},{"location":"guides/data-processing/database/#_20","title":"\u6570\u636e\u9a8c\u8bc1","text":"<pre><code>def validate_data(df):\n    \"\"\"\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\"\"\"\n    # \u68c0\u67e5\u7a7a\u503c\n    if df.isnull().any().any():\n        print(\"Warning: Found null values\")\n\n    # \u68c0\u67e5\u4ef7\u683c\n    if (df[\"close_price\"] &lt;= 0).any():\n        print(\"Warning: Found invalid prices\")\n\n    # \u68c0\u67e5\u6210\u4ea4\u91cf\n    if (df[\"volume\"] &lt; 0).any():\n        print(\"Warning: Found negative volume\")\n</code></pre>"},{"location":"guides/data-processing/database/#_21","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u8fde\u63a5\u7ba1\u7406</li> <li>\u4f7f\u7528\u8fde\u63a5\u6c60</li> <li>\u53ca\u65f6\u5173\u95ed\u8fde\u63a5</li> <li> <p>\u63a7\u5236\u5e76\u53d1\u6570\u91cf</p> </li> <li> <p>\u67e5\u8be2\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u7d22\u5f15</li> <li>\u9650\u5236\u67e5\u8be2\u8303\u56f4</li> <li> <p>\u6279\u91cf\u5904\u7406\u6570\u636e</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u6570\u636e\u4e00\u81f4\u6027</li> <li> <p>\u76d1\u63a7\u5f02\u5e38\u503c</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58</li> <li>\u4f18\u5316\u67e5\u8be2\u8bed\u53e5</li> </ol>"},{"location":"guides/data-processing/database/#_22","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3KDTV\u683c\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/data-processing/kdtv/","title":"KDTV\u683c\u5f0f","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd KDTV (Key-Date-Time-Value) \u6570\u636e\u683c\u5f0f\u7684\u8bbe\u8ba1\u539f\u7406\u548c\u4f7f\u7528\u65b9\u6cd5\u3002</p>"},{"location":"guides/data-processing/kdtv/#_1","title":"\u683c\u5f0f\u6982\u8ff0","text":"<p>KDTV \u662f\u4e00\u79cd\u4e3a\u9ad8\u6027\u80fd\u91d1\u878d\u6570\u636e\u5904\u7406\u800c\u8bbe\u8ba1\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a</p> <ol> <li>\u591a\u7ef4\u5ea6\u7ec4\u7ec7</li> <li>K (Key): \u4ea4\u6613\u5bf9\u6807\u8bc6</li> <li>D (Date): \u65e5\u671f\u7ef4\u5ea6</li> <li>T (Time): \u65f6\u95f4\u7ef4\u5ea6</li> <li> <p>V (Value): \u6570\u636e\u503c</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528 NumPy \u6570\u7ec4\u5b58\u50a8</li> <li>\u652f\u6301\u9ad8\u6548\u7684\u77e9\u9635\u8fd0\u7b97</li> <li> <p>\u4f18\u5316\u7684\u5185\u5b58\u4f7f\u7528</p> </li> <li> <p>\u7075\u6d3b\u6027</p> </li> <li>\u652f\u6301\u591a\u79cd\u6570\u636e\u7279\u5f81</li> <li>\u53ef\u6269\u5c55\u7684\u5b58\u50a8\u7ed3\u6784</li> <li>\u65b9\u4fbf\u7684\u6570\u636e\u8bbf\u95ee</li> </ol>"},{"location":"guides/data-processing/kdtv/#_2","title":"\u76ee\u5f55\u7ed3\u6784","text":"<pre><code>data/\n\u251c\u2500\u2500 h1/                      # \u9891\u7387\n\u2502   \u251c\u2500\u2500 close_price/        # \u7279\u5f81\n\u2502   \u2502   \u251c\u2500\u2500 20240101.npy   # \u65e5\u671f\u6587\u4ef6\n\u2502   \u2502   \u2514\u2500\u2500 20240102.npy\n\u2502   \u251c\u2500\u2500 volume/\n\u2502   \u2502   \u251c\u2500\u2500 20240101.npy\n\u2502   \u2502   \u2514\u2500\u2500 20240102.npy\n\u2502   \u2514\u2500\u2500 universe_token.pkl  # \u4ea4\u6613\u5bf9\u5217\u8868\n\u2514\u2500\u2500 m1/\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_3","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"guides/data-processing/kdtv/#_4","title":"\u5b58\u50a8\u5355\u65e5\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_5","title":"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868","text":"<pre><code># \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_6","title":"\u6570\u636e\u8bfb\u53d6","text":""},{"location":"guides/data-processing/kdtv/#_7","title":"\u57fa\u672c\u8bfb\u53d6","text":"<pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_8","title":"\u6307\u5b9a\u7279\u5f81\u8bfb\u53d6","text":"<pre><code># \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\"\n    ],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_9","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"guides/data-processing/kdtv/#_10","title":"\u7279\u5f81\u5217\u8868","text":"<p>\u9ed8\u8ba4\u652f\u6301\u7684\u7279\u5f81\uff1a</p> <pre><code>features = [\n    \"close_price\",\n    \"volume\",\n    \"quote_volume\",\n    \"high_price\",\n    \"low_price\",\n    \"open_price\",\n    \"trades_count\",\n    \"taker_buy_volume\",\n    \"taker_buy_quote_volume\",\n]\n\n# \u884d\u751f\u7279\u5f81\nderived_features = [\n    \"taker_sell_volume\",\n    \"taker_sell_quote_volume\",\n]\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_11","title":"\u6570\u636e\u8bbf\u95ee","text":"<pre><code># \u8bbf\u95ee\u7279\u5b9a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\nbtc_data = kdtv_data.loc[\"BTCUSDT\"]\n\n# \u8bbf\u95ee\u7279\u5b9a\u65e5\u671f\u7684\u6570\u636e\ndate_data = kdtv_data.loc[:, \"20240101\"]\n\n# \u8bbf\u95ee\u7279\u5b9a\u65f6\u95f4\u7684\u6570\u636e\ntime_data = kdtv_data.loc[:, :, \"100000\"]  # 10:00:00\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_12","title":"\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/kdtv/#_13","title":"\u57fa\u672c\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#npy","title":"\u53ef\u89c6\u5316NPY\u6587\u4ef6","text":"<pre><code># \u53ef\u89c6\u5316\u5355\u4e2aNPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"Time1\", \"Time2\", \"Time3\"],\n    index=[\"BTC\", \"ETH\", \"BNB\"]\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_14","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"guides/data-processing/kdtv/#_15","title":"\u5185\u5b58\u4f18\u5316","text":"<pre><code># \u4f7f\u7528\u7279\u5f81\u8fc7\u6ee4\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\"close_price\"],  # \u53ea\u8bfb\u53d6\u5fc5\u8981\u7684\u7279\u5f81\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_16","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u6309\u65e5\u671f\u5206\u6279\u5904\u7406\u6570\u636e\ndates = pd.date_range(\"2024-01-01\", \"2024-01-31\")\nchunk_size = 5\n\nfor i in range(0, len(dates), chunk_size):\n    chunk_dates = dates[i:i + chunk_size]\n    start_date = chunk_dates[0].strftime(\"%Y-%m-%d\")\n    end_date = chunk_dates[-1].strftime(\"%Y-%m-%d\")\n\n    chunk_data = StorageUtils.read_kdtv_data(\n        start_date=start_date,\n        end_date=end_date,\n        freq=Freq.h1,\n        data_path=\"./data\"\n    )\n    # \u5904\u7406\u6570\u636e\u5757\n</code></pre>"},{"location":"guides/data-processing/kdtv/#_17","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u7ec4\u7ec7</li> <li>\u5408\u7406\u89c4\u5212\u76ee\u5f55\u7ed3\u6784</li> <li>\u4fdd\u6301\u6570\u636e\u6587\u4ef6\u547d\u540d\u4e00\u81f4</li> <li> <p>\u5b9a\u671f\u6574\u7406\u548c\u6e05\u7406\u6570\u636e</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u53ea\u8bfb\u53d6\u5fc5\u8981\u7684\u7279\u5f81</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li> <p>\u6ce8\u610f\u5185\u5b58\u7ba1\u7406</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u7279\u5f81\u4e00\u81f4\u6027</li> <li> <p>\u76d1\u63a7\u6570\u636e\u8d28\u91cf</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u5904\u7406\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u60c5\u51b5</li> <li>\u9a8c\u8bc1\u6570\u636e\u683c\u5f0f</li> <li>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f</li> </ol>"},{"location":"guides/data-processing/kdtv/#_18","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u4f7f\u7528\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/data-processing/visualization/","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<p>\u672c\u6587\u6863\u8be6\u7ec6\u4ecb\u7ecd CryptoService \u63d0\u4f9b\u7684\u6570\u636e\u53ef\u89c6\u5316\u529f\u80fd\u3002</p>"},{"location":"guides/data-processing/visualization/#_2","title":"\u53ef\u89c6\u5316\u5de5\u5177\u6982\u8ff0","text":"<p>CryptoService \u4f7f\u7528 Rich \u5e93\u63d0\u4f9b\u4e30\u5bcc\u7684\u7ec8\u7aef\u53ef\u89c6\u5316\u529f\u80fd\uff1a</p> <ol> <li>\u8868\u683c\u663e\u793a</li> <li>\u683c\u5f0f\u5316\u6570\u636e\u5c55\u793a</li> <li>\u989c\u8272\u9ad8\u4eae</li> <li> <p>\u81ea\u5b9a\u4e49\u6837\u5f0f</p> </li> <li> <p>\u6570\u636e\u683c\u5f0f\u5316</p> </li> <li>\u6570\u503c\u683c\u5f0f\u5316</li> <li>\u65f6\u95f4\u683c\u5f0f\u5316</li> <li> <p>\u81ea\u52a8\u5bf9\u9f50</p> </li> <li> <p>\u4ea4\u4e92\u529f\u80fd</p> </li> <li>\u8fdb\u5ea6\u663e\u793a</li> <li>\u9519\u8bef\u63d0\u793a</li> <li>\u72b6\u6001\u66f4\u65b0</li> </ol>"},{"location":"guides/data-processing/visualization/#_3","title":"\u6570\u636e\u5e93\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#_4","title":"\u57fa\u672c\u8868\u683c\u663e\u793a","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#_5","title":"\u81ea\u5b9a\u4e49\u663e\u793a","text":"<pre><code># \u8bfb\u53d6\u6570\u636e\u540e\u81ea\u5b9a\u4e49\u663e\u793a\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n\n# \u521b\u5efa\u8868\u683c\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\ntable = Table(\n    title=\"Market Data Visualization\",\n    show_header=True,\n    header_style=\"bold magenta\"\n)\n\n# \u6dfb\u52a0\u5217\ntable.add_column(\"Timestamp\", style=\"cyan\")\ntable.add_column(\"Close Price\", justify=\"right\")\ntable.add_column(\"Volume\", justify=\"right\")\n\n# \u6dfb\u52a0\u6570\u636e\nfor idx, row in data.head(10).iterrows():\n    timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n    close_price = f\"{row['close_price']:.2f}\"\n    volume = f\"{row['volume']:.2f}\"\n    table.add_row(timestamp, close_price, volume)\n\n# \u663e\u793a\u8868\u683c\nconsole.print(table)\n</code></pre>"},{"location":"guides/data-processing/visualization/#kdtv","title":"KDTV\u6570\u636e\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#kdtv_1","title":"\u53ef\u89c6\u5316KDTV\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u53ef\u89c6\u5316KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#npy","title":"\u53ef\u89c6\u5316NPY\u6587\u4ef6","text":"<pre><code># \u53ef\u89c6\u5316\u5355\u4e2aNPY\u6587\u4ef6\nStorageUtils.visualize_npy_data(\n    file_path=\"./data/h1/close_price/20240101.npy\",\n    max_rows=10,\n    headers=[\"09:00\", \"10:00\", \"11:00\"],\n    index=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\n)\n</code></pre>"},{"location":"guides/data-processing/visualization/#_6","title":"\u8fdb\u5ea6\u663e\u793a","text":""},{"location":"guides/data-processing/visualization/#_7","title":"\u6570\u636e\u5904\u7406\u8fdb\u5ea6","text":"<pre><code>from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn\n\n# \u521b\u5efa\u8fdb\u5ea6\u663e\u793a\u5668\nprogress = Progress(\n    SpinnerColumn(),\n    TextColumn(\"[progress.description]{task.description}\"),\n    BarColumn(),\n    TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n    TimeElapsedColumn(),\n)\n\n# \u4f7f\u7528\u8fdb\u5ea6\u663e\u793a\u5668\nwith progress:\n    task = progress.add_task(\"[cyan]\u5904\u7406\u6570\u636e...\", total=100)\n\n    # \u6a21\u62df\u6570\u636e\u5904\u7406\n    for i in range(100):\n        progress.update(task, advance=1)\n        # \u5904\u7406\u6570\u636e\n</code></pre>"},{"location":"guides/data-processing/visualization/#_8","title":"\u9519\u8bef\u548c\u8b66\u544a\u663e\u793a","text":""},{"location":"guides/data-processing/visualization/#_9","title":"\u683c\u5f0f\u5316\u9519\u8bef\u4fe1\u606f","text":"<pre><code>from rich.console import Console\nfrom rich.panel import Panel\n\nconsole = Console()\n\ndef display_error(message: str):\n    \"\"\"\u663e\u793a\u9519\u8bef\u4fe1\u606f\"\"\"\n    console.print(Panel(\n        f\"[red]\u9519\u8bef: {message}[/red]\",\n        title=\"\u9519\u8bef\u4fe1\u606f\",\n        border_style=\"red\"\n    ))\n\ndef display_warning(message: str):\n    \"\"\"\u663e\u793a\u8b66\u544a\u4fe1\u606f\"\"\"\n    console.print(Panel(\n        f\"[yellow]\u8b66\u544a: {message}[/yellow]\",\n        title=\"\u8b66\u544a\u4fe1\u606f\",\n        border_style=\"yellow\"\n    ))\n</code></pre>"},{"location":"guides/data-processing/visualization/#_10","title":"\u6570\u636e\u9a8c\u8bc1\u663e\u793a","text":"<pre><code>def validate_and_display(data):\n    \"\"\"\u9a8c\u8bc1\u6570\u636e\u5e76\u663e\u793a\u7ed3\u679c\"\"\"\n    console = Console()\n\n    # \u68c0\u67e5\u7a7a\u503c\n    null_count = data.isnull().sum()\n    if null_count.any():\n        console.print(\"[yellow]\u53d1\u73b0\u7a7a\u503c:[/yellow]\")\n        for col, count in null_count[null_count &gt; 0].items():\n            console.print(f\"  - {col}: {count}\")\n\n    # \u68c0\u67e5\u5f02\u5e38\u503c\n    if (data[\"close_price\"] &lt;= 0).any():\n        console.print(\"[red]\u53d1\u73b0\u65e0\u6548\u4ef7\u683c[/red]\")\n\n    if (data[\"volume\"] &lt; 0).any():\n        console.print(\"[red]\u53d1\u73b0\u8d1f\u6210\u4ea4\u91cf[/red]\")\n</code></pre>"},{"location":"guides/data-processing/visualization/#_11","title":"\u81ea\u5b9a\u4e49\u53ef\u89c6\u5316","text":""},{"location":"guides/data-processing/visualization/#_12","title":"\u521b\u5efa\u81ea\u5b9a\u4e49\u8868\u683c","text":"<pre><code>def create_market_table(data, title=\"Market Data\"):\n    \"\"\"\u521b\u5efa\u81ea\u5b9a\u4e49\u5e02\u573a\u6570\u636e\u8868\u683c\"\"\"\n    table = Table(\n        title=title,\n        show_header=True,\n        header_style=\"bold magenta\",\n        title_style=\"bold cyan\"\n    )\n\n    # \u6dfb\u52a0\u5217\n    table.add_column(\"Time\", style=\"cyan\")\n    table.add_column(\"Symbol\", style=\"green\")\n    table.add_column(\"Price\", justify=\"right\")\n    table.add_column(\"Change\", justify=\"right\")\n    table.add_column(\"Volume\", justify=\"right\")\n\n    # \u6dfb\u52a0\u6570\u636e\n    for row in data:\n        change_color = \"red\" if row[\"change\"] &lt; 0 else \"green\"\n        table.add_row(\n            row[\"time\"],\n            row[\"symbol\"],\n            f\"{row['price']:.2f}\",\n            f\"[{change_color}]{row['change']:+.2f}%[/{change_color}]\",\n            f\"{row['volume']:,.0f}\"\n        )\n\n    return table\n</code></pre>"},{"location":"guides/data-processing/visualization/#_13","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u683c\u5f0f\u5316</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u6570\u503c\u7cbe\u5ea6</li> <li>\u683c\u5f0f\u5316\u65f6\u95f4\u6233</li> <li> <p>\u6dfb\u52a0\u5355\u4f4d\u6807\u8bc6</p> </li> <li> <p>\u89c6\u89c9\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u989c\u8272\u7a81\u51fa\u91cd\u8981\u4fe1\u606f</li> <li>\u4fdd\u6301\u4e00\u81f4\u7684\u6837\u5f0f</li> <li> <p>\u9002\u5f53\u4f7f\u7528\u5206\u9694\u7b26</p> </li> <li> <p>\u6027\u80fd\u8003\u8651</p> </li> <li>\u9650\u5236\u663e\u793a\u884c\u6570</li> <li>\u907f\u514d\u8fc7\u591a\u7684\u683c\u5f0f\u5316</li> <li> <p>\u4f18\u5316\u66f4\u65b0\u9891\u7387</p> </li> <li> <p>\u7528\u6237\u4f53\u9a8c</p> </li> <li>\u63d0\u4f9b\u6e05\u6670\u7684\u6807\u9898</li> <li>\u6dfb\u52a0\u9002\u5f53\u7684\u8bf4\u660e</li> <li>\u4fdd\u6301\u5e03\u5c40\u6574\u6d01</li> </ol>"},{"location":"guides/data-processing/visualization/#_14","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u66f4\u591a\u529f\u80fd</li> <li>\u63a2\u7d22KDTV\u683c\u5f0f\u7684\u6570\u636e\u7ed3\u6784</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u5b8c\u6574\u65b9\u6848</li> </ul>"},{"location":"guides/market-data/historical/","title":"\u5386\u53f2\u6570\u636e","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u548c\u5904\u7406\u5386\u53f2\u5e02\u573a\u6570\u636e\u3002</p>"},{"location":"guides/market-data/historical/#k","title":"\u83b7\u53d6K\u7ebf\u6570\u636e","text":""},{"location":"guides/market-data/historical/#_2","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq, HistoricalKlinesType\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6BTC/USDT\u76841\u5c0f\u65f6K\u7ebf\u6570\u636e\nklines = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\n# \u663e\u793a\u6570\u636e\nfor kline in klines[:5]:\n    print(f\"\u5f00\u76d8\u65f6\u95f4: {kline.open_time}\")\n    print(f\"\u5f00\u76d8\u4ef7: {kline.open_price}\")\n    print(f\"\u6700\u9ad8\u4ef7: {kline.high_price}\")\n    print(f\"\u6700\u4f4e\u4ef7: {kline.low_price}\")\n    print(f\"\u6536\u76d8\u4ef7: {kline.close_price}\")\n    print(f\"\u6210\u4ea4\u91cf: {kline.volume}\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/market-data/historical/#_3","title":"\u652f\u6301\u7684\u65f6\u95f4\u9891\u7387","text":"<pre><code>from cryptoservice.models import Freq\n\n# \u5206\u949f\u7ea7\u522b\nFreq.m1  # 1\u5206\u949f\nFreq.m3  # 3\u5206\u949f\nFreq.m5  # 5\u5206\u949f\nFreq.m15 # 15\u5206\u949f\nFreq.m30 # 30\u5206\u949f\n\n# \u5c0f\u65f6\u7ea7\u522b\nFreq.h1  # 1\u5c0f\u65f6\nFreq.h2  # 2\u5c0f\u65f6\nFreq.h4  # 4\u5c0f\u65f6\nFreq.h6  # 6\u5c0f\u65f6\nFreq.h8  # 8\u5c0f\u65f6\nFreq.h12 # 12\u5c0f\u65f6\n\n# \u65e5\u7ea7\u522b\nFreq.d1  # 1\u5929\n</code></pre>"},{"location":"guides/market-data/historical/#_4","title":"\u5e02\u573a\u7c7b\u578b\u9009\u62e9","text":"<pre><code>from cryptoservice.models import HistoricalKlinesType\n\n# \u73b0\u8d27\u5e02\u573a\u6570\u636e\nspot_data = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.SPOT\n)\n\n# \u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\nfutures_data = service.get_historical_klines(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.FUTURES\n)\n\n# \u5e01\u672c\u4f4d\u5408\u7ea6\u5e02\u573a\u6570\u636e\ncoin_futures_data = service.get_historical_klines(\n    symbol=\"BTCUSD\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    klines_type=HistoricalKlinesType.FUTURES_COIN\n)\n</code></pre>"},{"location":"guides/market-data/historical/#_5","title":"\u6570\u636e\u7ed3\u6784\u8bf4\u660e","text":""},{"location":"guides/market-data/historical/#klinemarketticker","title":"KlineMarketTicker \u5c5e\u6027","text":"<p>\u6bcf\u4e2aK\u7ebf\u6570\u636e\u70b9\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>open_time</code>: \u5f00\u76d8\u65f6\u95f4</li> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>high_price</code>: \u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: \u6700\u4f4e\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>volume</code>: \u6210\u4ea4\u91cf</li> <li><code>close_time</code>: \u6536\u76d8\u65f6\u95f4</li> <li><code>quote_volume</code>: \u6210\u4ea4\u989d</li> <li><code>trades_count</code>: \u6210\u4ea4\u7b14\u6570</li> <li><code>taker_buy_volume</code>: \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u91cf</li> <li><code>taker_buy_quote_volume</code>: \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u989d</li> </ul>"},{"location":"guides/market-data/historical/#_6","title":"\u6570\u636e\u5904\u7406","text":""},{"location":"guides/market-data/historical/#_7","title":"\u6570\u636e\u8f6c\u6362","text":"<pre><code># \u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\nkline_dict = kline.to_dict()\n\n# \u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5\nprint(f\"\u6210\u4ea4\u91cf: {kline.get('volume')}\")\n</code></pre>"},{"location":"guides/market-data/historical/#_8","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\nsymbols = [\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"]\nall_data = {}\n\nfor symbol in symbols:\n    data = service.get_historical_klines(\n        symbol=symbol,\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        interval=Freq.h1\n    )\n    all_data[symbol] = data\n</code></pre>"},{"location":"guides/market-data/historical/#_9","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"guides/market-data/historical/#_10","title":"\u5904\u7406\u5e38\u89c1\u9519\u8bef","text":"<pre><code>from cryptoservice.exceptions import MarketDataFetchError\n\ntry:\n    data = service.get_historical_klines(\n        symbol=\"BTCUSDT\",\n        start_time=\"2024-01-01\",\n        end_time=\"2024-01-02\",\n        interval=Freq.h1\n    )\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"guides/market-data/historical/#_11","title":"\u6570\u636e\u9a8c\u8bc1","text":"<pre><code>def validate_kline_data(kline):\n    \"\"\"\u9a8c\u8bc1K\u7ebf\u6570\u636e\u7684\u6709\u6548\u6027\"\"\"\n    if float(kline.high_price) &lt; float(kline.low_price):\n        raise ValueError(\"\u6700\u9ad8\u4ef7\u4e0d\u80fd\u4f4e\u4e8e\u6700\u4f4e\u4ef7\")\n    if float(kline.open_price) &lt; 0 or float(kline.close_price) &lt; 0:\n        raise ValueError(\"\u4ef7\u683c\u4e0d\u80fd\u4e3a\u8d1f\")\n    if float(kline.volume) &lt; 0:\n        raise ValueError(\"\u6210\u4ea4\u91cf\u4e0d\u80fd\u4e3a\u8d1f\")\n</code></pre>"},{"location":"guides/market-data/historical/#_12","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u65f6\u95f4\u8303\u56f4\u63a7\u5236</li> <li>\u5408\u7406\u8bbe\u7f6e\u65f6\u95f4\u8303\u56f4\uff0c\u907f\u514d\u8bf7\u6c42\u8fc7\u5927\u6570\u636e\u91cf</li> <li> <p>\u4f7f\u7528\u5206\u6279\u8bf7\u6c42\u5904\u7406\u957f\u65f6\u95f4\u8303\u56f4\u7684\u6570\u636e</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u5b9e\u73b0\u6570\u636e\u5b8c\u6574\u6027\u68c0\u67e5</li> <li> <p>\u9a8c\u8bc1\u4ef7\u683c\u548c\u6210\u4ea4\u91cf\u7684\u5408\u7406\u6027</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u5b9e\u73b0\u9002\u5f53\u7684\u91cd\u8bd5\u673a\u5236</li> <li> <p>\u8bb0\u5f55\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u65f6\u95f4\u9891\u7387</li> <li>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58\u673a\u5236</li> </ol>"},{"location":"guides/market-data/historical/#_13","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u7684\u7279\u6b8a\u5904\u7406</li> <li>\u63a2\u7d22\u6570\u636e\u5b58\u50a8\u65b9\u6848</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u529f\u80fd</li> </ul>"},{"location":"guides/market-data/perpetual/","title":"\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u548c\u5904\u7406\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u3002</p>"},{"location":"guides/market-data/perpetual/#_2","title":"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e","text":""},{"location":"guides/market-data/perpetual/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\nfrom cryptoservice.models import Freq\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_4","title":"\u6570\u636e\u7ed3\u6784","text":"<p><code>PerpetualMarketTicker</code> \u7c7b\u4f7f\u7528 <code>__slots__</code> \u4f18\u5316\u5185\u5b58\u4f7f\u7528\uff0c\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>open_time</code>: K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</li> <li><code>raw_data</code>: \u539f\u59cbK\u7ebf\u6570\u636e\u5217\u8868</li> </ul>"},{"location":"guides/market-data/perpetual/#_5","title":"\u539f\u59cb\u6570\u636e\u7d22\u5f15","text":"<p>\u4f7f\u7528 <code>KlineIndex</code> \u7c7b\u8bbf\u95ee\u539f\u59cb\u6570\u636e\uff1a</p> <pre><code>from cryptoservice.models import KlineIndex\n\n# \u8bbf\u95ee\u539f\u59cb\u6570\u636e\u793a\u4f8b\nticker = perpetual_data[0]\nopen_price = ticker.raw_data[KlineIndex.OPEN]\nhigh_price = ticker.raw_data[KlineIndex.HIGH]\nlow_price = ticker.raw_data[KlineIndex.LOW]\nclose_price = ticker.raw_data[KlineIndex.CLOSE]\nvolume = ticker.raw_data[KlineIndex.VOLUME]\n</code></pre> <p>\u5b8c\u6574\u7684\u7d22\u5f15\u5b9a\u4e49\uff1a</p> <pre><code>class KlineIndex:\n    OPEN_TIME = 0            # \u5f00\u76d8\u65f6\u95f4\n    OPEN = 1                 # \u5f00\u76d8\u4ef7\n    HIGH = 2                 # \u6700\u9ad8\u4ef7\n    LOW = 3                  # \u6700\u4f4e\u4ef7\n    CLOSE = 4                # \u6536\u76d8\u4ef7\n    VOLUME = 5               # \u6210\u4ea4\u91cf\n    CLOSE_TIME = 6           # \u6536\u76d8\u65f6\u95f4\n    QUOTE_VOLUME = 7         # \u6210\u4ea4\u989d\n    TRADES_COUNT = 8         # \u6210\u4ea4\u7b14\u6570\n    TAKER_BUY_VOLUME = 9     # \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u91cf\n    TAKER_BUY_QUOTE_VOLUME = 10  # \u4e3b\u52a8\u4e70\u5165\u6210\u4ea4\u989d\n    IGNORE = 11              # \u5ffd\u7565\n</code></pre>"},{"location":"guides/market-data/perpetual/#_6","title":"\u6570\u636e\u5b58\u50a8","text":""},{"location":"guides/market-data/perpetual/#sqlite","title":"SQLite\u5b58\u50a8","text":"<p>\u6570\u636e\u4f1a\u81ea\u52a8\u5b58\u50a8\u5230SQLite\u6570\u636e\u5e93\u4e2d\uff1a</p> <pre><code>from cryptoservice.data import MarketDB\n\n# \u8bfb\u53d6\u5b58\u50a8\u7684\u6570\u636e\ndb = MarketDB(\"./data/market.db\")\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n\nprint(data.head())\n</code></pre>"},{"location":"guides/market-data/perpetual/#kdtv","title":"KDTV\u683c\u5f0f\u5b58\u50a8","text":"<p>\u6570\u636e\u540c\u65f6\u4f1a\u4ee5KDTV\u683c\u5f0f\u5b58\u50a8\uff1a</p> <pre><code>from cryptoservice.data import StorageUtils\n\n# \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n\nprint(kdtv_data.head())\n</code></pre>"},{"location":"guides/market-data/perpetual/#_7","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"guides/market-data/perpetual/#_8","title":"\u5e76\u884c\u5904\u7406","text":"<pre><code># \u914d\u7f6e\u5e76\u884c\u5904\u7406\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_workers=4  # \u5e76\u884c\u7ebf\u7a0b\u6570\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_9","title":"\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5","text":"<pre><code># \u914d\u7f6e\u91cd\u8bd5\u673a\u5236\nservice.get_perpetual_data(\n    symbols=[\"BTCUSDT\"],\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    interval=Freq.h1,\n    data_path=\"./data\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_10","title":"\u6570\u636e\u5bfc\u51fa","text":"<pre><code># \u5c06\u6570\u636e\u5bfc\u51fa\u4e3a\u5176\u4ed6\u9891\u7387\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1  # \u964d\u91c7\u6837\u52301\u5c0f\u65f6\n)\n</code></pre>"},{"location":"guides/market-data/perpetual/#_11","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6570\u636e\u83b7\u53d6</li> <li>\u5408\u7406\u8bbe\u7f6e\u65f6\u95f4\u8303\u56f4</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u5e76\u884c\u5ea6</li> <li> <p>\u5b9e\u73b0\u9519\u8bef\u91cd\u8bd5\u673a\u5236</p> </li> <li> <p>\u6570\u636e\u5b58\u50a8</p> </li> <li>\u5b9a\u671f\u5907\u4efd\u6570\u636e\u5e93</li> <li>\u6e05\u7406\u8fc7\u671f\u6570\u636e</li> <li> <p>\u4f7f\u7528\u9002\u5f53\u7684\u5b58\u50a8\u683c\u5f0f</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\u5e76\u884c\u5ea6</li> <li>\u4f7f\u7528\u5408\u9002\u7684\u6279\u5904\u7406\u5927\u5c0f</li> <li> <p>\u5b9e\u73b0\u6570\u636e\u7f13\u5b58</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u8bb0\u5f55\u8be6\u7ec6\u7684\u9519\u8bef\u65e5\u5fd7</li> <li>\u5b9e\u73b0\u81ea\u52a8\u91cd\u8bd5\u673a\u5236</li> <li>\u76d1\u63a7\u6570\u636e\u5b8c\u6574\u6027</li> </ol>"},{"location":"guides/market-data/perpetual/#_12","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5b58\u50a8\u7684\u8be6\u7ec6\u9009\u9879</li> <li>\u63a2\u7d22\u6570\u636e\u5904\u7406\u529f\u80fd</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u65b9\u6848</li> </ul>"},{"location":"guides/market-data/realtime/","title":"\u5b9e\u65f6\u884c\u60c5","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 CryptoService \u83b7\u53d6\u5b9e\u65f6\u5e02\u573a\u884c\u60c5\u6570\u636e\u3002</p>"},{"location":"guides/market-data/realtime/#_2","title":"\u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u884c\u60c5","text":""},{"location":"guides/market-data/realtime/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from cryptoservice import MarketDataService\n\nservice = MarketDataService(api_key=\"your_api_key\", api_secret=\"your_api_secret\")\n\n# \u83b7\u53d6BTC/USDT\u7684\u5b9e\u65f6\u884c\u60c5\nbtc_ticker = service.get_symbol_ticker(\"BTCUSDT\")\nprint(f\"Symbol: {btc_ticker.symbol}\")\nprint(f\"Last Price: {btc_ticker.last_price}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_4","title":"\u8fd4\u56de\u6570\u636e\u8bf4\u660e","text":"<p><code>SymbolTicker</code> \u5bf9\u8c61\u5305\u542b\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>last_price</code>: \u6700\u65b0\u4ef7\u683c</li> </ul>"},{"location":"guides/market-data/realtime/#_5","title":"\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u884c\u60c5","text":""},{"location":"guides/market-data/realtime/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code># \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\nall_tickers = service.get_symbol_ticker()\n\n# \u904d\u5386\u663e\u793a\nfor ticker in all_tickers[:5]:  # \u663e\u793a\u524d5\u4e2a\n    print(f\"{ticker.symbol}: {ticker.last_price}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_7","title":"\u6570\u636e\u8fc7\u6ee4\u548c\u6392\u5e8f","text":"<pre><code>from cryptoservice.models import SortBy\n\n# \u83b7\u53d6\u6210\u4ea4\u91cf\u6392\u540d\u524d10\u7684USDT\u4ea4\u6613\u5bf9\ntop_coins = service.get_top_coins(\n    limit=10,\n    sort_by=SortBy.QUOTE_VOLUME,\n    quote_asset=\"USDT\"\n)\n\nfor coin in top_coins:\n    print(f\"{coin.symbol}: \u6210\u4ea4\u91cf {coin.quote_volume}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#24","title":"24\u5c0f\u65f6\u884c\u60c5\u6570\u636e","text":""},{"location":"guides/market-data/realtime/#_8","title":"\u83b7\u53d6\u8be6\u7ec6\u7edf\u8ba1\u6570\u636e","text":"<pre><code># \u83b7\u53d624\u5c0f\u65f6\u884c\u60c5\u6570\u636e\ndaily_ticker = service.get_market_summary()\n\n# \u8bbf\u95ee\u6570\u636e\nfor ticker in daily_ticker[\"data\"][:5]:\n    print(f\"Symbol: {ticker['symbol']}\")\n    print(f\"Price Change: {ticker['price_change']}\")\n    print(f\"Price Change %: {ticker['price_change_percent']}%\")\n    print(f\"Volume: {ticker['volume']}\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/market-data/realtime/#dailymarketticker","title":"DailyMarketTicker \u5c5e\u6027","text":"<p>\u5b8c\u6574\u7684 <code>DailyMarketTicker</code> \u5c5e\u6027\u5217\u8868\uff1a</p> <ul> <li><code>symbol</code>: \u4ea4\u6613\u5bf9\u540d\u79f0</li> <li><code>last_price</code>: \u6700\u65b0\u4ef7\u683c</li> <li><code>price_change</code>: 24\u5c0f\u65f6\u4ef7\u683c\u53d8\u52a8</li> <li><code>price_change_percent</code>: 24\u5c0f\u65f6\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</li> <li><code>volume</code>: 24\u5c0f\u65f6\u6210\u4ea4\u91cf</li> <li><code>quote_volume</code>: 24\u5c0f\u65f6\u6210\u4ea4\u989d</li> <li><code>high_price</code>: 24\u5c0f\u65f6\u6700\u9ad8\u4ef7</li> <li><code>low_price</code>: 24\u5c0f\u65f6\u6700\u4f4e\u4ef7</li> <li><code>weighted_avg_price</code>: \u52a0\u6743\u5e73\u5747\u4ef7</li> <li><code>open_price</code>: \u5f00\u76d8\u4ef7</li> <li><code>close_price</code>: \u6536\u76d8\u4ef7</li> <li><code>count</code>: \u6210\u4ea4\u7b14\u6570</li> </ul>"},{"location":"guides/market-data/realtime/#_9","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"guides/market-data/realtime/#_10","title":"\u5904\u7406\u5e38\u89c1\u9519\u8bef","text":"<pre><code>from cryptoservice.exceptions import MarketDataFetchError, InvalidSymbolError\n\ntry:\n    # \u5c1d\u8bd5\u83b7\u53d6\u65e0\u6548\u4ea4\u6613\u5bf9\u7684\u6570\u636e\n    ticker = service.get_symbol_ticker(\"INVALID\")\nexcept InvalidSymbolError as e:\n    print(f\"\u65e0\u6548\u7684\u4ea4\u6613\u5bf9: {e}\")\nexcept MarketDataFetchError as e:\n    print(f\"\u83b7\u53d6\u6570\u636e\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"guides/market-data/realtime/#_11","title":"\u91cd\u8bd5\u673a\u5236","text":"<pre><code># \u914d\u7f6e\u91cd\u8bd5\nservice.get_symbol_ticker(\n    symbol=\"BTCUSDT\",\n    max_retries=3  # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n)\n</code></pre>"},{"location":"guides/market-data/realtime/#_12","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u6279\u91cf\u83b7\u53d6</li> <li>\u4f7f\u7528 <code>get_symbol_ticker()</code> \u6279\u91cf\u83b7\u53d6\u591a\u4e2a\u4ea4\u6613\u5bf9\u6570\u636e</li> <li> <p>\u907f\u514d\u9891\u7e41\u7684\u5355\u4e2a\u8bf7\u6c42</p> </li> <li> <p>\u9519\u8bef\u5904\u7406</p> </li> <li>\u59cb\u7ec8\u5305\u542b\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406</li> <li> <p>\u5b9e\u73b0\u91cd\u8bd5\u673a\u5236\u5904\u7406\u4e34\u65f6\u6027\u9519\u8bef</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u8fd4\u56de\u6570\u636e\u7684\u5b8c\u6574\u6027</li> <li> <p>\u9a8c\u8bc1\u4ef7\u683c\u548c\u6570\u91cf\u7684\u5408\u7406\u6027</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u5408\u7406\u8bbe\u7f6e\u8bf7\u6c42\u95f4\u9694</li> <li>\u9002\u5f53\u7f13\u5b58\u9891\u7e41\u4f7f\u7528\u7684\u6570\u636e</li> </ol>"},{"location":"guides/market-data/realtime/#_13","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u5386\u53f2\u6570\u636e\u7684\u83b7\u53d6\u65b9\u6cd5</li> <li>\u63a2\u7d22\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u529f\u80fd</li> <li>\u67e5\u770b\u6570\u636e\u5b58\u50a8\u7684\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"guides/market-data/storage/","title":"\u6570\u636e\u5b58\u50a8","text":"<p>\u672c\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd CryptoService \u7684\u6570\u636e\u5b58\u50a8\u529f\u80fd\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p>"},{"location":"guides/market-data/storage/#_2","title":"\u5b58\u50a8\u65b9\u6848\u6982\u8ff0","text":"<p>CryptoService \u63d0\u4f9b\u4e24\u79cd\u4e3b\u8981\u7684\u6570\u636e\u5b58\u50a8\u65b9\u6848\uff1a</p> <ol> <li>SQLite\u6570\u636e\u5e93\u5b58\u50a8</li> <li>\u9002\u7528\u4e8e\u67e5\u8be2\u548c\u5206\u6790</li> <li>\u652f\u6301\u590d\u6742\u7684SQL\u67e5\u8be2</li> <li> <p>\u65b9\u4fbf\u7684\u6570\u636e\u7ba1\u7406</p> </li> <li> <p>KDTV\u683c\u5f0f\u5b58\u50a8</p> </li> <li>\u9488\u5bf9\u9ad8\u6027\u80fd\u8ba1\u7b97\u4f18\u5316</li> <li>\u652f\u6301\u77e9\u9635\u8fd0\u7b97</li> <li>\u9002\u5408\u673a\u5668\u5b66\u4e60\u5e94\u7528</li> </ol>"},{"location":"guides/market-data/storage/#sqlite","title":"SQLite\u6570\u636e\u5e93\u5b58\u50a8","text":""},{"location":"guides/market-data/storage/#_3","title":"\u57fa\u672c\u4f7f\u7528","text":"<pre><code>from cryptoservice.data import MarketDB\n\n# \u521d\u59cb\u5316\u6570\u636e\u5e93\ndb = MarketDB(\"./data/market.db\")\n\n# \u8bfb\u53d6\u6570\u636e\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"]\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_4","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":"<p>market_data \u8868\u7ed3\u6784\uff1a</p> <pre><code>CREATE TABLE market_data (\n    symbol TEXT,\n    timestamp INTEGER,\n    freq TEXT,\n    open_price REAL,\n    high_price REAL,\n    low_price REAL,\n    close_price REAL,\n    volume REAL,\n    quote_volume REAL,\n    trades_count INTEGER,\n    taker_buy_volume REAL,\n    taker_buy_quote_volume REAL,\n    taker_sell_volume REAL,\n    taker_sell_quote_volume REAL,\n    PRIMARY KEY (symbol, timestamp, freq)\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_5","title":"\u6570\u636e\u67e5\u8be2","text":"<pre><code># \u83b7\u53d6\u53ef\u7528\u65e5\u671f\ndates = db.get_available_dates(\n    symbol=\"BTCUSDT\",\n    freq=Freq.h1\n)\n\n# \u8bfb\u53d6\u7279\u5b9a\u7279\u5f81\ndata = db.read_data(\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    symbols=[\"BTCUSDT\"],\n    features=[\"close_price\", \"volume\"]\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_6","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316\u6570\u636e\ndb.visualize_data(\n    symbol=\"BTCUSDT\",\n    start_time=\"2024-01-01\",\n    end_time=\"2024-01-02\",\n    freq=Freq.h1,\n    max_rows=10\n)\n</code></pre>"},{"location":"guides/market-data/storage/#kdtv","title":"KDTV\u683c\u5f0f\u5b58\u50a8","text":""},{"location":"guides/market-data/storage/#_7","title":"\u6570\u636e\u7ed3\u6784","text":"<p>KDTV\u683c\u5f0f\u5c06\u6570\u636e\u7ec4\u7ec7\u4e3a\u4ee5\u4e0b\u7ef4\u5ea6\uff1a</p> <ul> <li>K (Symbols): \u4ea4\u6613\u5bf9</li> <li>D (Date): \u65e5\u671f</li> <li>T (Time): \u65f6\u95f4</li> <li>V (Values): \u6570\u636e\u503c</li> </ul>"},{"location":"guides/market-data/storage/#_8","title":"\u5b58\u50a8\u6570\u636e","text":"<pre><code>from cryptoservice.data import StorageUtils\n\n# \u5b58\u50a8KDTV\u683c\u5f0f\u6570\u636e\nStorageUtils.store_kdtv_data(\n    data=market_data,\n    date=\"20240101\",\n    freq=Freq.h1,\n    data_path=\"./data\"\n)\n\n# \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868\nStorageUtils.store_universe(\n    symbols=[\"BTCUSDT\", \"ETHUSDT\"],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_9","title":"\u8bfb\u53d6\u6570\u636e","text":"<pre><code># \u8bfb\u53d6KDTV\u683c\u5f0f\u6570\u636e\nkdtv_data = StorageUtils.read_kdtv_data(\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.h1,\n    features=[\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\"\n    ],\n    data_path=\"./data\"\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_10","title":"\u6570\u636e\u53ef\u89c6\u5316","text":"<pre><code># \u53ef\u89c6\u5316KDTV\u6570\u636e\nStorageUtils.read_and_visualize_kdtv(\n    date=\"2024-01-02\",\n    freq=Freq.h1,\n    data_path=\"./data\",\n    max_rows=10,\n    max_symbols=5\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_11","title":"\u6570\u636e\u5bfc\u51fa","text":""},{"location":"guides/market-data/storage/#_12","title":"\u5bfc\u51fa\u4e3a\u5176\u4ed6\u9891\u7387","text":"<pre><code># \u5bfc\u51fa\u5e76\u964d\u91c7\u6837\u6570\u636e\ndb.export_to_files(\n    output_path=\"./data/export\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-01-02\",\n    freq=Freq.m1,\n    symbols=[\"BTCUSDT\"],\n    target_freq=Freq.h1,\n    chunk_days=30\n)\n</code></pre>"},{"location":"guides/market-data/storage/#_13","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"guides/market-data/storage/#_14","title":"\u6570\u636e\u5e93\u8fde\u63a5\u6c60","text":"<pre><code>from cryptoservice.data import DatabaseConnectionPool\n\n# \u521b\u5efa\u8fde\u63a5\u6c60\npool = DatabaseConnectionPool(\n    db_path=\"./data/market.db\",\n    max_connections=5\n)\n\n# \u4f7f\u7528\u8fde\u63a5\u6c60\nwith pool.get_connection() as db:\n    db.store_data(data, freq)\n</code></pre>"},{"location":"guides/market-data/storage/#_15","title":"\u6279\u91cf\u5904\u7406","text":"<pre><code># \u5206\u5757\u5904\u7406\u5927\u91cf\u6570\u636e\nchunk_size = 1000\nfor i in range(0, len(data), chunk_size):\n    chunk = data[i:i + chunk_size]\n    db.store_data(chunk, freq)\n</code></pre>"},{"location":"guides/market-data/storage/#_16","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u5b58\u50a8\u683c\u5f0f\u9009\u62e9</li> <li>\u9891\u7e41\u67e5\u8be2\u4f7f\u7528SQLite</li> <li> <p>\u5927\u89c4\u6a21\u8ba1\u7b97\u4f7f\u7528KDTV</p> </li> <li> <p>\u6570\u636e\u7ba1\u7406</p> </li> <li>\u5b9a\u671f\u5907\u4efd\u6570\u636e</li> <li>\u5b9e\u73b0\u6570\u636e\u6e05\u7406\u7b56\u7565</li> <li> <p>\u76d1\u63a7\u5b58\u50a8\u7a7a\u95f4</p> </li> <li> <p>\u6027\u80fd\u4f18\u5316</p> </li> <li>\u4f7f\u7528\u8fde\u63a5\u6c60</li> <li>\u5b9e\u73b0\u6279\u91cf\u5904\u7406</li> <li> <p>\u4f18\u5316\u67e5\u8be2\u6027\u80fd</p> </li> <li> <p>\u6570\u636e\u9a8c\u8bc1</p> </li> <li>\u68c0\u67e5\u6570\u636e\u5b8c\u6574\u6027</li> <li>\u9a8c\u8bc1\u6570\u636e\u4e00\u81f4\u6027</li> <li>\u76d1\u63a7\u6570\u636e\u8d28\u91cf</li> </ol>"},{"location":"guides/market-data/storage/#_17","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u9ad8\u7ea7\u529f\u80fd</li> <li>\u63a2\u7d22KDTV\u683c\u5f0f\u7684\u8be6\u7ec6\u8bf4\u660e</li> <li>\u67e5\u770b\u6570\u636e\u53ef\u89c6\u5316\u7684\u66f4\u591a\u9009\u9879</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>cryptoservice<ul> <li>client<ul> <li>client</li> </ul> </li> <li>config<ul> <li>settings</li> </ul> </li> <li>data<ul> <li>storage_db</li> <li>storage_utils</li> </ul> </li> <li>exceptions<ul> <li>market_exceptions</li> </ul> </li> <li>interfaces<ul> <li>market_interfaces</li> </ul> </li> <li>models<ul> <li>enums</li> <li>market_ticker</li> </ul> </li> <li>services<ul> <li>market_service</li> </ul> </li> <li>utils<ul> <li>cache_manager</li> <li>data_converter</li> <li>logger</li> <li>tools</li> </ul> </li> </ul> </li> <li>examples<ul> <li>market_data_example</li> <li>test_binance_api</li> </ul> </li> </ul>"},{"location":"reference/cryptoservice/","title":"cryptoservice","text":""},{"location":"reference/cryptoservice/#cryptoservice","title":"<code>cryptoservice</code>","text":"<p>Cryptocurrency trading bot package.</p>"},{"location":"reference/cryptoservice/#cryptoservice-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Optional[Client]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Optional[Client]:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = (\n            date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n        )\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception as e:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] = ['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume'], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume']</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        dates = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in dates]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(\n                    start=pd.Timestamp(date), periods=array.shape[1], freq=freq\n                )\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                df = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                df.name = feature\n                date_data.append(df)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for (symbol, time), row in df.iterrows():\n                values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(str(time), symbol, *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(\n                f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\"\n            )\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(\n                f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\"\n            )\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\n                \"[yellow]Warning: Index length is less than data length[/]\"\n            )\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; List[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>data_path</code> <p>\u6570\u636e\u5e93\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        data_path: \u6570\u636e\u5e93\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: Optional[MarketDB] = None\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>| List[symbol]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <p>SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol | List[symbol]: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n        ]\n\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time = int(\n            datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n        end_time = int(\n            datetime.strptime(f\"{date} 23:59:59\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol, interval=\"1d\", startTime=start_time, endTime=end_time, limit=1\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; List[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[DailyMarketTicker]</code> <p>List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; List[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: Dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers = [ticker.to_dict() for ticker in self.get_symbol_ticker()]\n        summary[\"data\"] = tickers\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; List[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        if isinstance(start_time, str):\n            start_time = datetime.strptime(start_time, \"%Y%m%d\")\n        if isinstance(end_time, str):\n            end_time = datetime.strptime(end_time, \"%Y%m%d\")\n        end_time = end_time or datetime.now()\n\n        klines = self.client.get_historical_klines(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_time.strftime(\"%Y-%m-%d\"),\n            end_str=end_time.strftime(\"%Y-%m-%d\"),\n            limit=1000,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        return [KlineMarketTicker.from_binance_kline(k) for k in klines]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/#cryptoservice.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.m1, max_workers: int = 1, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        data_path: \u6570\u636e\u5b58\u50a8\u8def\u5f84\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n    \"\"\"\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        data_path = Path(data_path)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n        db_path = data_path / \"market.db\"\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        if self.db is None:\n            self.db = MarketDB(db_path, use_pool=True, max_connections=max_workers)\n\n        # \u8fdb\u5ea6\u663e\u793a\u5668\u8bbe\u7f6e\n        should_close_progress = False\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n                TimeElapsedColumn(),\n            )\n            should_close_progress = True\n\n        def process_symbol(symbol: str) -&gt; None:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6\"\"\"\n            retry_count = 0\n            while retry_count &lt; max_retries:\n                try:\n                    data = self._fetch_symbol_data(\n                        symbol=symbol,\n                        start_ts=start_time,\n                        end_ts=end_time,\n                        interval=interval,\n                        klines_type=HistoricalKlinesType.FUTURES,\n                    )\n\n                    if data:\n                        # \u786e\u4fdd db_pool \u4e0d\u4e3a None\n                        assert self.db is not None, \"Database pool is not initialized\"\n                        self.db.store_data(data, interval)  # \u76f4\u63a5\u4f20\u9012 data\uff0c\u4e0d\u9700\u8981\u5305\u88c5\u6210\u5217\u8868\n                        return\n                    else:\n                        logger.warning(f\"No data available for {symbol}\")\n                        return\n\n                except InvalidSymbolError as e:\n                    # \u5bf9\u4e8e\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u4fe1\u606f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\n                    logger.warning(f\"\u8df3\u8fc7\u4ea4\u6613\u5bf9 {symbol}: {e}\")\n                    return\n                except RateLimitError:\n                    wait_time = min(2**retry_count + 1, 30)\n                    time.sleep(wait_time)\n                    retry_count += 1\n                except Exception as e:\n                    if retry_count &lt; max_retries - 1:\n                        retry_count += 1\n                        logger.warning(f\"\u91cd\u8bd5 {retry_count}/{max_retries} - {symbol}: {str(e)}\")\n                        time.sleep(1)\n                    else:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25 - {symbol}: {str(e)}\")\n                        break\n\n        with progress if should_close_progress else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u5904\u7406\u6240\u6709\u4ea4\u6613\u5bf9\", total=len(symbols))\n\n            # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                # \u8ddf\u8e2a\u5b8c\u6210\u8fdb\u5ea6\n                for future in as_completed(futures):\n                    try:\n                        future.result()\n                        progress.update(overall_task, advance=1)\n                    except Exception as e:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25: {e}\")\n\n    except Exception as e:\n        logger.error(f\"Failed to fetch perpetual data: {e}\")\n        raise MarketDataFetchError(f\"Failed to fetch perpetual data: {e}\")\n    finally:\n        if self.db:\n            self.db.close()\n</code></pre>"},{"location":"reference/cryptoservice/client/","title":"cryptoservice.client","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client","title":"<code>cryptoservice.client</code>","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Optional[Client]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Optional[Client]:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/#cryptoservice.client.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/client/client/","title":"cryptoservice.client.client","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client","title":"<code>cryptoservice.client.client</code>","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory","title":"<code>BinanceClientFactory</code>","text":"<p>Binance\u5ba2\u6237\u7aef\u5de5\u5382\u7c7b.</p>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.create_client","title":"<code>create_client(api_key: str, api_secret: str) -&gt; Client</code>  <code>classmethod</code>","text":"<p>\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09</p> PARAMETER DESCRIPTION <code>api_key</code> <p>API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>API\u5bc6\u94a5\u5bf9\u5e94\u7684secret</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Client</code> <p>Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b</p> <p> TYPE: <code>Client</code> </p> RAISES DESCRIPTION <code>MarketDataError</code> <p>\u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef create_client(cls, api_key: str, api_secret: str) -&gt; Client:\n    \"\"\"\u521b\u5efa\u6216\u83b7\u53d6Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff08\u5355\u4f8b\u6a21\u5f0f\uff09\n\n    Args:\n        api_key: API\u5bc6\u94a5\n        api_secret: API\u5bc6\u94a5\u5bf9\u5e94\u7684secret\n\n    Returns:\n        Client: Binance\u5ba2\u6237\u7aef\u5b9e\u4f8b\n\n    Raises:\n        MarketDataError: \u5f53\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\u65f6\u629b\u51fa\n    \"\"\"\n    if not cls._instance:\n        try:\n            if not api_key or not api_secret:\n                raise ValueError(\"Missing Binance API credentials\")\n            cls._instance = Client(api_key, api_secret)\n            logger.info(\"[green]Successfully created Binance client[/green]\")\n        except Exception as e:\n            logger.error(f\"[red]Failed to initialize Binance client: {e}[/red]\")\n            raise MarketDataError(f\"Failed to initialize Binance client: {e}\") from e\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.get_client","title":"<code>get_client() -&gt; Optional[Client]</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef get_client(cls) -&gt; Optional[Client]:\n    \"\"\"\u83b7\u53d6\u73b0\u6709\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"reference/cryptoservice/client/client/#cryptoservice.client.client.BinanceClientFactory.reset_client","title":"<code>reset_client() -&gt; None</code>  <code>classmethod</code>","text":"<p>\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.</p> Source code in <code>src/cryptoservice/client/client.py</code> <pre><code>@classmethod\ndef reset_client(cls) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u5ba2\u6237\u7aef\u5b9e\u4f8b.\"\"\"\n    cls._instance = None\n</code></pre>"},{"location":"reference/cryptoservice/config/","title":"cryptoservice.config","text":""},{"location":"reference/cryptoservice/config/#cryptoservice.config","title":"<code>cryptoservice.config</code>","text":""},{"location":"reference/cryptoservice/config/settings/","title":"cryptoservice.config.settings","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings","title":"<code>cryptoservice.config.settings</code>","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/config/settings/#cryptoservice.config.settings.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>\u5e94\u7528\u914d\u7f6e\u7c7b.</p>"},{"location":"reference/cryptoservice/data/","title":"cryptoservice.data","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data","title":"<code>cryptoservice.data</code>","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB","title":"<code>MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.store_data","title":"<code>store_data(data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self, data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[List[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(data_list: Any) -&gt; TypeGuard[List[List[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(\n                f\"Successfully stored {len(records)} records for {symbol} \"\n                f\"with frequency {freq.value}\"\n            )\n\n    except Exception as e:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: List[str], features: Optional[List[str]] = None) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: List[str],\n    features: Optional[List[str]] = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        # \u6784\u5efa\u67e5\u8be2\n        if features is None:\n            features = [\n                \"open_price\",\n                \"high_price\",\n                \"low_price\",\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n        columns = \", \".join(features)\n        query = f\"\"\"\n            SELECT symbol, timestamp, {columns}\n            FROM market_data\n            WHERE timestamp BETWEEN ? AND ?\n            AND freq = ?\n            AND symbol IN ({','.join('?' * len(symbols))})\n            ORDER BY symbol, timestamp\n        \"\"\"\n        params = [start_ts, end_ts, freq.value] + symbols\n\n        # \u6267\u884c\u67e5\u8be2\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            raise ValueError(\"No data found for the specified criteria\")\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception as e:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception as e:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: List[str], target_freq: Optional[Freq] = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Optional[Freq]</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: List[str],\n    target_freq: Optional[Freq] = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u8ba1\u7b97\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        # \u6309chunk_days\u5206\u5757\u5904\u7406\n        for chunk_start in range(0, len(date_range), chunk_days):\n            chunk_end = min(chunk_start + chunk_days, len(date_range))\n            chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n            chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n            logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n            # \u8bfb\u53d6\u6570\u636e\u5757\n            df = self.read_data(chunk_start_date, chunk_end_date, freq, symbols)\n            if df.empty:\n                logger.warning(\n                    f\"No data found for period {chunk_start_date} to {chunk_end_date}\"\n                )\n                continue\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5b9a\u4e49\u9700\u8981\u5bfc\u51fa\u7684\u7279\u5f81\n            features = [\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"high_price\",\n                \"low_price\",\n                \"open_price\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n            # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\u4e2d\u7684\u6bcf\u4e00\u5929\n            chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n            for date in chunk_dates:\n                date_str = date.strftime(\"%Y%m%d\")\n                # \u4fdd\u5b58\u4ea4\u6613\u5bf9\u987a\u5e8f\n                symbols_path = output_path / freq.value / date_str / \"universe_token.pkl\"\n                symbols_path.parent.mkdir(parents=True, exist_ok=True)\n                pd.Series(df.index.get_level_values(\"symbol\").unique()).to_pickle(symbols_path)\n\n                # \u83b7\u53d6\u5f53\u5929\u6570\u636e\n                timestamps = df.index.get_level_values(\"timestamp\")\n                # \u5c06timestamps\u8f6c\u6362\u4e3adatetime\u7c7b\u578b\n                datetime_timestamps = pd.to_datetime(timestamps)\n                # \u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u5730\u8bbf\u95eedate\u5c5e\u6027\n                dates = [ts.date() for ts in datetime_timestamps]\n\n                # \u6216\u8005\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\n                from datetime import datetime\n\n                # \u663e\u5f0f\u8f6c\u6362\u4e3adatetime\u5bf9\u8c61\u5217\u8868\n                datetime_list = [pd.Timestamp(ts).to_pydatetime() for ts in timestamps]\n                # \u7136\u540e\u8bbf\u95eedate\u5c5e\u6027\n                day_data = df[\n                    df.index.get_level_values(\"timestamp\").isin(\n                        [ts for ts in timestamps if pd.Timestamp(ts).date() == date.date()]\n                    )\n                ]\n                if day_data.empty:\n                    continue\n\n                # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u521b\u5efa\u5e76\u5b58\u50a8\u6570\u636e\n                for feature in features:\n                    # \u91cd\u5851\u6570\u636e\u4e3a K x T \u77e9\u9635\n                    pivot_data = day_data[feature].unstack(level=\"timestamp\")\n                    array = pivot_data.values\n\n                    # \u521b\u5efa\u5b58\u50a8\u8def\u5f84\n                    save_path = output_path / freq.value / date_str / feature\n                    save_path.mkdir(parents=True, exist_ok=True)\n\n                    # \u4fdd\u5b58\u4e3anpy\u683c\u5f0f\n                    np.save(save_path / f\"{date_str}.npy\", array)\n\n            # \u6e05\u7406\u5185\u5b58\n            del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[Tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(\n                f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\"\n            )\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.is_date_matching","title":"<code>is_date_matching(ts: Any, target_date: datetime.date) -&gt; bool</code>","text":"<p>\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def is_date_matching(self, ts: Any, target_date: datetime.date) -&gt; bool:\n    \"\"\"\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f\"\"\"\n    # \u786e\u4fdd\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u800c\u4e0d\u662fAny\u7c7b\u578b\n    return bool(pd.Timestamp(ts).date() == target_date)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.process_dataframe_by_date","title":"<code>process_dataframe_by_date(df: pd.DataFrame, date: datetime.date, feature_processor: Callable[[pd.DataFrame, str], None]) -&gt; None</code>","text":"<p>\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def process_dataframe_by_date(\n    self,\n    df: pd.DataFrame,\n    date: datetime.date,\n    feature_processor: Callable[[pd.DataFrame, str], None],\n) -&gt; None:\n    \"\"\"\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\"\"\"\n    timestamps = df.index.get_level_values(\"timestamp\")\n    # \u4e0d\u4f7f\u7528.values\uff0c\u76f4\u63a5\u4f7f\u7528Series\u4f5c\u4e3a\u5e03\u5c14\u7d22\u5f15\n    date_mask = pd.Series(timestamps).map(lambda ts: pd.Timestamp(ts).date() == date)\n    # \u4f7f\u7528\u5e03\u5c14Series\u8fdb\u884c\u7d22\u5f15\n    day_data = df.loc[date_mask]\n\n    if day_data.empty:\n        return\n\n    # \u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\n    for feature in df.columns:\n        feature_processor(day_data, feature)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = (\n            date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n        )\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception as e:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] = ['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume'], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume']</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        dates = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in dates]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(\n                    start=pd.Timestamp(date), periods=array.shape[1], freq=freq\n                )\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                df = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                df.name = feature\n                date_data.append(df)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for (symbol, time), row in df.iterrows():\n                values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(str(time), symbol, *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/#cryptoservice.data.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(\n                f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\"\n            )\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(\n                f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\"\n            )\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\n                \"[yellow]Warning: Index length is less than data length[/]\"\n            )\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/","title":"cryptoservice.data.storage_db","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db","title":"<code>cryptoservice.data.storage_db</code>","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool","title":"<code>DatabaseConnectionPool(db_path: Path | str, max_connections: int = 5)</code>","text":"<p>\u7ebf\u7a0b\u5b89\u5168\u7684\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u5b9e\u73b0</p> <p>\u521d\u59cb\u5316\u8fde\u63a5\u6c60</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_connections</code> <p>\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\u6c60\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_connections: \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.max_connections = max_connections\n    self._local = threading.local()  # \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool.get_connection","title":"<code>get_connection() -&gt; Generator[sqlite3.Connection, None, None]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>@contextmanager\ndef get_connection(self) -&gt; Generator[sqlite3.Connection, None, None]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    self._init_thread_connections()\n    connection = self._local.connections.get()\n    try:\n        yield connection\n    finally:\n        self._local.connections.put(connection)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.DatabaseConnectionPool.close_all","title":"<code>close_all() -&gt; None</code>","text":"<p>\u5173\u95ed\u6240\u6709\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close_all(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6240\u6709\u8fde\u63a5\"\"\"\n    if hasattr(self._local, \"connections\"):\n        while not self._local.connections.empty():\n            connection = self._local.connections.get()\n            connection.close()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB","title":"<code>MarketDB(db_path: Path | str, use_pool: bool = False, max_connections: int = 5)</code>","text":"<p>\u5e02\u573a\u6570\u636e\u5e93\u7ba1\u7406\u7c7b\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u548c\u8bfb\u53d6\u4ea4\u6613\u5bf9\u6570\u636e.</p> <p>\u521d\u59cb\u5316 MarketDB.</p> PARAMETER DESCRIPTION <code>db_path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>use_pool</code> <p>\u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>max_connections</code> <p>\u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def __init__(self, db_path: Path | str, use_pool: bool = False, max_connections: int = 5):\n    \"\"\"\u521d\u59cb\u5316 MarketDB.\n\n    Args:\n        db_path: \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        use_pool: \u662f\u5426\u4f7f\u7528\u8fde\u63a5\u6c60\n        max_connections: \u8fde\u63a5\u6c60\u6700\u5927\u8fde\u63a5\u6570\n    \"\"\"\n    self.db_path = Path(db_path)\n    self.db_path.parent.mkdir(parents=True, exist_ok=True)\n\n    # \u8fde\u63a5\u6c60\u76f8\u5173\n    self._use_pool = use_pool\n    self._pool = DatabaseConnectionPool(self.db_path, max_connections) if use_pool else None\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_db()\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.store_data","title":"<code>store_data(data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq) -&gt; None</code>","text":"<p>\u5b58\u50a8\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868</p> <p> TYPE: <code>List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]]</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def store_data(\n    self, data: List[PerpetualMarketTicker] | List[List[PerpetualMarketTicker]], freq: Freq\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u5e02\u573a\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\uff0c\u53ef\u4ee5\u662f\u5355\u5c42\u5217\u8868\u6216\u5d4c\u5957\u5217\u8868\n        freq: \u6570\u636e\u9891\u7387\n    \"\"\"\n    try:\n        # \u786e\u4fdd\u6570\u636e\u662f\u4e8c\u7ef4\u5217\u8868\u683c\u5f0f\n        if not data:\n            logger.warning(\"No data to store\")\n            return\n\n        # \u4f7f\u7528\u7c7b\u578b\u5b88\u536b\u6a21\u5f0f\u5224\u65ad\u6570\u636e\u7ed3\u6784\n        def is_flat_list(data_list: Any) -&gt; TypeGuard[List[PerpetualMarketTicker]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5355\u5c42PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, PerpetualMarketTicker) for item in data_list)\n            )\n\n        def is_nested_list(data_list: Any) -&gt; TypeGuard[List[List[PerpetualMarketTicker]]]:\n            \"\"\"\u5224\u65ad\u662f\u5426\u4e3a\u5d4c\u5957\u7684PerpetualMarketTicker\u5217\u8868\"\"\"\n            return (\n                isinstance(data_list, list)\n                and bool(data_list)\n                and all(isinstance(item, list) for item in data_list)\n                and all(\n                    all(isinstance(subitem, PerpetualMarketTicker) for subitem in sublist)\n                    for sublist in data_list\n                    if sublist\n                )\n            )\n\n        # \u6839\u636e\u6570\u636e\u7ed3\u6784\u7c7b\u578b\u8fdb\u884c\u5904\u7406\n        if is_flat_list(data):\n            # \u5355\u5c42\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981cast\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = data\n        elif is_nested_list(data):\n            # \u5d4c\u5957\u5217\u8868\u60c5\u51b5 - \u4e0d\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\uff0cTypeGuard\u5df2\u7ecf\u786e\u4fdd\u4e86\u7c7b\u578b\n            flattened_data = [item for sublist in data for item in sublist]\n        else:\n            raise TypeError(f\"Unexpected data structure: {type(data).__name__}\")\n\n        if not flattened_data:\n            logger.warning(\"No data to store\")\n            return\n\n        records = []\n        for ticker in flattened_data:\n            volume = float(ticker.raw_data[KlineIndex.VOLUME])\n            quote_volume = float(ticker.raw_data[KlineIndex.QUOTE_VOLUME])\n            taker_buy_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_VOLUME])\n            taker_buy_quote_volume = float(ticker.raw_data[KlineIndex.TAKER_BUY_QUOTE_VOLUME])\n\n            record = {\n                \"symbol\": ticker.symbol,\n                \"timestamp\": ticker.open_time,\n                \"freq\": freq.value,\n                \"open_price\": ticker.raw_data[KlineIndex.OPEN],\n                \"high_price\": ticker.raw_data[KlineIndex.HIGH],\n                \"low_price\": ticker.raw_data[KlineIndex.LOW],\n                \"close_price\": ticker.raw_data[KlineIndex.CLOSE],\n                \"volume\": volume,\n                \"quote_volume\": quote_volume,\n                \"trades_count\": ticker.raw_data[KlineIndex.TRADES_COUNT],\n                \"taker_buy_volume\": taker_buy_volume,\n                \"taker_buy_quote_volume\": taker_buy_quote_volume,\n                \"taker_sell_volume\": str(volume - taker_buy_volume),\n                \"taker_sell_quote_volume\": str(quote_volume - taker_buy_quote_volume),\n            }\n            records.append(record)\n\n        with self._get_connection() as conn:\n            conn.executemany(\n                \"\"\"\n                INSERT OR REPLACE INTO market_data (\n                    symbol, timestamp, freq,\n                    open_price, high_price, low_price, close_price,\n                    volume, quote_volume, trades_count,\n                    taker_buy_volume, taker_buy_quote_volume,\n                    taker_sell_volume, taker_sell_quote_volume\n                ) VALUES (\n                    :symbol, :timestamp, :freq,\n                    :open_price, :high_price, :low_price, :close_price,\n                    :volume, :quote_volume, :trades_count,\n                    :taker_buy_volume, :taker_buy_quote_volume,\n                    :taker_sell_volume, :taker_sell_quote_volume\n                )\n            \"\"\",\n                records,\n            )\n            conn.commit()  # \u786e\u4fdd\u6570\u636e\u88ab\u5199\u5165\n\n            # \u6dfb\u52a0\u5199\u5165\u5b8c\u6210\u7684\u65e5\u5fd7\n            symbol = records[0][\"symbol\"] if records else \"unknown\"\n            logger.info(\n                f\"Successfully stored {len(records)} records for {symbol} \"\n                f\"with frequency {freq.value}\"\n            )\n\n    except Exception as e:\n        logger.exception(\"Failed to store market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.read_data","title":"<code>read_data(start_time: str, end_time: str, freq: Freq, symbols: List[str], features: Optional[List[str]] = None) -&gt; pd.DataFrame</code>","text":"<p>\u8bfb\u53d6\u5e02\u573a\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def read_data(\n    self,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    symbols: List[str],\n    features: Optional[List[str]] = None,\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6\u5e02\u573a\u6570\u636e.\n\n    Args:\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\uff0cNone\u8868\u793a\u8bfb\u53d6\u6240\u6709\u7279\u5f81\n\n    Returns:\n        pd.DataFrame: \u5e02\u573a\u6570\u636e\uff0c\u591a\u7ea7\u7d22\u5f15 (symbol, timestamp)\n    \"\"\"\n    try:\n        # \u8f6c\u6362\u65f6\u95f4\u683c\u5f0f\n        start_ts = int(pd.Timestamp(start_time).timestamp() * 1000)\n        end_ts = int(pd.Timestamp(end_time).timestamp() * 1000)\n\n        # \u6784\u5efa\u67e5\u8be2\n        if features is None:\n            features = [\n                \"open_price\",\n                \"high_price\",\n                \"low_price\",\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n        columns = \", \".join(features)\n        query = f\"\"\"\n            SELECT symbol, timestamp, {columns}\n            FROM market_data\n            WHERE timestamp BETWEEN ? AND ?\n            AND freq = ?\n            AND symbol IN ({','.join('?' * len(symbols))})\n            ORDER BY symbol, timestamp\n        \"\"\"\n        params = [start_ts, end_ts, freq.value] + symbols\n\n        # \u6267\u884c\u67e5\u8be2\n        with self._get_connection() as conn:\n            df = pd.read_sql_query(query, conn, params=params, parse_dates={\"timestamp\": \"ms\"})\n\n        if df.empty:\n            raise ValueError(\"No data found for the specified criteria\")\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"symbol\", \"timestamp\"])\n        return df\n\n    except Exception as e:\n        logger.exception(\"Failed to read market data\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.get_available_dates","title":"<code>get_available_dates(symbol: str, freq: Freq) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def get_available_dates(\n    self,\n    symbol: str,\n    freq: Freq,\n) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u4ea4\u6613\u5bf9\u7684\u53ef\u7528\u65e5\u671f\u5217\u8868.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        freq: \u6570\u636e\u9891\u7387\n\n    Returns:\n        List[str]: \u53ef\u7528\u65e5\u671f\u5217\u8868 (YYYY-MM-DD\u683c\u5f0f)\n    \"\"\"\n    try:\n        with self._get_connection() as conn:\n            query = \"\"\"\n                SELECT DISTINCT date(timestamp/1000, 'unixepoch') as date\n                FROM market_data\n                WHERE symbol = ? AND freq = ?\n                ORDER BY date\n            \"\"\"\n            cursor = conn.execute(query, (symbol, freq.value))\n            return [row[0] for row in cursor.fetchall()]\n\n    except Exception as e:\n        logger.exception(\"Failed to get available dates\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.export_to_files","title":"<code>export_to_files(output_path: Path | str, start_date: str, end_date: str, freq: Freq, symbols: List[str], target_freq: Optional[Freq] = None, chunk_days: int = 30) -&gt; None</code>","text":"<p>\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.</p> PARAMETER DESCRIPTION <code>output_path</code> <p>\u8f93\u51fa\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u539f\u59cb\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>target_freq</code> <p>\u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837</p> <p> TYPE: <code>Optional[Freq]</code> DEFAULT: <code>None</code> </p> <code>chunk_days</code> <p>\u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def export_to_files(\n    self,\n    output_path: Path | str,\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    symbols: List[str],\n    target_freq: Optional[Freq] = None,\n    chunk_days: int = 30,  # \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\n) -&gt; None:\n    \"\"\"\u5c06\u6570\u636e\u5e93\u6570\u636e\u5bfc\u51fa\u4e3anpy\u6587\u4ef6\u683c\u5f0f\uff0c\u652f\u6301\u964d\u91c7\u6837.\n\n    Args:\n        output_path: \u8f93\u51fa\u76ee\u5f55\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u539f\u59cb\u6570\u636e\u9891\u7387\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        target_freq: \u76ee\u6807\u9891\u7387\uff0cNone\u8868\u793a\u4e0d\u8fdb\u884c\u964d\u91c7\u6837\n        chunk_days: \u6bcf\u6b21\u5904\u7406\u7684\u5929\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u5185\u5b58\u4f7f\u7528\n    \"\"\"\n    try:\n        output_path = Path(output_path)\n\n        # \u8ba1\u7b97\u65e5\u671f\u8303\u56f4\n        date_range = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n\n        # \u6309chunk_days\u5206\u5757\u5904\u7406\n        for chunk_start in range(0, len(date_range), chunk_days):\n            chunk_end = min(chunk_start + chunk_days, len(date_range))\n            chunk_start_date = date_range[chunk_start].strftime(\"%Y-%m-%d\")\n            chunk_end_date = date_range[chunk_end - 1].strftime(\"%Y-%m-%d\")\n\n            logger.info(f\"Processing data from {chunk_start_date} to {chunk_end_date}\")\n\n            # \u8bfb\u53d6\u6570\u636e\u5757\n            df = self.read_data(chunk_start_date, chunk_end_date, freq, symbols)\n            if df.empty:\n                logger.warning(\n                    f\"No data found for period {chunk_start_date} to {chunk_end_date}\"\n                )\n                continue\n\n            # \u5982\u679c\u9700\u8981\u964d\u91c7\u6837\n            if target_freq is not None:\n                df = self._resample_data(df, target_freq)\n                freq = target_freq\n\n            # \u5b9a\u4e49\u9700\u8981\u5bfc\u51fa\u7684\u7279\u5f81\n            features = [\n                \"close_price\",\n                \"volume\",\n                \"quote_volume\",\n                \"high_price\",\n                \"low_price\",\n                \"open_price\",\n                \"trades_count\",\n                \"taker_buy_volume\",\n                \"taker_buy_quote_volume\",\n                \"taker_sell_volume\",\n                \"taker_sell_quote_volume\",\n            ]\n\n            # \u5904\u7406\u5f53\u524d\u6570\u636e\u5757\u4e2d\u7684\u6bcf\u4e00\u5929\n            chunk_dates = pd.date_range(chunk_start_date, chunk_end_date, freq=\"D\")\n            for date in chunk_dates:\n                date_str = date.strftime(\"%Y%m%d\")\n                # \u4fdd\u5b58\u4ea4\u6613\u5bf9\u987a\u5e8f\n                symbols_path = output_path / freq.value / date_str / \"universe_token.pkl\"\n                symbols_path.parent.mkdir(parents=True, exist_ok=True)\n                pd.Series(df.index.get_level_values(\"symbol\").unique()).to_pickle(symbols_path)\n\n                # \u83b7\u53d6\u5f53\u5929\u6570\u636e\n                timestamps = df.index.get_level_values(\"timestamp\")\n                # \u5c06timestamps\u8f6c\u6362\u4e3adatetime\u7c7b\u578b\n                datetime_timestamps = pd.to_datetime(timestamps)\n                # \u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u5730\u8bbf\u95eedate\u5c5e\u6027\n                dates = [ts.date() for ts in datetime_timestamps]\n\n                # \u6216\u8005\u4f7f\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\n                from datetime import datetime\n\n                # \u663e\u5f0f\u8f6c\u6362\u4e3adatetime\u5bf9\u8c61\u5217\u8868\n                datetime_list = [pd.Timestamp(ts).to_pydatetime() for ts in timestamps]\n                # \u7136\u540e\u8bbf\u95eedate\u5c5e\u6027\n                day_data = df[\n                    df.index.get_level_values(\"timestamp\").isin(\n                        [ts for ts in timestamps if pd.Timestamp(ts).date() == date.date()]\n                    )\n                ]\n                if day_data.empty:\n                    continue\n\n                # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u521b\u5efa\u5e76\u5b58\u50a8\u6570\u636e\n                for feature in features:\n                    # \u91cd\u5851\u6570\u636e\u4e3a K x T \u77e9\u9635\n                    pivot_data = day_data[feature].unstack(level=\"timestamp\")\n                    array = pivot_data.values\n\n                    # \u521b\u5efa\u5b58\u50a8\u8def\u5f84\n                    save_path = output_path / freq.value / date_str / feature\n                    save_path.mkdir(parents=True, exist_ok=True)\n\n                    # \u4fdd\u5b58\u4e3anpy\u683c\u5f0f\n                    np.save(save_path / f\"{date_str}.npy\", array)\n\n            # \u6e05\u7406\u5185\u5b58\n            del df\n\n        logger.info(f\"Successfully exported data to {output_path}\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to export data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.visualize_data","title":"<code>visualize_data(symbol: str, start_time: str, end_time: str, freq: Freq, max_rows: int = 20) -&gt; None</code>","text":"<p>\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u6570\u636e\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def visualize_data(\n    self,\n    symbol: str,\n    start_time: str,\n    end_time: str,\n    freq: Freq,\n    max_rows: int = 20,\n) -&gt; None:\n    \"\"\"\u53ef\u89c6\u5316\u663e\u793a\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        freq: \u6570\u636e\u9891\u7387\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n    \"\"\"\n    try:\n        # \u8bfb\u53d6\u6570\u636e\n        df = self.read_data(start_time, end_time, freq, [symbol])\n        if df.empty:\n            logger.warning(f\"No data found for {symbol}\")\n            return\n\n        # \u521b\u5efa\u8868\u683c\n        console = Console()\n        table = Table(\n            title=f\"Market Data for {symbol} ({start_time} to {end_time})\",\n            show_header=True,\n            header_style=\"bold magenta\",\n        )\n\n        # \u6dfb\u52a0\u5217\n        table.add_column(\"Timestamp\", style=\"cyan\")\n        for col in df.columns:\n            table.add_column(col.replace(\"_\", \" \").title(), justify=\"right\")\n\n        # \u6dfb\u52a0\u884c\n        def is_tuple_index(idx: Any) -&gt; TypeGuard[Tuple[Any, pd.Timestamp]]:\n            \"\"\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5305\u542b\u65f6\u95f4\u6233\u7684\u5143\u7ec4\"\"\"\n            return isinstance(idx, tuple) and len(idx) &gt; 1 and isinstance(idx[1], pd.Timestamp)\n\n        for idx, row in df.head(max_rows).iterrows():\n            if is_tuple_index(idx):\n                timestamp = idx[1].strftime(\"%Y-%m-%d %H:%M:%S\")\n            else:\n                timestamp = str(idx)\n            values = [f\"{x:.8f}\" if isinstance(x, float) else str(x) for x in row]\n            table.add_row(timestamp, *values)\n\n        # \u663e\u793a\u8868\u683c\n        console.print(table)\n\n        if len(df) &gt; max_rows:\n            console.print(\n                f\"[yellow]Showing {max_rows} rows out of {len(df)} total rows[/yellow]\"\n            )\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.is_date_matching","title":"<code>is_date_matching(ts: Any, target_date: datetime.date) -&gt; bool</code>","text":"<p>\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def is_date_matching(self, ts: Any, target_date: datetime.date) -&gt; bool:\n    \"\"\"\u5224\u65ad\u65f6\u95f4\u6233\u662f\u5426\u5339\u914d\u76ee\u6807\u65e5\u671f\"\"\"\n    # \u786e\u4fdd\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u800c\u4e0d\u662fAny\u7c7b\u578b\n    return bool(pd.Timestamp(ts).date() == target_date)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.process_dataframe_by_date","title":"<code>process_dataframe_by_date(df: pd.DataFrame, date: datetime.date, feature_processor: Callable[[pd.DataFrame, str], None]) -&gt; None</code>","text":"<p>\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def process_dataframe_by_date(\n    self,\n    df: pd.DataFrame,\n    date: datetime.date,\n    feature_processor: Callable[[pd.DataFrame, str], None],\n) -&gt; None:\n    \"\"\"\u6309\u65e5\u671f\u5904\u7406\u6570\u636e\u6846\u5e76\u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\"\"\"\n    timestamps = df.index.get_level_values(\"timestamp\")\n    # \u4e0d\u4f7f\u7528.values\uff0c\u76f4\u63a5\u4f7f\u7528Series\u4f5c\u4e3a\u5e03\u5c14\u7d22\u5f15\n    date_mask = pd.Series(timestamps).map(lambda ts: pd.Timestamp(ts).date() == date)\n    # \u4f7f\u7528\u5e03\u5c14Series\u8fdb\u884c\u7d22\u5f15\n    day_data = df.loc[date_mask]\n\n    if day_data.empty:\n        return\n\n    # \u5e94\u7528\u7279\u5f81\u5904\u7406\u51fd\u6570\n    for feature in df.columns:\n        feature_processor(day_data, feature)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_db/#cryptoservice.data.storage_db.MarketDB.close","title":"<code>close() -&gt; None</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5</p> Source code in <code>src/cryptoservice/data/storage_db.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    if self._use_pool and self._pool is not None:\n        self._pool.close_all()\n        self._pool = None\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/","title":"cryptoservice.data.storage_utils","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils","title":"<code>cryptoservice.data.storage_utils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u51fd\u6570.</p>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils","title":"<code>StorageUtils</code>","text":"<p>\u6570\u636e\u5b58\u50a8\u5de5\u5177\u7c7b. store_kdtv_data: \u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e store_feature_data: \u5b58\u50a8\u7279\u5f81\u6570\u636e store_universe: \u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868 visualize_npy_data: \u53ef\u89c6\u5316 npy \u6570\u636e</p>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_kdtv_data","title":"<code>store_kdtv_data(data: List[List[PerpetualMarketTicker]], date: str, freq: Freq, data_path: Path | str) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5e02\u573a\u6570\u636e\u5217\u8868</p> <p> TYPE: <code>List[List[PerpetualMarketTicker]]</code> </p> <code>date</code> <p>\u65e5\u671f (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_kdtv_data(\n    data: List[List[PerpetualMarketTicker]],\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n) -&gt; None:\n    \"\"\"\u5b58\u50a8 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        data: \u5e02\u573a\u6570\u636e\u5217\u8868\n        date: \u65e5\u671f (YYYYMMDD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n\n    try:\n        # \u5c55\u5e73\u6570\u636e\u5e76\u8f6c\u6362\u4e3a DataFrame\n        flattened_data = [item for sublist in data for item in sublist]\n        if not flattened_data:\n            return\n\n        # \u8f6c\u6362\u4e3aDataFrame\n        df = pd.DataFrame([d.__dict__ for d in flattened_data])\n        df[\"datetime\"] = pd.to_datetime(df[\"open_time\"])\n\n        # \u6784\u5efa KDTV \u683c\u5f0f\n        df[\"D\"] = df[\"datetime\"].dt.strftime(\"%Y%m%d\")\n        df[\"T\"] = df[\"datetime\"].dt.strftime(\"%H%M%S\")\n        df[\"K\"] = df[\"symbol\"]\n\n        # \u8bbe\u7f6e\u591a\u7ea7\u7d22\u5f15\n        df = df.set_index([\"K\", \"D\", \"T\"]).sort_index()\n\n        # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\n        date_data = df[df.index.get_level_values(\"D\") == date]\n\n        # \u5b9a\u4e49\u9700\u8981\u4fdd\u5b58\u7684\u7279\u5f81\n        features = [\n            \"close_price\",\n            \"quote_volume\",\n            \"high_price\",\n            \"low_price\",\n            \"open_price\",\n            \"volume\",\n            \"trades_count\",\n            \"taker_buy_volume\",\n            \"taker_buy_quote_volume\",\n        ]\n\n        # \u4e3a\u6bcf\u4e2a\u7279\u5f81\u5b58\u50a8\u6570\u636e\n        for feature in features:\n            # \u83b7\u53d6\u7279\u5f81\u6570\u636e\u5e76\u91cd\u5851\u4e3a\u77e9\u9635\n            feature_data = date_data[feature]\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n\n            # \u5b58\u50a8\u8def\u5f84: data_path/freq/feature/YYYYMMDD.npy\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n        # \u8ba1\u7b97\u5e76\u5b58\u50a8\u884d\u751f\u7279\u5f81\n        taker_sell_volume = date_data[\"volume\"] - date_data[\"taker_buy_volume\"]\n        taker_sell_quote_volume = (\n            date_data[\"quote_volume\"] - date_data[\"taker_buy_quote_volume\"]\n        )\n\n        for feature, feature_data in [\n            (\"taker_sell_volume\", taker_sell_volume),\n            (\"taker_sell_quote_volume\", taker_sell_quote_volume),\n        ]:\n            pivot_data = pd.pivot_table(\n                feature_data.reset_index(),\n                values=feature,\n                index=\"K\",\n                columns=\"T\",\n                aggfunc=\"first\",\n            )\n            array = pivot_data.values\n            save_path = data_path / freq / feature / f\"{date}.npy\"\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            np.save(save_path, array)\n\n    except Exception as e:\n        logger.exception(\"KDTV \u6570\u636e\u5b58\u50a8\u5931\u8d25\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.store_universe","title":"<code>store_universe(symbols: List[str], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef store_universe(\n    symbols: List[str],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; None:\n    \"\"\"\u5b58\u50a8\u4ea4\u6613\u5bf9\u5217\u8868.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n    \"\"\"\n    data_path = StorageUtils._resolve_path(data_path)\n    save_path = data_path / \"universe_token.pkl\"\n    save_path.parent.mkdir(parents=True, exist_ok=True)\n    pd.Series(symbols).to_pickle(save_path)\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_kdtv_data","title":"<code>read_kdtv_data(start_date: str, end_date: str, freq: Freq, features: List[str] = ['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume'], data_path: Path | str = settings.DATA_STORAGE['PERPETUAL_DATA']) -&gt; pd.DataFrame</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>start_date</code> <p>\u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>end_date</code> <p>\u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>features</code> <p>\u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['close_price', 'volume', 'quote_volume', 'high_price', 'low_price', 'open_price', 'trades_count', 'taker_buy_volume', 'taker_buy_quote_volume']</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>DATA_STORAGE['PERPETUAL_DATA']</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_kdtv_data(\n    start_date: str,\n    end_date: str,\n    freq: Freq,\n    features: List[str] = [\n        \"close_price\",\n        \"volume\",\n        \"quote_volume\",\n        \"high_price\",\n        \"low_price\",\n        \"open_price\",\n        \"trades_count\",\n        \"taker_buy_volume\",\n        \"taker_buy_quote_volume\",\n    ],\n    data_path: Path | str = settings.DATA_STORAGE[\"PERPETUAL_DATA\"],\n) -&gt; pd.DataFrame:\n    \"\"\"\u8bfb\u53d6 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        start_date: \u5f00\u59cb\u65e5\u671f (YYYY-MM-DD)\n        end_date: \u7ed3\u675f\u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        features: \u9700\u8981\u8bfb\u53d6\u7684\u7279\u5f81\u5217\u8868\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n\n    Returns:\n        pd.DataFrame: \u591a\u7ea7\u7d22\u5f15\u7684 DataFrame (K, D, T)\n    \"\"\"\n    try:\n        data_path = StorageUtils._resolve_path(data_path)\n\n        # \u751f\u6210\u65e5\u671f\u8303\u56f4\n        dates = pd.date_range(start=start_date, end=end_date, freq=\"D\")\n        dates = [d.strftime(\"%Y%m%d\") for d in dates]\n\n        # \u8bfb\u53d6\u4ea4\u6613\u5bf9\u5217\u8868\n        universe_path = data_path / freq / \"universe_token.pkl\"\n        if not universe_path.exists():\n            raise FileNotFoundError(f\"Universe file not found: {universe_path}\")\n        symbols = pd.read_pickle(universe_path)\n\n        all_data = []\n\n        # \u6309\u65e5\u671f\u8bfb\u53d6\u6570\u636e\n        for date in dates:\n            date_data = []\n\n            # \u8bfb\u53d6\u6bcf\u4e2a\u7279\u5f81\u7684\u6570\u636e\n            for feature in features:\n                file_path = data_path / freq / feature / f\"{date}.npy\"\n                if not file_path.exists():\n                    logger.warning(f\"Data file not found: {file_path}\")\n                    continue\n\n                array = np.load(file_path, allow_pickle=True)\n                if array.dtype == object:\n                    array = array.astype(np.float64)\n\n                # \u6784\u5efa\u65f6\u95f4\u7d22\u5f15\n                times = pd.date_range(\n                    start=pd.Timestamp(date), periods=array.shape[1], freq=freq\n                )\n\n                # \u521b\u5efa DataFrame\n                df = pd.DataFrame(\n                    array,\n                    index=symbols[: len(array)],\n                    columns=times,\n                )\n                df = df.stack()  # \u5c06\u65f6\u95f4\u8f6c\u4e3a\u7d22\u5f15\n                df.name = feature\n                date_data.append(df)\n\n            if date_data:\n                # \u5408\u5e76\u540c\u4e00\u5929\u7684\u6240\u6709\u7279\u5f81\n                day_df = pd.concat(date_data, axis=1)\n                day_df.index.names = [\"symbol\", \"time\"]\n                all_data.append(day_df)\n\n        if not all_data:\n            raise ValueError(\"No valid data found\")\n\n        # \u5408\u5e76\u6240\u6709\u65e5\u671f\u7684\u6570\u636e\n        result = pd.concat(all_data)\n        result.index.names = [\"symbol\", \"time\"]\n        return result\n\n    except Exception as e:\n        logger.exception(f\"Failed to read KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.read_and_visualize_kdtv","title":"<code>read_and_visualize_kdtv(date: str, freq: Freq, data_path: Path | str, max_rows: int = 24, max_symbols: int = 5) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.</p> PARAMETER DESCRIPTION <code>date</code> <p>\u65e5\u671f (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>freq</code> <p>\u9891\u7387</p> <p> TYPE: <code>Freq</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>24</code> </p> <code>max_symbols</code> <p>\u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef read_and_visualize_kdtv(\n    date: str,\n    freq: Freq,\n    data_path: Path | str,\n    max_rows: int = 24,\n    max_symbols: int = 5,\n) -&gt; None:\n    \"\"\"\u8bfb\u53d6\u5e76\u53ef\u89c6\u5316 KDTV \u683c\u5f0f\u6570\u636e.\n\n    Args:\n        date: \u65e5\u671f (YYYY-MM-DD)\n        freq: \u9891\u7387\n        data_path: \u6570\u636e\u5b58\u50a8\u6839\u76ee\u5f55\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        max_symbols: \u6700\u5927\u663e\u793a\u4ea4\u6613\u5bf9\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u786e\u4fdd\u53c2\u6570\u6b63\u786e\n        df = StorageUtils.read_kdtv_data(\n            start_date=date,\n            end_date=date,  # \u53ea\u8bfb\u53d6\u5355\u65e5\u6570\u636e\n            freq=freq,\n            data_path=data_path,\n        )\n\n        # \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u4ea4\u6613\u5bf9\n        available_symbols = df.index.get_level_values(\"symbol\").unique()\n\n        # \u9650\u5236\u663e\u793a\u7684\u4ea4\u6613\u5bf9\u6570\u91cf\n        selected_symbols = available_symbols[:max_symbols]\n\n        if not selected_symbols.empty:\n            # \u7b5b\u9009\u6570\u636e\n            df = df.loc[selected_symbols].head(max_rows)\n\n            # \u521b\u5efa\u8868\u683c\n            table = Table(\n                title=f\"KDTV Data - {date} ({freq})\",\n                show_header=True,\n                header_style=\"bold magenta\",\n            )\n\n            # \u6dfb\u52a0\u5217\n            table.add_column(\"Time\", style=\"cyan\")\n            table.add_column(\"Symbol\", style=\"green\")\n            for col in df.columns:\n                table.add_column(col, justify=\"right\")\n\n            # \u6dfb\u52a0\u6570\u636e\u884c\n            for (symbol, time), row in df.iterrows():\n                values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(str(time), symbol, *values)\n\n            StorageUtils.console.print(table)\n        else:\n            logger.warning(\"No data available to display\")\n\n    except Exception as e:\n        logger.exception(f\"Failed to visualize KDTV data: {e}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/data/storage_utils/#cryptoservice.data.storage_utils.StorageUtils.visualize_npy_data","title":"<code>visualize_npy_data(file_path: Path | str, max_rows: int = 10, headers: List[str] | None = None, index: List[str] | None = None) -&gt; None</code>  <code>staticmethod</code>","text":"<p>\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>npy \u6587\u4ef6\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_rows</code> <p>\u6700\u5927\u663e\u793a\u884c\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>headers</code> <p>\u5217\u6807\u9898</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> <code>index</code> <p>\u884c\u7d22\u5f15</p> <p> TYPE: <code>List[str] | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>\u6587\u4ef6\u4e0d\u5b58\u5728</p> <code>ValueError</code> <p>\u6570\u636e\u683c\u5f0f\u9519\u8bef</p> Source code in <code>src/cryptoservice/data/storage_utils.py</code> <pre><code>@staticmethod\ndef visualize_npy_data(\n    file_path: Path | str,\n    max_rows: int = 10,\n    headers: List[str] | None = None,\n    index: List[str] | None = None,\n) -&gt; None:\n    \"\"\"\u5728\u7ec8\u7aef\u53ef\u89c6\u5316\u663e\u793a npy \u6570\u636e.\n\n    Args:\n        file_path: npy \u6587\u4ef6\u8def\u5f84\n        max_rows: \u6700\u5927\u663e\u793a\u884c\u6570\n        headers: \u5217\u6807\u9898\n        index: \u884c\u7d22\u5f15\n\n    Raises:\n        FileNotFoundError: \u6587\u4ef6\u4e0d\u5b58\u5728\n        ValueError: \u6570\u636e\u683c\u5f0f\u9519\u8bef\n    \"\"\"\n    file_path = StorageUtils._resolve_path(file_path)\n\n    try:\n        # \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n        if not file_path.exists():\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # \u68c0\u67e5\u6587\u4ef6\u6269\u5c55\u540d\n        if file_path.suffix != \".npy\":\n            raise ValueError(f\"Invalid file format: {file_path.suffix}, expected .npy\")\n\n        # \u52a0\u8f7d\u6570\u636e\n        data = np.load(file_path, allow_pickle=True)\n\n        # \u9a8c\u8bc1\u6570\u636e\u7ef4\u5ea6\n        if not isinstance(data, np.ndarray):\n            raise ValueError(f\"Expected numpy array, got {type(data)}\")\n        if len(data.shape) != 2:\n            raise ValueError(f\"Expected 2D array, got {len(data.shape)}D\")\n\n        # \u9650\u5236\u663e\u793a\u884c\u6570\n        if len(data) &gt; max_rows:\n            data = data[:max_rows]\n            StorageUtils.console.print(\n                f\"[yellow]Showing first {max_rows} rows of {len(data)} total rows[/]\"\n            )\n\n        # \u521b\u5efa\u8868\u683c\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u5217\n        n_cols = data.shape[1]\n        if headers and len(headers) != n_cols:\n            raise ValueError(\n                f\"Headers length ({len(headers)}) doesn't match data columns ({n_cols})\"\n            )\n\n        table.add_column(\"Index\", style=\"cyan\")\n        for header in headers or [f\"Col_{i}\" for i in range(n_cols)]:\n            table.add_column(str(header), justify=\"right\")\n\n        # \u9a8c\u8bc1\u5e76\u6dfb\u52a0\u884c\n        if index and len(index) &lt; len(data):\n            StorageUtils.console.print(\n                \"[yellow]Warning: Index length is less than data length[/]\"\n            )\n\n        for i, row in enumerate(data):\n            try:\n                idx = index[i] if index and i &lt; len(index) else f\"Row_{i}\"\n                formatted_values = [\n                    f\"{x:.4f}\" if isinstance(x, (float, np.floating)) else str(x) for x in row\n                ]\n                table.add_row(idx, *formatted_values)\n            except Exception as e:\n                StorageUtils.console.print(f\"[yellow]Warning: Error formatting row {i}: {e}[/]\")\n                continue\n\n        StorageUtils.console.print(table)\n\n    except Exception as e:\n        logger.exception(\"\u6570\u636e\u53ef\u89c6\u5316\u5931\u8d25: {}\", str(e))\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/","title":"cryptoservice.exceptions","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions","title":"<code>cryptoservice.exceptions</code>","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.InvalidSymbolError","title":"<code>InvalidSymbolError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>\u65e0\u6548\u7684\u4ea4\u6613\u5bf9\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataError","title":"<code>MarketDataError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u5e02\u573a\u6570\u636e\u76f8\u5173\u9519\u8bef\u7684\u57fa\u7c7b.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataFetchError","title":"<code>MarketDataFetchError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u83b7\u53d6\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataParseError","title":"<code>MarketDataParseError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u89e3\u6790\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.MarketDataStoreError","title":"<code>MarketDataStoreError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u5b58\u50a8\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/#cryptoservice.exceptions.RateLimitError","title":"<code>RateLimitError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>API\u8bf7\u6c42\u901f\u7387\u9650\u5236\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/","title":"cryptoservice.exceptions.market_exceptions","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions","title":"<code>cryptoservice.exceptions.market_exceptions</code>","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataError","title":"<code>MarketDataError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u5e02\u573a\u6570\u636e\u76f8\u5173\u9519\u8bef\u7684\u57fa\u7c7b.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataFetchError","title":"<code>MarketDataFetchError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u83b7\u53d6\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataParseError","title":"<code>MarketDataParseError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u89e3\u6790\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.InvalidSymbolError","title":"<code>InvalidSymbolError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>\u65e0\u6548\u7684\u4ea4\u6613\u5bf9\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.MarketDataStoreError","title":"<code>MarketDataStoreError</code>","text":"<p>               Bases: <code>MarketDataError</code></p> <p>\u5b58\u50a8\u5e02\u573a\u6570\u636e\u65f6\u7684\u9519\u8bef.</p>"},{"location":"reference/cryptoservice/exceptions/market_exceptions/#cryptoservice.exceptions.market_exceptions.RateLimitError","title":"<code>RateLimitError(message: str, cause: Optional[Exception] = None)</code>","text":"<p>               Bases: <code>MarketDataFetchError</code></p> <p>API\u8bf7\u6c42\u901f\u7387\u9650\u5236\u9519\u8bef.</p> Source code in <code>src/cryptoservice/exceptions/market_exceptions.py</code> <pre><code>def __init__(self, message: str, cause: Optional[Exception] = None):\n    super().__init__(message)\n    self.cause = cause\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/","title":"cryptoservice.interfaces","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces","title":"<code>cryptoservice.interfaces</code>","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; List[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/#cryptoservice.interfaces.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>data_path</code> <p>\u6570\u636e\u5e93\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        data_path: \u6570\u636e\u5e93\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/","title":"cryptoservice.interfaces.market_interfaces","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces","title":"<code>cryptoservice.interfaces.market_interfaces</code>","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService","title":"<code>IMarketDataService</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u63a5\u53e3</p>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u51b5.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u51b5.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        interval: \u6570\u636e\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u51b5\u6570\u636e\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>  <code>abstractmethod</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker</li> </ul> <code>SymbolTicker | List[SymbolTicker]</code> <ul> <li>\u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868</li> </ul> RAISES DESCRIPTION <code>InvalidSymbolError</code> <p>\u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\uff0c\u5982\u679c\u4e3a None \u5219\u8fd4\u56de\u6240\u6709\u4ea4\u6613\u5bf9\u6570\u636e\n\n    Returns:\n        - \u5f53 symbol \u6307\u5b9a\u65f6\uff1a\u8fd4\u56de\u5355\u4e2a SymbolTicker\n        - \u5f53 symbol \u4e3a None \u65f6\uff1a\u8fd4\u56de SymbolTicker \u5217\u8868\n\n    Raises:\n        InvalidSymbolError: \u5f53\u6307\u5b9a\u7684\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u65f6\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.d1) -&gt; List[KlineMarketTicker]</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868</p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.d1,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4\n        interval: \u6570\u636e\u95f4\u9694\uff0c\u5982 1m, 5m, 1h, 1d\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\u5217\u8868\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/interfaces/market_interfaces/#cryptoservice.interfaces.market_interfaces.IMarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.h1, max_workers: int = 5, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>data_path</code> <p>\u6570\u636e\u5e93\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>max_workers</code> <p>\u5e76\u53d1\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u6761</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/interfaces/market_interfaces.py</code> <pre><code>@abstractmethod\ndef get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.h1,\n    max_workers: int = 5,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u5386\u53f2\u6570\u636e, \u5e76\u5b58\u50a8\u5230\u6307\u5b9a\u6570\u636e\u5e93.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYYMMDD)\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYYMMDD)\n        interval: \u6570\u636e\u9891\u7387 (1m, 1h, 4h, 1d\u7b49)\n        data_path: \u6570\u636e\u5e93\u8def\u5f84\n        max_workers: \u5e76\u53d1\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u6761\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/cryptoservice/models/","title":"cryptoservice.models","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models","title":"<code>cryptoservice.models</code>","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq","title":"<code>Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType","title":"<code>HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.SortBy","title":"<code>SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.Univ","title":"<code>Univ</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u6570\u636e\u96c6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.DailyMarketTicker","title":"<code>DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.KlineIndex","title":"<code>KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.KlineMarketTicker","title":"<code>KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker","title":"<code>PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/#cryptoservice.models.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"reference/cryptoservice/models/#cryptoservice.models.SymbolTicker","title":"<code>SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/enums/","title":"cryptoservice.models.enums","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums","title":"<code>cryptoservice.models.enums</code>","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.SortBy","title":"<code>SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6392\u5e8f\u65b9\u5f0f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.InstType","title":"<code>InstType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u4ea7\u54c1\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Market","title":"<code>Market</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u5e02\u573a\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Vendor","title":"<code>Vendor</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u4f9b\u5e94\u5546\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.IndustrySrc","title":"<code>IndustrySrc</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u884c\u4e1a\u6765\u6e90\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderStatus","title":"<code>OrderStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u72b6\u6001\u679a\u4e3e\uff0c\u4e0e Binance SDK \u4fdd\u6301\u4e00\u81f4</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderType","title":"<code>OrderType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderSide","title":"<code>OrderSide</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u65b9\u5411\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.TimeInForce","title":"<code>TimeInForce</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u6709\u6548\u671f\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.OrderResponseType","title":"<code>OrderResponseType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u8ba2\u5355\u54cd\u5e94\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq","title":"<code>Freq</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u9891\u7387\u679a\u4e3e s1: 1\u79d2 m1: 1\u5206\u949f m3: 3\u5206\u949f m5: 5\u5206\u949f m15: 15\u5206\u949f m30: 30\u5206\u949f h1: 1\u5c0f\u65f6 h2: 2\u5c0f\u65f6 h4: 4\u5c0f\u65f6 h6: 6\u5c0f\u65f6 h8: 8\u5c0f\u65f6 h12: 12\u5c0f\u65f6 d1: 1\u5929 d3: 3\u5929 w1: 1\u5468 M1: 1\u4e2a\u6708</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Freq.from_binance","title":"<code>from_binance(binance_interval: str) -&gt; Freq</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef from_binance(cls, binance_interval: str) -&gt; \"Freq\":\n    \"\"\"\u4ece Binance \u95f4\u9694\u8f6c\u6362\u4e3a Freq \u679a\u4e3e\"\"\"\n    for freq in cls:\n        if freq.value == binance_interval:\n            return freq\n    raise ValueError(f\"Invalid Binance interval: {binance_interval}\")\n</code></pre>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Univ","title":"<code>Univ</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u6570\u636e\u96c6\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.Status","title":"<code>Status</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u72b6\u6001\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.ReturnType","title":"<code>ReturnType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>\u56de\u62a5\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType","title":"<code>HistoricalKlinesType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>K\u7ebf\u5386\u53f2\u6570\u636e\u7c7b\u578b\u679a\u4e3e</p>"},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/enums/#cryptoservice.models.enums.HistoricalKlinesType.to_binance","title":"<code>to_binance(kline_type: HistoricalKlinesType) -&gt; binance_enums.HistoricalKlinesType</code>  <code>classmethod</code>","text":"<p>\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType</p> Source code in <code>src/cryptoservice/models/enums.py</code> <pre><code>@classmethod\ndef to_binance(cls, kline_type: \"HistoricalKlinesType\") -&gt; binance_enums.HistoricalKlinesType:\n    \"\"\"\u8f6c\u6362\u4e3a Binance SDK \u7684 HistoricalKlinesType\"\"\"\n    return binance_enums.HistoricalKlinesType(kline_type.value)\n</code></pre>"},{"location":"reference/cryptoservice/models/market_ticker/","title":"cryptoservice.models.market_ticker","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker","title":"<code>cryptoservice.models.market_ticker</code>","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.BaseMarketTicker","title":"<code>BaseMarketTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>\u5e02\u573a\u884c\u60c5\u57fa\u7840\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.SymbolTicker","title":"<code>SymbolTicker(symbol: str, last_price: Decimal)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>\u5355\u4e2a\u4ea4\u6613\u5e01\u7684\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.DailyMarketTicker","title":"<code>DailyMarketTicker(symbol: str, last_price: Decimal, price_change: Decimal, price_change_percent: Decimal, volume: Decimal, quote_volume: Decimal, weighted_avg_price: Decimal, prev_close_price: Decimal, bid_price: Decimal, ask_price: Decimal, bid_qty: Decimal, ask_qty: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, open_time: int, close_time: int, first_id: int, last_id: int, count: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>24\u5c0f\u65f6\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change</code> <p>\u4ef7\u683c\u53d8\u52a8</p> <p> TYPE: <code>Decimal</code> </p> <code>price_change_percent</code> <p>\u4ef7\u683c\u53d8\u52a8\u767e\u5206\u6bd4</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>quote_volume</code> <p>\u6210\u4ea4\u989d</p> <p> TYPE: <code>Decimal</code> </p> <code>weighted_avg_price</code> <p>\u52a0\u6743\u5e73\u5747\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>prev_close_price</code> <p>\u524d\u6536\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_price</code> <p>\u4e70\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_price</code> <p>\u5356\u4e00\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>bid_qty</code> <p>\u4e70\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>ask_qty</code> <p>\u5356\u4e00\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>open_time</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p> <code>first_id</code> <p>\u7b2c\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>last_id</code> <p>\u6700\u540e\u4e00\u4e2aID</p> <p> TYPE: <code>int</code> </p> <code>count</code> <p>\u8ba1\u6570</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.KlineMarketTicker","title":"<code>KlineMarketTicker(symbol: str, last_price: Decimal, open_price: Decimal, high_price: Decimal, low_price: Decimal, volume: Decimal, close_time: int)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseMarketTicker</code></p> <p>K\u7ebf\u884c\u60c5\u6570\u636e\u7c7b.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>str</code> </p> <code>last_price</code> <p>\u6700\u65b0\u4ef7\u683c</p> <p> TYPE: <code>Decimal</code> </p> <code>open_price</code> <p>\u5f00\u76d8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>high_price</code> <p>\u6700\u9ad8\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>low_price</code> <p>\u6700\u4f4e\u4ef7</p> <p> TYPE: <code>Decimal</code> </p> <code>volume</code> <p>\u6210\u4ea4\u91cf</p> <p> TYPE: <code>Decimal</code> </p> <code>close_time</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> TYPE: <code>int</code> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.KlineIndex","title":"<code>KlineIndex</code>","text":"<p>K\u7ebf\u6570\u636e\u7d22\u5f15\u5b9a\u4e49</p> ATTRIBUTE DESCRIPTION <code>OPEN_TIME</code> <p>\u5f00\u76d8\u65f6\u95f4</p> <p> </p> <code>OPEN</code> <p>\u5f00\u76d8\u4ef7</p> <p> </p> <code>HIGH</code> <p>\u6700\u9ad8\u4ef7</p> <p> </p> <code>LOW</code> <p>\u6700\u4f4e\u4ef7</p> <p> </p> <code>CLOSE</code> <p>\u6536\u76d8\u4ef7</p> <p> </p> <code>VOLUME</code> <p>\u6210\u4ea4\u91cf</p> <p> </p> <code>CLOSE_TIME</code> <p>\u6536\u76d8\u65f6\u95f4</p> <p> </p> <code>QUOTE_VOLUME</code> <p>\u6210\u4ea4\u989d</p> <p> </p> <code>TRADES_COUNT</code> <p>\u6210\u4ea4\u7b14\u6570</p> <p> </p> <code>TAKER_BUY_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u91cf</p> <p> </p> <code>TAKER_BUY_QUOTE_VOLUME</code> <p>\u4e70\u65b9\u6210\u4ea4\u989d</p> <p> </p> <code>IGNORE</code> <p>\u5ffd\u7565</p> <p> </p>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker","title":"<code>PerpetualMarketTicker(symbol: str, open_time: int, raw_data: List[Any])</code>","text":"<p>\u6c38\u7eed\u5408\u7ea6\u5e02\u573a\u6570\u636e\u6a21\u578b.</p> <p>\u8f7b\u91cf\u7ea7\u5b9e\u73b0\uff0c\u4f7f\u7528 slots \u6765\u4f18\u5316\u5185\u5b58\u4f7f\u7528.</p> ATTRIBUTE DESCRIPTION <code>symbol</code> <p>str  # \u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> </p> <code>open_time</code> <p>int  # K\u7ebf\u5f00\u59cb\u65f6\u95f4\u6233\uff08\u6beb\u79d2\uff09</p> <p> </p> <code>raw_data</code> <p>List[Any]  # \u539f\u59cbK\u7ebf\u6570\u636e</p> <p> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>def __init__(self, symbol: str, open_time: int, raw_data: List[Any]):\n    self.symbol = symbol\n    self.open_time = open_time\n    self.raw_data = raw_data\n</code></pre>"},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/models/market_ticker/#cryptoservice.models.market_ticker.PerpetualMarketTicker.from_binance_futures","title":"<code>from_binance_futures(symbol: str, kline: List[Any]) -&gt; PerpetualMarketTicker</code>  <code>classmethod</code>","text":"<p>\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>kline</code> <p>Binance K\u7ebf\u6570\u636e\u5217\u8868 [ Open time, Open, High, Low, Close, Volume, Close time, Quote asset volume, Number of trades, Taker buy base asset volume, Taker buy quote asset volume, Ignore</p> <p> TYPE: <code>List[Any]</code> </p> Source code in <code>src/cryptoservice/models/market_ticker.py</code> <pre><code>@classmethod\ndef from_binance_futures(cls, symbol: str, kline: List[Any]) -&gt; \"PerpetualMarketTicker\":\n    \"\"\"\u4ece Binance \u6c38\u7eed\u5408\u7ea6K\u7ebf\u6570\u636e\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        kline: Binance K\u7ebf\u6570\u636e\u5217\u8868 [\n            Open time,\n            Open,\n            High,\n            Low,\n            Close,\n            Volume,\n            Close time,\n            Quote asset volume,\n            Number of trades,\n            Taker buy base asset volume,\n            Taker buy quote asset volume,\n            Ignore\n        ]\n    \"\"\"\n    return cls(symbol=symbol, open_time=kline[KlineIndex.OPEN_TIME], raw_data=kline)\n</code></pre>"},{"location":"reference/cryptoservice/services/","title":"cryptoservice.services","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services","title":"<code>cryptoservice.services</code>","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: Optional[MarketDB] = None\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>| List[symbol]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <p>SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol | List[symbol]: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n        ]\n\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time = int(\n            datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n        end_time = int(\n            datetime.strptime(f\"{date} 23:59:59\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol, interval=\"1d\", startTime=start_time, endTime=end_time, limit=1\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; List[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[DailyMarketTicker]</code> <p>List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; List[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: Dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers = [ticker.to_dict() for ticker in self.get_symbol_ticker()]\n        summary[\"data\"] = tickers\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; List[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        if isinstance(start_time, str):\n            start_time = datetime.strptime(start_time, \"%Y%m%d\")\n        if isinstance(end_time, str):\n            end_time = datetime.strptime(end_time, \"%Y%m%d\")\n        end_time = end_time or datetime.now()\n\n        klines = self.client.get_historical_klines(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_time.strftime(\"%Y-%m-%d\"),\n            end_str=end_time.strftime(\"%Y-%m-%d\"),\n            limit=1000,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        return [KlineMarketTicker.from_binance_kline(k) for k in klines]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/#cryptoservice.services.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.m1, max_workers: int = 1, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        data_path: \u6570\u636e\u5b58\u50a8\u8def\u5f84\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n    \"\"\"\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        data_path = Path(data_path)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n        db_path = data_path / \"market.db\"\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        if self.db is None:\n            self.db = MarketDB(db_path, use_pool=True, max_connections=max_workers)\n\n        # \u8fdb\u5ea6\u663e\u793a\u5668\u8bbe\u7f6e\n        should_close_progress = False\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n                TimeElapsedColumn(),\n            )\n            should_close_progress = True\n\n        def process_symbol(symbol: str) -&gt; None:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6\"\"\"\n            retry_count = 0\n            while retry_count &lt; max_retries:\n                try:\n                    data = self._fetch_symbol_data(\n                        symbol=symbol,\n                        start_ts=start_time,\n                        end_ts=end_time,\n                        interval=interval,\n                        klines_type=HistoricalKlinesType.FUTURES,\n                    )\n\n                    if data:\n                        # \u786e\u4fdd db_pool \u4e0d\u4e3a None\n                        assert self.db is not None, \"Database pool is not initialized\"\n                        self.db.store_data(data, interval)  # \u76f4\u63a5\u4f20\u9012 data\uff0c\u4e0d\u9700\u8981\u5305\u88c5\u6210\u5217\u8868\n                        return\n                    else:\n                        logger.warning(f\"No data available for {symbol}\")\n                        return\n\n                except InvalidSymbolError as e:\n                    # \u5bf9\u4e8e\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u4fe1\u606f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\n                    logger.warning(f\"\u8df3\u8fc7\u4ea4\u6613\u5bf9 {symbol}: {e}\")\n                    return\n                except RateLimitError:\n                    wait_time = min(2**retry_count + 1, 30)\n                    time.sleep(wait_time)\n                    retry_count += 1\n                except Exception as e:\n                    if retry_count &lt; max_retries - 1:\n                        retry_count += 1\n                        logger.warning(f\"\u91cd\u8bd5 {retry_count}/{max_retries} - {symbol}: {str(e)}\")\n                        time.sleep(1)\n                    else:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25 - {symbol}: {str(e)}\")\n                        break\n\n        with progress if should_close_progress else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u5904\u7406\u6240\u6709\u4ea4\u6613\u5bf9\", total=len(symbols))\n\n            # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                # \u8ddf\u8e2a\u5b8c\u6210\u8fdb\u5ea6\n                for future in as_completed(futures):\n                    try:\n                        future.result()\n                        progress.update(overall_task, advance=1)\n                    except Exception as e:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25: {e}\")\n\n    except Exception as e:\n        logger.error(f\"Failed to fetch perpetual data: {e}\")\n        raise MarketDataFetchError(f\"Failed to fetch perpetual data: {e}\")\n    finally:\n        if self.db:\n            self.db.close()\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/","title":"cryptoservice.services.market_service","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service","title":"<code>cryptoservice.services.market_service</code>","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService","title":"<code>MarketDataService(api_key: str, api_secret: str)</code>","text":"<p>               Bases: <code>IMarketDataService</code></p> <p>\u5e02\u573a\u6570\u636e\u670d\u52a1\u5b9e\u73b0\u7c7b</p> <p>\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1</p> PARAMETER DESCRIPTION <code>api_key</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> <code>api_secret</code> <p>\u7528\u6237API\u5bc6\u94a5</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def __init__(self, api_key: str, api_secret: str) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5e02\u573a\u6570\u636e\u670d\u52a1\n\n    Args:\n        api_key: \u7528\u6237API\u5bc6\u94a5\n        api_secret: \u7528\u6237API\u5bc6\u94a5\n    \"\"\"\n    self.client = BinanceClientFactory.create_client(api_key, api_secret)\n    self.converter = DataConverter()\n    self.db: Optional[MarketDB] = None\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_symbol_ticker","title":"<code>get_symbol_ticker(symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]</code>","text":"<pre><code>get_symbol_ticker(symbol: str) -&gt; SymbolTicker\n</code></pre><pre><code>get_symbol_ticker() -&gt; List[SymbolTicker]\n</code></pre> <p>\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>| List[symbol]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>SymbolTicker | List[SymbolTicker]</code> <p>SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_symbol_ticker(self, symbol: str | None = None) -&gt; SymbolTicker | List[SymbolTicker]:\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol | List[symbol]: \u4ea4\u6613\u5bf9\u540d\u79f0\n\n    Returns:\n        SymbolTicker | List[SymbolTicker]: \u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\u6216\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        ticker = self.client.get_symbol_ticker(symbol=symbol)\n        if not ticker:\n            raise InvalidSymbolError(f\"Invalid symbol: {symbol}\")\n\n        if isinstance(ticker, list):\n            return [SymbolTicker.from_binance_ticker(t) for t in ticker]\n        return SymbolTicker.from_binance_ticker(ticker)\n\n    except Exception as e:\n        logger.error(f\"[red]Error fetching ticker for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to fetch ticker: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_symbols","title":"<code>get_perpetual_symbols(only_trading: bool = True) -&gt; List[str]</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>only_trading</code> <p>\u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_symbols(self, only_trading: bool = True) -&gt; List[str]:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5e02\u573a\u4e0a\u6240\u6709\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\n\n    Args:\n        only_trading: \u662f\u5426\u53ea\u8fd4\u56de\u5f53\u524d\u53ef\u4ea4\u6613\u7684\u4ea4\u6613\u5bf9\n\n    Returns:\n        List[str]: \u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\n    \"\"\"\n    try:\n        logger.info(f\"\u83b7\u53d6\u5f53\u524d\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5217\u8868\")\n        futures_info = self.client.futures_exchange_info()\n        perpetual_symbols = [\n            symbol[\"symbol\"]\n            for symbol in futures_info[\"symbols\"]\n            if symbol[\"contractType\"] == \"PERPETUAL\"\n            and (not only_trading or symbol[\"status\"] == \"TRADING\")\n        ]\n\n        return perpetual_symbols\n\n    except Exception as e:\n        logger.error(f\"[red]\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}[/red]\")\n        raise MarketDataFetchError(f\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u4ea4\u6613\u5bf9\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.check_symbol_exists_on_date","title":"<code>check_symbol_exists_on_date(symbol: str, date: str) -&gt; bool</code>","text":"<p>\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>date</code> <p>\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def check_symbol_exists_on_date(self, symbol: str, date: str) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u6307\u5b9a\u65e5\u671f\u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        date: \u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\n\n    Returns:\n        bool: \u662f\u5426\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        # \u5c06\u65e5\u671f\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u8303\u56f4\n        start_time = int(\n            datetime.strptime(f\"{date} 00:00:00\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n        end_time = int(\n            datetime.strptime(f\"{date} 23:59:59\", \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\n        )\n\n        # \u5c1d\u8bd5\u83b7\u53d6\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7684K\u7ebf\u6570\u636e\n        klines = self.client.futures_klines(\n            symbol=symbol, interval=\"1d\", startTime=start_time, endTime=end_time, limit=1\n        )\n\n        # \u5982\u679c\u6709\u6570\u636e\uff0c\u8bf4\u660e\u8be5\u65e5\u671f\u5b58\u5728\u8be5\u4ea4\u6613\u5bf9\n        return bool(klines and len(klines) &gt; 0)\n\n    except Exception as e:\n        logger.debug(f\"\u68c0\u67e5\u4ea4\u6613\u5bf9 {symbol} \u5728 {date} \u662f\u5426\u5b58\u5728\u65f6\u51fa\u9519: {e}\")\n        return False\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_top_coins","title":"<code>get_top_coins(limit: int = settings.DEFAULT_LIMIT, sort_by: SortBy = SortBy.QUOTE_VOLUME, quote_asset: str | None = None) -&gt; List[DailyMarketTicker]</code>","text":"<p>\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9</p> PARAMETER DESCRIPTION <code>limit</code> <p>\u6570\u91cf</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_LIMIT</code> </p> <code>sort_by</code> <p>\u6392\u5e8f\u65b9\u5f0f</p> <p> TYPE: <code>SortBy</code> DEFAULT: <code>QUOTE_VOLUME</code> </p> <code>quote_asset</code> <p>\u57fa\u51c6\u8d44\u4ea7</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[DailyMarketTicker]</code> <p>List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_top_coins(\n    self,\n    limit: int = settings.DEFAULT_LIMIT,\n    sort_by: SortBy = SortBy.QUOTE_VOLUME,\n    quote_asset: str | None = None,\n) -&gt; List[DailyMarketTicker]:\n    \"\"\"\u83b7\u53d6\u524dN\u4e2a\u4ea4\u6613\u5bf9\n\n    Args:\n        limit: \u6570\u91cf\n        sort_by: \u6392\u5e8f\u65b9\u5f0f\n        quote_asset: \u57fa\u51c6\u8d44\u4ea7\n\n    Returns:\n        List[DailyMarketTicker]: \u524dN\u4e2a\u4ea4\u6613\u5bf9\n    \"\"\"\n    try:\n        tickers = self.client.get_ticker()\n        market_tickers = [DailyMarketTicker.from_binance_ticker(t) for t in tickers]\n\n        if quote_asset:\n            market_tickers = [t for t in market_tickers if t.symbol.endswith(quote_asset)]\n\n        return sorted(\n            market_tickers,\n            key=lambda x: getattr(x, sort_by.value),\n            reverse=True,\n        )[:limit]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting top coins: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get top coins: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_market_summary","title":"<code>get_market_summary(interval: Freq = Freq.d1) -&gt; Dict[str, Any]</code>","text":"<p>\u83b7\u53d6\u5e02\u573a\u6982\u89c8</p> PARAMETER DESCRIPTION <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>d1</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u5e02\u573a\u6982\u89c8</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_market_summary(self, interval: Freq = Freq.d1) -&gt; Dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u5e02\u573a\u6982\u89c8\n\n    Args:\n        interval: \u65f6\u95f4\u95f4\u9694\n\n    Returns:\n        Dict[str, Any]: \u5e02\u573a\u6982\u89c8\n    \"\"\"\n    try:\n        summary: Dict[str, Any] = {\"snapshot_time\": datetime.now(), \"data\": {}}\n        tickers = [ticker.to_dict() for ticker in self.get_symbol_ticker()]\n        summary[\"data\"] = tickers\n        return summary\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting market summary: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get market summary: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_historical_klines","title":"<code>get_historical_klines(symbol: str, start_time: str | datetime, end_time: str | datetime | None = None, interval: Freq = Freq.h1, klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT) -&gt; List[KlineMarketTicker]</code>","text":"<p>\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e</p> PARAMETER DESCRIPTION <code>symbol</code> <p>\u4ea4\u6613\u5bf9\u540d\u79f0</p> <p> TYPE: <code>str</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4</p> <p> TYPE: <code>str | datetime</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4</p> <p> TYPE: <code>str | datetime | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>h1</code> </p> <code>klines_type</code> <p>\u884c\u60c5\u7c7b\u578b</p> <p> TYPE: <code>HistoricalKlinesType</code> DEFAULT: <code>SPOT</code> </p> RETURNS DESCRIPTION <code>List[KlineMarketTicker]</code> <p>List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e</p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_historical_klines(\n    self,\n    symbol: str,\n    start_time: str | datetime,\n    end_time: str | datetime | None = None,\n    interval: Freq = Freq.h1,\n    klines_type: HistoricalKlinesType = HistoricalKlinesType.SPOT,\n) -&gt; List[KlineMarketTicker]:\n    \"\"\"\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\n\n    Args:\n        symbol: \u4ea4\u6613\u5bf9\u540d\u79f0\n        start_time: \u5f00\u59cb\u65f6\u95f4\n        end_time: \u7ed3\u675f\u65f6\u95f4\n        interval: \u65f6\u95f4\u95f4\u9694\n        klines_type: \u884c\u60c5\u7c7b\u578b\n\n    Returns:\n        List[KlineMarketTicker]: \u5386\u53f2\u884c\u60c5\u6570\u636e\n    \"\"\"\n    try:\n        if isinstance(start_time, str):\n            start_time = datetime.strptime(start_time, \"%Y%m%d\")\n        if isinstance(end_time, str):\n            end_time = datetime.strptime(end_time, \"%Y%m%d\")\n        end_time = end_time or datetime.now()\n\n        klines = self.client.get_historical_klines(\n            symbol=symbol,\n            interval=interval,\n            start_str=start_time.strftime(\"%Y-%m-%d\"),\n            end_str=end_time.strftime(\"%Y-%m-%d\"),\n            limit=1000,\n            klines_type=HistoricalKlinesType.to_binance(klines_type),\n        )\n\n        return [KlineMarketTicker.from_binance_kline(k) for k in klines]\n\n    except Exception as e:\n        logger.error(f\"[red]Error getting historical data for {symbol}: {e}[/red]\")\n        raise MarketDataFetchError(f\"Failed to get historical data: {e}\")\n</code></pre>"},{"location":"reference/cryptoservice/services/market_service/#cryptoservice.services.market_service.MarketDataService.get_perpetual_data","title":"<code>get_perpetual_data(symbols: List[str], start_time: str, data_path: Path | str, end_time: str | None = None, interval: Freq = Freq.m1, max_workers: int = 1, max_retries: int = 3, progress: Progress | None = None) -&gt; None</code>","text":"<p>\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.</p> PARAMETER DESCRIPTION <code>symbols</code> <p>\u4ea4\u6613\u5bf9\u5217\u8868</p> <p> TYPE: <code>List[str]</code> </p> <code>start_time</code> <p>\u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str</code> </p> <code>data_path</code> <p>\u6570\u636e\u5b58\u50a8\u8def\u5f84</p> <p> TYPE: <code>Path | str</code> </p> <code>end_time</code> <p>\u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>interval</code> <p>\u65f6\u95f4\u95f4\u9694</p> <p> TYPE: <code>Freq</code> DEFAULT: <code>m1</code> </p> <code>max_workers</code> <p>\u6700\u5927\u7ebf\u7a0b\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>max_retries</code> <p>\u6700\u5927\u91cd\u8bd5\u6b21\u6570</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>progress</code> <p>\u8fdb\u5ea6\u663e\u793a\u5668</p> <p> TYPE: <code>Progress | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/services/market_service.py</code> <pre><code>def get_perpetual_data(\n    self,\n    symbols: List[str],\n    start_time: str,\n    data_path: Path | str,\n    end_time: str | None = None,\n    interval: Freq = Freq.m1,\n    max_workers: int = 1,\n    max_retries: int = 3,\n    progress: Progress | None = None,\n) -&gt; None:\n    \"\"\"\u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u5b58\u50a8.\n\n    Args:\n        symbols: \u4ea4\u6613\u5bf9\u5217\u8868\n        start_time: \u5f00\u59cb\u65f6\u95f4 (YYYY-MM-DD)\n        data_path: \u6570\u636e\u5b58\u50a8\u8def\u5f84\n        end_time: \u7ed3\u675f\u65f6\u95f4 (YYYY-MM-DD)\n        interval: \u65f6\u95f4\u95f4\u9694\n        max_workers: \u6700\u5927\u7ebf\u7a0b\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        progress: \u8fdb\u5ea6\u663e\u793a\u5668\n    \"\"\"\n    try:\n        if not symbols:\n            raise ValueError(\"Symbols list cannot be empty\")\n\n        data_path = Path(data_path)\n        end_time = end_time or datetime.now().strftime(\"%Y-%m-%d\")\n        db_path = data_path / \"market.db\"\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60\n        if self.db is None:\n            self.db = MarketDB(db_path, use_pool=True, max_connections=max_workers)\n\n        # \u8fdb\u5ea6\u663e\u793a\u5668\u8bbe\u7f6e\n        should_close_progress = False\n        if progress is None:\n            progress = Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                BarColumn(),\n                TextColumn(\"[progress.percentage]{task.percentage:&gt;3.0f}%\"),\n                TimeElapsedColumn(),\n            )\n            should_close_progress = True\n\n        def process_symbol(symbol: str) -&gt; None:\n            \"\"\"\u5904\u7406\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u6570\u636e\u83b7\u53d6\"\"\"\n            retry_count = 0\n            while retry_count &lt; max_retries:\n                try:\n                    data = self._fetch_symbol_data(\n                        symbol=symbol,\n                        start_ts=start_time,\n                        end_ts=end_time,\n                        interval=interval,\n                        klines_type=HistoricalKlinesType.FUTURES,\n                    )\n\n                    if data:\n                        # \u786e\u4fdd db_pool \u4e0d\u4e3a None\n                        assert self.db is not None, \"Database pool is not initialized\"\n                        self.db.store_data(data, interval)  # \u76f4\u63a5\u4f20\u9012 data\uff0c\u4e0d\u9700\u8981\u5305\u88c5\u6210\u5217\u8868\n                        return\n                    else:\n                        logger.warning(f\"No data available for {symbol}\")\n                        return\n\n                except InvalidSymbolError as e:\n                    # \u5bf9\u4e8e\u4ea4\u6613\u5bf9\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u4fe1\u606f\u540e\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\n                    logger.warning(f\"\u8df3\u8fc7\u4ea4\u6613\u5bf9 {symbol}: {e}\")\n                    return\n                except RateLimitError:\n                    wait_time = min(2**retry_count + 1, 30)\n                    time.sleep(wait_time)\n                    retry_count += 1\n                except Exception as e:\n                    if retry_count &lt; max_retries - 1:\n                        retry_count += 1\n                        logger.warning(f\"\u91cd\u8bd5 {retry_count}/{max_retries} - {symbol}: {str(e)}\")\n                        time.sleep(1)\n                    else:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25 - {symbol}: {str(e)}\")\n                        break\n\n        with progress if should_close_progress else nullcontext():\n            overall_task = progress.add_task(\"[cyan]\u5904\u7406\u6240\u6709\u4ea4\u6613\u5bf9\", total=len(symbols))\n\n            # \u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\n            with ThreadPoolExecutor(max_workers=max_workers) as executor:\n                futures = [executor.submit(process_symbol, symbol) for symbol in symbols]\n\n                # \u8ddf\u8e2a\u5b8c\u6210\u8fdb\u5ea6\n                for future in as_completed(futures):\n                    try:\n                        future.result()\n                        progress.update(overall_task, advance=1)\n                    except Exception as e:\n                        logger.error(f\"\u5904\u7406\u5931\u8d25: {e}\")\n\n    except Exception as e:\n        logger.error(f\"Failed to fetch perpetual data: {e}\")\n        raise MarketDataFetchError(f\"Failed to fetch perpetual data: {e}\")\n    finally:\n        if self.db:\n            self.db.close()\n</code></pre>"},{"location":"reference/cryptoservice/utils/","title":"cryptoservice.utils","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils","title":"<code>cryptoservice.utils</code>","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager","title":"<code>CacheManager(ttl_seconds: int = 60)</code>","text":"<p>\u7f13\u5b58\u7ba1\u7406\u5668.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def __init__(self, ttl_seconds: int = 60):\n    self._cache: Dict[str, Tuple[Any, datetime]] = {}\n    self._ttl = ttl_seconds\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.get","title":"<code>get(key: str) -&gt; Optional[Any]</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def get(self, key: str) -&gt; Optional[Any]:\n    \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        if key in self._cache:\n            data, timestamp = self._cache[key]\n            if datetime.now() - timestamp &lt; timedelta(seconds=self._ttl):\n                return data\n            del self._cache[key]\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.set","title":"<code>set(key: str, value: Any) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def set(self, key: str, value: Any) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        self._cache[key] = (value, datetime.now())\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.CacheManager.clear","title":"<code>clear() -&gt; None</code>","text":"<p>\u6e05\u9664\u6240\u6709\u7f13\u5b58.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u9664\u6240\u6709\u7f13\u5b58.\"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter","title":"<code>DataConverter</code>","text":"<p>\u6570\u636e\u8f6c\u6362\u5de5\u5177\u7c7b.</p>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.to_decimal","title":"<code>to_decimal(value: Union[str, float, int]) -&gt; Decimal</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef to_decimal(value: Union[str, float, int]) -&gt; Decimal:\n    \"\"\"\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.\"\"\"\n    return Decimal(str(value))\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.format_timestamp","title":"<code>format_timestamp(timestamp: Union[int, float]) -&gt; datetime</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_timestamp(timestamp: Union[int, float]) -&gt; datetime:\n    \"\"\"\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.\"\"\"\n    if isinstance(timestamp, (int, float)):\n        return datetime.fromtimestamp(timestamp / 1000)\n    return datetime.now()\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.DataConverter.format_market_data","title":"<code>format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.\"\"\"\n    return {\n        \"price\": float(data.get(\"price\", 0)),\n        \"volume\": float(data.get(\"volume\", 0)),\n        \"change\": float(data.get(\"priceChangePercent\", 0)),\n        \"high\": float(data.get(\"highPrice\", 0)),\n        \"low\": float(data.get(\"lowPrice\", 0)),\n        \"timestamp\": datetime.now().isoformat(),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/utils/#cryptoservice.utils-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/#cryptoservice.utils.print_table","title":"<code>print_table(data: List[Any], title: Optional[str] = None, headers: Optional[List[str]] = None) -&gt; None</code>","text":"<p>\u6253\u5370\u8868\u683c\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u8868\u683c\u6570\u636e</p> <p> TYPE: <code>List[Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>\u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6</p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_table(\n    data: List[Any],\n    title: Optional[str] = None,\n    headers: Optional[List[str]] = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u8868\u683c\u6570\u636e.\n\n    Args:\n        data: \u8868\u683c\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n        headers: \u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210\n\n    Raises:\n        ValueError: \u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6\n    \"\"\"\n    try:\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u7a7a\n        if not data:\n            raise ValueError(\"Empty data provided\")\n\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u5217\u8868\n        if not isinstance(data, list):\n            raise ValueError(f\"Expected list, got {type(data).__name__}\")\n\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u5982\u679c\u6570\u636e\u662f\u5b57\u5178\u5217\u8868\n        if isinstance(data[0], dict):\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u662f\u5426\u90fd\u662f\u5b57\u5178\n            if not all(isinstance(row, dict) for row in data):\n                raise ValueError(\"Inconsistent row types in dictionary data\")\n\n            headers = headers or list(data[0].keys())\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                # \u68c0\u67e5\u662f\u5426\u6240\u6709\u5fc5\u9700\u7684\u952e\u90fd\u5b58\u5728\n                missing_keys = set(headers) - set(row.keys())\n                if missing_keys:\n                    print_error(f\"Missing keys in row: {missing_keys}\")\n                table.add_row(*[str(row.get(h, \"N/A\")) for h in headers])\n\n        # \u5982\u679c\u6570\u636e\u662f\u666e\u901a\u5217\u8868\n        else:\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u7684\u957f\u5ea6\u662f\u5426\u4e00\u81f4\n            row_lengths = {len(row) if isinstance(row, (list, tuple)) else 1 for row in data}\n            if len(row_lengths) &gt; 1:\n                raise ValueError(f\"Inconsistent row lengths: {row_lengths}\")\n\n            row_length = row_lengths.pop()\n            headers = headers or [f\"Column {i+1}\" for i in range(row_length)]\n\n            # \u9a8c\u8bc1headers\u957f\u5ea6\u662f\u5426\u5339\u914d\u6570\u636e\n            if len(headers) != row_length:\n                raise ValueError(\n                    f\"Headers length ({len(headers)}) doesn't match data width ({row_length})\"\n                )\n\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                if not isinstance(row, (list, tuple)):\n                    row = [row]  # \u5355\u4e2a\u503c\u8f6c\u6362\u4e3a\u5217\u8868\n                table.add_row(*[str(x) for x in row])\n\n        if title:\n            console.print(f\"\\n[bold]{title}[/bold]\")\n        console.print(table)\n\n    except Exception as e:\n        print_error(f\"Failed to print table: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/","title":"cryptoservice.utils.cache_manager","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager","title":"<code>cryptoservice.utils.cache_manager</code>","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager","title":"<code>CacheManager(ttl_seconds: int = 60)</code>","text":"<p>\u7f13\u5b58\u7ba1\u7406\u5668.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def __init__(self, ttl_seconds: int = 60):\n    self._cache: Dict[str, Tuple[Any, datetime]] = {}\n    self._ttl = ttl_seconds\n    self._lock = threading.Lock()\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.get","title":"<code>get(key: str) -&gt; Optional[Any]</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def get(self, key: str) -&gt; Optional[Any]:\n    \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        if key in self._cache:\n            data, timestamp = self._cache[key]\n            if datetime.now() - timestamp &lt; timedelta(seconds=self._ttl):\n                return data\n            del self._cache[key]\n    return None\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.set","title":"<code>set(key: str, value: Any) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def set(self, key: str, value: Any) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e.\"\"\"\n    with self._lock:\n        self._cache[key] = (value, datetime.now())\n</code></pre>"},{"location":"reference/cryptoservice/utils/cache_manager/#cryptoservice.utils.cache_manager.CacheManager.clear","title":"<code>clear() -&gt; None</code>","text":"<p>\u6e05\u9664\u6240\u6709\u7f13\u5b58.</p> Source code in <code>src/cryptoservice/utils/cache_manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u9664\u6240\u6709\u7f13\u5b58.\"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/","title":"cryptoservice.utils.data_converter","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter","title":"<code>cryptoservice.utils.data_converter</code>","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter","title":"<code>DataConverter</code>","text":"<p>\u6570\u636e\u8f6c\u6362\u5de5\u5177\u7c7b.</p>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.to_decimal","title":"<code>to_decimal(value: Union[str, float, int]) -&gt; Decimal</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef to_decimal(value: Union[str, float, int]) -&gt; Decimal:\n    \"\"\"\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b.\"\"\"\n    return Decimal(str(value))\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.format_timestamp","title":"<code>format_timestamp(timestamp: Union[int, float]) -&gt; datetime</code>  <code>staticmethod</code>","text":"<p>\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_timestamp(timestamp: Union[int, float]) -&gt; datetime:\n    \"\"\"\u8f6c\u6362\u65f6\u95f4\u6233\u4e3adatetime\u5bf9\u8c61.\"\"\"\n    if isinstance(timestamp, (int, float)):\n        return datetime.fromtimestamp(timestamp / 1000)\n    return datetime.now()\n</code></pre>"},{"location":"reference/cryptoservice/utils/data_converter/#cryptoservice.utils.data_converter.DataConverter.format_market_data","title":"<code>format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.</p> Source code in <code>src/cryptoservice/utils/data_converter.py</code> <pre><code>@staticmethod\ndef format_market_data(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\u683c\u5f0f\u5316\u5e02\u573a\u6570\u636e.\"\"\"\n    return {\n        \"price\": float(data.get(\"price\", 0)),\n        \"volume\": float(data.get(\"volume\", 0)),\n        \"change\": float(data.get(\"priceChangePercent\", 0)),\n        \"high\": float(data.get(\"highPrice\", 0)),\n        \"low\": float(data.get(\"lowPrice\", 0)),\n        \"timestamp\": datetime.now().isoformat(),\n    }\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/","title":"cryptoservice.utils.logger","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger","title":"<code>cryptoservice.utils.logger</code>","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_info","title":"<code>print_info(message: str, title: Optional[str] = None, style: str = 'green') -&gt; None</code>","text":"<p>\u6253\u5370\u4fe1\u606f\u9762\u677f.</p> PARAMETER DESCRIPTION <code>message</code> <p>\u8981\u663e\u793a\u7684\u6d88\u606f</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>\u9762\u677f\u6807\u9898</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>style</code> <p>\u6837\u5f0f\u989c\u8272</p> <p> TYPE: <code>str</code> DEFAULT: <code>'green'</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_info(\n    message: str,\n    title: Optional[str] = None,\n    style: str = \"green\",\n) -&gt; None:\n    \"\"\"\u6253\u5370\u4fe1\u606f\u9762\u677f.\n\n    Args:\n        message: \u8981\u663e\u793a\u7684\u6d88\u606f\n        title: \u9762\u677f\u6807\u9898\n        style: \u6837\u5f0f\u989c\u8272\n    \"\"\"\n    panel = Panel(Text(message, style=style), title=title, border_style=style)\n    console.print(panel)\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_dict","title":"<code>print_dict(data: Dict[str, Any], title: Optional[str] = None) -&gt; None</code>","text":"<p>\u6253\u5370\u5b57\u5178\u6570\u636e\u4e3a\u8868\u683c.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u5b57\u5178\u6570\u636e</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_dict(\n    data: Dict[str, Any],\n    title: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u5b57\u5178\u6570\u636e\u4e3a\u8868\u683c.\n\n    Args:\n        data: \u5b57\u5178\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n    \"\"\"\n    table = Table(show_header=True, header_style=\"bold magenta\")\n    table.add_column(\"Key\", style=\"cyan\")\n    table.add_column(\"Value\", style=\"green\")\n\n    for key, value in data.items():\n        table.add_row(str(key), str(value))\n\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n    console.print(table)\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_table","title":"<code>print_table(data: List[Any], title: Optional[str] = None, headers: Optional[List[str]] = None) -&gt; None</code>","text":"<p>\u6253\u5370\u8868\u683c\u6570\u636e.</p> PARAMETER DESCRIPTION <code>data</code> <p>\u8868\u683c\u6570\u636e</p> <p> TYPE: <code>List[Any]</code> </p> <code>title</code> <p>\u8868\u683c\u6807\u9898</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>\u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>\u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6</p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_table(\n    data: List[Any],\n    title: Optional[str] = None,\n    headers: Optional[List[str]] = None,\n) -&gt; None:\n    \"\"\"\u6253\u5370\u8868\u683c\u6570\u636e.\n\n    Args:\n        data: \u8868\u683c\u6570\u636e\n        title: \u8868\u683c\u6807\u9898\n        headers: \u5217\u6807\u9898\u5217\u8868\uff0c\u5982\u679c\u4e3aNone\u5219\u81ea\u52a8\u751f\u6210\n\n    Raises:\n        ValueError: \u5f53\u6570\u636e\u4e3a\u7a7a\u6216\u683c\u5f0f\u4e0d\u6b63\u786e\u65f6\n    \"\"\"\n    try:\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u7a7a\n        if not data:\n            raise ValueError(\"Empty data provided\")\n\n        # \u68c0\u67e5\u6570\u636e\u662f\u5426\u4e3a\u5217\u8868\n        if not isinstance(data, list):\n            raise ValueError(f\"Expected list, got {type(data).__name__}\")\n\n        table = Table(show_header=True, header_style=\"bold magenta\")\n\n        # \u5982\u679c\u6570\u636e\u662f\u5b57\u5178\u5217\u8868\n        if isinstance(data[0], dict):\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u662f\u5426\u90fd\u662f\u5b57\u5178\n            if not all(isinstance(row, dict) for row in data):\n                raise ValueError(\"Inconsistent row types in dictionary data\")\n\n            headers = headers or list(data[0].keys())\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                # \u68c0\u67e5\u662f\u5426\u6240\u6709\u5fc5\u9700\u7684\u952e\u90fd\u5b58\u5728\n                missing_keys = set(headers) - set(row.keys())\n                if missing_keys:\n                    print_error(f\"Missing keys in row: {missing_keys}\")\n                table.add_row(*[str(row.get(h, \"N/A\")) for h in headers])\n\n        # \u5982\u679c\u6570\u636e\u662f\u666e\u901a\u5217\u8868\n        else:\n            # \u9a8c\u8bc1\u6240\u6709\u884c\u7684\u957f\u5ea6\u662f\u5426\u4e00\u81f4\n            row_lengths = {len(row) if isinstance(row, (list, tuple)) else 1 for row in data}\n            if len(row_lengths) &gt; 1:\n                raise ValueError(f\"Inconsistent row lengths: {row_lengths}\")\n\n            row_length = row_lengths.pop()\n            headers = headers or [f\"Column {i+1}\" for i in range(row_length)]\n\n            # \u9a8c\u8bc1headers\u957f\u5ea6\u662f\u5426\u5339\u914d\u6570\u636e\n            if len(headers) != row_length:\n                raise ValueError(\n                    f\"Headers length ({len(headers)}) doesn't match data width ({row_length})\"\n                )\n\n            for header in headers:\n                table.add_column(header, style=\"cyan\")\n            for row in data:\n                if not isinstance(row, (list, tuple)):\n                    row = [row]  # \u5355\u4e2a\u503c\u8f6c\u6362\u4e3a\u5217\u8868\n                table.add_row(*[str(x) for x in row])\n\n        if title:\n            console.print(f\"\\n[bold]{title}[/bold]\")\n        console.print(table)\n\n    except Exception as e:\n        print_error(f\"Failed to print table: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/cryptoservice/utils/logger/#cryptoservice.utils.logger.print_error","title":"<code>print_error(error: str) -&gt; None</code>","text":"<p>\u6253\u5370\u9519\u8bef\u4fe1\u606f.</p> PARAMETER DESCRIPTION <code>error</code> <p>\u9519\u8bef\u6d88\u606f</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/cryptoservice/utils/logger.py</code> <pre><code>def print_error(error: str) -&gt; None:\n    \"\"\"\u6253\u5370\u9519\u8bef\u4fe1\u606f.\n\n    Args:\n        error: \u9519\u8bef\u6d88\u606f\n    \"\"\"\n    console.print(f\"[bold red]Error:[/bold red] {error}\")\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/","title":"cryptoservice.utils.tools","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools","title":"<code>cryptoservice.utils.tools</code>","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools-classes","title":"Classes","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool","title":"<code>Tool</code>","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool.gen_sample_time","title":"<code>gen_sample_time(freq: Freq) -&gt; List[str]</code>  <code>staticmethod</code>","text":"<p>for CN: start time 9:15 end time 15:00 for CRYPTO: start time 9:15 end time 15:00</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>@staticmethod\ndef gen_sample_time(freq: Freq) -&gt; List[str]:\n    \"\"\"\n    for CN: start time 9:15 end time 15:00\n    for CRYPTO: start time 9:15 end time 15:00\n    \"\"\"\n    mapping = {\n        Freq.s1: 1,\n        Freq.m1: 60,\n        Freq.m3: 180,\n        Freq.m5: 300,\n        Freq.m15: 900,\n        Freq.m30: 1800,\n        Freq.h1: 3600,\n        Freq.h4: 14400,\n    }\n    step = mapping[freq]\n\n    sample_time = [\n        (datetime(1, 1, 1) + timedelta(seconds=s)).strftime(\"%H:%M:%S.%f\")\n        for s in list(range(step, 2400 * 36 + step, step))\n    ][:-1] + [\"24:00:00.000000\"]\n    return sample_time\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.Tool.get_sample_time","title":"<code>get_sample_time(freq: Freq = Freq.M1) -&gt; List[str]</code>  <code>staticmethod</code>","text":"<p>Get sample time</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>@staticmethod\ndef get_sample_time(freq: Freq = Freq.M1) -&gt; List[str]:\n    \"\"\"Get sample time\"\"\"\n    match freq:\n        case Freq.s1:\n            return Tool.gen_sample_time(Freq.s1)\n        case Freq.m1:\n            return Tool.gen_sample_time(Freq.m1)\n        case Freq.m3:\n            return Tool.gen_sample_time(Freq.m3)\n        case Freq.m5:\n            return Tool.gen_sample_time(Freq.m5)\n        case Freq.m15:\n            return Tool.gen_sample_time(Freq.m15)\n        case Freq.m30:\n            return Tool.gen_sample_time(Freq.m30)\n        case Freq.h1:\n            return Tool.gen_sample_time(Freq.h1)\n        case Freq.h4:\n            return Tool.gen_sample_time(Freq.h4)\n        case Freq.d1:\n            return [\"24:00:00.000000\"]\n    return []\n</code></pre>"},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools-functions","title":"Functions","text":""},{"location":"reference/cryptoservice/utils/tools/#cryptoservice.utils.tools.setup_logging","title":"<code>setup_logging(level: int = logging.INFO) -&gt; None</code>","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u914d\u7f6e.</p> Source code in <code>src/cryptoservice/utils/tools.py</code> <pre><code>def setup_logging(level: int = logging.INFO) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u65e5\u5fd7\u914d\u7f6e.\"\"\"\n    logging.basicConfig(\n        level=level, format=\"%(message)s\", handlers=[RichHandler(rich_tracebacks=True)]\n    )\n    return None\n</code></pre>"},{"location":"reference/examples/market_data_example/","title":"examples.market_data_example","text":""},{"location":"reference/examples/market_data_example/#examples.market_data_example","title":"<code>examples.market_data_example</code>","text":""},{"location":"reference/examples/market_data_example/#examples.market_data_example-classes","title":"Classes","text":""},{"location":"reference/examples/market_data_example/#examples.market_data_example-functions","title":"Functions","text":""},{"location":"reference/examples/market_data_example/#examples.market_data_example.demonstrate_market_data_features","title":"<code>demonstrate_market_data_features(market_service: MarketDataService) -&gt; None</code>","text":"<p>\u6f14\u793a\u5404\u79cd\u5e02\u573a\u6570\u636e\u529f\u80fd</p> Source code in <code>src/examples/market_data_example.py</code> <pre><code>def demonstrate_market_data_features(market_service: MarketDataService) -&gt; None:\n    \"\"\"\u6f14\u793a\u5404\u79cd\u5e02\u573a\u6570\u636e\u529f\u80fd\"\"\"\n\n    # 1. \u83b7\u53d6\u5355\u4e2a\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\n    btc_ticker = market_service.get_symbol_ticker(\"BTCUSDT\")\n    logger.info(f\"BTCUSDT \u5b9e\u65f6\u884c\u60c5: {btc_ticker}\")\n\n    # 2. \u83b7\u53d6\u6240\u6709\u4ea4\u6613\u5bf9\u7684\u5b9e\u65f6\u884c\u60c5\n    all_tickers = market_service.get_symbol_ticker()\n    logger.info(f\"\u83b7\u53d6\u5230 {len(all_tickers)} \u4e2a\u4ea4\u6613\u5bf9\u7684\u884c\u60c5\")\n\n    # 3. \u83b7\u53d6\u6210\u4ea4\u91cf\u6392\u540d\u524d10\u7684USDT\u4ea4\u6613\u5bf9\n    top_coins = market_service.get_top_coins(\n        limit=10, sort_by=SortBy.QUOTE_VOLUME, quote_asset=\"USDT\"\n    )\n    logger.info(\"\u6210\u4ea4\u91cfTOP10\u7684USDT\u4ea4\u6613\u5bf9:\")\n    for coin in top_coins:\n        logger.info(f\"{coin.symbol}: \u6210\u4ea4\u91cf {coin.quote_volume}\")\n\n    # 4. \u83b7\u53d6\u5e02\u573a\u6982\u89c8\n    market_summary = market_service.get_market_summary(interval=Freq.h1)\n    logger.info(f\"\u5e02\u573a\u6982\u89c8\u65f6\u95f4: {market_summary['snapshot_time']}\")\n\n    # 5. \u83b7\u53d6\u5386\u53f2K\u7ebf\u6570\u636e\n    historical_data = market_service.get_historical_klines(\n        symbol=\"ETHUSDT\",\n        start_time=\"20240101\",\n        end_time=\"20240103\",\n        interval=Freq.h4,\n        klines_type=HistoricalKlinesType.SPOT,\n    )\n    logger.info(f\"\u83b7\u53d6\u5230 {len(historical_data)} \u6761 ETHUSDT \u5386\u53f2\u6570\u636e\")\n\n    # 6. \u83b7\u53d6\u6c38\u7eed\u5408\u7ea6\u6570\u636e\u5e76\u4fdd\u5b58\n    symbols = [\n        \"BTCUSDT\",\n        \"ETHUSDT\",\n        \"BNBUSDT\",\n        \"SOLUSDT\",\n        \"ADAUSDT\",\n    ]\n    start_time = \"2024-01-01\"\n    end_time = \"2024-01-03\"\n    interval = Freq.h1\n    data_path = \"./data\"\n\n    market_service.get_perpetual_data(\n        symbols=symbols,\n        start_time=start_time,\n        end_time=end_time,\n        interval=interval,\n        data_path=data_path,\n    )\n\n    # 7. \u4eceSQLite\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\n    logger.info(\"\\n=== \u4eceSQLite\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e ===\")\n    db = MarketDB(f\"{data_path}/market.db\")\n\n    # \u8bfb\u53d6\u5e76\u663e\u793a\u6570\u636e\n    for symbol in symbols:\n        logger.info(f\"\\n\u67e5\u770b {symbol} \u7684\u6570\u636e:\")\n        db.visualize_data(\n            symbol=symbol,\n            start_time=start_time,\n            end_time=end_time,\n            freq=interval,\n            max_rows=5,  # \u53ea\u663e\u793a\u524d5\u884c\n        )\n\n    # 8. \u4eceKDTV\u683c\u5f0f\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\n    logger.info(\"\\n=== \u4eceKDTV\u683c\u5f0f\u6587\u4ef6\u8bfb\u53d6\u6570\u636e ===\")\n    kdtv_data = StorageUtils.read_kdtv_data(\n        start_date=start_time,\n        data_path=os.path.join(data_path, \"market\"),\n        end_date=end_time,\n        freq=interval,\n    )\n    logger.info(f\"KDTV\u6570\u636e\u5f62\u72b6: {kdtv_data.shape}\")\n    logger.info(\"\\nKDTV\u6570\u636e\u793a\u4f8b:\")\n    logger.info(kdtv_data.head())\n\n    # 9. \u53ef\u89c6\u5316KDTV\u6570\u636e\n    logger.info(\"\\n=== \u53ef\u89c6\u5316KDTV\u6570\u636e ===\")\n    StorageUtils.read_and_visualize_kdtv(\n        date=\"2024-01-02\",\n        freq=interval,\n        data_path=os.path.join(data_path, \"market\"),\n        max_rows=5,\n        max_symbols=3,\n    )\n</code></pre>"},{"location":"reference/examples/test_binance_api/","title":"examples.test_binance_api","text":""},{"location":"reference/examples/test_binance_api/#examples.test_binance_api","title":"<code>examples.test_binance_api</code>","text":""}]}